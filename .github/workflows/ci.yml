name: CI

on:
  pull_request:
    branches: [ main, master ]
  push:
    branches: [ main, master ]

permissions:
  contents: read

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        

  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        
    - name: Get dependencies
      run: go mod download
      
    # - name: Run tests
    #   run: go test -v ./...
      
    # - name: Run race condition tests
    #   run: go test -race -short ./...

  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        
    - name: Get dependencies
      run: go mod download
      
    - name: Build
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        go build -v -o terraform-provider-seqera_${{ matrix.goos }}_${{ matrix.goarch }}
        
    # - name: Upload build artifacts
    #   uses: actions/upload-artifact@v3
    #   with:
    #     name: terraform-provider-seqera-${{ matrix.goos }}-${{ matrix.goarch }}
    #     path: terraform-provider-seqera_${{ matrix.goos }}_${{ matrix.goarch }}*

  # terraform-validate:
  #   runs-on: ubuntu-latest
  #   needs: build
  #   steps:
  #   - uses: actions/checkout@v4
    
  #   - name: Setup Terraform
  #     uses: hashicorp/setup-terraform@v3
  #     with:
  #       terraform_version: latest
        
  #   - name: Set up Go
  #     uses: actions/setup-go@v4
  #     with:
  #       go-version: '1.21'
        
  #   - name: Build provider
  #     run: go build -o terraform-provider-seqera
      
  #   - name: Terraform Init and Validate Examples
  #     run: |
  #       for dir in examples/*/; do
  #         if [ -f "$dir/terraform.tf" ] || [ -f "$dir/main.tf" ]; then
  #           echo "Validating $dir"
  #           cd "$dir"
            
  #           # Create .terraformrc for local provider
  #           cat > ~/.terraformrc << EOF
  #       provider_installation {
  #         dev_overrides {
  #           "speakeasy/seqera" = "${{ github.workspace }}"
  #         }
  #         direct {}
  #       }
  #       EOF
            
  #           terraform init
  #           terraform validate
  #           cd "${{ github.workspace }}"
  #         fi
  #       done

  # docs-check:
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v4
    
  #   - name: Set up Go
  #     uses: actions/setup-go@v4
  #     with:
  #       go-version: '1.21'
        
  #   - name: Check for generated docs
  #     run: |
  #       if [ -d "docs" ]; then
  #         echo "Documentation exists"
  #         # Check if docs are up to date by trying to generate them
  #         go install github.com/hashicorp/terraform-plugin-docs/cmd/tfplugindocs@latest
  #         tfplugindocs generate --provider-name seqera
          
  #         # Check if any files changed
  #         if ! git diff --exit-code docs/; then
  #           echo "Documentation is out of date. Please run 'tfplugindocs generate' and commit the changes."
  #           exit 1
  #         fi
  #       else
  #         echo "No documentation directory found"
  #       fi