# name: Speakeasy Generation Check

# on:
#   pull_request:
#     branches: [ master ]
#     paths:
#       - 'schemas/**'
#       - '.speakeasy/**'
#       - 'gen.yaml'
#       - 'workflow.yaml'

# permissions:
#   contents: read

# jobs:
#   check-generation:
#     runs-on: ubuntu-latest
#     steps:
#     - uses: actions/checkout@v4
    
#     - name: Set up Go
#       uses: actions/setup-go@v4
#       with:
#         go-version: '1.21'
    
#     - name: golangci-lint
#       uses: golangci/golangci-lint-action@v3
#       with:
#         version: latest
#         args: --timeout=5m

        
#     - name: Install Speakeasy CLI
#       run: |
#         curl -fsSL https://raw.githubusercontent.com/speakeasy-api/speakeasy/main/install.sh | sh
#         sudo mv speakeasy /usr/local/bin/
        
#     - name: Verify Speakeasy installation
#       run: speakeasy --version
      
#     - name: Check OpenAPI schema validity
#       run: |
#         if [ -f "schemas/seqera-final.yaml" ]; then
#           speakeasy lint openapi -s schemas/seqera-final.yaml
#         else
#           echo "No seqera-final.yaml found, skipping lint"
#         fi
        
        
#     #     # Run speakeasy generation
#     #     speakeasy run --skip-versioning
        
#     #     # Check if generation was successful
#     #     if [ $? -eq 0 ]; then
#     #       echo "✅ Speakeasy generation completed successfully"
          
#     #       # Check for any significant changes in generated code structure
#     #       if [ -d "internal_backup" ]; then
#     #         echo "Checking for structural changes..."
#     #         # Compare directory structures
#     #         diff -r internal_backup/provider internal/provider --brief || echo "Provider structure changes detected"
#     #       fi
#     #     else
#     #       echo "❌ Speakeasy generation failed"
#     #       exit 1
#     #     fi
        
#     - name: Build after generation
#       run: |
#         go mod tidy
#         go build -v ./...
        
#     - name: Run terraform tests
#       run: go test ./... -timeout=5m
      
#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v3
#       with:
#         terraform_version: 1.5.0
        
#     - name: Build provider for local development
#       run: |
#         GOOS=linux GOARCH=amd64 go build -o terraform-provider-seqera
#         PROVIDER_DIR="$HOME/.terraform.d/plugins/registry.terraform.io/speakeasy/seqera/0.0.1/linux_amd64"
#         mkdir -p "$PROVIDER_DIR"
#         cp terraform-provider-seqera "$PROVIDER_DIR/"
#         chmod +x "$PROVIDER_DIR/terraform-provider-seqera"
        
#     - name: Configure provider for local development
#       run: |
#         cat > ~/.terraformrc << 'EOF'
#         provider_installation {
#           dev_overrides {
#             "registry.terraform.io/speakeasy/seqera" = "$HOME/.terraform.d/plugins/registry.terraform.io/speakeasy/seqera/0.0.1/linux_amd64"
#           }
#           direct {}
#         }
#         EOF
        
#     - name: Create terraform.tfvars for testing
#       run: |
#         cd examples/hello-world-examples
#         cat > terraform.tfvars << 'EOF'
#         seqera_server_url = "${{ vars.SEQERA_SERVER_URL || 'https://api.cloud.seqera.io' }}"
#         seqera_bearer_auth = "${{ secrets.SEQERA_BEARER_AUTH }}"
#         access_key = "${{ secrets.AWS_ACCESS_KEY }}"
#         secret_key = "${{ secrets.AWS_SECRET_KEY }}"
#         azure_batch_key = "${{ secrets.AZURE_BATCH_KEY }}"
#         azure_storage_key = "${{ secrets.AZURE_STORAGE_KEY }}"
#         EOF
        
#     - name: Create GCP service account key
#       run: |
#         cd examples/hello-world-examples
#         echo '${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}' > service-account-key.json
        
#     - name: Terraform Init
#       run: |
#         cd examples/hello-world-examples
#         terraform init
        
#     - name: Terraform Plan
#       run: |
#         cd examples/hello-world-examples
#         terraform plan -detailed-exitcode
#       continue-on-error: true
#       id: plan
        