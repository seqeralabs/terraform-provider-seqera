// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"github.com/seqeralabs/terraform-provider-seqera/internal/sdk/internal/utils"
	"time"
)

type WorkflowLoad struct {
	Pending          int64      `json:"pending"`
	Submitted        int64      `json:"submitted"`
	Running          int64      `json:"running"`
	Succeeded        int64      `json:"succeeded"`
	Failed           int64      `json:"failed"`
	Cached           int64      `json:"cached"`
	Aborted          int64      `json:"aborted"`
	MemoryEfficiency *float32   `json:"memoryEfficiency,omitempty"`
	CPUEfficiency    *float32   `json:"cpuEfficiency,omitempty"`
	DateCreated      *time.Time `json:"dateCreated,omitempty"`
	LastUpdated      *time.Time `json:"lastUpdated,omitempty"`
	Executors        []string   `json:"executors,omitempty"`
	Cpus             int64      `json:"cpus"`
	CPUTime          int64      `json:"cpuTime"`
	CPULoad          int64      `json:"cpuLoad"`
	MemoryRss        int64      `json:"memoryRss"`
	MemoryReq        int64      `json:"memoryReq"`
	ReadBytes        int64      `json:"readBytes"`
	WriteBytes       int64      `json:"writeBytes"`
	VolCtxSwitch     int64      `json:"volCtxSwitch"`
	InvCtxSwitch     int64      `json:"invCtxSwitch"`
	LoadTasks        int64      `json:"loadTasks"`
	LoadCpus         int64      `json:"loadCpus"`
	LoadMemory       int64      `json:"loadMemory"`
	PeakCpus         int64      `json:"peakCpus"`
	PeakTasks        int64      `json:"peakTasks"`
	PeakMemory       int64      `json:"peakMemory"`
	Cost             *float64   `json:"cost,omitempty"`
}

func (w WorkflowLoad) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(w, "", false)
}

func (w *WorkflowLoad) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &w, "", false, []string{"pending", "submitted", "running", "succeeded", "failed", "cached", "aborted", "cpus", "cpuTime", "cpuLoad", "memoryRss", "memoryReq", "readBytes", "writeBytes", "volCtxSwitch", "invCtxSwitch", "loadTasks", "loadCpus", "loadMemory", "peakCpus", "peakTasks", "peakMemory"}); err != nil {
		return err
	}
	return nil
}

func (w *WorkflowLoad) GetPending() int64 {
	if w == nil {
		return 0
	}
	return w.Pending
}

func (w *WorkflowLoad) GetSubmitted() int64 {
	if w == nil {
		return 0
	}
	return w.Submitted
}

func (w *WorkflowLoad) GetRunning() int64 {
	if w == nil {
		return 0
	}
	return w.Running
}

func (w *WorkflowLoad) GetSucceeded() int64 {
	if w == nil {
		return 0
	}
	return w.Succeeded
}

func (w *WorkflowLoad) GetFailed() int64 {
	if w == nil {
		return 0
	}
	return w.Failed
}

func (w *WorkflowLoad) GetCached() int64 {
	if w == nil {
		return 0
	}
	return w.Cached
}

func (w *WorkflowLoad) GetAborted() int64 {
	if w == nil {
		return 0
	}
	return w.Aborted
}

func (w *WorkflowLoad) GetMemoryEfficiency() *float32 {
	if w == nil {
		return nil
	}
	return w.MemoryEfficiency
}

func (w *WorkflowLoad) GetCPUEfficiency() *float32 {
	if w == nil {
		return nil
	}
	return w.CPUEfficiency
}

func (w *WorkflowLoad) GetDateCreated() *time.Time {
	if w == nil {
		return nil
	}
	return w.DateCreated
}

func (w *WorkflowLoad) GetLastUpdated() *time.Time {
	if w == nil {
		return nil
	}
	return w.LastUpdated
}

func (w *WorkflowLoad) GetExecutors() []string {
	if w == nil {
		return nil
	}
	return w.Executors
}

func (w *WorkflowLoad) GetCpus() int64 {
	if w == nil {
		return 0
	}
	return w.Cpus
}

func (w *WorkflowLoad) GetCPUTime() int64 {
	if w == nil {
		return 0
	}
	return w.CPUTime
}

func (w *WorkflowLoad) GetCPULoad() int64 {
	if w == nil {
		return 0
	}
	return w.CPULoad
}

func (w *WorkflowLoad) GetMemoryRss() int64 {
	if w == nil {
		return 0
	}
	return w.MemoryRss
}

func (w *WorkflowLoad) GetMemoryReq() int64 {
	if w == nil {
		return 0
	}
	return w.MemoryReq
}

func (w *WorkflowLoad) GetReadBytes() int64 {
	if w == nil {
		return 0
	}
	return w.ReadBytes
}

func (w *WorkflowLoad) GetWriteBytes() int64 {
	if w == nil {
		return 0
	}
	return w.WriteBytes
}

func (w *WorkflowLoad) GetVolCtxSwitch() int64 {
	if w == nil {
		return 0
	}
	return w.VolCtxSwitch
}

func (w *WorkflowLoad) GetInvCtxSwitch() int64 {
	if w == nil {
		return 0
	}
	return w.InvCtxSwitch
}

func (w *WorkflowLoad) GetLoadTasks() int64 {
	if w == nil {
		return 0
	}
	return w.LoadTasks
}

func (w *WorkflowLoad) GetLoadCpus() int64 {
	if w == nil {
		return 0
	}
	return w.LoadCpus
}

func (w *WorkflowLoad) GetLoadMemory() int64 {
	if w == nil {
		return 0
	}
	return w.LoadMemory
}

func (w *WorkflowLoad) GetPeakCpus() int64 {
	if w == nil {
		return 0
	}
	return w.PeakCpus
}

func (w *WorkflowLoad) GetPeakTasks() int64 {
	if w == nil {
		return 0
	}
	return w.PeakTasks
}

func (w *WorkflowLoad) GetPeakMemory() int64 {
	if w == nil {
		return 0
	}
	return w.PeakMemory
}

func (w *WorkflowLoad) GetCost() *float64 {
	if w == nil {
		return nil
	}
	return w.Cost
}
