// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/seqeralabs/terraform-provider-seqera/internal/sdk/internal/utils"
	"time"
)

type LaunchPlatform string

const (
	LaunchPlatformAwsBatch              LaunchPlatform = "aws-batch"
	LaunchPlatformAwsCloud              LaunchPlatform = "aws-cloud"
	LaunchPlatformGoogleLifesciences    LaunchPlatform = "google-lifesciences"
	LaunchPlatformGoogleBatch           LaunchPlatform = "google-batch"
	LaunchPlatformAzureBatch            LaunchPlatform = "azure-batch"
	LaunchPlatformK8sPlatform           LaunchPlatform = "k8s-platform"
	LaunchPlatformEksPlatform           LaunchPlatform = "eks-platform"
	LaunchPlatformGkePlatform           LaunchPlatform = "gke-platform"
	LaunchPlatformUgePlatform           LaunchPlatform = "uge-platform"
	LaunchPlatformSlurmPlatform         LaunchPlatform = "slurm-platform"
	LaunchPlatformLsfPlatform           LaunchPlatform = "lsf-platform"
	LaunchPlatformAltairPlatform        LaunchPlatform = "altair-platform"
	LaunchPlatformMoabPlatform          LaunchPlatform = "moab-platform"
	LaunchPlatformLocalPlatform         LaunchPlatform = "local-platform"
	LaunchPlatformSeqeracomputePlatform LaunchPlatform = "seqeracompute-platform"
)

func (e LaunchPlatform) ToPointer() *LaunchPlatform {
	return &e
}
func (e *LaunchPlatform) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "aws-batch":
		fallthrough
	case "aws-cloud":
		fallthrough
	case "google-lifesciences":
		fallthrough
	case "google-batch":
		fallthrough
	case "azure-batch":
		fallthrough
	case "k8s-platform":
		fallthrough
	case "eks-platform":
		fallthrough
	case "gke-platform":
		fallthrough
	case "uge-platform":
		fallthrough
	case "slurm-platform":
		fallthrough
	case "lsf-platform":
		fallthrough
	case "altair-platform":
		fallthrough
	case "moab-platform":
		fallthrough
	case "local-platform":
		fallthrough
	case "seqeracompute-platform":
		*e = LaunchPlatform(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LaunchPlatform: %v", v)
	}
}

type LaunchStatus string

const (
	LaunchStatusCreating  LaunchStatus = "CREATING"
	LaunchStatusAvailable LaunchStatus = "AVAILABLE"
	LaunchStatusErrored   LaunchStatus = "ERRORED"
	LaunchStatusInvalid   LaunchStatus = "INVALID"
)

func (e LaunchStatus) ToPointer() *LaunchStatus {
	return &e
}
func (e *LaunchStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CREATING":
		fallthrough
	case "AVAILABLE":
		fallthrough
	case "ERRORED":
		fallthrough
	case "INVALID":
		*e = LaunchStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LaunchStatus: %v", v)
	}
}

type ComputeEnv struct {
	CredentialsID string         `json:"credentialsId"`
	OrgID         *int64         `json:"orgId,omitempty"`
	WorkspaceID   *int64         `json:"workspaceId,omitempty"`
	ComputeEnvID  *string        `json:"id,omitempty"`
	Name          string         `json:"name"`
	Description   *string        `json:"description,omitempty"`
	Platform      LaunchPlatform `json:"platform"`
	// Configuration settings for compute environments including work directories,
	// pre/post run scripts, and environment-specific parameters.
	//
	Config      ComputeConfig `json:"config"`
	DateCreated *time.Time    `json:"dateCreated,omitempty"`
	LastUpdated *time.Time    `json:"lastUpdated,omitempty"`
	LastUsed    *time.Time    `json:"lastUsed,omitempty"`
	Deleted     *bool         `json:"deleted,omitempty"`
	Status      *LaunchStatus `json:"status,omitempty"`
	Message     *string       `json:"message,omitempty"`
	Primary     *bool         `json:"primary,omitempty"`
}

func (c ComputeEnv) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ComputeEnv) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ComputeEnv) GetCredentialsID() string {
	if o == nil {
		return ""
	}
	return o.CredentialsID
}

func (o *ComputeEnv) GetOrgID() *int64 {
	if o == nil {
		return nil
	}
	return o.OrgID
}

func (o *ComputeEnv) GetWorkspaceID() *int64 {
	if o == nil {
		return nil
	}
	return o.WorkspaceID
}

func (o *ComputeEnv) GetComputeEnvID() *string {
	if o == nil {
		return nil
	}
	return o.ComputeEnvID
}

func (o *ComputeEnv) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ComputeEnv) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *ComputeEnv) GetPlatform() LaunchPlatform {
	if o == nil {
		return LaunchPlatform("")
	}
	return o.Platform
}

func (o *ComputeEnv) GetConfig() ComputeConfig {
	if o == nil {
		return ComputeConfig{}
	}
	return o.Config
}

func (o *ComputeEnv) GetConfigMoabPlatform() *MoabConfiguration {
	return o.GetConfig().MoabConfiguration
}

func (o *ComputeEnv) GetConfigAwsBatch() *AWSBatchConfiguration {
	return o.GetConfig().AWSBatchConfiguration
}

func (o *ComputeEnv) GetConfigGkePlatform() *GoogleGKEClusterConfiguration {
	return o.GetConfig().GoogleGKEClusterConfiguration
}

func (o *ComputeEnv) GetConfigGoogleBatch() *GoogleBatchServiceConfiguration {
	return o.GetConfig().GoogleBatchServiceConfiguration
}

func (o *ComputeEnv) GetConfigAwsCloud() *AWSCloudConfiguration {
	return o.GetConfig().AWSCloudConfiguration
}

func (o *ComputeEnv) GetConfigSlurmPlatform() *SlurmConfiguration {
	return o.GetConfig().SlurmConfiguration
}

func (o *ComputeEnv) GetConfigK8sPlatform() *KubernetesComputeConfiguration {
	return o.GetConfig().KubernetesComputeConfiguration
}

func (o *ComputeEnv) GetConfigAltairPlatform() *AltairPBSConfiguration {
	return o.GetConfig().AltairPBSConfiguration
}

func (o *ComputeEnv) GetConfigLsfPlatform() *IBMLSFConfiguration {
	return o.GetConfig().IBMLSFConfiguration
}

func (o *ComputeEnv) GetConfigAzureBatch() *AzureBatchConfiguration {
	return o.GetConfig().AzureBatchConfiguration
}

func (o *ComputeEnv) GetConfigSeqeracomputePlatform() *SeqeraComputeConfiguration {
	return o.GetConfig().SeqeraComputeConfiguration
}

func (o *ComputeEnv) GetConfigEksPlatform() *AmazonEKSClusterConfiguration {
	return o.GetConfig().AmazonEKSClusterConfiguration
}

func (o *ComputeEnv) GetConfigGoogleLifesciences() *GoogleLifeSciencesConfiguration {
	return o.GetConfig().GoogleLifeSciencesConfiguration
}

func (o *ComputeEnv) GetConfigUgePlatform() *UnivaGridEngineConfiguration {
	return o.GetConfig().UnivaGridEngineConfiguration
}

func (o *ComputeEnv) GetDateCreated() *time.Time {
	if o == nil {
		return nil
	}
	return o.DateCreated
}

func (o *ComputeEnv) GetLastUpdated() *time.Time {
	if o == nil {
		return nil
	}
	return o.LastUpdated
}

func (o *ComputeEnv) GetLastUsed() *time.Time {
	if o == nil {
		return nil
	}
	return o.LastUsed
}

func (o *ComputeEnv) GetDeleted() *bool {
	if o == nil {
		return nil
	}
	return o.Deleted
}

func (o *ComputeEnv) GetStatus() *LaunchStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *ComputeEnv) GetMessage() *string {
	if o == nil {
		return nil
	}
	return o.Message
}

func (o *ComputeEnv) GetPrimary() *bool {
	if o == nil {
		return nil
	}
	return o.Primary
}

type Launch struct {
	ID          *string     `json:"id,omitempty"`
	ComputeEnv  *ComputeEnv `json:"computeEnv,omitempty"`
	Pipeline    string      `json:"pipeline"`
	WorkDir     *string     `json:"workDir,omitempty"`
	Revision    *string     `json:"revision,omitempty"`
	ConfigText  *string     `json:"configText,omitempty"`
	TowerConfig *string     `json:"towerConfig,omitempty"`
	ParamsText  *string     `json:"paramsText,omitempty"`
	// Add a script that executes in the nf-launch script prior to invoking Nextflow processes. See [Pre and post-run scripts](https://docs.seqera.io/platform-cloud/launch/advanced#pre-and-post-run-scripts).
	PreRunScript *string `json:"preRunScript,omitempty"`
	// Add a script that executes after all Nextflow processes have completed. See [Pre and post-run scripts](https://docs.seqera.io/platform-cloud/launch/advanced#pre-and-post-run-scripts).
	PostRunScript       *string    `json:"postRunScript,omitempty"`
	MainScript          *string    `json:"mainScript,omitempty"`
	EntryName           *string    `json:"entryName,omitempty"`
	SchemaName          *string    `json:"schemaName,omitempty"`
	Resume              *bool      `json:"resume,omitempty"`
	ResumeLaunchID      *string    `json:"resumeLaunchId,omitempty"`
	PullLatest          *bool      `json:"pullLatest,omitempty"`
	StubRun             *bool      `json:"stubRun,omitempty"`
	SessionID           *string    `json:"sessionId,omitempty"`
	RunName             *string    `json:"runName,omitempty"`
	ConfigProfiles      []string   `json:"configProfiles,omitempty"`
	UserSecrets         []string   `json:"userSecrets,omitempty"`
	WorkspaceSecrets    []string   `json:"workspaceSecrets,omitempty"`
	OptimizationID      *string    `json:"optimizationId,omitempty"`
	OptimizationTargets *string    `json:"optimizationTargets,omitempty"`
	HeadJobCpus         *int       `json:"headJobCpus,omitempty"`
	HeadJobMemoryMb     *int       `json:"headJobMemoryMb,omitempty"`
	LaunchContainer     *string    `json:"launchContainer,omitempty"`
	DateCreated         time.Time  `json:"dateCreated"`
	LastUpdated         *time.Time `json:"lastUpdated,omitempty"`
}

func (l Launch) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *Launch) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Launch) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *Launch) GetComputeEnv() *ComputeEnv {
	if o == nil {
		return nil
	}
	return o.ComputeEnv
}

func (o *Launch) GetPipeline() string {
	if o == nil {
		return ""
	}
	return o.Pipeline
}

func (o *Launch) GetWorkDir() *string {
	if o == nil {
		return nil
	}
	return o.WorkDir
}

func (o *Launch) GetRevision() *string {
	if o == nil {
		return nil
	}
	return o.Revision
}

func (o *Launch) GetConfigText() *string {
	if o == nil {
		return nil
	}
	return o.ConfigText
}

func (o *Launch) GetTowerConfig() *string {
	if o == nil {
		return nil
	}
	return o.TowerConfig
}

func (o *Launch) GetParamsText() *string {
	if o == nil {
		return nil
	}
	return o.ParamsText
}

func (o *Launch) GetPreRunScript() *string {
	if o == nil {
		return nil
	}
	return o.PreRunScript
}

func (o *Launch) GetPostRunScript() *string {
	if o == nil {
		return nil
	}
	return o.PostRunScript
}

func (o *Launch) GetMainScript() *string {
	if o == nil {
		return nil
	}
	return o.MainScript
}

func (o *Launch) GetEntryName() *string {
	if o == nil {
		return nil
	}
	return o.EntryName
}

func (o *Launch) GetSchemaName() *string {
	if o == nil {
		return nil
	}
	return o.SchemaName
}

func (o *Launch) GetResume() *bool {
	if o == nil {
		return nil
	}
	return o.Resume
}

func (o *Launch) GetResumeLaunchID() *string {
	if o == nil {
		return nil
	}
	return o.ResumeLaunchID
}

func (o *Launch) GetPullLatest() *bool {
	if o == nil {
		return nil
	}
	return o.PullLatest
}

func (o *Launch) GetStubRun() *bool {
	if o == nil {
		return nil
	}
	return o.StubRun
}

func (o *Launch) GetSessionID() *string {
	if o == nil {
		return nil
	}
	return o.SessionID
}

func (o *Launch) GetRunName() *string {
	if o == nil {
		return nil
	}
	return o.RunName
}

func (o *Launch) GetConfigProfiles() []string {
	if o == nil {
		return nil
	}
	return o.ConfigProfiles
}

func (o *Launch) GetUserSecrets() []string {
	if o == nil {
		return nil
	}
	return o.UserSecrets
}

func (o *Launch) GetWorkspaceSecrets() []string {
	if o == nil {
		return nil
	}
	return o.WorkspaceSecrets
}

func (o *Launch) GetOptimizationID() *string {
	if o == nil {
		return nil
	}
	return o.OptimizationID
}

func (o *Launch) GetOptimizationTargets() *string {
	if o == nil {
		return nil
	}
	return o.OptimizationTargets
}

func (o *Launch) GetHeadJobCpus() *int {
	if o == nil {
		return nil
	}
	return o.HeadJobCpus
}

func (o *Launch) GetHeadJobMemoryMb() *int {
	if o == nil {
		return nil
	}
	return o.HeadJobMemoryMb
}

func (o *Launch) GetLaunchContainer() *string {
	if o == nil {
		return nil
	}
	return o.LaunchContainer
}

func (o *Launch) GetDateCreated() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.DateCreated
}

func (o *Launch) GetLastUpdated() *time.Time {
	if o == nil {
		return nil
	}
	return o.LastUpdated
}
