// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/seqeralabs/terraform-provider-seqera/internal/sdk/internal/utils"
	"time"
)

// CodecommitCredentialProviderType - Cloud provider type (automatically set to "codecommit")
type CodecommitCredentialProviderType string

const (
	CodecommitCredentialProviderTypeCodecommit CodecommitCredentialProviderType = "codecommit"
)

func (e CodecommitCredentialProviderType) ToPointer() *CodecommitCredentialProviderType {
	return &e
}
func (e *CodecommitCredentialProviderType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "codecommit":
		*e = CodecommitCredentialProviderType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CodecommitCredentialProviderType: %v", v)
	}
}

type CodecommitCredentialKeys struct {
	// AWS access key to access the Codecommit repository (required)
	AccessKey string `json:"accessKey"`
	// AWS secret key to access the Codecommit repository (required, sensitive)
	SecretKey string `json:"secretKey"`
	// Repository base URL to associate with a specific repository or AWS region (optional). Example: https://git-codecommit.eu-west-1.amazonaws.com
	BaseURL *string `json:"baseUrl,omitempty"`
}

func (c *CodecommitCredentialKeys) GetAccessKey() string {
	if c == nil {
		return ""
	}
	return c.AccessKey
}

func (c *CodecommitCredentialKeys) GetSecretKey() string {
	if c == nil {
		return ""
	}
	return c.SecretKey
}

func (c *CodecommitCredentialKeys) GetBaseURL() *string {
	if c == nil {
		return nil
	}
	return c.BaseURL
}

type CodecommitCredential struct {
	// Unique identifier for the credential (max 22 characters)
	ID *string `json:"id,omitempty"`
	// Display name for the credential. Must be 2-99 characters using only letters, numbers, underscores, and hyphens. No spaces allowed.
	Name string `json:"name"`
	// Cloud provider type (automatically set to "codecommit")
	ProviderType *CodecommitCredentialProviderType `default:"codecommit" json:"provider"`
	// Flag indicating if the credential has been soft-deleted
	Deleted *bool `json:"deleted,omitempty"`
	// Timestamp when the credential was last used
	LastUsed *time.Time `json:"lastUsed,omitempty"`
	// Timestamp when the credential was created
	DateCreated *time.Time `json:"dateCreated,omitempty"`
	// Timestamp when the credential was last updated
	LastUpdated *time.Time               `json:"lastUpdated,omitempty"`
	Keys        CodecommitCredentialKeys `json:"keys"`
}

func (c CodecommitCredential) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CodecommitCredential) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"name", "keys"}); err != nil {
		return err
	}
	return nil
}

func (c *CodecommitCredential) GetID() *string {
	if c == nil {
		return nil
	}
	return c.ID
}

func (c *CodecommitCredential) GetName() string {
	if c == nil {
		return ""
	}
	return c.Name
}

func (c *CodecommitCredential) GetProviderType() *CodecommitCredentialProviderType {
	if c == nil {
		return nil
	}
	return c.ProviderType
}

func (c *CodecommitCredential) GetDeleted() *bool {
	if c == nil {
		return nil
	}
	return c.Deleted
}

func (c *CodecommitCredential) GetLastUsed() *time.Time {
	if c == nil {
		return nil
	}
	return c.LastUsed
}

func (c *CodecommitCredential) GetDateCreated() *time.Time {
	if c == nil {
		return nil
	}
	return c.DateCreated
}

func (c *CodecommitCredential) GetLastUpdated() *time.Time {
	if c == nil {
		return nil
	}
	return c.LastUpdated
}

func (c *CodecommitCredential) GetKeys() CodecommitCredentialKeys {
	if c == nil {
		return CodecommitCredentialKeys{}
	}
	return c.Keys
}

type CodecommitCredentialKeysOutput struct {
	// AWS access key to access the Codecommit repository (required)
	AccessKey string `json:"accessKey"`
}

func (c *CodecommitCredentialKeysOutput) GetAccessKey() string {
	if c == nil {
		return ""
	}
	return c.AccessKey
}

type CodecommitCredentialOutput struct {
	// Unique identifier for the credential (max 22 characters)
	ID *string `json:"id,omitempty"`
	// Display name for the credential. Must be 2-99 characters using only letters, numbers, underscores, and hyphens. No spaces allowed.
	Name string `json:"name"`
	// Cloud provider type (automatically set to "codecommit")
	ProviderType *CodecommitCredentialProviderType `default:"codecommit" json:"provider"`
	// Flag indicating if the credential has been soft-deleted
	Deleted *bool `json:"deleted,omitempty"`
	// Timestamp when the credential was last used
	LastUsed *time.Time `json:"lastUsed,omitempty"`
	// Timestamp when the credential was created
	DateCreated *time.Time `json:"dateCreated,omitempty"`
	// Timestamp when the credential was last updated
	LastUpdated *time.Time                     `json:"lastUpdated,omitempty"`
	Keys        CodecommitCredentialKeysOutput `json:"keys"`
}

func (c CodecommitCredentialOutput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CodecommitCredentialOutput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"name", "keys"}); err != nil {
		return err
	}
	return nil
}

func (c *CodecommitCredentialOutput) GetID() *string {
	if c == nil {
		return nil
	}
	return c.ID
}

func (c *CodecommitCredentialOutput) GetName() string {
	if c == nil {
		return ""
	}
	return c.Name
}

func (c *CodecommitCredentialOutput) GetProviderType() *CodecommitCredentialProviderType {
	if c == nil {
		return nil
	}
	return c.ProviderType
}

func (c *CodecommitCredentialOutput) GetDeleted() *bool {
	if c == nil {
		return nil
	}
	return c.Deleted
}

func (c *CodecommitCredentialOutput) GetLastUsed() *time.Time {
	if c == nil {
		return nil
	}
	return c.LastUsed
}

func (c *CodecommitCredentialOutput) GetDateCreated() *time.Time {
	if c == nil {
		return nil
	}
	return c.DateCreated
}

func (c *CodecommitCredentialOutput) GetLastUpdated() *time.Time {
	if c == nil {
		return nil
	}
	return c.LastUpdated
}

func (c *CodecommitCredentialOutput) GetKeys() CodecommitCredentialKeysOutput {
	if c == nil {
		return CodecommitCredentialKeysOutput{}
	}
	return c.Keys
}
