// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

type AwsBatchConfig struct {
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	StorageType *string `json:"storageType,omitempty"`
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	LustreID *string  `json:"lustreId,omitempty"`
	Volumes  []string `json:"volumes,omitempty"`
	// property to select the compute config platform
	Discriminator      *string `json:"discriminator,omitempty"`
	Region             string  `json:"region"`
	ComputeQueue       *string `json:"computeQueue,omitempty"`
	DragenQueue        *string `json:"dragenQueue,omitempty"`
	DragenInstanceType *string `json:"dragenInstanceType,omitempty"`
	ComputeJobRole     *string `json:"computeJobRole,omitempty"`
	ExecutionRole      *string `json:"executionRole,omitempty"`
	HeadQueue          *string `json:"headQueue,omitempty"`
	HeadJobRole        *string `json:"headJobRole,omitempty"`
	CliPath            *string `json:"cliPath,omitempty"`
	WorkDir            *string `json:"workDir,omitempty"`
	// Add a script that executes in the nf-launch script prior to invoking Nextflow processes. See [Pre and post-run scripts](https://docs.seqera.io/platform-cloud/launch/advanced#pre-and-post-run-scripts).
	PreRunScript *string `json:"preRunScript,omitempty"`
	// Add a script that executes after all Nextflow processes have completed. See [Pre and post-run scripts](https://docs.seqera.io/platform-cloud/launch/advanced#pre-and-post-run-scripts).
	PostRunScript       *string             `json:"postRunScript,omitempty"`
	HeadJobCpus         *int                `json:"headJobCpus,omitempty"`
	HeadJobMemoryMb     *int                `json:"headJobMemoryMb,omitempty"`
	Environment         []ConfigEnvVariable `json:"environment,omitempty"`
	WaveEnabled         *bool               `json:"waveEnabled,omitempty"`
	Fusion2Enabled      *bool               `json:"fusion2Enabled,omitempty"`
	NvnmeStorageEnabled *bool               `json:"nvnmeStorageEnabled,omitempty"`
	LogGroup            *string             `json:"logGroup,omitempty"`
	NextflowConfig      *string             `json:"nextflowConfig,omitempty"`
	FusionSnapshots     *bool               `json:"fusionSnapshots,omitempty"`
	Forge               *ForgeConfig        `json:"forge,omitempty"`
	ForgedResources     []map[string]any    `json:"forgedResources,omitempty"`
}

func (o *AwsBatchConfig) GetStorageType() *string {
	if o == nil {
		return nil
	}
	return o.StorageType
}

func (o *AwsBatchConfig) GetLustreID() *string {
	if o == nil {
		return nil
	}
	return o.LustreID
}

func (o *AwsBatchConfig) GetVolumes() []string {
	if o == nil {
		return nil
	}
	return o.Volumes
}

func (o *AwsBatchConfig) GetDiscriminator() *string {
	if o == nil {
		return nil
	}
	return o.Discriminator
}

func (o *AwsBatchConfig) GetRegion() string {
	if o == nil {
		return ""
	}
	return o.Region
}

func (o *AwsBatchConfig) GetComputeQueue() *string {
	if o == nil {
		return nil
	}
	return o.ComputeQueue
}

func (o *AwsBatchConfig) GetDragenQueue() *string {
	if o == nil {
		return nil
	}
	return o.DragenQueue
}

func (o *AwsBatchConfig) GetDragenInstanceType() *string {
	if o == nil {
		return nil
	}
	return o.DragenInstanceType
}

func (o *AwsBatchConfig) GetComputeJobRole() *string {
	if o == nil {
		return nil
	}
	return o.ComputeJobRole
}

func (o *AwsBatchConfig) GetExecutionRole() *string {
	if o == nil {
		return nil
	}
	return o.ExecutionRole
}

func (o *AwsBatchConfig) GetHeadQueue() *string {
	if o == nil {
		return nil
	}
	return o.HeadQueue
}

func (o *AwsBatchConfig) GetHeadJobRole() *string {
	if o == nil {
		return nil
	}
	return o.HeadJobRole
}

func (o *AwsBatchConfig) GetCliPath() *string {
	if o == nil {
		return nil
	}
	return o.CliPath
}

func (o *AwsBatchConfig) GetWorkDir() *string {
	if o == nil {
		return nil
	}
	return o.WorkDir
}

func (o *AwsBatchConfig) GetPreRunScript() *string {
	if o == nil {
		return nil
	}
	return o.PreRunScript
}

func (o *AwsBatchConfig) GetPostRunScript() *string {
	if o == nil {
		return nil
	}
	return o.PostRunScript
}

func (o *AwsBatchConfig) GetHeadJobCpus() *int {
	if o == nil {
		return nil
	}
	return o.HeadJobCpus
}

func (o *AwsBatchConfig) GetHeadJobMemoryMb() *int {
	if o == nil {
		return nil
	}
	return o.HeadJobMemoryMb
}

func (o *AwsBatchConfig) GetEnvironment() []ConfigEnvVariable {
	if o == nil {
		return nil
	}
	return o.Environment
}

func (o *AwsBatchConfig) GetWaveEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.WaveEnabled
}

func (o *AwsBatchConfig) GetFusion2Enabled() *bool {
	if o == nil {
		return nil
	}
	return o.Fusion2Enabled
}

func (o *AwsBatchConfig) GetNvnmeStorageEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.NvnmeStorageEnabled
}

func (o *AwsBatchConfig) GetLogGroup() *string {
	if o == nil {
		return nil
	}
	return o.LogGroup
}

func (o *AwsBatchConfig) GetNextflowConfig() *string {
	if o == nil {
		return nil
	}
	return o.NextflowConfig
}

func (o *AwsBatchConfig) GetFusionSnapshots() *bool {
	if o == nil {
		return nil
	}
	return o.FusionSnapshots
}

func (o *AwsBatchConfig) GetForge() *ForgeConfig {
	if o == nil {
		return nil
	}
	return o.Forge
}

func (o *AwsBatchConfig) GetForgedResources() []map[string]any {
	if o == nil {
		return nil
	}
	return o.ForgedResources
}
