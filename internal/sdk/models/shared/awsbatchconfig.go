// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

type AwsBatchConfig struct {
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	StorageType *string `json:"storageType,omitempty"`
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	LustreID *string  `json:"lustreId,omitempty"`
	Volumes  []string `json:"volumes,omitempty"`
	// property to select the compute config platform
	Discriminator *string `json:"discriminator,omitempty"`
	// AWS region where the Batch compute environment will be created.
	// Examples: us-east-1, eu-west-1, ap-southeast-2
	//
	Region string `json:"region"`
	// Name of the AWS Batch compute queue
	ComputeQueue       *string `json:"computeQueue,omitempty"`
	DragenQueue        *string `json:"dragenQueue,omitempty"`
	DragenInstanceType *string `json:"dragenInstanceType,omitempty"`
	// IAM role ARN for compute jobs. Jobs assume this role during execution.
	// Must have permissions for S3, CloudWatch, etc.
	// Format: arn:aws:iam::account-id:role/role-name
	//
	ComputeJobRole *string `json:"computeJobRole,omitempty"`
	// IAM role ARN for Batch execution (pulling container images, writing logs).
	// Must have permissions for ECR and CloudWatch Logs.
	// Format: arn:aws:iam::account-id:role/role-name
	//
	ExecutionRole *string `json:"executionRole,omitempty"`
	// Name of the head job queue
	HeadQueue *string `json:"headQueue,omitempty"`
	// IAM role ARN for the head job.
	// Format: arn:aws:iam::account-id:role/role-name
	//
	HeadJobRole *string `json:"headJobRole,omitempty"`
	// Path to AWS CLI on compute instances. AWS CLI must be available at this path.
	//
	CliPath *string `json:"cliPath,omitempty"`
	// S3 bucket path for Nextflow work directory where intermediate files will be stored.
	// Format: s3://bucket-name/path
	//
	WorkDir *string `json:"workDir,omitempty"`
	// Bash script to run before workflow execution begins.
	// Use for environment setup, loading modules, downloading reference data, etc.
	//
	PreRunScript *string `json:"preRunScript,omitempty"`
	// Bash script to run after workflow execution completes.
	// Use for cleanup, archiving results, sending notifications, etc.
	//
	PostRunScript *string `json:"postRunScript,omitempty"`
	// Number of CPUs allocated for the head job (default: 1)
	HeadJobCpus *int `json:"headJobCpus,omitempty"`
	// Memory allocation for the head job in MB (default: 1024)
	HeadJobMemoryMb *int                `json:"headJobMemoryMb,omitempty"`
	Environment     []ConfigEnvVariable `json:"environment,omitempty"`
	// Enable Wave containers for this compute environment. Wave provides container provisioning
	// and augmentation capabilities for Nextflow workflows.
	//
	// When enable_wave is true, enable_fusion must be explicitly set to either true or false.
	// Note: If Fusion2 is enabled, Wave must also be enabled.
	//
	EnableWave   *bool `json:"waveEnabled,omitempty"`
	EnableFusion *bool `json:"fusion2Enabled,omitempty"`
	// Enable NVMe instance storage for high-performance I/O.
	// When enabled, NVMe storage volumes are automatically mounted and configured.
	//
	NvmeStorageEnabled *bool            `json:"nvnmeStorageEnabled,omitempty"`
	LogGroup           *string          `json:"logGroup,omitempty"`
	NextflowConfig     *string          `json:"nextflowConfig,omitempty"`
	FusionSnapshots    *bool            `json:"fusionSnapshots,omitempty"`
	Forge              *ForgeConfig     `json:"forge,omitempty"`
	ForgedResources    []map[string]any `json:"forgedResources,omitempty"`
}

func (a *AwsBatchConfig) GetStorageType() *string {
	if a == nil {
		return nil
	}
	return a.StorageType
}

func (a *AwsBatchConfig) GetLustreID() *string {
	if a == nil {
		return nil
	}
	return a.LustreID
}

func (a *AwsBatchConfig) GetVolumes() []string {
	if a == nil {
		return nil
	}
	return a.Volumes
}

func (a *AwsBatchConfig) GetDiscriminator() *string {
	if a == nil {
		return nil
	}
	return a.Discriminator
}

func (a *AwsBatchConfig) GetRegion() string {
	if a == nil {
		return ""
	}
	return a.Region
}

func (a *AwsBatchConfig) GetComputeQueue() *string {
	if a == nil {
		return nil
	}
	return a.ComputeQueue
}

func (a *AwsBatchConfig) GetDragenQueue() *string {
	if a == nil {
		return nil
	}
	return a.DragenQueue
}

func (a *AwsBatchConfig) GetDragenInstanceType() *string {
	if a == nil {
		return nil
	}
	return a.DragenInstanceType
}

func (a *AwsBatchConfig) GetComputeJobRole() *string {
	if a == nil {
		return nil
	}
	return a.ComputeJobRole
}

func (a *AwsBatchConfig) GetExecutionRole() *string {
	if a == nil {
		return nil
	}
	return a.ExecutionRole
}

func (a *AwsBatchConfig) GetHeadQueue() *string {
	if a == nil {
		return nil
	}
	return a.HeadQueue
}

func (a *AwsBatchConfig) GetHeadJobRole() *string {
	if a == nil {
		return nil
	}
	return a.HeadJobRole
}

func (a *AwsBatchConfig) GetCliPath() *string {
	if a == nil {
		return nil
	}
	return a.CliPath
}

func (a *AwsBatchConfig) GetWorkDir() *string {
	if a == nil {
		return nil
	}
	return a.WorkDir
}

func (a *AwsBatchConfig) GetPreRunScript() *string {
	if a == nil {
		return nil
	}
	return a.PreRunScript
}

func (a *AwsBatchConfig) GetPostRunScript() *string {
	if a == nil {
		return nil
	}
	return a.PostRunScript
}

func (a *AwsBatchConfig) GetHeadJobCpus() *int {
	if a == nil {
		return nil
	}
	return a.HeadJobCpus
}

func (a *AwsBatchConfig) GetHeadJobMemoryMb() *int {
	if a == nil {
		return nil
	}
	return a.HeadJobMemoryMb
}

func (a *AwsBatchConfig) GetEnvironment() []ConfigEnvVariable {
	if a == nil {
		return nil
	}
	return a.Environment
}

func (a *AwsBatchConfig) GetEnableWave() *bool {
	if a == nil {
		return nil
	}
	return a.EnableWave
}

func (a *AwsBatchConfig) GetEnableFusion() *bool {
	if a == nil {
		return nil
	}
	return a.EnableFusion
}

func (a *AwsBatchConfig) GetNvmeStorageEnabled() *bool {
	if a == nil {
		return nil
	}
	return a.NvmeStorageEnabled
}

func (a *AwsBatchConfig) GetLogGroup() *string {
	if a == nil {
		return nil
	}
	return a.LogGroup
}

func (a *AwsBatchConfig) GetNextflowConfig() *string {
	if a == nil {
		return nil
	}
	return a.NextflowConfig
}

func (a *AwsBatchConfig) GetFusionSnapshots() *bool {
	if a == nil {
		return nil
	}
	return a.FusionSnapshots
}

func (a *AwsBatchConfig) GetForge() *ForgeConfig {
	if a == nil {
		return nil
	}
	return a.Forge
}

func (a *AwsBatchConfig) GetForgedResources() []map[string]any {
	if a == nil {
		return nil
	}
	return a.ForgedResources
}
