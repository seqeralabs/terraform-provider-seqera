// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/seqeralabs/terraform-provider-seqera/internal/sdk/internal/utils"
	"time"
)

type ActionTowerActionEvent struct {
	Discriminator *string    `json:"discriminator,omitempty"`
	Timestamp     *time.Time `json:"timestamp,omitempty"`
	WorkflowID    *string    `json:"workflowId,omitempty"`
}

func (a ActionTowerActionEvent) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *ActionTowerActionEvent) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *ActionTowerActionEvent) GetDiscriminator() *string {
	if o == nil {
		return nil
	}
	return o.Discriminator
}

func (o *ActionTowerActionEvent) GetTimestamp() *time.Time {
	if o == nil {
		return nil
	}
	return o.Timestamp
}

func (o *ActionTowerActionEvent) GetWorkflowID() *string {
	if o == nil {
		return nil
	}
	return o.WorkflowID
}

type GithubActionEvent struct {
	Discriminator *string    `json:"discriminator,omitempty"`
	Ref           *string    `json:"ref,omitempty"`
	CommitID      *string    `json:"commitId,omitempty"`
	CommitMessage *string    `json:"commitMessage,omitempty"`
	PusherName    *string    `json:"pusherName,omitempty"`
	PusherEmail   *string    `json:"pusherEmail,omitempty"`
	Timestamp     *time.Time `json:"timestamp,omitempty"`
}

func (g GithubActionEvent) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GithubActionEvent) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *GithubActionEvent) GetDiscriminator() *string {
	if o == nil {
		return nil
	}
	return o.Discriminator
}

func (o *GithubActionEvent) GetRef() *string {
	if o == nil {
		return nil
	}
	return o.Ref
}

func (o *GithubActionEvent) GetCommitID() *string {
	if o == nil {
		return nil
	}
	return o.CommitID
}

func (o *GithubActionEvent) GetCommitMessage() *string {
	if o == nil {
		return nil
	}
	return o.CommitMessage
}

func (o *GithubActionEvent) GetPusherName() *string {
	if o == nil {
		return nil
	}
	return o.PusherName
}

func (o *GithubActionEvent) GetPusherEmail() *string {
	if o == nil {
		return nil
	}
	return o.PusherEmail
}

func (o *GithubActionEvent) GetTimestamp() *time.Time {
	if o == nil {
		return nil
	}
	return o.Timestamp
}

type ActionEventTypeType string

const (
	ActionEventTypeTypeGithub ActionEventTypeType = "github"
	ActionEventTypeTypeTower  ActionEventTypeType = "tower"
)

type ActionEventType struct {
	GithubActionEvent      *GithubActionEvent      `queryParam:"inline"`
	ActionTowerActionEvent *ActionTowerActionEvent `queryParam:"inline"`

	Type ActionEventTypeType
}

func CreateActionEventTypeGithub(github GithubActionEvent) ActionEventType {
	typ := ActionEventTypeTypeGithub

	typStr := string(typ)
	github.Discriminator = &typStr

	return ActionEventType{
		GithubActionEvent: &github,
		Type:              typ,
	}
}

func CreateActionEventTypeTower(tower ActionTowerActionEvent) ActionEventType {
	typ := ActionEventTypeTypeTower

	typStr := string(typ)
	tower.Discriminator = &typStr

	return ActionEventType{
		ActionTowerActionEvent: &tower,
		Type:                   typ,
	}
}

func (u *ActionEventType) UnmarshalJSON(data []byte) error {

	type discriminator struct {
		Discriminator string `json:"discriminator"`
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.Discriminator {
	case "github":
		githubActionEvent := new(GithubActionEvent)
		if err := utils.UnmarshalJSON(data, &githubActionEvent, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Discriminator == github) type GithubActionEvent within ActionEventType: %w", string(data), err)
		}

		u.GithubActionEvent = githubActionEvent
		u.Type = ActionEventTypeTypeGithub
		return nil
	case "tower":
		actionTowerActionEvent := new(ActionTowerActionEvent)
		if err := utils.UnmarshalJSON(data, &actionTowerActionEvent, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Discriminator == tower) type ActionTowerActionEvent within ActionEventType: %w", string(data), err)
		}

		u.ActionTowerActionEvent = actionTowerActionEvent
		u.Type = ActionEventTypeTypeTower
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ActionEventType", string(data))
}

func (u ActionEventType) MarshalJSON() ([]byte, error) {
	if u.GithubActionEvent != nil {
		return utils.MarshalJSON(u.GithubActionEvent, "", true)
	}

	if u.ActionTowerActionEvent != nil {
		return utils.MarshalJSON(u.ActionTowerActionEvent, "", true)
	}

	return nil, errors.New("could not marshal union type ActionEventType: all fields are null")
}
