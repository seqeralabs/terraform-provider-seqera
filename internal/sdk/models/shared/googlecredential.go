// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/seqeralabs/terraform-provider-seqera/internal/sdk/internal/utils"
	"time"
)

// GoogleCredentialProviderType - Cloud provider type (automatically set to "google")
type GoogleCredentialProviderType string

const (
	GoogleCredentialProviderTypeGoogle GoogleCredentialProviderType = "google"
)

func (e GoogleCredentialProviderType) ToPointer() *GoogleCredentialProviderType {
	return &e
}
func (e *GoogleCredentialProviderType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "google":
		*e = GoogleCredentialProviderType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GoogleCredentialProviderType: %v", v)
	}
}

type GoogleCredentialKeys struct {
	// Google Cloud service account key JSON (required, sensitive).
	Data string `json:"data"`
}

func (g *GoogleCredentialKeys) GetData() string {
	if g == nil {
		return ""
	}
	return g.Data
}

type GoogleCredential struct {
	// Unique identifier for the credential (max 22 characters)
	CredentialsID *string `json:"id,omitempty"`
	// Display name for the credential (max 100 characters)
	Name string `json:"name"`
	// Cloud provider type (automatically set to "google")
	ProviderType *GoogleCredentialProviderType `default:"google" json:"provider"`
	// Flag indicating if the credential has been soft-deleted
	Deleted *bool `json:"deleted,omitempty"`
	// Timestamp when the credential was last used
	LastUsed *time.Time `json:"lastUsed,omitempty"`
	// Timestamp when the credential was created
	DateCreated *time.Time `json:"dateCreated,omitempty"`
	// Timestamp when the credential was last updated
	LastUpdated *time.Time           `json:"lastUpdated,omitempty"`
	Keys        GoogleCredentialKeys `json:"keys"`
}

func (g GoogleCredential) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GoogleCredential) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, []string{"name", "keys"}); err != nil {
		return err
	}
	return nil
}

func (g *GoogleCredential) GetCredentialsID() *string {
	if g == nil {
		return nil
	}
	return g.CredentialsID
}

func (g *GoogleCredential) GetName() string {
	if g == nil {
		return ""
	}
	return g.Name
}

func (g *GoogleCredential) GetProviderType() *GoogleCredentialProviderType {
	if g == nil {
		return nil
	}
	return g.ProviderType
}

func (g *GoogleCredential) GetDeleted() *bool {
	if g == nil {
		return nil
	}
	return g.Deleted
}

func (g *GoogleCredential) GetLastUsed() *time.Time {
	if g == nil {
		return nil
	}
	return g.LastUsed
}

func (g *GoogleCredential) GetDateCreated() *time.Time {
	if g == nil {
		return nil
	}
	return g.DateCreated
}

func (g *GoogleCredential) GetLastUpdated() *time.Time {
	if g == nil {
		return nil
	}
	return g.LastUpdated
}

func (g *GoogleCredential) GetKeys() GoogleCredentialKeys {
	if g == nil {
		return GoogleCredentialKeys{}
	}
	return g.Keys
}

type GoogleCredentialKeysOutput struct {
}

type GoogleCredentialOutput struct {
	// Unique identifier for the credential (max 22 characters)
	CredentialsID *string `json:"id,omitempty"`
	// Display name for the credential (max 100 characters)
	Name string `json:"name"`
	// Cloud provider type (automatically set to "google")
	ProviderType *GoogleCredentialProviderType `default:"google" json:"provider"`
	// Flag indicating if the credential has been soft-deleted
	Deleted *bool `json:"deleted,omitempty"`
	// Timestamp when the credential was last used
	LastUsed *time.Time `json:"lastUsed,omitempty"`
	// Timestamp when the credential was created
	DateCreated *time.Time `json:"dateCreated,omitempty"`
	// Timestamp when the credential was last updated
	LastUpdated *time.Time                 `json:"lastUpdated,omitempty"`
	Keys        GoogleCredentialKeysOutput `json:"keys"`
}

func (g GoogleCredentialOutput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GoogleCredentialOutput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, []string{"name", "keys"}); err != nil {
		return err
	}
	return nil
}

func (g *GoogleCredentialOutput) GetCredentialsID() *string {
	if g == nil {
		return nil
	}
	return g.CredentialsID
}

func (g *GoogleCredentialOutput) GetName() string {
	if g == nil {
		return ""
	}
	return g.Name
}

func (g *GoogleCredentialOutput) GetProviderType() *GoogleCredentialProviderType {
	if g == nil {
		return nil
	}
	return g.ProviderType
}

func (g *GoogleCredentialOutput) GetDeleted() *bool {
	if g == nil {
		return nil
	}
	return g.Deleted
}

func (g *GoogleCredentialOutput) GetLastUsed() *time.Time {
	if g == nil {
		return nil
	}
	return g.LastUsed
}

func (g *GoogleCredentialOutput) GetDateCreated() *time.Time {
	if g == nil {
		return nil
	}
	return g.DateCreated
}

func (g *GoogleCredentialOutput) GetLastUpdated() *time.Time {
	if g == nil {
		return nil
	}
	return g.LastUpdated
}

func (g *GoogleCredentialOutput) GetKeys() GoogleCredentialKeysOutput {
	if g == nil {
		return GoogleCredentialKeysOutput{}
	}
	return g.Keys
}
