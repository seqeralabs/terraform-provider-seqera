// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"github.com/seqeralabs/terraform-provider-seqera/internal/sdk/internal/utils"
	"time"
)

type ListComputeEnvsResponseEntryResources struct {
	Cpus           *int     `json:"cpus,omitempty"`
	Memory         *int     `json:"memory,omitempty"`
	Gpus           *int     `json:"gpus,omitempty"`
	DiskSize       *int     `json:"diskSize,omitempty"`
	EstimatedPrice *float32 `json:"estimatedPrice,omitempty"`
	InstanceType   *string  `json:"instanceType,omitempty"`
}

func (l *ListComputeEnvsResponseEntryResources) GetCpus() *int {
	if l == nil {
		return nil
	}
	return l.Cpus
}

func (l *ListComputeEnvsResponseEntryResources) GetMemory() *int {
	if l == nil {
		return nil
	}
	return l.Memory
}

func (l *ListComputeEnvsResponseEntryResources) GetGpus() *int {
	if l == nil {
		return nil
	}
	return l.Gpus
}

func (l *ListComputeEnvsResponseEntryResources) GetDiskSize() *int {
	if l == nil {
		return nil
	}
	return l.DiskSize
}

func (l *ListComputeEnvsResponseEntryResources) GetEstimatedPrice() *float32 {
	if l == nil {
		return nil
	}
	return l.EstimatedPrice
}

func (l *ListComputeEnvsResponseEntryResources) GetInstanceType() *string {
	if l == nil {
		return nil
	}
	return l.InstanceType
}

type ListComputeEnvsResponseEntry struct {
	ID            *string                                `json:"id,omitempty"`
	Name          *string                                `json:"name,omitempty"`
	Platform      *string                                `json:"platform,omitempty"`
	Status        *ComputeEnvStatus                      `json:"status,omitempty"`
	Message       *string                                `json:"message,omitempty"`
	LastUsed      *time.Time                             `json:"lastUsed,omitempty"`
	Primary       *bool                                  `json:"primary,omitempty"`
	WorkspaceName *string                                `json:"workspaceName,omitempty"`
	Visibility    *string                                `json:"visibility,omitempty"`
	WorkDir       *string                                `json:"workDir,omitempty"`
	CredentialsID *string                                `json:"credentialsId,omitempty"`
	Region        *string                                `json:"region,omitempty"`
	Labels        []LabelDbDto                           `json:"labels,omitempty"`
	Resources     *ListComputeEnvsResponseEntryResources `json:"resources,omitempty"`
}

func (l ListComputeEnvsResponseEntry) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListComputeEnvsResponseEntry) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (l *ListComputeEnvsResponseEntry) GetID() *string {
	if l == nil {
		return nil
	}
	return l.ID
}

func (l *ListComputeEnvsResponseEntry) GetName() *string {
	if l == nil {
		return nil
	}
	return l.Name
}

func (l *ListComputeEnvsResponseEntry) GetPlatform() *string {
	if l == nil {
		return nil
	}
	return l.Platform
}

func (l *ListComputeEnvsResponseEntry) GetStatus() *ComputeEnvStatus {
	if l == nil {
		return nil
	}
	return l.Status
}

func (l *ListComputeEnvsResponseEntry) GetMessage() *string {
	if l == nil {
		return nil
	}
	return l.Message
}

func (l *ListComputeEnvsResponseEntry) GetLastUsed() *time.Time {
	if l == nil {
		return nil
	}
	return l.LastUsed
}

func (l *ListComputeEnvsResponseEntry) GetPrimary() *bool {
	if l == nil {
		return nil
	}
	return l.Primary
}

func (l *ListComputeEnvsResponseEntry) GetWorkspaceName() *string {
	if l == nil {
		return nil
	}
	return l.WorkspaceName
}

func (l *ListComputeEnvsResponseEntry) GetVisibility() *string {
	if l == nil {
		return nil
	}
	return l.Visibility
}

func (l *ListComputeEnvsResponseEntry) GetWorkDir() *string {
	if l == nil {
		return nil
	}
	return l.WorkDir
}

func (l *ListComputeEnvsResponseEntry) GetCredentialsID() *string {
	if l == nil {
		return nil
	}
	return l.CredentialsID
}

func (l *ListComputeEnvsResponseEntry) GetRegion() *string {
	if l == nil {
		return nil
	}
	return l.Region
}

func (l *ListComputeEnvsResponseEntry) GetLabels() []LabelDbDto {
	if l == nil {
		return nil
	}
	return l.Labels
}

func (l *ListComputeEnvsResponseEntry) GetResources() *ListComputeEnvsResponseEntryResources {
	if l == nil {
		return nil
	}
	return l.Resources
}
