// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

type WorkflowLaunchRequest struct {
	ComputeEnvID     *string  `json:"computeEnvId,omitempty"`
	RunName          *string  `json:"runName,omitempty"`
	Pipeline         *string  `json:"pipeline,omitempty"`
	WorkDir          string   `json:"workDir"`
	Revision         *string  `json:"revision,omitempty"`
	ConfigProfiles   []string `json:"configProfiles,omitempty"`
	UserSecrets      []string `json:"userSecrets,omitempty"`
	WorkspaceSecrets []string `json:"workspaceSecrets,omitempty"`
	ConfigText       *string  `json:"configText,omitempty"`
	TowerConfig      *string  `json:"towerConfig,omitempty"`
	ParamsText       *string  `json:"paramsText,omitempty"`
	// Add a script that executes in the nf-launch script prior to invoking Nextflow processes. See [Pre and post-run scripts](https://docs.seqera.io/platform-cloud/launch/advanced#pre-and-post-run-scripts).
	PreRunScript *string `json:"preRunScript,omitempty"`
	// Add a script that executes after all Nextflow processes have completed. See [Pre and post-run scripts](https://docs.seqera.io/platform-cloud/launch/advanced#pre-and-post-run-scripts).
	PostRunScript   *string `json:"postRunScript,omitempty"`
	MainScript      *string `json:"mainScript,omitempty"`
	EntryName       *string `json:"entryName,omitempty"`
	SchemaName      *string `json:"schemaName,omitempty"`
	Resume          *bool   `json:"resume,omitempty"`
	PullLatest      *bool   `json:"pullLatest,omitempty"`
	StubRun         *bool   `json:"stubRun,omitempty"`
	LabelIds        []int64 `json:"labelIds,omitempty"`
	HeadJobCpus     *int    `json:"headJobCpus,omitempty"`
	HeadJobMemoryMb *int    `json:"headJobMemoryMb,omitempty"`
}

func (w *WorkflowLaunchRequest) GetComputeEnvID() *string {
	if w == nil {
		return nil
	}
	return w.ComputeEnvID
}

func (w *WorkflowLaunchRequest) GetRunName() *string {
	if w == nil {
		return nil
	}
	return w.RunName
}

func (w *WorkflowLaunchRequest) GetPipeline() *string {
	if w == nil {
		return nil
	}
	return w.Pipeline
}

func (w *WorkflowLaunchRequest) GetWorkDir() string {
	if w == nil {
		return ""
	}
	return w.WorkDir
}

func (w *WorkflowLaunchRequest) GetRevision() *string {
	if w == nil {
		return nil
	}
	return w.Revision
}

func (w *WorkflowLaunchRequest) GetConfigProfiles() []string {
	if w == nil {
		return nil
	}
	return w.ConfigProfiles
}

func (w *WorkflowLaunchRequest) GetUserSecrets() []string {
	if w == nil {
		return nil
	}
	return w.UserSecrets
}

func (w *WorkflowLaunchRequest) GetWorkspaceSecrets() []string {
	if w == nil {
		return nil
	}
	return w.WorkspaceSecrets
}

func (w *WorkflowLaunchRequest) GetConfigText() *string {
	if w == nil {
		return nil
	}
	return w.ConfigText
}

func (w *WorkflowLaunchRequest) GetTowerConfig() *string {
	if w == nil {
		return nil
	}
	return w.TowerConfig
}

func (w *WorkflowLaunchRequest) GetParamsText() *string {
	if w == nil {
		return nil
	}
	return w.ParamsText
}

func (w *WorkflowLaunchRequest) GetPreRunScript() *string {
	if w == nil {
		return nil
	}
	return w.PreRunScript
}

func (w *WorkflowLaunchRequest) GetPostRunScript() *string {
	if w == nil {
		return nil
	}
	return w.PostRunScript
}

func (w *WorkflowLaunchRequest) GetMainScript() *string {
	if w == nil {
		return nil
	}
	return w.MainScript
}

func (w *WorkflowLaunchRequest) GetEntryName() *string {
	if w == nil {
		return nil
	}
	return w.EntryName
}

func (w *WorkflowLaunchRequest) GetSchemaName() *string {
	if w == nil {
		return nil
	}
	return w.SchemaName
}

func (w *WorkflowLaunchRequest) GetResume() *bool {
	if w == nil {
		return nil
	}
	return w.Resume
}

func (w *WorkflowLaunchRequest) GetPullLatest() *bool {
	if w == nil {
		return nil
	}
	return w.PullLatest
}

func (w *WorkflowLaunchRequest) GetStubRun() *bool {
	if w == nil {
		return nil
	}
	return w.StubRun
}

func (w *WorkflowLaunchRequest) GetLabelIds() []int64 {
	if w == nil {
		return nil
	}
	return w.LabelIds
}

func (w *WorkflowLaunchRequest) GetHeadJobCpus() *int {
	if w == nil {
		return nil
	}
	return w.HeadJobCpus
}

func (w *WorkflowLaunchRequest) GetHeadJobMemoryMb() *int {
	if w == nil {
		return nil
	}
	return w.HeadJobMemoryMb
}
