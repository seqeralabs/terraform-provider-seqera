// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/seqeralabs/terraform-provider-seqera/internal/sdk/internal/utils"
	"time"
)

// GitHubCredentialProviderType - Cloud provider type (automatically set to "github")
type GitHubCredentialProviderType string

const (
	GitHubCredentialProviderTypeGithub GitHubCredentialProviderType = "github"
)

func (e GitHubCredentialProviderType) ToPointer() *GitHubCredentialProviderType {
	return &e
}
func (e *GitHubCredentialProviderType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github":
		*e = GitHubCredentialProviderType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GitHubCredentialProviderType: %v", v)
	}
}

type GitHubCredentialKeys struct {
	// GitHub Personal Access Token (PAT) for authentication (required, sensitive)
	AccessToken string `json:"accessToken"`
	// Repository base URL for GitHub Enterprise Server (optional). Leave empty for GitHub.com. Example: https://github.mycompany.com
	BaseURL *string `json:"baseUrl,omitempty"`
}

func (g *GitHubCredentialKeys) GetAccessToken() string {
	if g == nil {
		return ""
	}
	return g.AccessToken
}

func (g *GitHubCredentialKeys) GetBaseURL() *string {
	if g == nil {
		return nil
	}
	return g.BaseURL
}

type GitHubCredential struct {
	// Unique identifier for the credential (max 22 characters)
	CredentialsID *string `json:"id,omitempty"`
	// Display name for the credential (max 100 characters)
	Name string `json:"name"`
	// Cloud provider type (automatically set to "github")
	ProviderType *GitHubCredentialProviderType `default:"github" json:"provider"`
	// Flag indicating if the credential has been soft-deleted
	Deleted *bool `json:"deleted,omitempty"`
	// Timestamp when the credential was last used
	LastUsed *time.Time `json:"lastUsed,omitempty"`
	// Timestamp when the credential was created
	DateCreated *time.Time `json:"dateCreated,omitempty"`
	// Timestamp when the credential was last updated
	LastUpdated *time.Time           `json:"lastUpdated,omitempty"`
	Keys        GitHubCredentialKeys `json:"keys"`
}

func (g GitHubCredential) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GitHubCredential) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, []string{"name", "keys"}); err != nil {
		return err
	}
	return nil
}

func (g *GitHubCredential) GetCredentialsID() *string {
	if g == nil {
		return nil
	}
	return g.CredentialsID
}

func (g *GitHubCredential) GetName() string {
	if g == nil {
		return ""
	}
	return g.Name
}

func (g *GitHubCredential) GetProviderType() *GitHubCredentialProviderType {
	if g == nil {
		return nil
	}
	return g.ProviderType
}

func (g *GitHubCredential) GetDeleted() *bool {
	if g == nil {
		return nil
	}
	return g.Deleted
}

func (g *GitHubCredential) GetLastUsed() *time.Time {
	if g == nil {
		return nil
	}
	return g.LastUsed
}

func (g *GitHubCredential) GetDateCreated() *time.Time {
	if g == nil {
		return nil
	}
	return g.DateCreated
}

func (g *GitHubCredential) GetLastUpdated() *time.Time {
	if g == nil {
		return nil
	}
	return g.LastUpdated
}

func (g *GitHubCredential) GetKeys() GitHubCredentialKeys {
	if g == nil {
		return GitHubCredentialKeys{}
	}
	return g.Keys
}

type GitHubCredentialKeysOutput struct {
}

type GitHubCredentialOutput struct {
	// Unique identifier for the credential (max 22 characters)
	CredentialsID *string `json:"id,omitempty"`
	// Display name for the credential (max 100 characters)
	Name string `json:"name"`
	// Cloud provider type (automatically set to "github")
	ProviderType *GitHubCredentialProviderType `default:"github" json:"provider"`
	// Flag indicating if the credential has been soft-deleted
	Deleted *bool `json:"deleted,omitempty"`
	// Timestamp when the credential was last used
	LastUsed *time.Time `json:"lastUsed,omitempty"`
	// Timestamp when the credential was created
	DateCreated *time.Time `json:"dateCreated,omitempty"`
	// Timestamp when the credential was last updated
	LastUpdated *time.Time                 `json:"lastUpdated,omitempty"`
	Keys        GitHubCredentialKeysOutput `json:"keys"`
}

func (g GitHubCredentialOutput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GitHubCredentialOutput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, []string{"name", "keys"}); err != nil {
		return err
	}
	return nil
}

func (g *GitHubCredentialOutput) GetCredentialsID() *string {
	if g == nil {
		return nil
	}
	return g.CredentialsID
}

func (g *GitHubCredentialOutput) GetName() string {
	if g == nil {
		return ""
	}
	return g.Name
}

func (g *GitHubCredentialOutput) GetProviderType() *GitHubCredentialProviderType {
	if g == nil {
		return nil
	}
	return g.ProviderType
}

func (g *GitHubCredentialOutput) GetDeleted() *bool {
	if g == nil {
		return nil
	}
	return g.Deleted
}

func (g *GitHubCredentialOutput) GetLastUsed() *time.Time {
	if g == nil {
		return nil
	}
	return g.LastUsed
}

func (g *GitHubCredentialOutput) GetDateCreated() *time.Time {
	if g == nil {
		return nil
	}
	return g.DateCreated
}

func (g *GitHubCredentialOutput) GetLastUpdated() *time.Time {
	if g == nil {
		return nil
	}
	return g.LastUpdated
}

func (g *GitHubCredentialOutput) GetKeys() GitHubCredentialKeysOutput {
	if g == nil {
		return GitHubCredentialKeysOutput{}
	}
	return g.Keys
}
