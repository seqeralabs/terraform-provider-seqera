// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/seqeralabs/terraform-provider-seqera/internal/sdk/internal/utils"
)

type PlatformMetainfoType string

const (
	PlatformMetainfoTypeGkePlatform   PlatformMetainfoType = "gke-platform"
	PlatformMetainfoTypeAwsCloud      PlatformMetainfoType = "aws-cloud"
	PlatformMetainfoTypeK8sPlatform   PlatformMetainfoType = "k8s-platform"
	PlatformMetainfoTypeGrid          PlatformMetainfoType = "grid"
	PlatformMetainfoTypeAwsBatch      PlatformMetainfoType = "aws-batch"
	PlatformMetainfoTypeLocalPlatform PlatformMetainfoType = "local-platform"
	PlatformMetainfoTypeAzureBatch    PlatformMetainfoType = "azure-batch"
	PlatformMetainfoTypeEksPlatform   PlatformMetainfoType = "eks-platform"
)

type PlatformMetainfo struct {
	AwsBatchPlatformMetainfo *AwsBatchPlatformMetainfo `queryParam:"inline"`
	AwsCloudPlatformMetainfo *AwsCloudPlatformMetainfo `queryParam:"inline"`
	GooglePlatformMetainfo   *GooglePlatformMetainfo   `queryParam:"inline"`
	AzBatchPlatformMetainfo  *AzBatchPlatformMetainfo  `queryParam:"inline"`
	EksPlatformMetaInfo      *EksPlatformMetaInfo      `queryParam:"inline"`
	GkePlatformMetaInfo      *GkePlatformMetaInfo      `queryParam:"inline"`
	K8sPlatformMetaInfo      *K8sPlatformMetaInfo      `queryParam:"inline"`
	GridPlatformMetainfo     *GridPlatformMetainfo     `queryParam:"inline"`
	LocalPlatformMetainfo    *LocalPlatformMetainfo    `queryParam:"inline"`

	Type PlatformMetainfoType
}

func CreatePlatformMetainfoGkePlatform(gkePlatform GkePlatformMetaInfo) PlatformMetainfo {
	typ := PlatformMetainfoTypeGkePlatform

	typStr := string(typ)
	gkePlatform.Discriminator = &typStr

	return PlatformMetainfo{
		GkePlatformMetaInfo: &gkePlatform,
		Type:                typ,
	}
}

func CreatePlatformMetainfoAwsCloud(awsCloud AwsCloudPlatformMetainfo) PlatformMetainfo {
	typ := PlatformMetainfoTypeAwsCloud

	typStr := string(typ)
	awsCloud.Discriminator = &typStr

	return PlatformMetainfo{
		AwsCloudPlatformMetainfo: &awsCloud,
		Type:                     typ,
	}
}

func CreatePlatformMetainfoK8sPlatform(k8sPlatform K8sPlatformMetaInfo) PlatformMetainfo {
	typ := PlatformMetainfoTypeK8sPlatform

	typStr := string(typ)
	k8sPlatform.Discriminator = &typStr

	return PlatformMetainfo{
		K8sPlatformMetaInfo: &k8sPlatform,
		Type:                typ,
	}
}

func CreatePlatformMetainfoGrid(grid GridPlatformMetainfo) PlatformMetainfo {
	typ := PlatformMetainfoTypeGrid

	typStr := string(typ)
	grid.Discriminator = &typStr

	return PlatformMetainfo{
		GridPlatformMetainfo: &grid,
		Type:                 typ,
	}
}

func CreatePlatformMetainfoAwsBatch(awsBatch AwsBatchPlatformMetainfo) PlatformMetainfo {
	typ := PlatformMetainfoTypeAwsBatch

	typStr := string(typ)
	awsBatch.Discriminator = &typStr

	return PlatformMetainfo{
		AwsBatchPlatformMetainfo: &awsBatch,
		Type:                     typ,
	}
}

func CreatePlatformMetainfoLocalPlatform(localPlatform LocalPlatformMetainfo) PlatformMetainfo {
	typ := PlatformMetainfoTypeLocalPlatform

	typStr := string(typ)
	localPlatform.Discriminator = &typStr

	return PlatformMetainfo{
		LocalPlatformMetainfo: &localPlatform,
		Type:                  typ,
	}
}

func CreatePlatformMetainfoAzureBatch(azureBatch AzBatchPlatformMetainfo) PlatformMetainfo {
	typ := PlatformMetainfoTypeAzureBatch

	typStr := string(typ)
	azureBatch.Discriminator = &typStr

	return PlatformMetainfo{
		AzBatchPlatformMetainfo: &azureBatch,
		Type:                    typ,
	}
}

func CreatePlatformMetainfoEksPlatform(eksPlatform EksPlatformMetaInfo) PlatformMetainfo {
	typ := PlatformMetainfoTypeEksPlatform

	typStr := string(typ)
	eksPlatform.Discriminator = &typStr

	return PlatformMetainfo{
		EksPlatformMetaInfo: &eksPlatform,
		Type:                typ,
	}
}

func (u *PlatformMetainfo) UnmarshalJSON(data []byte) error {

	type discriminator struct {
		Discriminator string `json:"discriminator"`
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.Discriminator {
	case "gke-platform":
		gkePlatformMetaInfo := new(GkePlatformMetaInfo)
		if err := utils.UnmarshalJSON(data, &gkePlatformMetaInfo, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Discriminator == gke-platform) type GkePlatformMetaInfo within PlatformMetainfo: %w", string(data), err)
		}

		u.GkePlatformMetaInfo = gkePlatformMetaInfo
		u.Type = PlatformMetainfoTypeGkePlatform
		return nil
	case "aws-cloud":
		awsCloudPlatformMetainfo := new(AwsCloudPlatformMetainfo)
		if err := utils.UnmarshalJSON(data, &awsCloudPlatformMetainfo, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Discriminator == aws-cloud) type AwsCloudPlatformMetainfo within PlatformMetainfo: %w", string(data), err)
		}

		u.AwsCloudPlatformMetainfo = awsCloudPlatformMetainfo
		u.Type = PlatformMetainfoTypeAwsCloud
		return nil
	case "k8s-platform":
		k8sPlatformMetaInfo := new(K8sPlatformMetaInfo)
		if err := utils.UnmarshalJSON(data, &k8sPlatformMetaInfo, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Discriminator == k8s-platform) type K8sPlatformMetaInfo within PlatformMetainfo: %w", string(data), err)
		}

		u.K8sPlatformMetaInfo = k8sPlatformMetaInfo
		u.Type = PlatformMetainfoTypeK8sPlatform
		return nil
	case "grid":
		gridPlatformMetainfo := new(GridPlatformMetainfo)
		if err := utils.UnmarshalJSON(data, &gridPlatformMetainfo, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Discriminator == grid) type GridPlatformMetainfo within PlatformMetainfo: %w", string(data), err)
		}

		u.GridPlatformMetainfo = gridPlatformMetainfo
		u.Type = PlatformMetainfoTypeGrid
		return nil
	case "aws-batch":
		awsBatchPlatformMetainfo := new(AwsBatchPlatformMetainfo)
		if err := utils.UnmarshalJSON(data, &awsBatchPlatformMetainfo, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Discriminator == aws-batch) type AwsBatchPlatformMetainfo within PlatformMetainfo: %w", string(data), err)
		}

		u.AwsBatchPlatformMetainfo = awsBatchPlatformMetainfo
		u.Type = PlatformMetainfoTypeAwsBatch
		return nil
	case "local-platform":
		localPlatformMetainfo := new(LocalPlatformMetainfo)
		if err := utils.UnmarshalJSON(data, &localPlatformMetainfo, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Discriminator == local-platform) type LocalPlatformMetainfo within PlatformMetainfo: %w", string(data), err)
		}

		u.LocalPlatformMetainfo = localPlatformMetainfo
		u.Type = PlatformMetainfoTypeLocalPlatform
		return nil
	case "azure-batch":
		azBatchPlatformMetainfo := new(AzBatchPlatformMetainfo)
		if err := utils.UnmarshalJSON(data, &azBatchPlatformMetainfo, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Discriminator == azure-batch) type AzBatchPlatformMetainfo within PlatformMetainfo: %w", string(data), err)
		}

		u.AzBatchPlatformMetainfo = azBatchPlatformMetainfo
		u.Type = PlatformMetainfoTypeAzureBatch
		return nil
	case "eks-platform":
		eksPlatformMetaInfo := new(EksPlatformMetaInfo)
		if err := utils.UnmarshalJSON(data, &eksPlatformMetaInfo, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Discriminator == eks-platform) type EksPlatformMetaInfo within PlatformMetainfo: %w", string(data), err)
		}

		u.EksPlatformMetaInfo = eksPlatformMetaInfo
		u.Type = PlatformMetainfoTypeEksPlatform
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for PlatformMetainfo", string(data))
}

func (u PlatformMetainfo) MarshalJSON() ([]byte, error) {
	if u.AwsBatchPlatformMetainfo != nil {
		return utils.MarshalJSON(u.AwsBatchPlatformMetainfo, "", true)
	}

	if u.AwsCloudPlatformMetainfo != nil {
		return utils.MarshalJSON(u.AwsCloudPlatformMetainfo, "", true)
	}

	if u.GooglePlatformMetainfo != nil {
		return utils.MarshalJSON(u.GooglePlatformMetainfo, "", true)
	}

	if u.AzBatchPlatformMetainfo != nil {
		return utils.MarshalJSON(u.AzBatchPlatformMetainfo, "", true)
	}

	if u.EksPlatformMetaInfo != nil {
		return utils.MarshalJSON(u.EksPlatformMetaInfo, "", true)
	}

	if u.GkePlatformMetaInfo != nil {
		return utils.MarshalJSON(u.GkePlatformMetaInfo, "", true)
	}

	if u.K8sPlatformMetaInfo != nil {
		return utils.MarshalJSON(u.K8sPlatformMetaInfo, "", true)
	}

	if u.GridPlatformMetainfo != nil {
		return utils.MarshalJSON(u.GridPlatformMetainfo, "", true)
	}

	if u.LocalPlatformMetainfo != nil {
		return utils.MarshalJSON(u.LocalPlatformMetainfo, "", true)
	}

	return nil, errors.New("could not marshal union type PlatformMetainfo: all fields are null")
}
