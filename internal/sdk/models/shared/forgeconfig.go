// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/seqeralabs/terraform-provider-seqera/internal/sdk/internal/utils"
)

type ForgeConfigType string

const (
	ForgeConfigTypeSpot ForgeConfigType = "SPOT"
	ForgeConfigTypeEc2  ForgeConfigType = "EC2"
)

func (e ForgeConfigType) ToPointer() *ForgeConfigType {
	return &e
}
func (e *ForgeConfigType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SPOT":
		fallthrough
	case "EC2":
		*e = ForgeConfigType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ForgeConfigType: %v", v)
	}
}

type AllocStrategy string

const (
	AllocStrategyBestFit                    AllocStrategy = "BEST_FIT"
	AllocStrategyBestFitProgressive         AllocStrategy = "BEST_FIT_PROGRESSIVE"
	AllocStrategySpotCapacityOptimized      AllocStrategy = "SPOT_CAPACITY_OPTIMIZED"
	AllocStrategySpotPriceCapacityOptimized AllocStrategy = "SPOT_PRICE_CAPACITY_OPTIMIZED"
)

func (e AllocStrategy) ToPointer() *AllocStrategy {
	return &e
}
func (e *AllocStrategy) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BEST_FIT":
		fallthrough
	case "BEST_FIT_PROGRESSIVE":
		fallthrough
	case "SPOT_CAPACITY_OPTIMIZED":
		fallthrough
	case "SPOT_PRICE_CAPACITY_OPTIMIZED":
		*e = AllocStrategy(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AllocStrategy: %v", v)
	}
}

type ForgeConfig struct {
	Type               ForgeConfigType `json:"type"`
	MinCpus            int             `json:"minCpus"`
	MaxCpus            int             `json:"maxCpus"`
	GpuEnabled         *bool           `json:"gpuEnabled,omitempty"`
	EbsAutoScale       *bool           `json:"ebsAutoScale,omitempty"`
	InstanceTypes      []string        `json:"instanceTypes,omitempty"`
	AllocStrategy      *AllocStrategy  `json:"allocStrategy,omitempty"`
	ImageID            *string         `json:"imageId,omitempty"`
	VpcID              *string         `json:"vpcId,omitempty"`
	Subnets            []string        `json:"subnets,omitempty"`
	SecurityGroups     []string        `json:"securityGroups,omitempty"`
	FsxMount           *string         `json:"fsxMount,omitempty"`
	FsxName            *string         `json:"fsxName,omitempty"`
	FsxSize            *int            `json:"fsxSize,omitempty"`
	DisposeOnDeletion  *bool           `json:"disposeOnDeletion,omitempty"`
	Ec2KeyPair         *string         `json:"ec2KeyPair,omitempty"`
	AllowBuckets       []string        `json:"allowBuckets,omitempty"`
	EbsBlockSize       *int            `json:"ebsBlockSize,omitempty"`
	FusionEnabled      *bool           `json:"fusionEnabled,omitempty"`
	BidPercentage      *int            `json:"bidPercentage,omitempty"`
	EfsCreate          *bool           `json:"efsCreate,omitempty"`
	EfsID              *string         `json:"efsId,omitempty"`
	EfsMount           *string         `json:"efsMount,omitempty"`
	DragenEnabled      *bool           `json:"dragenEnabled,omitempty"`
	DragenAmiID        *string         `json:"dragenAmiId,omitempty"`
	EbsBootSize        *int            `json:"ebsBootSize,omitempty"`
	EcsConfig          *string         `json:"ecsConfig,omitempty"`
	FargateHeadEnabled *bool           `json:"fargateHeadEnabled,omitempty"`
	Arm64Enabled       *bool           `json:"arm64Enabled,omitempty"`
	DragenInstanceType *string         `json:"dragenInstanceType,omitempty"`
}

func (f ForgeConfig) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *ForgeConfig) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"type", "minCpus", "maxCpus"}); err != nil {
		return err
	}
	return nil
}

func (f *ForgeConfig) GetType() ForgeConfigType {
	if f == nil {
		return ForgeConfigType("")
	}
	return f.Type
}

func (f *ForgeConfig) GetMinCpus() int {
	if f == nil {
		return 0
	}
	return f.MinCpus
}

func (f *ForgeConfig) GetMaxCpus() int {
	if f == nil {
		return 0
	}
	return f.MaxCpus
}

func (f *ForgeConfig) GetGpuEnabled() *bool {
	if f == nil {
		return nil
	}
	return f.GpuEnabled
}

func (f *ForgeConfig) GetEbsAutoScale() *bool {
	if f == nil {
		return nil
	}
	return f.EbsAutoScale
}

func (f *ForgeConfig) GetInstanceTypes() []string {
	if f == nil {
		return nil
	}
	return f.InstanceTypes
}

func (f *ForgeConfig) GetAllocStrategy() *AllocStrategy {
	if f == nil {
		return nil
	}
	return f.AllocStrategy
}

func (f *ForgeConfig) GetImageID() *string {
	if f == nil {
		return nil
	}
	return f.ImageID
}

func (f *ForgeConfig) GetVpcID() *string {
	if f == nil {
		return nil
	}
	return f.VpcID
}

func (f *ForgeConfig) GetSubnets() []string {
	if f == nil {
		return nil
	}
	return f.Subnets
}

func (f *ForgeConfig) GetSecurityGroups() []string {
	if f == nil {
		return nil
	}
	return f.SecurityGroups
}

func (f *ForgeConfig) GetFsxMount() *string {
	if f == nil {
		return nil
	}
	return f.FsxMount
}

func (f *ForgeConfig) GetFsxName() *string {
	if f == nil {
		return nil
	}
	return f.FsxName
}

func (f *ForgeConfig) GetFsxSize() *int {
	if f == nil {
		return nil
	}
	return f.FsxSize
}

func (f *ForgeConfig) GetDisposeOnDeletion() *bool {
	if f == nil {
		return nil
	}
	return f.DisposeOnDeletion
}

func (f *ForgeConfig) GetEc2KeyPair() *string {
	if f == nil {
		return nil
	}
	return f.Ec2KeyPair
}

func (f *ForgeConfig) GetAllowBuckets() []string {
	if f == nil {
		return nil
	}
	return f.AllowBuckets
}

func (f *ForgeConfig) GetEbsBlockSize() *int {
	if f == nil {
		return nil
	}
	return f.EbsBlockSize
}

func (f *ForgeConfig) GetFusionEnabled() *bool {
	if f == nil {
		return nil
	}
	return f.FusionEnabled
}

func (f *ForgeConfig) GetBidPercentage() *int {
	if f == nil {
		return nil
	}
	return f.BidPercentage
}

func (f *ForgeConfig) GetEfsCreate() *bool {
	if f == nil {
		return nil
	}
	return f.EfsCreate
}

func (f *ForgeConfig) GetEfsID() *string {
	if f == nil {
		return nil
	}
	return f.EfsID
}

func (f *ForgeConfig) GetEfsMount() *string {
	if f == nil {
		return nil
	}
	return f.EfsMount
}

func (f *ForgeConfig) GetDragenEnabled() *bool {
	if f == nil {
		return nil
	}
	return f.DragenEnabled
}

func (f *ForgeConfig) GetDragenAmiID() *string {
	if f == nil {
		return nil
	}
	return f.DragenAmiID
}

func (f *ForgeConfig) GetEbsBootSize() *int {
	if f == nil {
		return nil
	}
	return f.EbsBootSize
}

func (f *ForgeConfig) GetEcsConfig() *string {
	if f == nil {
		return nil
	}
	return f.EcsConfig
}

func (f *ForgeConfig) GetFargateHeadEnabled() *bool {
	if f == nil {
		return nil
	}
	return f.FargateHeadEnabled
}

func (f *ForgeConfig) GetArm64Enabled() *bool {
	if f == nil {
		return nil
	}
	return f.Arm64Enabled
}

func (f *ForgeConfig) GetDragenInstanceType() *string {
	if f == nil {
		return nil
	}
	return f.DragenInstanceType
}
