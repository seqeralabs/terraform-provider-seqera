// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"github.com/seqeralabs/terraform-provider-seqera/internal/sdk/internal/utils"
	"time"
)

// WorkflowDbDto - Represents a workflow execution record.
// Contains execution status, metadata, and results from pipeline
// runs including logs and performance metrics.
type WorkflowDbDto struct {
	// Array of status messages and logs from workflow execution
	Messages []string `json:"messages,omitempty"`
	// Unique identifier for the workflow execution
	ID *string `json:"id,omitempty"`
	// Numeric identifier of the user who owns this workflow
	OwnerID *int64 `json:"ownerId,omitempty"`
	// Timestamp when the workflow was submitted for execution
	Submit *time.Time `json:"submit,omitempty"`
	// Timestamp when the workflow execution actually started
	Start *time.Time `json:"start,omitempty"`
	// Timestamp when the workflow execution completed
	Complete          *time.Time      `json:"complete,omitempty"`
	DateCreated       *time.Time      `json:"dateCreated,omitempty"`
	LastUpdated       *time.Time      `json:"lastUpdated,omitempty"`
	RunName           *string         `json:"runName,omitempty"`
	SessionID         *string         `json:"sessionId,omitempty"`
	Profile           *string         `json:"profile,omitempty"`
	WorkDir           *string         `json:"workDir,omitempty"`
	CommitID          *string         `json:"commitId,omitempty"`
	UserName          *string         `json:"userName,omitempty"`
	ScriptID          *string         `json:"scriptId,omitempty"`
	Revision          *string         `json:"revision,omitempty"`
	CommandLine       *string         `json:"commandLine,omitempty"`
	ProjectName       *string         `json:"projectName,omitempty"`
	ScriptName        *string         `json:"scriptName,omitempty"`
	LaunchID          *string         `json:"launchId,omitempty"`
	Status            *WorkflowStatus `json:"status,omitempty"`
	RequiresAttention *bool           `json:"requiresAttention,omitempty"`
	ConfigFiles       []string        `json:"configFiles,omitempty"`
	Params            map[string]any  `json:"params,omitempty"`
	ConfigText        *string         `json:"configText,omitempty"`
	Manifest          *WfManifest     `json:"manifest,omitempty"`
	Nextflow          *WfNextflow     `json:"nextflow,omitempty"`
	Stats             *WfStats        `json:"stats,omitempty"`
	ErrorMessage      *string         `json:"errorMessage,omitempty"`
	ErrorReport       *string         `json:"errorReport,omitempty"`
	Deleted           *bool           `json:"deleted,omitempty"`
	ProjectDir        *string         `json:"projectDir,omitempty"`
	HomeDir           *string         `json:"homeDir,omitempty"`
	Container         *string         `json:"container,omitempty"`
	Repository        *string         `json:"repository,omitempty"`
	ContainerEngine   *string         `json:"containerEngine,omitempty"`
	ScriptFile        *string         `json:"scriptFile,omitempty"`
	LaunchDir         *string         `json:"launchDir,omitempty"`
	Duration          *int64          `json:"duration,omitempty"`
	ExitStatus        *int            `json:"exitStatus,omitempty"`
	Resume            *bool           `json:"resume,omitempty"`
	Success           *bool           `json:"success,omitempty"`
}

func (w WorkflowDbDto) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(w, "", false)
}

func (w *WorkflowDbDto) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &w, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (w *WorkflowDbDto) GetMessages() []string {
	if w == nil {
		return nil
	}
	return w.Messages
}

func (w *WorkflowDbDto) GetID() *string {
	if w == nil {
		return nil
	}
	return w.ID
}

func (w *WorkflowDbDto) GetOwnerID() *int64 {
	if w == nil {
		return nil
	}
	return w.OwnerID
}

func (w *WorkflowDbDto) GetSubmit() *time.Time {
	if w == nil {
		return nil
	}
	return w.Submit
}

func (w *WorkflowDbDto) GetStart() *time.Time {
	if w == nil {
		return nil
	}
	return w.Start
}

func (w *WorkflowDbDto) GetComplete() *time.Time {
	if w == nil {
		return nil
	}
	return w.Complete
}

func (w *WorkflowDbDto) GetDateCreated() *time.Time {
	if w == nil {
		return nil
	}
	return w.DateCreated
}

func (w *WorkflowDbDto) GetLastUpdated() *time.Time {
	if w == nil {
		return nil
	}
	return w.LastUpdated
}

func (w *WorkflowDbDto) GetRunName() *string {
	if w == nil {
		return nil
	}
	return w.RunName
}

func (w *WorkflowDbDto) GetSessionID() *string {
	if w == nil {
		return nil
	}
	return w.SessionID
}

func (w *WorkflowDbDto) GetProfile() *string {
	if w == nil {
		return nil
	}
	return w.Profile
}

func (w *WorkflowDbDto) GetWorkDir() *string {
	if w == nil {
		return nil
	}
	return w.WorkDir
}

func (w *WorkflowDbDto) GetCommitID() *string {
	if w == nil {
		return nil
	}
	return w.CommitID
}

func (w *WorkflowDbDto) GetUserName() *string {
	if w == nil {
		return nil
	}
	return w.UserName
}

func (w *WorkflowDbDto) GetScriptID() *string {
	if w == nil {
		return nil
	}
	return w.ScriptID
}

func (w *WorkflowDbDto) GetRevision() *string {
	if w == nil {
		return nil
	}
	return w.Revision
}

func (w *WorkflowDbDto) GetCommandLine() *string {
	if w == nil {
		return nil
	}
	return w.CommandLine
}

func (w *WorkflowDbDto) GetProjectName() *string {
	if w == nil {
		return nil
	}
	return w.ProjectName
}

func (w *WorkflowDbDto) GetScriptName() *string {
	if w == nil {
		return nil
	}
	return w.ScriptName
}

func (w *WorkflowDbDto) GetLaunchID() *string {
	if w == nil {
		return nil
	}
	return w.LaunchID
}

func (w *WorkflowDbDto) GetStatus() *WorkflowStatus {
	if w == nil {
		return nil
	}
	return w.Status
}

func (w *WorkflowDbDto) GetRequiresAttention() *bool {
	if w == nil {
		return nil
	}
	return w.RequiresAttention
}

func (w *WorkflowDbDto) GetConfigFiles() []string {
	if w == nil {
		return nil
	}
	return w.ConfigFiles
}

func (w *WorkflowDbDto) GetParams() map[string]any {
	if w == nil {
		return nil
	}
	return w.Params
}

func (w *WorkflowDbDto) GetConfigText() *string {
	if w == nil {
		return nil
	}
	return w.ConfigText
}

func (w *WorkflowDbDto) GetManifest() *WfManifest {
	if w == nil {
		return nil
	}
	return w.Manifest
}

func (w *WorkflowDbDto) GetNextflow() *WfNextflow {
	if w == nil {
		return nil
	}
	return w.Nextflow
}

func (w *WorkflowDbDto) GetStats() *WfStats {
	if w == nil {
		return nil
	}
	return w.Stats
}

func (w *WorkflowDbDto) GetErrorMessage() *string {
	if w == nil {
		return nil
	}
	return w.ErrorMessage
}

func (w *WorkflowDbDto) GetErrorReport() *string {
	if w == nil {
		return nil
	}
	return w.ErrorReport
}

func (w *WorkflowDbDto) GetDeleted() *bool {
	if w == nil {
		return nil
	}
	return w.Deleted
}

func (w *WorkflowDbDto) GetProjectDir() *string {
	if w == nil {
		return nil
	}
	return w.ProjectDir
}

func (w *WorkflowDbDto) GetHomeDir() *string {
	if w == nil {
		return nil
	}
	return w.HomeDir
}

func (w *WorkflowDbDto) GetContainer() *string {
	if w == nil {
		return nil
	}
	return w.Container
}

func (w *WorkflowDbDto) GetRepository() *string {
	if w == nil {
		return nil
	}
	return w.Repository
}

func (w *WorkflowDbDto) GetContainerEngine() *string {
	if w == nil {
		return nil
	}
	return w.ContainerEngine
}

func (w *WorkflowDbDto) GetScriptFile() *string {
	if w == nil {
		return nil
	}
	return w.ScriptFile
}

func (w *WorkflowDbDto) GetLaunchDir() *string {
	if w == nil {
		return nil
	}
	return w.LaunchDir
}

func (w *WorkflowDbDto) GetDuration() *int64 {
	if w == nil {
		return nil
	}
	return w.Duration
}

func (w *WorkflowDbDto) GetExitStatus() *int {
	if w == nil {
		return nil
	}
	return w.ExitStatus
}

func (w *WorkflowDbDto) GetResume() *bool {
	if w == nil {
		return nil
	}
	return w.Resume
}

func (w *WorkflowDbDto) GetSuccess() *bool {
	if w == nil {
		return nil
	}
	return w.Success
}
