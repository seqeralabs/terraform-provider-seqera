// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/seqeralabs/terraform-provider-seqera/internal/sdk/internal/utils"
	"time"
)

// GitlabCredentialProviderType - Cloud provider type (automatically set to "gitlab")
type GitlabCredentialProviderType string

const (
	GitlabCredentialProviderTypeGitlab GitlabCredentialProviderType = "gitlab"
)

func (e GitlabCredentialProviderType) ToPointer() *GitlabCredentialProviderType {
	return &e
}
func (e *GitlabCredentialProviderType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gitlab":
		*e = GitlabCredentialProviderType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GitlabCredentialProviderType: %v", v)
	}
}

type GitlabCredentialKeys struct {
	// GitLab Personal Access Token or Project Access Token (required, sensitive)
	Token string `json:"token"`
	// Repository base URL for self-hosted GitLab server (optional). Leave empty for GitLab.com. Example: https://gitlab.mycompany.com
	BaseURL *string `json:"baseUrl,omitempty"`
}

func (g *GitlabCredentialKeys) GetToken() string {
	if g == nil {
		return ""
	}
	return g.Token
}

func (g *GitlabCredentialKeys) GetBaseURL() *string {
	if g == nil {
		return nil
	}
	return g.BaseURL
}

type GitlabCredential struct {
	// Unique identifier for the credential (max 22 characters)
	ID *string `json:"id,omitempty"`
	// Display name for the credential (max 100 characters)
	Name string `json:"name"`
	// Cloud provider type (automatically set to "gitlab")
	ProviderType *GitlabCredentialProviderType `default:"gitlab" json:"provider"`
	// Flag indicating if the credential has been soft-deleted
	Deleted *bool `json:"deleted,omitempty"`
	// Timestamp when the credential was last used
	LastUsed *time.Time `json:"lastUsed,omitempty"`
	// Timestamp when the credential was created
	DateCreated *time.Time `json:"dateCreated,omitempty"`
	// Timestamp when the credential was last updated
	LastUpdated *time.Time           `json:"lastUpdated,omitempty"`
	Keys        GitlabCredentialKeys `json:"keys"`
}

func (g GitlabCredential) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GitlabCredential) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, []string{"name", "keys"}); err != nil {
		return err
	}
	return nil
}

func (g *GitlabCredential) GetID() *string {
	if g == nil {
		return nil
	}
	return g.ID
}

func (g *GitlabCredential) GetName() string {
	if g == nil {
		return ""
	}
	return g.Name
}

func (g *GitlabCredential) GetProviderType() *GitlabCredentialProviderType {
	if g == nil {
		return nil
	}
	return g.ProviderType
}

func (g *GitlabCredential) GetDeleted() *bool {
	if g == nil {
		return nil
	}
	return g.Deleted
}

func (g *GitlabCredential) GetLastUsed() *time.Time {
	if g == nil {
		return nil
	}
	return g.LastUsed
}

func (g *GitlabCredential) GetDateCreated() *time.Time {
	if g == nil {
		return nil
	}
	return g.DateCreated
}

func (g *GitlabCredential) GetLastUpdated() *time.Time {
	if g == nil {
		return nil
	}
	return g.LastUpdated
}

func (g *GitlabCredential) GetKeys() GitlabCredentialKeys {
	if g == nil {
		return GitlabCredentialKeys{}
	}
	return g.Keys
}

type GitlabCredentialKeysOutput struct {
}

type GitlabCredentialOutput struct {
	// Unique identifier for the credential (max 22 characters)
	ID *string `json:"id,omitempty"`
	// Display name for the credential (max 100 characters)
	Name string `json:"name"`
	// Cloud provider type (automatically set to "gitlab")
	ProviderType *GitlabCredentialProviderType `default:"gitlab" json:"provider"`
	// Flag indicating if the credential has been soft-deleted
	Deleted *bool `json:"deleted,omitempty"`
	// Timestamp when the credential was last used
	LastUsed *time.Time `json:"lastUsed,omitempty"`
	// Timestamp when the credential was created
	DateCreated *time.Time `json:"dateCreated,omitempty"`
	// Timestamp when the credential was last updated
	LastUpdated *time.Time                 `json:"lastUpdated,omitempty"`
	Keys        GitlabCredentialKeysOutput `json:"keys"`
}

func (g GitlabCredentialOutput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GitlabCredentialOutput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, []string{"name", "keys"}); err != nil {
		return err
	}
	return nil
}

func (g *GitlabCredentialOutput) GetID() *string {
	if g == nil {
		return nil
	}
	return g.ID
}

func (g *GitlabCredentialOutput) GetName() string {
	if g == nil {
		return ""
	}
	return g.Name
}

func (g *GitlabCredentialOutput) GetProviderType() *GitlabCredentialProviderType {
	if g == nil {
		return nil
	}
	return g.ProviderType
}

func (g *GitlabCredentialOutput) GetDeleted() *bool {
	if g == nil {
		return nil
	}
	return g.Deleted
}

func (g *GitlabCredentialOutput) GetLastUsed() *time.Time {
	if g == nil {
		return nil
	}
	return g.LastUsed
}

func (g *GitlabCredentialOutput) GetDateCreated() *time.Time {
	if g == nil {
		return nil
	}
	return g.DateCreated
}

func (g *GitlabCredentialOutput) GetLastUpdated() *time.Time {
	if g == nil {
		return nil
	}
	return g.LastUpdated
}

func (g *GitlabCredentialOutput) GetKeys() GitlabCredentialKeysOutput {
	if g == nil {
		return GitlabCredentialKeysOutput{}
	}
	return g.Keys
}
