// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/seqeralabs/terraform-provider-seqera/internal/sdk/internal/utils"
	"time"
)

// GitLabCredentialProviderType - Cloud provider type (automatically set to "gitlab")
type GitLabCredentialProviderType string

const (
	GitLabCredentialProviderTypeGitlab GitLabCredentialProviderType = "gitlab"
)

func (e GitLabCredentialProviderType) ToPointer() *GitLabCredentialProviderType {
	return &e
}
func (e *GitLabCredentialProviderType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gitlab":
		*e = GitLabCredentialProviderType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GitLabCredentialProviderType: %v", v)
	}
}

type GitLabCredentialKeys struct {
	// GitLab Personal Access Token or Project Access Token (required, sensitive)
	Token string `json:"token"`
	// Repository base URL for self-hosted GitLab server (optional). Leave empty for GitLab.com. Example: https://gitlab.mycompany.com
	BaseURL *string `json:"baseUrl,omitempty"`
}

func (g *GitLabCredentialKeys) GetToken() string {
	if g == nil {
		return ""
	}
	return g.Token
}

func (g *GitLabCredentialKeys) GetBaseURL() *string {
	if g == nil {
		return nil
	}
	return g.BaseURL
}

type GitLabCredential struct {
	// Unique identifier for the credential (max 22 characters)
	CredentialsID *string `json:"id,omitempty"`
	// Display name for the credential (max 100 characters)
	Name string `json:"name"`
	// Cloud provider type (automatically set to "gitlab")
	ProviderType *GitLabCredentialProviderType `default:"gitlab" json:"provider"`
	// Flag indicating if the credential has been soft-deleted
	Deleted *bool `json:"deleted,omitempty"`
	// Timestamp when the credential was last used
	LastUsed *time.Time `json:"lastUsed,omitempty"`
	// Timestamp when the credential was created
	DateCreated *time.Time `json:"dateCreated,omitempty"`
	// Timestamp when the credential was last updated
	LastUpdated *time.Time           `json:"lastUpdated,omitempty"`
	Keys        GitLabCredentialKeys `json:"keys"`
}

func (g GitLabCredential) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GitLabCredential) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, []string{"name", "keys"}); err != nil {
		return err
	}
	return nil
}

func (g *GitLabCredential) GetCredentialsID() *string {
	if g == nil {
		return nil
	}
	return g.CredentialsID
}

func (g *GitLabCredential) GetName() string {
	if g == nil {
		return ""
	}
	return g.Name
}

func (g *GitLabCredential) GetProviderType() *GitLabCredentialProviderType {
	if g == nil {
		return nil
	}
	return g.ProviderType
}

func (g *GitLabCredential) GetDeleted() *bool {
	if g == nil {
		return nil
	}
	return g.Deleted
}

func (g *GitLabCredential) GetLastUsed() *time.Time {
	if g == nil {
		return nil
	}
	return g.LastUsed
}

func (g *GitLabCredential) GetDateCreated() *time.Time {
	if g == nil {
		return nil
	}
	return g.DateCreated
}

func (g *GitLabCredential) GetLastUpdated() *time.Time {
	if g == nil {
		return nil
	}
	return g.LastUpdated
}

func (g *GitLabCredential) GetKeys() GitLabCredentialKeys {
	if g == nil {
		return GitLabCredentialKeys{}
	}
	return g.Keys
}

type GitLabCredentialKeysOutput struct {
}

type GitLabCredentialOutput struct {
	// Unique identifier for the credential (max 22 characters)
	CredentialsID *string `json:"id,omitempty"`
	// Display name for the credential (max 100 characters)
	Name string `json:"name"`
	// Cloud provider type (automatically set to "gitlab")
	ProviderType *GitLabCredentialProviderType `default:"gitlab" json:"provider"`
	// Flag indicating if the credential has been soft-deleted
	Deleted *bool `json:"deleted,omitempty"`
	// Timestamp when the credential was last used
	LastUsed *time.Time `json:"lastUsed,omitempty"`
	// Timestamp when the credential was created
	DateCreated *time.Time `json:"dateCreated,omitempty"`
	// Timestamp when the credential was last updated
	LastUpdated *time.Time                 `json:"lastUpdated,omitempty"`
	Keys        GitLabCredentialKeysOutput `json:"keys"`
}

func (g GitLabCredentialOutput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GitLabCredentialOutput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, []string{"name", "keys"}); err != nil {
		return err
	}
	return nil
}

func (g *GitLabCredentialOutput) GetCredentialsID() *string {
	if g == nil {
		return nil
	}
	return g.CredentialsID
}

func (g *GitLabCredentialOutput) GetName() string {
	if g == nil {
		return ""
	}
	return g.Name
}

func (g *GitLabCredentialOutput) GetProviderType() *GitLabCredentialProviderType {
	if g == nil {
		return nil
	}
	return g.ProviderType
}

func (g *GitLabCredentialOutput) GetDeleted() *bool {
	if g == nil {
		return nil
	}
	return g.Deleted
}

func (g *GitLabCredentialOutput) GetLastUsed() *time.Time {
	if g == nil {
		return nil
	}
	return g.LastUsed
}

func (g *GitLabCredentialOutput) GetDateCreated() *time.Time {
	if g == nil {
		return nil
	}
	return g.DateCreated
}

func (g *GitLabCredentialOutput) GetLastUpdated() *time.Time {
	if g == nil {
		return nil
	}
	return g.LastUpdated
}

func (g *GitLabCredentialOutput) GetKeys() GitLabCredentialKeysOutput {
	if g == nil {
		return GitLabCredentialKeysOutput{}
	}
	return g.Keys
}
