// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/seqeralabs/terraform-provider-seqera/internal/sdk/internal/utils"
	"time"
)

// TowerAgentCredentialProviderType - Cloud provider type (automatically set to "agent")
type TowerAgentCredentialProviderType string

const (
	TowerAgentCredentialProviderTypeAgent TowerAgentCredentialProviderType = "agent"
)

func (e TowerAgentCredentialProviderType) ToPointer() *TowerAgentCredentialProviderType {
	return &e
}
func (e *TowerAgentCredentialProviderType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "agent":
		*e = TowerAgentCredentialProviderType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TowerAgentCredentialProviderType: %v", v)
	}
}

type TowerAgentCredentialKeys struct {
	// Tower Agent connection ID (required). A unique UUID string used to identify the Tower Agent instance. Generate using random_uuid resource.
	ConnectionID string `json:"connectionId"`
	// Working directory for the Tower Agent (optional)
	WorkDir *string `json:"workDir,omitempty"`
}

func (t *TowerAgentCredentialKeys) GetConnectionID() string {
	if t == nil {
		return ""
	}
	return t.ConnectionID
}

func (t *TowerAgentCredentialKeys) GetWorkDir() *string {
	if t == nil {
		return nil
	}
	return t.WorkDir
}

type TowerAgentCredential struct {
	// Unique identifier for the credential (max 22 characters)
	CredentialsID *string `json:"id,omitempty"`
	// Display name for the credential (max 100 characters)
	Name string `json:"name"`
	// Cloud provider type (automatically set to "agent")
	ProviderType *TowerAgentCredentialProviderType `default:"agent" json:"provider"`
	// Flag indicating if the credential has been soft-deleted
	Deleted *bool `json:"deleted,omitempty"`
	// Timestamp when the credential was last used
	LastUsed *time.Time `json:"lastUsed,omitempty"`
	// Timestamp when the credential was created
	DateCreated *time.Time `json:"dateCreated,omitempty"`
	// Timestamp when the credential was last updated
	LastUpdated *time.Time               `json:"lastUpdated,omitempty"`
	Keys        TowerAgentCredentialKeys `json:"keys"`
}

func (t TowerAgentCredential) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TowerAgentCredential) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, []string{"name", "keys"}); err != nil {
		return err
	}
	return nil
}

func (t *TowerAgentCredential) GetCredentialsID() *string {
	if t == nil {
		return nil
	}
	return t.CredentialsID
}

func (t *TowerAgentCredential) GetName() string {
	if t == nil {
		return ""
	}
	return t.Name
}

func (t *TowerAgentCredential) GetProviderType() *TowerAgentCredentialProviderType {
	if t == nil {
		return nil
	}
	return t.ProviderType
}

func (t *TowerAgentCredential) GetDeleted() *bool {
	if t == nil {
		return nil
	}
	return t.Deleted
}

func (t *TowerAgentCredential) GetLastUsed() *time.Time {
	if t == nil {
		return nil
	}
	return t.LastUsed
}

func (t *TowerAgentCredential) GetDateCreated() *time.Time {
	if t == nil {
		return nil
	}
	return t.DateCreated
}

func (t *TowerAgentCredential) GetLastUpdated() *time.Time {
	if t == nil {
		return nil
	}
	return t.LastUpdated
}

func (t *TowerAgentCredential) GetKeys() TowerAgentCredentialKeys {
	if t == nil {
		return TowerAgentCredentialKeys{}
	}
	return t.Keys
}

type TowerAgentCredentialKeysOutput struct {
}

type TowerAgentCredentialOutput struct {
	// Unique identifier for the credential (max 22 characters)
	CredentialsID *string `json:"id,omitempty"`
	// Display name for the credential (max 100 characters)
	Name string `json:"name"`
	// Cloud provider type (automatically set to "agent")
	ProviderType *TowerAgentCredentialProviderType `default:"agent" json:"provider"`
	// Flag indicating if the credential has been soft-deleted
	Deleted *bool `json:"deleted,omitempty"`
	// Timestamp when the credential was last used
	LastUsed *time.Time `json:"lastUsed,omitempty"`
	// Timestamp when the credential was created
	DateCreated *time.Time `json:"dateCreated,omitempty"`
	// Timestamp when the credential was last updated
	LastUpdated *time.Time                     `json:"lastUpdated,omitempty"`
	Keys        TowerAgentCredentialKeysOutput `json:"keys"`
}

func (t TowerAgentCredentialOutput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TowerAgentCredentialOutput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, []string{"name", "keys"}); err != nil {
		return err
	}
	return nil
}

func (t *TowerAgentCredentialOutput) GetCredentialsID() *string {
	if t == nil {
		return nil
	}
	return t.CredentialsID
}

func (t *TowerAgentCredentialOutput) GetName() string {
	if t == nil {
		return ""
	}
	return t.Name
}

func (t *TowerAgentCredentialOutput) GetProviderType() *TowerAgentCredentialProviderType {
	if t == nil {
		return nil
	}
	return t.ProviderType
}

func (t *TowerAgentCredentialOutput) GetDeleted() *bool {
	if t == nil {
		return nil
	}
	return t.Deleted
}

func (t *TowerAgentCredentialOutput) GetLastUsed() *time.Time {
	if t == nil {
		return nil
	}
	return t.LastUsed
}

func (t *TowerAgentCredentialOutput) GetDateCreated() *time.Time {
	if t == nil {
		return nil
	}
	return t.DateCreated
}

func (t *TowerAgentCredentialOutput) GetLastUpdated() *time.Time {
	if t == nil {
		return nil
	}
	return t.LastUpdated
}

func (t *TowerAgentCredentialOutput) GetKeys() TowerAgentCredentialKeysOutput {
	if t == nil {
		return TowerAgentCredentialKeysOutput{}
	}
	return t.Keys
}
