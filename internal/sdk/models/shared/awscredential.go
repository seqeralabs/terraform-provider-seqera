// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/seqeralabs/terraform-provider-seqera/internal/sdk/internal/utils"
	"time"
)

// AWSCredentialProviderType - Cloud provider type (automatically set to "aws")
type AWSCredentialProviderType string

const (
	AWSCredentialProviderTypeAws AWSCredentialProviderType = "aws"
)

func (e AWSCredentialProviderType) ToPointer() *AWSCredentialProviderType {
	return &e
}
func (e *AWSCredentialProviderType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "aws":
		*e = AWSCredentialProviderType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AWSCredentialProviderType: %v", v)
	}
}

type AWSCredentialKeys struct {
	// AWS access key ID (required). Must start with AKIA (standard) or ASIA (temporary).
	AccessKey string `json:"accessKey"`
	// AWS secret access key (required, sensitive). Must be at least 40 characters.
	SecretKey string `json:"secretKey"`
	// IAM role ARN to assume (optional, recommended for enhanced security). Format: arn:aws:iam::ACCOUNT_ID:role/ROLE_NAME
	AssumeRoleArn *string `json:"assumeRoleArn,omitempty"`
}

func (a *AWSCredentialKeys) GetAccessKey() string {
	if a == nil {
		return ""
	}
	return a.AccessKey
}

func (a *AWSCredentialKeys) GetSecretKey() string {
	if a == nil {
		return ""
	}
	return a.SecretKey
}

func (a *AWSCredentialKeys) GetAssumeRoleArn() *string {
	if a == nil {
		return nil
	}
	return a.AssumeRoleArn
}

type AWSCredential struct {
	// Unique identifier for the credential (max 22 characters)
	ID *string `json:"id,omitempty"`
	// Display name for the credential. Must be 2-99 characters using only letters, numbers, underscores, and hyphens. No spaces allowed.
	Name string `json:"name"`
	// Cloud provider type (automatically set to "aws")
	ProviderType *AWSCredentialProviderType `default:"aws" json:"provider"`
	// Flag indicating if the credential has been soft-deleted
	Deleted *bool `json:"deleted,omitempty"`
	// Timestamp when the credential was last used
	LastUsed *time.Time `json:"lastUsed,omitempty"`
	// Timestamp when the credential was created
	DateCreated *time.Time `json:"dateCreated,omitempty"`
	// Timestamp when the credential was last updated
	LastUpdated *time.Time        `json:"lastUpdated,omitempty"`
	Keys        AWSCredentialKeys `json:"keys"`
}

func (a AWSCredential) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AWSCredential) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, []string{"name", "keys"}); err != nil {
		return err
	}
	return nil
}

func (a *AWSCredential) GetID() *string {
	if a == nil {
		return nil
	}
	return a.ID
}

func (a *AWSCredential) GetName() string {
	if a == nil {
		return ""
	}
	return a.Name
}

func (a *AWSCredential) GetProviderType() *AWSCredentialProviderType {
	if a == nil {
		return nil
	}
	return a.ProviderType
}

func (a *AWSCredential) GetDeleted() *bool {
	if a == nil {
		return nil
	}
	return a.Deleted
}

func (a *AWSCredential) GetLastUsed() *time.Time {
	if a == nil {
		return nil
	}
	return a.LastUsed
}

func (a *AWSCredential) GetDateCreated() *time.Time {
	if a == nil {
		return nil
	}
	return a.DateCreated
}

func (a *AWSCredential) GetLastUpdated() *time.Time {
	if a == nil {
		return nil
	}
	return a.LastUpdated
}

func (a *AWSCredential) GetKeys() AWSCredentialKeys {
	if a == nil {
		return AWSCredentialKeys{}
	}
	return a.Keys
}

type AWSCredentialKeysOutput struct {
	// AWS access key ID (required). Must start with AKIA (standard) or ASIA (temporary).
	AccessKey string `json:"accessKey"`
}

func (a *AWSCredentialKeysOutput) GetAccessKey() string {
	if a == nil {
		return ""
	}
	return a.AccessKey
}

type AWSCredentialOutput struct {
	// Unique identifier for the credential (max 22 characters)
	ID *string `json:"id,omitempty"`
	// Display name for the credential. Must be 2-99 characters using only letters, numbers, underscores, and hyphens. No spaces allowed.
	Name string `json:"name"`
	// Cloud provider type (automatically set to "aws")
	ProviderType *AWSCredentialProviderType `default:"aws" json:"provider"`
	// Flag indicating if the credential has been soft-deleted
	Deleted *bool `json:"deleted,omitempty"`
	// Timestamp when the credential was last used
	LastUsed *time.Time `json:"lastUsed,omitempty"`
	// Timestamp when the credential was created
	DateCreated *time.Time `json:"dateCreated,omitempty"`
	// Timestamp when the credential was last updated
	LastUpdated *time.Time              `json:"lastUpdated,omitempty"`
	Keys        AWSCredentialKeysOutput `json:"keys"`
}

func (a AWSCredentialOutput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AWSCredentialOutput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, []string{"name", "keys"}); err != nil {
		return err
	}
	return nil
}

func (a *AWSCredentialOutput) GetID() *string {
	if a == nil {
		return nil
	}
	return a.ID
}

func (a *AWSCredentialOutput) GetName() string {
	if a == nil {
		return ""
	}
	return a.Name
}

func (a *AWSCredentialOutput) GetProviderType() *AWSCredentialProviderType {
	if a == nil {
		return nil
	}
	return a.ProviderType
}

func (a *AWSCredentialOutput) GetDeleted() *bool {
	if a == nil {
		return nil
	}
	return a.Deleted
}

func (a *AWSCredentialOutput) GetLastUsed() *time.Time {
	if a == nil {
		return nil
	}
	return a.LastUsed
}

func (a *AWSCredentialOutput) GetDateCreated() *time.Time {
	if a == nil {
		return nil
	}
	return a.DateCreated
}

func (a *AWSCredentialOutput) GetLastUpdated() *time.Time {
	if a == nil {
		return nil
	}
	return a.LastUpdated
}

func (a *AWSCredentialOutput) GetKeys() AWSCredentialKeysOutput {
	if a == nil {
		return AWSCredentialKeysOutput{}
	}
	return a.Keys
}
