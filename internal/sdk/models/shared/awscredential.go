// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/seqeralabs/terraform-provider-seqera/internal/sdk/internal/utils"
	"time"
)

// AWSCredentialProviderType - Cloud provider type (aws)
type AWSCredentialProviderType string

const (
	AWSCredentialProviderTypeAws AWSCredentialProviderType = "aws"
)

func (e AWSCredentialProviderType) ToPointer() *AWSCredentialProviderType {
	return &e
}
func (e *AWSCredentialProviderType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "aws":
		*e = AWSCredentialProviderType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AWSCredentialProviderType: %v", v)
	}
}

type AWSCredential struct {
	// Unique identifier for the credential (max 22 characters)
	CredentialsID *string `json:"id,omitempty"`
	// Display name for the credential (max 100 characters)
	Name string `json:"name"`
	// Optional description explaining the purpose of the credential
	Description *string `json:"description,omitempty"`
	// Cloud provider type (aws)
	ProviderType AWSCredentialProviderType `json:"provider"`
	// Base URL for the service
	BaseURL *string `json:"baseUrl,omitempty"`
	// Category of the credential
	Category *string `json:"category,omitempty"`
	// Flag indicating if the credential has been soft-deleted
	Deleted *bool `json:"deleted,omitempty"`
	// Timestamp when the credential was last used
	LastUsed *time.Time `json:"lastUsed,omitempty"`
	// Timestamp when the credential was created
	DateCreated *time.Time `json:"dateCreated,omitempty"`
	// Timestamp when the credential was last updated
	LastUpdated *time.Time      `json:"lastUpdated,omitempty"`
	Keys        AwsSecurityKeys `json:"keys"`
}

func (a AWSCredential) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AWSCredential) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, []string{"name", "provider", "keys"}); err != nil {
		return err
	}
	return nil
}

func (a *AWSCredential) GetCredentialsID() *string {
	if a == nil {
		return nil
	}
	return a.CredentialsID
}

func (a *AWSCredential) GetName() string {
	if a == nil {
		return ""
	}
	return a.Name
}

func (a *AWSCredential) GetDescription() *string {
	if a == nil {
		return nil
	}
	return a.Description
}

func (a *AWSCredential) GetProviderType() AWSCredentialProviderType {
	if a == nil {
		return AWSCredentialProviderType("")
	}
	return a.ProviderType
}

func (a *AWSCredential) GetBaseURL() *string {
	if a == nil {
		return nil
	}
	return a.BaseURL
}

func (a *AWSCredential) GetCategory() *string {
	if a == nil {
		return nil
	}
	return a.Category
}

func (a *AWSCredential) GetDeleted() *bool {
	if a == nil {
		return nil
	}
	return a.Deleted
}

func (a *AWSCredential) GetLastUsed() *time.Time {
	if a == nil {
		return nil
	}
	return a.LastUsed
}

func (a *AWSCredential) GetDateCreated() *time.Time {
	if a == nil {
		return nil
	}
	return a.DateCreated
}

func (a *AWSCredential) GetLastUpdated() *time.Time {
	if a == nil {
		return nil
	}
	return a.LastUpdated
}

func (a *AWSCredential) GetKeys() AwsSecurityKeys {
	if a == nil {
		return AwsSecurityKeys{}
	}
	return a.Keys
}

type AWSCredentialOutput struct {
	// Unique identifier for the credential (max 22 characters)
	CredentialsID *string `json:"id,omitempty"`
	// Display name for the credential (max 100 characters)
	Name string `json:"name"`
	// Optional description explaining the purpose of the credential
	Description *string `json:"description,omitempty"`
	// Cloud provider type (aws)
	ProviderType AWSCredentialProviderType `json:"provider"`
	// Base URL for the service
	BaseURL *string `json:"baseUrl,omitempty"`
	// Category of the credential
	Category *string `json:"category,omitempty"`
	// Flag indicating if the credential has been soft-deleted
	Deleted *bool `json:"deleted,omitempty"`
	// Timestamp when the credential was last used
	LastUsed *time.Time `json:"lastUsed,omitempty"`
	// Timestamp when the credential was created
	DateCreated *time.Time `json:"dateCreated,omitempty"`
	// Timestamp when the credential was last updated
	LastUpdated *time.Time            `json:"lastUpdated,omitempty"`
	Keys        AwsSecurityKeysOutput `json:"keys"`
}

func (a AWSCredentialOutput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AWSCredentialOutput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, []string{"name", "provider", "keys"}); err != nil {
		return err
	}
	return nil
}

func (a *AWSCredentialOutput) GetCredentialsID() *string {
	if a == nil {
		return nil
	}
	return a.CredentialsID
}

func (a *AWSCredentialOutput) GetName() string {
	if a == nil {
		return ""
	}
	return a.Name
}

func (a *AWSCredentialOutput) GetDescription() *string {
	if a == nil {
		return nil
	}
	return a.Description
}

func (a *AWSCredentialOutput) GetProviderType() AWSCredentialProviderType {
	if a == nil {
		return AWSCredentialProviderType("")
	}
	return a.ProviderType
}

func (a *AWSCredentialOutput) GetBaseURL() *string {
	if a == nil {
		return nil
	}
	return a.BaseURL
}

func (a *AWSCredentialOutput) GetCategory() *string {
	if a == nil {
		return nil
	}
	return a.Category
}

func (a *AWSCredentialOutput) GetDeleted() *bool {
	if a == nil {
		return nil
	}
	return a.Deleted
}

func (a *AWSCredentialOutput) GetLastUsed() *time.Time {
	if a == nil {
		return nil
	}
	return a.LastUsed
}

func (a *AWSCredentialOutput) GetDateCreated() *time.Time {
	if a == nil {
		return nil
	}
	return a.DateCreated
}

func (a *AWSCredentialOutput) GetLastUpdated() *time.Time {
	if a == nil {
		return nil
	}
	return a.LastUpdated
}

func (a *AWSCredentialOutput) GetKeys() AwsSecurityKeysOutput {
	if a == nil {
		return AwsSecurityKeysOutput{}
	}
	return a.Keys
}
