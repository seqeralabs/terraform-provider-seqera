// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/speakeasy/terraform-provider-seqera/internal/sdk/internal/utils"
)

type GithubActionConfig struct {
	Discriminator *string  `json:"discriminator,omitempty"`
	Events        []string `json:"events,omitempty"`
}

func (o *GithubActionConfig) GetDiscriminator() *string {
	if o == nil {
		return nil
	}
	return o.Discriminator
}

func (o *GithubActionConfig) GetEvents() []string {
	if o == nil {
		return nil
	}
	return o.Events
}

type ActionTowerActionConfig struct {
	Discriminator *string `json:"discriminator,omitempty"`
}

func (o *ActionTowerActionConfig) GetDiscriminator() *string {
	if o == nil {
		return nil
	}
	return o.Discriminator
}

type ActionConfigTypeType string

const (
	ActionConfigTypeTypeGithub ActionConfigTypeType = "github"
	ActionConfigTypeTypeTower  ActionConfigTypeType = "tower"
)

type ActionConfigType struct {
	ActionTowerActionConfig *ActionTowerActionConfig `queryParam:"inline"`
	GithubActionConfig      *GithubActionConfig      `queryParam:"inline"`

	Type ActionConfigTypeType
}

func CreateActionConfigTypeGithub(github GithubActionConfig) ActionConfigType {
	typ := ActionConfigTypeTypeGithub

	typStr := string(typ)
	github.Discriminator = &typStr

	return ActionConfigType{
		GithubActionConfig: &github,
		Type:               typ,
	}
}

func CreateActionConfigTypeTower(tower ActionTowerActionConfig) ActionConfigType {
	typ := ActionConfigTypeTypeTower

	typStr := string(typ)
	tower.Discriminator = &typStr

	return ActionConfigType{
		ActionTowerActionConfig: &tower,
		Type:                    typ,
	}
}

func (u *ActionConfigType) UnmarshalJSON(data []byte) error {

	type discriminator struct {
		Discriminator string `json:"discriminator"`
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.Discriminator {
	case "github":
		githubActionConfig := new(GithubActionConfig)
		if err := utils.UnmarshalJSON(data, &githubActionConfig, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Discriminator == github) type GithubActionConfig within ActionConfigType: %w", string(data), err)
		}

		u.GithubActionConfig = githubActionConfig
		u.Type = ActionConfigTypeTypeGithub
		return nil
	case "tower":
		actionTowerActionConfig := new(ActionTowerActionConfig)
		if err := utils.UnmarshalJSON(data, &actionTowerActionConfig, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Discriminator == tower) type ActionTowerActionConfig within ActionConfigType: %w", string(data), err)
		}

		u.ActionTowerActionConfig = actionTowerActionConfig
		u.Type = ActionConfigTypeTypeTower
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ActionConfigType", string(data))
}

func (u ActionConfigType) MarshalJSON() ([]byte, error) {
	if u.ActionTowerActionConfig != nil {
		return utils.MarshalJSON(u.ActionTowerActionConfig, "", true)
	}

	if u.GithubActionConfig != nil {
		return utils.MarshalJSON(u.GithubActionConfig, "", true)
	}

	return nil, errors.New("could not marshal union type ActionConfigType: all fields are null")
}
