// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy/terraform-provider-seqera/internal/sdk/internal/utils"
	"time"
)

// CredentialsProviderType - Cloud or service provider type (e.g., aws, azure, gcp)
type CredentialsProviderType string

const (
	CredentialsProviderTypeAws           CredentialsProviderType = "aws"
	CredentialsProviderTypeAzure         CredentialsProviderType = "azure"
	CredentialsProviderTypeGoogle        CredentialsProviderType = "google"
	CredentialsProviderTypeGithub        CredentialsProviderType = "github"
	CredentialsProviderTypeGitlab        CredentialsProviderType = "gitlab"
	CredentialsProviderTypeBitbucket     CredentialsProviderType = "bitbucket"
	CredentialsProviderTypeSSH           CredentialsProviderType = "ssh"
	CredentialsProviderTypeK8s           CredentialsProviderType = "k8s"
	CredentialsProviderTypeContainerReg  CredentialsProviderType = "container-reg"
	CredentialsProviderTypeTwAgent       CredentialsProviderType = "tw-agent"
	CredentialsProviderTypeCodecommit    CredentialsProviderType = "codecommit"
	CredentialsProviderTypeGitea         CredentialsProviderType = "gitea"
	CredentialsProviderTypeAzurerepos    CredentialsProviderType = "azurerepos"
	CredentialsProviderTypeSeqeracompute CredentialsProviderType = "seqeracompute"
)

func (e CredentialsProviderType) ToPointer() *CredentialsProviderType {
	return &e
}
func (e *CredentialsProviderType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "aws":
		fallthrough
	case "azure":
		fallthrough
	case "google":
		fallthrough
	case "github":
		fallthrough
	case "gitlab":
		fallthrough
	case "bitbucket":
		fallthrough
	case "ssh":
		fallthrough
	case "k8s":
		fallthrough
	case "container-reg":
		fallthrough
	case "tw-agent":
		fallthrough
	case "codecommit":
		fallthrough
	case "gitea":
		fallthrough
	case "azurerepos":
		fallthrough
	case "seqeracompute":
		*e = CredentialsProviderType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CredentialsProviderType: %v", v)
	}
}

// CredentialsOutput - Represents credentials used for authentication with various platforms and services.
// Contains authentication information for accessing cloud providers, Git repositories,
// and other external services within the Seqera Platform.
type CredentialsOutput struct {
	// Unique identifier for the credential (max 22 characters)
	ID *string `json:"id,omitempty"`
	// Display name for the credential (max 100 characters)
	Name string `json:"name"`
	// Optional description explaining the purpose of the credential
	Description *string `json:"description,omitempty"`
	// Cloud or service provider type (e.g., aws, azure, gcp)
	ProviderType CredentialsProviderType `json:"provider"`
	BaseURL      *string                 `json:"baseUrl,omitempty"`
	Category     *string                 `json:"category,omitempty"`
	// Flag indicating if the credential has been soft-deleted
	Deleted *bool `json:"deleted,omitempty"`
	// Timestamp when the credential was last used
	LastUsed *time.Time `json:"lastUsed,omitempty"`
	// Timestamp when the credential was created
	DateCreated *time.Time         `json:"dateCreated,omitempty"`
	LastUpdated *time.Time         `json:"lastUpdated,omitempty"`
	Keys        SecurityKeysOutput `json:"keys"`
}

func (c CredentialsOutput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CredentialsOutput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CredentialsOutput) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *CredentialsOutput) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CredentialsOutput) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *CredentialsOutput) GetProviderType() CredentialsProviderType {
	if o == nil {
		return CredentialsProviderType("")
	}
	return o.ProviderType
}

func (o *CredentialsOutput) GetBaseURL() *string {
	if o == nil {
		return nil
	}
	return o.BaseURL
}

func (o *CredentialsOutput) GetCategory() *string {
	if o == nil {
		return nil
	}
	return o.Category
}

func (o *CredentialsOutput) GetDeleted() *bool {
	if o == nil {
		return nil
	}
	return o.Deleted
}

func (o *CredentialsOutput) GetLastUsed() *time.Time {
	if o == nil {
		return nil
	}
	return o.LastUsed
}

func (o *CredentialsOutput) GetDateCreated() *time.Time {
	if o == nil {
		return nil
	}
	return o.DateCreated
}

func (o *CredentialsOutput) GetLastUpdated() *time.Time {
	if o == nil {
		return nil
	}
	return o.LastUpdated
}

func (o *CredentialsOutput) GetKeys() SecurityKeysOutput {
	if o == nil {
		return SecurityKeysOutput{}
	}
	return o.Keys
}

func (o *CredentialsOutput) GetKeysGithub() *GitHubSecurityKeysOutput {
	return o.GetKeys().GitHubSecurityKeysOutput
}

func (o *CredentialsOutput) GetKeysAzurerepos() *AzureReposSecurityKeysOutput {
	return o.GetKeys().AzureReposSecurityKeysOutput
}

func (o *CredentialsOutput) GetKeysAzureEntra() *AzureEntraKeysOutput {
	return o.GetKeys().AzureEntraKeysOutput
}

func (o *CredentialsOutput) GetKeysContainerReg() *ContainerRegistryKeysOutput {
	return o.GetKeys().ContainerRegistryKeysOutput
}

func (o *CredentialsOutput) GetKeysTwAgent() *AgentSecurityKeys {
	return o.GetKeys().AgentSecurityKeys
}

func (o *CredentialsOutput) GetKeysK8s() *K8sSecurityKeysOutput {
	return o.GetKeys().K8sSecurityKeysOutput
}

func (o *CredentialsOutput) GetKeysSSH() *SSHSecurityKeysOutput {
	return o.GetKeys().SSHSecurityKeysOutput
}

func (o *CredentialsOutput) GetKeysGoogle() *GoogleSecurityKeysOutput {
	return o.GetKeys().GoogleSecurityKeysOutput
}

func (o *CredentialsOutput) GetKeysBitbucket() *BitBucketSecurityKeysOutput {
	return o.GetKeys().BitBucketSecurityKeysOutput
}

func (o *CredentialsOutput) GetKeysGitea() *GiteaSecurityKeysOutput {
	return o.GetKeys().GiteaSecurityKeysOutput
}

func (o *CredentialsOutput) GetKeysSeqeracompute() *SeqeraComputeSecurityKeysOutput {
	return o.GetKeys().SeqeraComputeSecurityKeysOutput
}

func (o *CredentialsOutput) GetKeysCodecommit() *CodeCommitSecurityKeysOutput {
	return o.GetKeys().CodeCommitSecurityKeysOutput
}

func (o *CredentialsOutput) GetKeysGitlab() *GitLabSecurityKeysOutput {
	return o.GetKeys().GitLabSecurityKeysOutput
}

func (o *CredentialsOutput) GetKeysAws() *AwsSecurityKeysOutput {
	return o.GetKeys().AwsSecurityKeysOutput
}

func (o *CredentialsOutput) GetKeysAzure() *AzureSecurityKeysOutput {
	return o.GetKeys().AzureSecurityKeysOutput
}

// CredentialsInput - Represents credentials used for authentication with various platforms and services.
// Contains authentication information for accessing cloud providers, Git repositories,
// and other external services within the Seqera Platform.
type CredentialsInput struct {
	// Unique identifier for the credential (max 22 characters)
	ID *string `json:"id,omitempty"`
	// Display name for the credential (max 100 characters)
	Name string `json:"name"`
	// Optional description explaining the purpose of the credential
	Description *string `json:"description,omitempty"`
	// Cloud or service provider type (e.g., aws, azure, gcp)
	ProviderType CredentialsProviderType `json:"provider"`
	BaseURL      *string                 `json:"baseUrl,omitempty"`
	Category     *string                 `json:"category,omitempty"`
	Keys         SecurityKeys            `json:"keys"`
}

func (o *CredentialsInput) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *CredentialsInput) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CredentialsInput) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *CredentialsInput) GetProviderType() CredentialsProviderType {
	if o == nil {
		return CredentialsProviderType("")
	}
	return o.ProviderType
}

func (o *CredentialsInput) GetBaseURL() *string {
	if o == nil {
		return nil
	}
	return o.BaseURL
}

func (o *CredentialsInput) GetCategory() *string {
	if o == nil {
		return nil
	}
	return o.Category
}

func (o *CredentialsInput) GetKeys() SecurityKeys {
	if o == nil {
		return SecurityKeys{}
	}
	return o.Keys
}

func (o *CredentialsInput) GetKeysGithub() *GitHubSecurityKeys {
	return o.GetKeys().GitHubSecurityKeys
}

func (o *CredentialsInput) GetKeysAzurerepos() *AzureReposSecurityKeys {
	return o.GetKeys().AzureReposSecurityKeys
}

func (o *CredentialsInput) GetKeysAzureEntra() *AzureEntraKeys {
	return o.GetKeys().AzureEntraKeys
}

func (o *CredentialsInput) GetKeysContainerReg() *ContainerRegistryKeys {
	return o.GetKeys().ContainerRegistryKeys
}

func (o *CredentialsInput) GetKeysTwAgent() *AgentSecurityKeys {
	return o.GetKeys().AgentSecurityKeys
}

func (o *CredentialsInput) GetKeysK8s() *K8sSecurityKeys {
	return o.GetKeys().K8sSecurityKeys
}

func (o *CredentialsInput) GetKeysSSH() *SSHSecurityKeys {
	return o.GetKeys().SSHSecurityKeys
}

func (o *CredentialsInput) GetKeysGoogle() *GoogleSecurityKeys {
	return o.GetKeys().GoogleSecurityKeys
}

func (o *CredentialsInput) GetKeysBitbucket() *BitBucketSecurityKeys {
	return o.GetKeys().BitBucketSecurityKeys
}

func (o *CredentialsInput) GetKeysGitea() *GiteaSecurityKeys {
	return o.GetKeys().GiteaSecurityKeys
}

func (o *CredentialsInput) GetKeysSeqeracompute() *SeqeraComputeSecurityKeys {
	return o.GetKeys().SeqeraComputeSecurityKeys
}

func (o *CredentialsInput) GetKeysCodecommit() *CodeCommitSecurityKeys {
	return o.GetKeys().CodeCommitSecurityKeys
}

func (o *CredentialsInput) GetKeysGitlab() *GitLabSecurityKeys {
	return o.GetKeys().GitLabSecurityKeys
}

func (o *CredentialsInput) GetKeysAws() *AwsSecurityKeys {
	return o.GetKeys().AwsSecurityKeys
}

func (o *CredentialsInput) GetKeysAzure() *AzureSecurityKeys {
	return o.GetKeys().AzureSecurityKeys
}
