// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/speakeasy/terraform-provider-seqera/internal/sdk/internal/utils"
)

type MoabConfiguration struct {
	// Working directory path for workflow execution
	WorkDir *string `json:"workDir,omitempty"`
	// Shell script to execute before workflow starts
	PreRunScript *string `json:"preRunScript,omitempty"`
	// Shell script to execute after workflow completes
	PostRunScript *string `json:"postRunScript,omitempty"`
	// Nextflow configuration settings and parameters
	NextflowConfig          *string `json:"nextflowConfig,omitempty"`
	LaunchDir               *string `json:"launchDir,omitempty"`
	UserName                *string `json:"userName,omitempty"`
	HostName                *string `json:"hostName,omitempty"`
	Port                    *int    `json:"port,omitempty"`
	HeadQueue               *string `json:"headQueue,omitempty"`
	ComputeQueue            *string `json:"computeQueue,omitempty"`
	MaxQueueSize            *int    `json:"maxQueueSize,omitempty"`
	HeadJobOptions          *string `json:"headJobOptions,omitempty"`
	PropagateHeadJobOptions *bool   `json:"propagateHeadJobOptions,omitempty"`
	// Read-only property identifying the compute platform type
	Discriminator *string `json:"discriminator,omitempty"`
	// Array of environment variables for the compute environment
	Environment []ConfigEnvVariable `json:"environment,omitempty"`
}

func (o *MoabConfiguration) GetWorkDir() *string {
	if o == nil {
		return nil
	}
	return o.WorkDir
}

func (o *MoabConfiguration) GetPreRunScript() *string {
	if o == nil {
		return nil
	}
	return o.PreRunScript
}

func (o *MoabConfiguration) GetPostRunScript() *string {
	if o == nil {
		return nil
	}
	return o.PostRunScript
}

func (o *MoabConfiguration) GetNextflowConfig() *string {
	if o == nil {
		return nil
	}
	return o.NextflowConfig
}

func (o *MoabConfiguration) GetLaunchDir() *string {
	if o == nil {
		return nil
	}
	return o.LaunchDir
}

func (o *MoabConfiguration) GetUserName() *string {
	if o == nil {
		return nil
	}
	return o.UserName
}

func (o *MoabConfiguration) GetHostName() *string {
	if o == nil {
		return nil
	}
	return o.HostName
}

func (o *MoabConfiguration) GetPort() *int {
	if o == nil {
		return nil
	}
	return o.Port
}

func (o *MoabConfiguration) GetHeadQueue() *string {
	if o == nil {
		return nil
	}
	return o.HeadQueue
}

func (o *MoabConfiguration) GetComputeQueue() *string {
	if o == nil {
		return nil
	}
	return o.ComputeQueue
}

func (o *MoabConfiguration) GetMaxQueueSize() *int {
	if o == nil {
		return nil
	}
	return o.MaxQueueSize
}

func (o *MoabConfiguration) GetHeadJobOptions() *string {
	if o == nil {
		return nil
	}
	return o.HeadJobOptions
}

func (o *MoabConfiguration) GetPropagateHeadJobOptions() *bool {
	if o == nil {
		return nil
	}
	return o.PropagateHeadJobOptions
}

func (o *MoabConfiguration) GetDiscriminator() *string {
	if o == nil {
		return nil
	}
	return o.Discriminator
}

func (o *MoabConfiguration) GetEnvironment() []ConfigEnvVariable {
	if o == nil {
		return nil
	}
	return o.Environment
}

type AltairPBSConfiguration struct {
	// Working directory path for workflow execution
	WorkDir *string `json:"workDir,omitempty"`
	// Shell script to execute before workflow starts
	PreRunScript *string `json:"preRunScript,omitempty"`
	// Shell script to execute after workflow completes
	PostRunScript *string `json:"postRunScript,omitempty"`
	// Nextflow configuration settings and parameters
	NextflowConfig          *string `json:"nextflowConfig,omitempty"`
	LaunchDir               *string `json:"launchDir,omitempty"`
	UserName                *string `json:"userName,omitempty"`
	HostName                *string `json:"hostName,omitempty"`
	Port                    *int    `json:"port,omitempty"`
	HeadQueue               *string `json:"headQueue,omitempty"`
	ComputeQueue            *string `json:"computeQueue,omitempty"`
	MaxQueueSize            *int    `json:"maxQueueSize,omitempty"`
	HeadJobOptions          *string `json:"headJobOptions,omitempty"`
	PropagateHeadJobOptions *bool   `json:"propagateHeadJobOptions,omitempty"`
	// Read-only property identifying the compute platform type
	Discriminator *string `json:"discriminator,omitempty"`
	// Array of environment variables for the compute environment
	Environment []ConfigEnvVariable `json:"environment,omitempty"`
}

func (o *AltairPBSConfiguration) GetWorkDir() *string {
	if o == nil {
		return nil
	}
	return o.WorkDir
}

func (o *AltairPBSConfiguration) GetPreRunScript() *string {
	if o == nil {
		return nil
	}
	return o.PreRunScript
}

func (o *AltairPBSConfiguration) GetPostRunScript() *string {
	if o == nil {
		return nil
	}
	return o.PostRunScript
}

func (o *AltairPBSConfiguration) GetNextflowConfig() *string {
	if o == nil {
		return nil
	}
	return o.NextflowConfig
}

func (o *AltairPBSConfiguration) GetLaunchDir() *string {
	if o == nil {
		return nil
	}
	return o.LaunchDir
}

func (o *AltairPBSConfiguration) GetUserName() *string {
	if o == nil {
		return nil
	}
	return o.UserName
}

func (o *AltairPBSConfiguration) GetHostName() *string {
	if o == nil {
		return nil
	}
	return o.HostName
}

func (o *AltairPBSConfiguration) GetPort() *int {
	if o == nil {
		return nil
	}
	return o.Port
}

func (o *AltairPBSConfiguration) GetHeadQueue() *string {
	if o == nil {
		return nil
	}
	return o.HeadQueue
}

func (o *AltairPBSConfiguration) GetComputeQueue() *string {
	if o == nil {
		return nil
	}
	return o.ComputeQueue
}

func (o *AltairPBSConfiguration) GetMaxQueueSize() *int {
	if o == nil {
		return nil
	}
	return o.MaxQueueSize
}

func (o *AltairPBSConfiguration) GetHeadJobOptions() *string {
	if o == nil {
		return nil
	}
	return o.HeadJobOptions
}

func (o *AltairPBSConfiguration) GetPropagateHeadJobOptions() *bool {
	if o == nil {
		return nil
	}
	return o.PropagateHeadJobOptions
}

func (o *AltairPBSConfiguration) GetDiscriminator() *string {
	if o == nil {
		return nil
	}
	return o.Discriminator
}

func (o *AltairPBSConfiguration) GetEnvironment() []ConfigEnvVariable {
	if o == nil {
		return nil
	}
	return o.Environment
}

type UnivaGridEngineConfiguration struct {
	// Working directory path for workflow execution
	WorkDir *string `json:"workDir,omitempty"`
	// Shell script to execute before workflow starts
	PreRunScript *string `json:"preRunScript,omitempty"`
	// Shell script to execute after workflow completes
	PostRunScript *string `json:"postRunScript,omitempty"`
	// Nextflow configuration settings and parameters
	NextflowConfig          *string `json:"nextflowConfig,omitempty"`
	LaunchDir               *string `json:"launchDir,omitempty"`
	UserName                *string `json:"userName,omitempty"`
	HostName                *string `json:"hostName,omitempty"`
	Port                    *int    `json:"port,omitempty"`
	HeadQueue               *string `json:"headQueue,omitempty"`
	ComputeQueue            *string `json:"computeQueue,omitempty"`
	MaxQueueSize            *int    `json:"maxQueueSize,omitempty"`
	HeadJobOptions          *string `json:"headJobOptions,omitempty"`
	PropagateHeadJobOptions *bool   `json:"propagateHeadJobOptions,omitempty"`
	// Read-only property identifying the compute platform type
	Discriminator *string `json:"discriminator,omitempty"`
	// Array of environment variables for the compute environment
	Environment []ConfigEnvVariable `json:"environment,omitempty"`
}

func (o *UnivaGridEngineConfiguration) GetWorkDir() *string {
	if o == nil {
		return nil
	}
	return o.WorkDir
}

func (o *UnivaGridEngineConfiguration) GetPreRunScript() *string {
	if o == nil {
		return nil
	}
	return o.PreRunScript
}

func (o *UnivaGridEngineConfiguration) GetPostRunScript() *string {
	if o == nil {
		return nil
	}
	return o.PostRunScript
}

func (o *UnivaGridEngineConfiguration) GetNextflowConfig() *string {
	if o == nil {
		return nil
	}
	return o.NextflowConfig
}

func (o *UnivaGridEngineConfiguration) GetLaunchDir() *string {
	if o == nil {
		return nil
	}
	return o.LaunchDir
}

func (o *UnivaGridEngineConfiguration) GetUserName() *string {
	if o == nil {
		return nil
	}
	return o.UserName
}

func (o *UnivaGridEngineConfiguration) GetHostName() *string {
	if o == nil {
		return nil
	}
	return o.HostName
}

func (o *UnivaGridEngineConfiguration) GetPort() *int {
	if o == nil {
		return nil
	}
	return o.Port
}

func (o *UnivaGridEngineConfiguration) GetHeadQueue() *string {
	if o == nil {
		return nil
	}
	return o.HeadQueue
}

func (o *UnivaGridEngineConfiguration) GetComputeQueue() *string {
	if o == nil {
		return nil
	}
	return o.ComputeQueue
}

func (o *UnivaGridEngineConfiguration) GetMaxQueueSize() *int {
	if o == nil {
		return nil
	}
	return o.MaxQueueSize
}

func (o *UnivaGridEngineConfiguration) GetHeadJobOptions() *string {
	if o == nil {
		return nil
	}
	return o.HeadJobOptions
}

func (o *UnivaGridEngineConfiguration) GetPropagateHeadJobOptions() *bool {
	if o == nil {
		return nil
	}
	return o.PropagateHeadJobOptions
}

func (o *UnivaGridEngineConfiguration) GetDiscriminator() *string {
	if o == nil {
		return nil
	}
	return o.Discriminator
}

func (o *UnivaGridEngineConfiguration) GetEnvironment() []ConfigEnvVariable {
	if o == nil {
		return nil
	}
	return o.Environment
}

type GoogleGKEClusterConfiguration struct {
	// Read-only property identifying the compute platform type
	Discriminator *string `json:"discriminator,omitempty"`
	// Working directory path for workflow execution
	WorkDir *string `json:"workDir,omitempty"`
	// Shell script to execute before workflow starts
	PreRunScript *string `json:"preRunScript,omitempty"`
	// Shell script to execute after workflow completes
	PostRunScript         *string           `json:"postRunScript,omitempty"`
	Server                *string           `json:"server,omitempty"`
	SslCert               *string           `json:"sslCert,omitempty"`
	Namespace             *string           `json:"namespace,omitempty"`
	ComputeServiceAccount *string           `json:"computeServiceAccount,omitempty"`
	HeadServiceAccount    *string           `json:"headServiceAccount,omitempty"`
	StorageClaimName      *string           `json:"storageClaimName,omitempty"`
	StorageMountPath      *string           `json:"storageMountPath,omitempty"`
	PodCleanup            *PodCleanupPolicy `json:"podCleanup,omitempty"`
	HeadPodSpec           *string           `json:"headPodSpec,omitempty"`
	ServicePodSpec        *string           `json:"servicePodSpec,omitempty"`
	// Array of environment variables for the compute environment
	Environment     []ConfigEnvVariable `json:"environment,omitempty"`
	HeadJobCpus     *int                `json:"headJobCpus,omitempty"`
	HeadJobMemoryMb *int                `json:"headJobMemoryMb,omitempty"`
	// Nextflow configuration settings and parameters
	NextflowConfig *string `json:"nextflowConfig,omitempty"`
	// The GKE cluster region - or - zone
	Region *string `json:"region,omitempty"`
	// The GKE cluster name
	ClusterName    *string `json:"clusterName,omitempty"`
	Fusion2Enabled *bool   `json:"fusion2Enabled,omitempty"`
	WaveEnabled    *bool   `json:"waveEnabled,omitempty"`
}

func (o *GoogleGKEClusterConfiguration) GetDiscriminator() *string {
	if o == nil {
		return nil
	}
	return o.Discriminator
}

func (o *GoogleGKEClusterConfiguration) GetWorkDir() *string {
	if o == nil {
		return nil
	}
	return o.WorkDir
}

func (o *GoogleGKEClusterConfiguration) GetPreRunScript() *string {
	if o == nil {
		return nil
	}
	return o.PreRunScript
}

func (o *GoogleGKEClusterConfiguration) GetPostRunScript() *string {
	if o == nil {
		return nil
	}
	return o.PostRunScript
}

func (o *GoogleGKEClusterConfiguration) GetServer() *string {
	if o == nil {
		return nil
	}
	return o.Server
}

func (o *GoogleGKEClusterConfiguration) GetSslCert() *string {
	if o == nil {
		return nil
	}
	return o.SslCert
}

func (o *GoogleGKEClusterConfiguration) GetNamespace() *string {
	if o == nil {
		return nil
	}
	return o.Namespace
}

func (o *GoogleGKEClusterConfiguration) GetComputeServiceAccount() *string {
	if o == nil {
		return nil
	}
	return o.ComputeServiceAccount
}

func (o *GoogleGKEClusterConfiguration) GetHeadServiceAccount() *string {
	if o == nil {
		return nil
	}
	return o.HeadServiceAccount
}

func (o *GoogleGKEClusterConfiguration) GetStorageClaimName() *string {
	if o == nil {
		return nil
	}
	return o.StorageClaimName
}

func (o *GoogleGKEClusterConfiguration) GetStorageMountPath() *string {
	if o == nil {
		return nil
	}
	return o.StorageMountPath
}

func (o *GoogleGKEClusterConfiguration) GetPodCleanup() *PodCleanupPolicy {
	if o == nil {
		return nil
	}
	return o.PodCleanup
}

func (o *GoogleGKEClusterConfiguration) GetHeadPodSpec() *string {
	if o == nil {
		return nil
	}
	return o.HeadPodSpec
}

func (o *GoogleGKEClusterConfiguration) GetServicePodSpec() *string {
	if o == nil {
		return nil
	}
	return o.ServicePodSpec
}

func (o *GoogleGKEClusterConfiguration) GetEnvironment() []ConfigEnvVariable {
	if o == nil {
		return nil
	}
	return o.Environment
}

func (o *GoogleGKEClusterConfiguration) GetHeadJobCpus() *int {
	if o == nil {
		return nil
	}
	return o.HeadJobCpus
}

func (o *GoogleGKEClusterConfiguration) GetHeadJobMemoryMb() *int {
	if o == nil {
		return nil
	}
	return o.HeadJobMemoryMb
}

func (o *GoogleGKEClusterConfiguration) GetNextflowConfig() *string {
	if o == nil {
		return nil
	}
	return o.NextflowConfig
}

func (o *GoogleGKEClusterConfiguration) GetRegion() *string {
	if o == nil {
		return nil
	}
	return o.Region
}

func (o *GoogleGKEClusterConfiguration) GetClusterName() *string {
	if o == nil {
		return nil
	}
	return o.ClusterName
}

func (o *GoogleGKEClusterConfiguration) GetFusion2Enabled() *bool {
	if o == nil {
		return nil
	}
	return o.Fusion2Enabled
}

func (o *GoogleGKEClusterConfiguration) GetWaveEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.WaveEnabled
}

type AmazonEKSClusterConfiguration struct {
	// Read-only property identifying the compute platform type
	Discriminator *string `json:"discriminator,omitempty"`
	// Working directory path for workflow execution
	WorkDir *string `json:"workDir,omitempty"`
	// Shell script to execute before workflow starts
	PreRunScript *string `json:"preRunScript,omitempty"`
	// Shell script to execute after workflow completes
	PostRunScript         *string           `json:"postRunScript,omitempty"`
	Server                *string           `json:"server,omitempty"`
	SslCert               *string           `json:"sslCert,omitempty"`
	Namespace             *string           `json:"namespace,omitempty"`
	ComputeServiceAccount *string           `json:"computeServiceAccount,omitempty"`
	HeadServiceAccount    *string           `json:"headServiceAccount,omitempty"`
	StorageClaimName      *string           `json:"storageClaimName,omitempty"`
	StorageMountPath      *string           `json:"storageMountPath,omitempty"`
	PodCleanup            *PodCleanupPolicy `json:"podCleanup,omitempty"`
	HeadPodSpec           *string           `json:"headPodSpec,omitempty"`
	ServicePodSpec        *string           `json:"servicePodSpec,omitempty"`
	// Array of environment variables for the compute environment
	Environment     []ConfigEnvVariable `json:"environment,omitempty"`
	HeadJobCpus     *int                `json:"headJobCpus,omitempty"`
	HeadJobMemoryMb *int                `json:"headJobMemoryMb,omitempty"`
	// Nextflow configuration settings and parameters
	NextflowConfig *string `json:"nextflowConfig,omitempty"`
	// AWS region
	Region *string `json:"region,omitempty"`
	// The AWS EKS cluster name
	ClusterName    *string `json:"clusterName,omitempty"`
	WaveEnabled    *bool   `json:"waveEnabled,omitempty"`
	Fusion2Enabled *bool   `json:"fusion2Enabled,omitempty"`
}

func (o *AmazonEKSClusterConfiguration) GetDiscriminator() *string {
	if o == nil {
		return nil
	}
	return o.Discriminator
}

func (o *AmazonEKSClusterConfiguration) GetWorkDir() *string {
	if o == nil {
		return nil
	}
	return o.WorkDir
}

func (o *AmazonEKSClusterConfiguration) GetPreRunScript() *string {
	if o == nil {
		return nil
	}
	return o.PreRunScript
}

func (o *AmazonEKSClusterConfiguration) GetPostRunScript() *string {
	if o == nil {
		return nil
	}
	return o.PostRunScript
}

func (o *AmazonEKSClusterConfiguration) GetServer() *string {
	if o == nil {
		return nil
	}
	return o.Server
}

func (o *AmazonEKSClusterConfiguration) GetSslCert() *string {
	if o == nil {
		return nil
	}
	return o.SslCert
}

func (o *AmazonEKSClusterConfiguration) GetNamespace() *string {
	if o == nil {
		return nil
	}
	return o.Namespace
}

func (o *AmazonEKSClusterConfiguration) GetComputeServiceAccount() *string {
	if o == nil {
		return nil
	}
	return o.ComputeServiceAccount
}

func (o *AmazonEKSClusterConfiguration) GetHeadServiceAccount() *string {
	if o == nil {
		return nil
	}
	return o.HeadServiceAccount
}

func (o *AmazonEKSClusterConfiguration) GetStorageClaimName() *string {
	if o == nil {
		return nil
	}
	return o.StorageClaimName
}

func (o *AmazonEKSClusterConfiguration) GetStorageMountPath() *string {
	if o == nil {
		return nil
	}
	return o.StorageMountPath
}

func (o *AmazonEKSClusterConfiguration) GetPodCleanup() *PodCleanupPolicy {
	if o == nil {
		return nil
	}
	return o.PodCleanup
}

func (o *AmazonEKSClusterConfiguration) GetHeadPodSpec() *string {
	if o == nil {
		return nil
	}
	return o.HeadPodSpec
}

func (o *AmazonEKSClusterConfiguration) GetServicePodSpec() *string {
	if o == nil {
		return nil
	}
	return o.ServicePodSpec
}

func (o *AmazonEKSClusterConfiguration) GetEnvironment() []ConfigEnvVariable {
	if o == nil {
		return nil
	}
	return o.Environment
}

func (o *AmazonEKSClusterConfiguration) GetHeadJobCpus() *int {
	if o == nil {
		return nil
	}
	return o.HeadJobCpus
}

func (o *AmazonEKSClusterConfiguration) GetHeadJobMemoryMb() *int {
	if o == nil {
		return nil
	}
	return o.HeadJobMemoryMb
}

func (o *AmazonEKSClusterConfiguration) GetNextflowConfig() *string {
	if o == nil {
		return nil
	}
	return o.NextflowConfig
}

func (o *AmazonEKSClusterConfiguration) GetRegion() *string {
	if o == nil {
		return nil
	}
	return o.Region
}

func (o *AmazonEKSClusterConfiguration) GetClusterName() *string {
	if o == nil {
		return nil
	}
	return o.ClusterName
}

func (o *AmazonEKSClusterConfiguration) GetWaveEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.WaveEnabled
}

func (o *AmazonEKSClusterConfiguration) GetFusion2Enabled() *bool {
	if o == nil {
		return nil
	}
	return o.Fusion2Enabled
}

type KubernetesComputeConfiguration struct {
	// Read-only property identifying the compute platform type
	Discriminator *string `json:"discriminator,omitempty"`
	// Working directory path for workflow execution
	WorkDir *string `json:"workDir,omitempty"`
	// Shell script to execute before workflow starts
	PreRunScript *string `json:"preRunScript,omitempty"`
	// Shell script to execute after workflow completes
	PostRunScript         *string           `json:"postRunScript,omitempty"`
	Server                *string           `json:"server,omitempty"`
	SslCert               *string           `json:"sslCert,omitempty"`
	Namespace             *string           `json:"namespace,omitempty"`
	ComputeServiceAccount *string           `json:"computeServiceAccount,omitempty"`
	HeadServiceAccount    *string           `json:"headServiceAccount,omitempty"`
	StorageClaimName      *string           `json:"storageClaimName,omitempty"`
	StorageMountPath      *string           `json:"storageMountPath,omitempty"`
	PodCleanup            *PodCleanupPolicy `json:"podCleanup,omitempty"`
	HeadPodSpec           *string           `json:"headPodSpec,omitempty"`
	ServicePodSpec        *string           `json:"servicePodSpec,omitempty"`
	// Array of environment variables for the compute environment
	Environment     []ConfigEnvVariable `json:"environment,omitempty"`
	HeadJobCpus     *int                `json:"headJobCpus,omitempty"`
	HeadJobMemoryMb *int                `json:"headJobMemoryMb,omitempty"`
	// Nextflow configuration settings and parameters
	NextflowConfig *string `json:"nextflowConfig,omitempty"`
}

func (o *KubernetesComputeConfiguration) GetDiscriminator() *string {
	if o == nil {
		return nil
	}
	return o.Discriminator
}

func (o *KubernetesComputeConfiguration) GetWorkDir() *string {
	if o == nil {
		return nil
	}
	return o.WorkDir
}

func (o *KubernetesComputeConfiguration) GetPreRunScript() *string {
	if o == nil {
		return nil
	}
	return o.PreRunScript
}

func (o *KubernetesComputeConfiguration) GetPostRunScript() *string {
	if o == nil {
		return nil
	}
	return o.PostRunScript
}

func (o *KubernetesComputeConfiguration) GetServer() *string {
	if o == nil {
		return nil
	}
	return o.Server
}

func (o *KubernetesComputeConfiguration) GetSslCert() *string {
	if o == nil {
		return nil
	}
	return o.SslCert
}

func (o *KubernetesComputeConfiguration) GetNamespace() *string {
	if o == nil {
		return nil
	}
	return o.Namespace
}

func (o *KubernetesComputeConfiguration) GetComputeServiceAccount() *string {
	if o == nil {
		return nil
	}
	return o.ComputeServiceAccount
}

func (o *KubernetesComputeConfiguration) GetHeadServiceAccount() *string {
	if o == nil {
		return nil
	}
	return o.HeadServiceAccount
}

func (o *KubernetesComputeConfiguration) GetStorageClaimName() *string {
	if o == nil {
		return nil
	}
	return o.StorageClaimName
}

func (o *KubernetesComputeConfiguration) GetStorageMountPath() *string {
	if o == nil {
		return nil
	}
	return o.StorageMountPath
}

func (o *KubernetesComputeConfiguration) GetPodCleanup() *PodCleanupPolicy {
	if o == nil {
		return nil
	}
	return o.PodCleanup
}

func (o *KubernetesComputeConfiguration) GetHeadPodSpec() *string {
	if o == nil {
		return nil
	}
	return o.HeadPodSpec
}

func (o *KubernetesComputeConfiguration) GetServicePodSpec() *string {
	if o == nil {
		return nil
	}
	return o.ServicePodSpec
}

func (o *KubernetesComputeConfiguration) GetEnvironment() []ConfigEnvVariable {
	if o == nil {
		return nil
	}
	return o.Environment
}

func (o *KubernetesComputeConfiguration) GetHeadJobCpus() *int {
	if o == nil {
		return nil
	}
	return o.HeadJobCpus
}

func (o *KubernetesComputeConfiguration) GetHeadJobMemoryMb() *int {
	if o == nil {
		return nil
	}
	return o.HeadJobMemoryMb
}

func (o *KubernetesComputeConfiguration) GetNextflowConfig() *string {
	if o == nil {
		return nil
	}
	return o.NextflowConfig
}

type SlurmConfiguration struct {
	// Working directory path for workflow execution
	WorkDir *string `json:"workDir,omitempty"`
	// Shell script to execute before workflow starts
	PreRunScript *string `json:"preRunScript,omitempty"`
	// Shell script to execute after workflow completes
	PostRunScript *string `json:"postRunScript,omitempty"`
	// Nextflow configuration settings and parameters
	NextflowConfig          *string `json:"nextflowConfig,omitempty"`
	LaunchDir               *string `json:"launchDir,omitempty"`
	UserName                *string `json:"userName,omitempty"`
	HostName                *string `json:"hostName,omitempty"`
	Port                    *int    `json:"port,omitempty"`
	HeadQueue               *string `json:"headQueue,omitempty"`
	ComputeQueue            *string `json:"computeQueue,omitempty"`
	MaxQueueSize            *int    `json:"maxQueueSize,omitempty"`
	HeadJobOptions          *string `json:"headJobOptions,omitempty"`
	PropagateHeadJobOptions *bool   `json:"propagateHeadJobOptions,omitempty"`
	// Read-only property identifying the compute platform type
	Discriminator *string `json:"discriminator,omitempty"`
	// Array of environment variables for the compute environment
	Environment []ConfigEnvVariable `json:"environment,omitempty"`
}

func (o *SlurmConfiguration) GetWorkDir() *string {
	if o == nil {
		return nil
	}
	return o.WorkDir
}

func (o *SlurmConfiguration) GetPreRunScript() *string {
	if o == nil {
		return nil
	}
	return o.PreRunScript
}

func (o *SlurmConfiguration) GetPostRunScript() *string {
	if o == nil {
		return nil
	}
	return o.PostRunScript
}

func (o *SlurmConfiguration) GetNextflowConfig() *string {
	if o == nil {
		return nil
	}
	return o.NextflowConfig
}

func (o *SlurmConfiguration) GetLaunchDir() *string {
	if o == nil {
		return nil
	}
	return o.LaunchDir
}

func (o *SlurmConfiguration) GetUserName() *string {
	if o == nil {
		return nil
	}
	return o.UserName
}

func (o *SlurmConfiguration) GetHostName() *string {
	if o == nil {
		return nil
	}
	return o.HostName
}

func (o *SlurmConfiguration) GetPort() *int {
	if o == nil {
		return nil
	}
	return o.Port
}

func (o *SlurmConfiguration) GetHeadQueue() *string {
	if o == nil {
		return nil
	}
	return o.HeadQueue
}

func (o *SlurmConfiguration) GetComputeQueue() *string {
	if o == nil {
		return nil
	}
	return o.ComputeQueue
}

func (o *SlurmConfiguration) GetMaxQueueSize() *int {
	if o == nil {
		return nil
	}
	return o.MaxQueueSize
}

func (o *SlurmConfiguration) GetHeadJobOptions() *string {
	if o == nil {
		return nil
	}
	return o.HeadJobOptions
}

func (o *SlurmConfiguration) GetPropagateHeadJobOptions() *bool {
	if o == nil {
		return nil
	}
	return o.PropagateHeadJobOptions
}

func (o *SlurmConfiguration) GetDiscriminator() *string {
	if o == nil {
		return nil
	}
	return o.Discriminator
}

func (o *SlurmConfiguration) GetEnvironment() []ConfigEnvVariable {
	if o == nil {
		return nil
	}
	return o.Environment
}

type IBMLSFConfiguration struct {
	// Working directory path for workflow execution
	WorkDir *string `json:"workDir,omitempty"`
	// Shell script to execute before workflow starts
	PreRunScript *string `json:"preRunScript,omitempty"`
	// Shell script to execute after workflow completes
	PostRunScript *string `json:"postRunScript,omitempty"`
	// Nextflow configuration settings and parameters
	NextflowConfig          *string `json:"nextflowConfig,omitempty"`
	LaunchDir               *string `json:"launchDir,omitempty"`
	UserName                *string `json:"userName,omitempty"`
	HostName                *string `json:"hostName,omitempty"`
	Port                    *int    `json:"port,omitempty"`
	HeadQueue               *string `json:"headQueue,omitempty"`
	ComputeQueue            *string `json:"computeQueue,omitempty"`
	MaxQueueSize            *int    `json:"maxQueueSize,omitempty"`
	HeadJobOptions          *string `json:"headJobOptions,omitempty"`
	PropagateHeadJobOptions *bool   `json:"propagateHeadJobOptions,omitempty"`
	// Read-only property identifying the compute platform type
	Discriminator  *string `json:"discriminator,omitempty"`
	UnitForLimits  *string `json:"unitForLimits,omitempty"`
	PerJobMemLimit *bool   `json:"perJobMemLimit,omitempty"`
	PerTaskReserve *bool   `json:"perTaskReserve,omitempty"`
	// Array of environment variables for the compute environment
	Environment []ConfigEnvVariable `json:"environment,omitempty"`
}

func (o *IBMLSFConfiguration) GetWorkDir() *string {
	if o == nil {
		return nil
	}
	return o.WorkDir
}

func (o *IBMLSFConfiguration) GetPreRunScript() *string {
	if o == nil {
		return nil
	}
	return o.PreRunScript
}

func (o *IBMLSFConfiguration) GetPostRunScript() *string {
	if o == nil {
		return nil
	}
	return o.PostRunScript
}

func (o *IBMLSFConfiguration) GetNextflowConfig() *string {
	if o == nil {
		return nil
	}
	return o.NextflowConfig
}

func (o *IBMLSFConfiguration) GetLaunchDir() *string {
	if o == nil {
		return nil
	}
	return o.LaunchDir
}

func (o *IBMLSFConfiguration) GetUserName() *string {
	if o == nil {
		return nil
	}
	return o.UserName
}

func (o *IBMLSFConfiguration) GetHostName() *string {
	if o == nil {
		return nil
	}
	return o.HostName
}

func (o *IBMLSFConfiguration) GetPort() *int {
	if o == nil {
		return nil
	}
	return o.Port
}

func (o *IBMLSFConfiguration) GetHeadQueue() *string {
	if o == nil {
		return nil
	}
	return o.HeadQueue
}

func (o *IBMLSFConfiguration) GetComputeQueue() *string {
	if o == nil {
		return nil
	}
	return o.ComputeQueue
}

func (o *IBMLSFConfiguration) GetMaxQueueSize() *int {
	if o == nil {
		return nil
	}
	return o.MaxQueueSize
}

func (o *IBMLSFConfiguration) GetHeadJobOptions() *string {
	if o == nil {
		return nil
	}
	return o.HeadJobOptions
}

func (o *IBMLSFConfiguration) GetPropagateHeadJobOptions() *bool {
	if o == nil {
		return nil
	}
	return o.PropagateHeadJobOptions
}

func (o *IBMLSFConfiguration) GetDiscriminator() *string {
	if o == nil {
		return nil
	}
	return o.Discriminator
}

func (o *IBMLSFConfiguration) GetUnitForLimits() *string {
	if o == nil {
		return nil
	}
	return o.UnitForLimits
}

func (o *IBMLSFConfiguration) GetPerJobMemLimit() *bool {
	if o == nil {
		return nil
	}
	return o.PerJobMemLimit
}

func (o *IBMLSFConfiguration) GetPerTaskReserve() *bool {
	if o == nil {
		return nil
	}
	return o.PerTaskReserve
}

func (o *IBMLSFConfiguration) GetEnvironment() []ConfigEnvVariable {
	if o == nil {
		return nil
	}
	return o.Environment
}

type AzureBatchConfiguration struct {
	// Read-only property identifying the compute platform type
	Discriminator *string `json:"discriminator,omitempty"`
	// Working directory path for workflow execution
	WorkDir *string `json:"workDir,omitempty"`
	// Shell script to execute before workflow starts
	PreRunScript *string `json:"preRunScript,omitempty"`
	// Shell script to execute after workflow completes
	PostRunScript *string `json:"postRunScript,omitempty"`
	Region        *string `json:"region,omitempty"`
	HeadPool      *string `json:"headPool,omitempty"`
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	AutoPoolMode            *bool               `json:"autoPoolMode,omitempty"`
	Forge                   *AzBatchForgeConfig `json:"forge,omitempty"`
	TokenDuration           *string             `json:"tokenDuration,omitempty"`
	DeleteJobsOnCompletion  *JobCleanupPolicy   `json:"deleteJobsOnCompletion,omitempty"`
	DeletePoolsOnCompletion *bool               `json:"deletePoolsOnCompletion,omitempty"`
	// Array of environment variables for the compute environment
	Environment    []ConfigEnvVariable `json:"environment,omitempty"`
	WaveEnabled    *bool               `json:"waveEnabled,omitempty"`
	Fusion2Enabled *bool               `json:"fusion2Enabled,omitempty"`
	// Nextflow configuration settings and parameters
	NextflowConfig          *string `json:"nextflowConfig,omitempty"`
	ManagedIdentityClientID *string `json:"managedIdentityClientId,omitempty"`
}

func (o *AzureBatchConfiguration) GetDiscriminator() *string {
	if o == nil {
		return nil
	}
	return o.Discriminator
}

func (o *AzureBatchConfiguration) GetWorkDir() *string {
	if o == nil {
		return nil
	}
	return o.WorkDir
}

func (o *AzureBatchConfiguration) GetPreRunScript() *string {
	if o == nil {
		return nil
	}
	return o.PreRunScript
}

func (o *AzureBatchConfiguration) GetPostRunScript() *string {
	if o == nil {
		return nil
	}
	return o.PostRunScript
}

func (o *AzureBatchConfiguration) GetRegion() *string {
	if o == nil {
		return nil
	}
	return o.Region
}

func (o *AzureBatchConfiguration) GetHeadPool() *string {
	if o == nil {
		return nil
	}
	return o.HeadPool
}

func (o *AzureBatchConfiguration) GetAutoPoolMode() *bool {
	if o == nil {
		return nil
	}
	return o.AutoPoolMode
}

func (o *AzureBatchConfiguration) GetForge() *AzBatchForgeConfig {
	if o == nil {
		return nil
	}
	return o.Forge
}

func (o *AzureBatchConfiguration) GetTokenDuration() *string {
	if o == nil {
		return nil
	}
	return o.TokenDuration
}

func (o *AzureBatchConfiguration) GetDeleteJobsOnCompletion() *JobCleanupPolicy {
	if o == nil {
		return nil
	}
	return o.DeleteJobsOnCompletion
}

func (o *AzureBatchConfiguration) GetDeletePoolsOnCompletion() *bool {
	if o == nil {
		return nil
	}
	return o.DeletePoolsOnCompletion
}

func (o *AzureBatchConfiguration) GetEnvironment() []ConfigEnvVariable {
	if o == nil {
		return nil
	}
	return o.Environment
}

func (o *AzureBatchConfiguration) GetWaveEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.WaveEnabled
}

func (o *AzureBatchConfiguration) GetFusion2Enabled() *bool {
	if o == nil {
		return nil
	}
	return o.Fusion2Enabled
}

func (o *AzureBatchConfiguration) GetNextflowConfig() *string {
	if o == nil {
		return nil
	}
	return o.NextflowConfig
}

func (o *AzureBatchConfiguration) GetManagedIdentityClientID() *string {
	if o == nil {
		return nil
	}
	return o.ManagedIdentityClientID
}

type GoogleBatchServiceConfiguration struct {
	// Read-only property identifying the compute platform type
	Discriminator *string `json:"discriminator,omitempty"`
	Location      *string `json:"location,omitempty"`
	// Working directory path for workflow execution
	WorkDir           *string           `json:"workDir,omitempty"`
	Spot              *bool             `json:"spot,omitempty"`
	BootDiskSizeGb    *int              `json:"bootDiskSizeGb,omitempty"`
	CPUPlatform       *string           `json:"cpuPlatform,omitempty"`
	MachineType       *string           `json:"machineType,omitempty"`
	ProjectID         *string           `json:"projectId,omitempty"`
	SSHDaemon         *bool             `json:"sshDaemon,omitempty"`
	SSHImage          *string           `json:"sshImage,omitempty"`
	DebugMode         *int              `json:"debugMode,omitempty"`
	CopyImage         *string           `json:"copyImage,omitempty"`
	UsePrivateAddress *bool             `json:"usePrivateAddress,omitempty"`
	Labels            map[string]string `json:"labels,omitempty"`
	// Shell script to execute before workflow starts
	PreRunScript *string `json:"preRunScript,omitempty"`
	// Shell script to execute after workflow completes
	PostRunScript   *string `json:"postRunScript,omitempty"`
	HeadJobCpus     *int    `json:"headJobCpus,omitempty"`
	HeadJobMemoryMb *int    `json:"headJobMemoryMb,omitempty"`
	// Nextflow configuration settings and parameters
	NextflowConfig *string `json:"nextflowConfig,omitempty"`
	NfsTarget      *string `json:"nfsTarget,omitempty"`
	NfsMount       *string `json:"nfsMount,omitempty"`
	// Array of environment variables for the compute environment
	Environment                 []ConfigEnvVariable `json:"environment,omitempty"`
	WaveEnabled                 *bool               `json:"waveEnabled,omitempty"`
	Fusion2Enabled              *bool               `json:"fusion2Enabled,omitempty"`
	ServiceAccount              *string             `json:"serviceAccount,omitempty"`
	Network                     *string             `json:"network,omitempty"`
	Subnetwork                  *string             `json:"subnetwork,omitempty"`
	HeadJobInstanceTemplate     *string             `json:"headJobInstanceTemplate,omitempty"`
	ComputeJobsInstanceTemplate *string             `json:"computeJobsInstanceTemplate,omitempty"`
}

func (o *GoogleBatchServiceConfiguration) GetDiscriminator() *string {
	if o == nil {
		return nil
	}
	return o.Discriminator
}

func (o *GoogleBatchServiceConfiguration) GetLocation() *string {
	if o == nil {
		return nil
	}
	return o.Location
}

func (o *GoogleBatchServiceConfiguration) GetWorkDir() *string {
	if o == nil {
		return nil
	}
	return o.WorkDir
}

func (o *GoogleBatchServiceConfiguration) GetSpot() *bool {
	if o == nil {
		return nil
	}
	return o.Spot
}

func (o *GoogleBatchServiceConfiguration) GetBootDiskSizeGb() *int {
	if o == nil {
		return nil
	}
	return o.BootDiskSizeGb
}

func (o *GoogleBatchServiceConfiguration) GetCPUPlatform() *string {
	if o == nil {
		return nil
	}
	return o.CPUPlatform
}

func (o *GoogleBatchServiceConfiguration) GetMachineType() *string {
	if o == nil {
		return nil
	}
	return o.MachineType
}

func (o *GoogleBatchServiceConfiguration) GetProjectID() *string {
	if o == nil {
		return nil
	}
	return o.ProjectID
}

func (o *GoogleBatchServiceConfiguration) GetSSHDaemon() *bool {
	if o == nil {
		return nil
	}
	return o.SSHDaemon
}

func (o *GoogleBatchServiceConfiguration) GetSSHImage() *string {
	if o == nil {
		return nil
	}
	return o.SSHImage
}

func (o *GoogleBatchServiceConfiguration) GetDebugMode() *int {
	if o == nil {
		return nil
	}
	return o.DebugMode
}

func (o *GoogleBatchServiceConfiguration) GetCopyImage() *string {
	if o == nil {
		return nil
	}
	return o.CopyImage
}

func (o *GoogleBatchServiceConfiguration) GetUsePrivateAddress() *bool {
	if o == nil {
		return nil
	}
	return o.UsePrivateAddress
}

func (o *GoogleBatchServiceConfiguration) GetLabels() map[string]string {
	if o == nil {
		return nil
	}
	return o.Labels
}

func (o *GoogleBatchServiceConfiguration) GetPreRunScript() *string {
	if o == nil {
		return nil
	}
	return o.PreRunScript
}

func (o *GoogleBatchServiceConfiguration) GetPostRunScript() *string {
	if o == nil {
		return nil
	}
	return o.PostRunScript
}

func (o *GoogleBatchServiceConfiguration) GetHeadJobCpus() *int {
	if o == nil {
		return nil
	}
	return o.HeadJobCpus
}

func (o *GoogleBatchServiceConfiguration) GetHeadJobMemoryMb() *int {
	if o == nil {
		return nil
	}
	return o.HeadJobMemoryMb
}

func (o *GoogleBatchServiceConfiguration) GetNextflowConfig() *string {
	if o == nil {
		return nil
	}
	return o.NextflowConfig
}

func (o *GoogleBatchServiceConfiguration) GetNfsTarget() *string {
	if o == nil {
		return nil
	}
	return o.NfsTarget
}

func (o *GoogleBatchServiceConfiguration) GetNfsMount() *string {
	if o == nil {
		return nil
	}
	return o.NfsMount
}

func (o *GoogleBatchServiceConfiguration) GetEnvironment() []ConfigEnvVariable {
	if o == nil {
		return nil
	}
	return o.Environment
}

func (o *GoogleBatchServiceConfiguration) GetWaveEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.WaveEnabled
}

func (o *GoogleBatchServiceConfiguration) GetFusion2Enabled() *bool {
	if o == nil {
		return nil
	}
	return o.Fusion2Enabled
}

func (o *GoogleBatchServiceConfiguration) GetServiceAccount() *string {
	if o == nil {
		return nil
	}
	return o.ServiceAccount
}

func (o *GoogleBatchServiceConfiguration) GetNetwork() *string {
	if o == nil {
		return nil
	}
	return o.Network
}

func (o *GoogleBatchServiceConfiguration) GetSubnetwork() *string {
	if o == nil {
		return nil
	}
	return o.Subnetwork
}

func (o *GoogleBatchServiceConfiguration) GetHeadJobInstanceTemplate() *string {
	if o == nil {
		return nil
	}
	return o.HeadJobInstanceTemplate
}

func (o *GoogleBatchServiceConfiguration) GetComputeJobsInstanceTemplate() *string {
	if o == nil {
		return nil
	}
	return o.ComputeJobsInstanceTemplate
}

type GoogleLifeSciencesConfiguration struct {
	// Read-only property identifying the compute platform type
	Discriminator *string  `json:"discriminator,omitempty"`
	Region        *string  `json:"region,omitempty"`
	Zones         []string `json:"zones,omitempty"`
	Location      *string  `json:"location,omitempty"`
	// Working directory path for workflow execution
	WorkDir           *string           `json:"workDir,omitempty"`
	Preemptible       *bool             `json:"preemptible,omitempty"`
	BootDiskSizeGb    *int              `json:"bootDiskSizeGb,omitempty"`
	ProjectID         *string           `json:"projectId,omitempty"`
	SSHDaemon         *bool             `json:"sshDaemon,omitempty"`
	SSHImage          *string           `json:"sshImage,omitempty"`
	DebugMode         *int              `json:"debugMode,omitempty"`
	CopyImage         *string           `json:"copyImage,omitempty"`
	UsePrivateAddress *bool             `json:"usePrivateAddress,omitempty"`
	Labels            map[string]string `json:"labels,omitempty"`
	// Shell script to execute before workflow starts
	PreRunScript *string `json:"preRunScript,omitempty"`
	// Shell script to execute after workflow completes
	PostRunScript   *string `json:"postRunScript,omitempty"`
	HeadJobCpus     *int    `json:"headJobCpus,omitempty"`
	HeadJobMemoryMb *int    `json:"headJobMemoryMb,omitempty"`
	// Nextflow configuration settings and parameters
	NextflowConfig *string `json:"nextflowConfig,omitempty"`
	NfsTarget      *string `json:"nfsTarget,omitempty"`
	NfsMount       *string `json:"nfsMount,omitempty"`
	// Array of environment variables for the compute environment
	Environment []ConfigEnvVariable `json:"environment,omitempty"`
}

func (o *GoogleLifeSciencesConfiguration) GetDiscriminator() *string {
	if o == nil {
		return nil
	}
	return o.Discriminator
}

func (o *GoogleLifeSciencesConfiguration) GetRegion() *string {
	if o == nil {
		return nil
	}
	return o.Region
}

func (o *GoogleLifeSciencesConfiguration) GetZones() []string {
	if o == nil {
		return nil
	}
	return o.Zones
}

func (o *GoogleLifeSciencesConfiguration) GetLocation() *string {
	if o == nil {
		return nil
	}
	return o.Location
}

func (o *GoogleLifeSciencesConfiguration) GetWorkDir() *string {
	if o == nil {
		return nil
	}
	return o.WorkDir
}

func (o *GoogleLifeSciencesConfiguration) GetPreemptible() *bool {
	if o == nil {
		return nil
	}
	return o.Preemptible
}

func (o *GoogleLifeSciencesConfiguration) GetBootDiskSizeGb() *int {
	if o == nil {
		return nil
	}
	return o.BootDiskSizeGb
}

func (o *GoogleLifeSciencesConfiguration) GetProjectID() *string {
	if o == nil {
		return nil
	}
	return o.ProjectID
}

func (o *GoogleLifeSciencesConfiguration) GetSSHDaemon() *bool {
	if o == nil {
		return nil
	}
	return o.SSHDaemon
}

func (o *GoogleLifeSciencesConfiguration) GetSSHImage() *string {
	if o == nil {
		return nil
	}
	return o.SSHImage
}

func (o *GoogleLifeSciencesConfiguration) GetDebugMode() *int {
	if o == nil {
		return nil
	}
	return o.DebugMode
}

func (o *GoogleLifeSciencesConfiguration) GetCopyImage() *string {
	if o == nil {
		return nil
	}
	return o.CopyImage
}

func (o *GoogleLifeSciencesConfiguration) GetUsePrivateAddress() *bool {
	if o == nil {
		return nil
	}
	return o.UsePrivateAddress
}

func (o *GoogleLifeSciencesConfiguration) GetLabels() map[string]string {
	if o == nil {
		return nil
	}
	return o.Labels
}

func (o *GoogleLifeSciencesConfiguration) GetPreRunScript() *string {
	if o == nil {
		return nil
	}
	return o.PreRunScript
}

func (o *GoogleLifeSciencesConfiguration) GetPostRunScript() *string {
	if o == nil {
		return nil
	}
	return o.PostRunScript
}

func (o *GoogleLifeSciencesConfiguration) GetHeadJobCpus() *int {
	if o == nil {
		return nil
	}
	return o.HeadJobCpus
}

func (o *GoogleLifeSciencesConfiguration) GetHeadJobMemoryMb() *int {
	if o == nil {
		return nil
	}
	return o.HeadJobMemoryMb
}

func (o *GoogleLifeSciencesConfiguration) GetNextflowConfig() *string {
	if o == nil {
		return nil
	}
	return o.NextflowConfig
}

func (o *GoogleLifeSciencesConfiguration) GetNfsTarget() *string {
	if o == nil {
		return nil
	}
	return o.NfsTarget
}

func (o *GoogleLifeSciencesConfiguration) GetNfsMount() *string {
	if o == nil {
		return nil
	}
	return o.NfsMount
}

func (o *GoogleLifeSciencesConfiguration) GetEnvironment() []ConfigEnvVariable {
	if o == nil {
		return nil
	}
	return o.Environment
}

type SeqeraComputeConfiguration struct {
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	StorageType *string `json:"storageType,omitempty"`
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	LustreID *string  `json:"lustreId,omitempty"`
	Volumes  []string `json:"volumes,omitempty"`
	// Read-only property identifying the compute platform type
	Discriminator      *string `json:"discriminator,omitempty"`
	Region             *string `json:"region,omitempty"`
	ComputeQueue       *string `json:"computeQueue,omitempty"`
	DragenQueue        *string `json:"dragenQueue,omitempty"`
	DragenInstanceType *string `json:"dragenInstanceType,omitempty"`
	ComputeJobRole     *string `json:"computeJobRole,omitempty"`
	ExecutionRole      *string `json:"executionRole,omitempty"`
	HeadQueue          *string `json:"headQueue,omitempty"`
	HeadJobRole        *string `json:"headJobRole,omitempty"`
	CliPath            *string `json:"cliPath,omitempty"`
	// Working directory path for workflow execution
	WorkDir *string `json:"workDir,omitempty"`
	// Shell script to execute before workflow starts
	PreRunScript *string `json:"preRunScript,omitempty"`
	// Shell script to execute after workflow completes
	PostRunScript   *string `json:"postRunScript,omitempty"`
	HeadJobCpus     *int    `json:"headJobCpus,omitempty"`
	HeadJobMemoryMb *int    `json:"headJobMemoryMb,omitempty"`
	// Array of environment variables for the compute environment
	Environment         []ConfigEnvVariable `json:"environment,omitempty"`
	WaveEnabled         *bool               `json:"waveEnabled,omitempty"`
	Fusion2Enabled      *bool               `json:"fusion2Enabled,omitempty"`
	NvnmeStorageEnabled *bool               `json:"nvnmeStorageEnabled,omitempty"`
	LogGroup            *string             `json:"logGroup,omitempty"`
	// Nextflow configuration settings and parameters
	NextflowConfig  *string          `json:"nextflowConfig,omitempty"`
	FusionSnapshots *bool            `json:"fusionSnapshots,omitempty"`
	Forge           *ForgeConfig     `json:"forge,omitempty"`
	ForgedResources []map[string]any `json:"forgedResources,omitempty"`
}

func (o *SeqeraComputeConfiguration) GetStorageType() *string {
	if o == nil {
		return nil
	}
	return o.StorageType
}

func (o *SeqeraComputeConfiguration) GetLustreID() *string {
	if o == nil {
		return nil
	}
	return o.LustreID
}

func (o *SeqeraComputeConfiguration) GetVolumes() []string {
	if o == nil {
		return nil
	}
	return o.Volumes
}

func (o *SeqeraComputeConfiguration) GetDiscriminator() *string {
	if o == nil {
		return nil
	}
	return o.Discriminator
}

func (o *SeqeraComputeConfiguration) GetRegion() *string {
	if o == nil {
		return nil
	}
	return o.Region
}

func (o *SeqeraComputeConfiguration) GetComputeQueue() *string {
	if o == nil {
		return nil
	}
	return o.ComputeQueue
}

func (o *SeqeraComputeConfiguration) GetDragenQueue() *string {
	if o == nil {
		return nil
	}
	return o.DragenQueue
}

func (o *SeqeraComputeConfiguration) GetDragenInstanceType() *string {
	if o == nil {
		return nil
	}
	return o.DragenInstanceType
}

func (o *SeqeraComputeConfiguration) GetComputeJobRole() *string {
	if o == nil {
		return nil
	}
	return o.ComputeJobRole
}

func (o *SeqeraComputeConfiguration) GetExecutionRole() *string {
	if o == nil {
		return nil
	}
	return o.ExecutionRole
}

func (o *SeqeraComputeConfiguration) GetHeadQueue() *string {
	if o == nil {
		return nil
	}
	return o.HeadQueue
}

func (o *SeqeraComputeConfiguration) GetHeadJobRole() *string {
	if o == nil {
		return nil
	}
	return o.HeadJobRole
}

func (o *SeqeraComputeConfiguration) GetCliPath() *string {
	if o == nil {
		return nil
	}
	return o.CliPath
}

func (o *SeqeraComputeConfiguration) GetWorkDir() *string {
	if o == nil {
		return nil
	}
	return o.WorkDir
}

func (o *SeqeraComputeConfiguration) GetPreRunScript() *string {
	if o == nil {
		return nil
	}
	return o.PreRunScript
}

func (o *SeqeraComputeConfiguration) GetPostRunScript() *string {
	if o == nil {
		return nil
	}
	return o.PostRunScript
}

func (o *SeqeraComputeConfiguration) GetHeadJobCpus() *int {
	if o == nil {
		return nil
	}
	return o.HeadJobCpus
}

func (o *SeqeraComputeConfiguration) GetHeadJobMemoryMb() *int {
	if o == nil {
		return nil
	}
	return o.HeadJobMemoryMb
}

func (o *SeqeraComputeConfiguration) GetEnvironment() []ConfigEnvVariable {
	if o == nil {
		return nil
	}
	return o.Environment
}

func (o *SeqeraComputeConfiguration) GetWaveEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.WaveEnabled
}

func (o *SeqeraComputeConfiguration) GetFusion2Enabled() *bool {
	if o == nil {
		return nil
	}
	return o.Fusion2Enabled
}

func (o *SeqeraComputeConfiguration) GetNvnmeStorageEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.NvnmeStorageEnabled
}

func (o *SeqeraComputeConfiguration) GetLogGroup() *string {
	if o == nil {
		return nil
	}
	return o.LogGroup
}

func (o *SeqeraComputeConfiguration) GetNextflowConfig() *string {
	if o == nil {
		return nil
	}
	return o.NextflowConfig
}

func (o *SeqeraComputeConfiguration) GetFusionSnapshots() *bool {
	if o == nil {
		return nil
	}
	return o.FusionSnapshots
}

func (o *SeqeraComputeConfiguration) GetForge() *ForgeConfig {
	if o == nil {
		return nil
	}
	return o.Forge
}

func (o *SeqeraComputeConfiguration) GetForgedResources() []map[string]any {
	if o == nil {
		return nil
	}
	return o.ForgedResources
}

type AWSCloudConfiguration struct {
	// Read-only property identifying the compute platform type
	Discriminator *string  `json:"discriminator,omitempty"`
	AllowBuckets  []string `json:"allowBuckets,omitempty"`
	Region        *string  `json:"region,omitempty"`
	InstanceType  *string  `json:"instanceType,omitempty"`
	ImageID       *string  `json:"imageId,omitempty"`
	// Working directory path for workflow execution
	WorkDir *string `json:"workDir,omitempty"`
	// Shell script to execute before workflow starts
	PreRunScript *string `json:"preRunScript,omitempty"`
	// Shell script to execute after workflow completes
	PostRunScript *string `json:"postRunScript,omitempty"`
	// Nextflow configuration settings and parameters
	NextflowConfig *string `json:"nextflowConfig,omitempty"`
	// Array of environment variables for the compute environment
	Environment        []ConfigEnvVariable `json:"environment,omitempty"`
	WaveEnabled        *bool               `json:"waveEnabled,omitempty"`
	Fusion2Enabled     *bool               `json:"fusion2Enabled,omitempty"`
	LogGroup           *string             `json:"logGroup,omitempty"`
	Arm64Enabled       *bool               `json:"arm64Enabled,omitempty"`
	GpuEnabled         *bool               `json:"gpuEnabled,omitempty"`
	Ec2KeyPair         *string             `json:"ec2KeyPair,omitempty"`
	EbsBootSize        *int                `json:"ebsBootSize,omitempty"`
	InstanceProfileArn *string             `json:"instanceProfileArn,omitempty"`
	SubnetID           *string             `json:"subnetId,omitempty"`
	SecurityGroups     []string            `json:"securityGroups,omitempty"`
	ForgedResources    []map[string]any    `json:"forgedResources,omitempty"`
}

func (o *AWSCloudConfiguration) GetDiscriminator() *string {
	if o == nil {
		return nil
	}
	return o.Discriminator
}

func (o *AWSCloudConfiguration) GetAllowBuckets() []string {
	if o == nil {
		return nil
	}
	return o.AllowBuckets
}

func (o *AWSCloudConfiguration) GetRegion() *string {
	if o == nil {
		return nil
	}
	return o.Region
}

func (o *AWSCloudConfiguration) GetInstanceType() *string {
	if o == nil {
		return nil
	}
	return o.InstanceType
}

func (o *AWSCloudConfiguration) GetImageID() *string {
	if o == nil {
		return nil
	}
	return o.ImageID
}

func (o *AWSCloudConfiguration) GetWorkDir() *string {
	if o == nil {
		return nil
	}
	return o.WorkDir
}

func (o *AWSCloudConfiguration) GetPreRunScript() *string {
	if o == nil {
		return nil
	}
	return o.PreRunScript
}

func (o *AWSCloudConfiguration) GetPostRunScript() *string {
	if o == nil {
		return nil
	}
	return o.PostRunScript
}

func (o *AWSCloudConfiguration) GetNextflowConfig() *string {
	if o == nil {
		return nil
	}
	return o.NextflowConfig
}

func (o *AWSCloudConfiguration) GetEnvironment() []ConfigEnvVariable {
	if o == nil {
		return nil
	}
	return o.Environment
}

func (o *AWSCloudConfiguration) GetWaveEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.WaveEnabled
}

func (o *AWSCloudConfiguration) GetFusion2Enabled() *bool {
	if o == nil {
		return nil
	}
	return o.Fusion2Enabled
}

func (o *AWSCloudConfiguration) GetLogGroup() *string {
	if o == nil {
		return nil
	}
	return o.LogGroup
}

func (o *AWSCloudConfiguration) GetArm64Enabled() *bool {
	if o == nil {
		return nil
	}
	return o.Arm64Enabled
}

func (o *AWSCloudConfiguration) GetGpuEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.GpuEnabled
}

func (o *AWSCloudConfiguration) GetEc2KeyPair() *string {
	if o == nil {
		return nil
	}
	return o.Ec2KeyPair
}

func (o *AWSCloudConfiguration) GetEbsBootSize() *int {
	if o == nil {
		return nil
	}
	return o.EbsBootSize
}

func (o *AWSCloudConfiguration) GetInstanceProfileArn() *string {
	if o == nil {
		return nil
	}
	return o.InstanceProfileArn
}

func (o *AWSCloudConfiguration) GetSubnetID() *string {
	if o == nil {
		return nil
	}
	return o.SubnetID
}

func (o *AWSCloudConfiguration) GetSecurityGroups() []string {
	if o == nil {
		return nil
	}
	return o.SecurityGroups
}

func (o *AWSCloudConfiguration) GetForgedResources() []map[string]any {
	if o == nil {
		return nil
	}
	return o.ForgedResources
}

type AWSBatchConfiguration struct {
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	StorageType *string `json:"storageType,omitempty"`
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	LustreID *string  `json:"lustreId,omitempty"`
	Volumes  []string `json:"volumes,omitempty"`
	// Read-only property identifying the compute platform type
	Discriminator      *string `json:"discriminator,omitempty"`
	Region             *string `json:"region,omitempty"`
	ComputeQueue       *string `json:"computeQueue,omitempty"`
	DragenQueue        *string `json:"dragenQueue,omitempty"`
	DragenInstanceType *string `json:"dragenInstanceType,omitempty"`
	ComputeJobRole     *string `json:"computeJobRole,omitempty"`
	ExecutionRole      *string `json:"executionRole,omitempty"`
	HeadQueue          *string `json:"headQueue,omitempty"`
	HeadJobRole        *string `json:"headJobRole,omitempty"`
	CliPath            *string `json:"cliPath,omitempty"`
	// Working directory path for workflow execution
	WorkDir *string `json:"workDir,omitempty"`
	// Shell script to execute before workflow starts
	PreRunScript *string `json:"preRunScript,omitempty"`
	// Shell script to execute after workflow completes
	PostRunScript   *string `json:"postRunScript,omitempty"`
	HeadJobCpus     *int    `json:"headJobCpus,omitempty"`
	HeadJobMemoryMb *int    `json:"headJobMemoryMb,omitempty"`
	// Array of environment variables for the compute environment
	Environment         []ConfigEnvVariable `json:"environment,omitempty"`
	WaveEnabled         *bool               `json:"waveEnabled,omitempty"`
	Fusion2Enabled      *bool               `json:"fusion2Enabled,omitempty"`
	NvnmeStorageEnabled *bool               `json:"nvnmeStorageEnabled,omitempty"`
	LogGroup            *string             `json:"logGroup,omitempty"`
	// Nextflow configuration settings and parameters
	NextflowConfig  *string          `json:"nextflowConfig,omitempty"`
	FusionSnapshots *bool            `json:"fusionSnapshots,omitempty"`
	Forge           *ForgeConfig     `json:"forge,omitempty"`
	ForgedResources []map[string]any `json:"forgedResources,omitempty"`
}

func (o *AWSBatchConfiguration) GetStorageType() *string {
	if o == nil {
		return nil
	}
	return o.StorageType
}

func (o *AWSBatchConfiguration) GetLustreID() *string {
	if o == nil {
		return nil
	}
	return o.LustreID
}

func (o *AWSBatchConfiguration) GetVolumes() []string {
	if o == nil {
		return nil
	}
	return o.Volumes
}

func (o *AWSBatchConfiguration) GetDiscriminator() *string {
	if o == nil {
		return nil
	}
	return o.Discriminator
}

func (o *AWSBatchConfiguration) GetRegion() *string {
	if o == nil {
		return nil
	}
	return o.Region
}

func (o *AWSBatchConfiguration) GetComputeQueue() *string {
	if o == nil {
		return nil
	}
	return o.ComputeQueue
}

func (o *AWSBatchConfiguration) GetDragenQueue() *string {
	if o == nil {
		return nil
	}
	return o.DragenQueue
}

func (o *AWSBatchConfiguration) GetDragenInstanceType() *string {
	if o == nil {
		return nil
	}
	return o.DragenInstanceType
}

func (o *AWSBatchConfiguration) GetComputeJobRole() *string {
	if o == nil {
		return nil
	}
	return o.ComputeJobRole
}

func (o *AWSBatchConfiguration) GetExecutionRole() *string {
	if o == nil {
		return nil
	}
	return o.ExecutionRole
}

func (o *AWSBatchConfiguration) GetHeadQueue() *string {
	if o == nil {
		return nil
	}
	return o.HeadQueue
}

func (o *AWSBatchConfiguration) GetHeadJobRole() *string {
	if o == nil {
		return nil
	}
	return o.HeadJobRole
}

func (o *AWSBatchConfiguration) GetCliPath() *string {
	if o == nil {
		return nil
	}
	return o.CliPath
}

func (o *AWSBatchConfiguration) GetWorkDir() *string {
	if o == nil {
		return nil
	}
	return o.WorkDir
}

func (o *AWSBatchConfiguration) GetPreRunScript() *string {
	if o == nil {
		return nil
	}
	return o.PreRunScript
}

func (o *AWSBatchConfiguration) GetPostRunScript() *string {
	if o == nil {
		return nil
	}
	return o.PostRunScript
}

func (o *AWSBatchConfiguration) GetHeadJobCpus() *int {
	if o == nil {
		return nil
	}
	return o.HeadJobCpus
}

func (o *AWSBatchConfiguration) GetHeadJobMemoryMb() *int {
	if o == nil {
		return nil
	}
	return o.HeadJobMemoryMb
}

func (o *AWSBatchConfiguration) GetEnvironment() []ConfigEnvVariable {
	if o == nil {
		return nil
	}
	return o.Environment
}

func (o *AWSBatchConfiguration) GetWaveEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.WaveEnabled
}

func (o *AWSBatchConfiguration) GetFusion2Enabled() *bool {
	if o == nil {
		return nil
	}
	return o.Fusion2Enabled
}

func (o *AWSBatchConfiguration) GetNvnmeStorageEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.NvnmeStorageEnabled
}

func (o *AWSBatchConfiguration) GetLogGroup() *string {
	if o == nil {
		return nil
	}
	return o.LogGroup
}

func (o *AWSBatchConfiguration) GetNextflowConfig() *string {
	if o == nil {
		return nil
	}
	return o.NextflowConfig
}

func (o *AWSBatchConfiguration) GetFusionSnapshots() *bool {
	if o == nil {
		return nil
	}
	return o.FusionSnapshots
}

func (o *AWSBatchConfiguration) GetForge() *ForgeConfig {
	if o == nil {
		return nil
	}
	return o.Forge
}

func (o *AWSBatchConfiguration) GetForgedResources() []map[string]any {
	if o == nil {
		return nil
	}
	return o.ForgedResources
}

type ComputeConfigType string

const (
	ComputeConfigTypeMoabPlatform          ComputeConfigType = "moab-platform"
	ComputeConfigTypeAwsBatch              ComputeConfigType = "aws-batch"
	ComputeConfigTypeGkePlatform           ComputeConfigType = "gke-platform"
	ComputeConfigTypeGoogleBatch           ComputeConfigType = "google-batch"
	ComputeConfigTypeAwsCloud              ComputeConfigType = "aws-cloud"
	ComputeConfigTypeSlurmPlatform         ComputeConfigType = "slurm-platform"
	ComputeConfigTypeK8sPlatform           ComputeConfigType = "k8s-platform"
	ComputeConfigTypeAltairPlatform        ComputeConfigType = "altair-platform"
	ComputeConfigTypeLsfPlatform           ComputeConfigType = "lsf-platform"
	ComputeConfigTypeAzureBatch            ComputeConfigType = "azure-batch"
	ComputeConfigTypeSeqeracomputePlatform ComputeConfigType = "seqeracompute-platform"
	ComputeConfigTypeEksPlatform           ComputeConfigType = "eks-platform"
	ComputeConfigTypeGoogleLifesciences    ComputeConfigType = "google-lifesciences"
	ComputeConfigTypeUgePlatform           ComputeConfigType = "uge-platform"
)

// ComputeConfig - Configuration settings for compute environments including work directories,
// pre/post run scripts, and environment-specific parameters.
type ComputeConfig struct {
	AWSBatchConfiguration           *AWSBatchConfiguration           `queryParam:"inline"`
	AWSCloudConfiguration           *AWSCloudConfiguration           `queryParam:"inline"`
	SeqeraComputeConfiguration      *SeqeraComputeConfiguration      `queryParam:"inline"`
	GoogleLifeSciencesConfiguration *GoogleLifeSciencesConfiguration `queryParam:"inline"`
	GoogleBatchServiceConfiguration *GoogleBatchServiceConfiguration `queryParam:"inline"`
	AzureBatchConfiguration         *AzureBatchConfiguration         `queryParam:"inline"`
	IBMLSFConfiguration             *IBMLSFConfiguration             `queryParam:"inline"`
	SlurmConfiguration              *SlurmConfiguration              `queryParam:"inline"`
	KubernetesComputeConfiguration  *KubernetesComputeConfiguration  `queryParam:"inline"`
	AmazonEKSClusterConfiguration   *AmazonEKSClusterConfiguration   `queryParam:"inline"`
	GoogleGKEClusterConfiguration   *GoogleGKEClusterConfiguration   `queryParam:"inline"`
	UnivaGridEngineConfiguration    *UnivaGridEngineConfiguration    `queryParam:"inline"`
	AltairPBSConfiguration          *AltairPBSConfiguration          `queryParam:"inline"`
	MoabConfiguration               *MoabConfiguration               `queryParam:"inline"`

	Type ComputeConfigType
}

func CreateComputeConfigMoabPlatform(moabPlatform MoabConfiguration) ComputeConfig {
	typ := ComputeConfigTypeMoabPlatform

	typStr := string(typ)
	moabPlatform.Discriminator = &typStr

	return ComputeConfig{
		MoabConfiguration: &moabPlatform,
		Type:              typ,
	}
}

func CreateComputeConfigAwsBatch(awsBatch AWSBatchConfiguration) ComputeConfig {
	typ := ComputeConfigTypeAwsBatch

	typStr := string(typ)
	awsBatch.Discriminator = &typStr

	return ComputeConfig{
		AWSBatchConfiguration: &awsBatch,
		Type:                  typ,
	}
}

func CreateComputeConfigGkePlatform(gkePlatform GoogleGKEClusterConfiguration) ComputeConfig {
	typ := ComputeConfigTypeGkePlatform

	typStr := string(typ)
	gkePlatform.Discriminator = &typStr

	return ComputeConfig{
		GoogleGKEClusterConfiguration: &gkePlatform,
		Type:                          typ,
	}
}

func CreateComputeConfigGoogleBatch(googleBatch GoogleBatchServiceConfiguration) ComputeConfig {
	typ := ComputeConfigTypeGoogleBatch

	typStr := string(typ)
	googleBatch.Discriminator = &typStr

	return ComputeConfig{
		GoogleBatchServiceConfiguration: &googleBatch,
		Type:                            typ,
	}
}

func CreateComputeConfigAwsCloud(awsCloud AWSCloudConfiguration) ComputeConfig {
	typ := ComputeConfigTypeAwsCloud

	typStr := string(typ)
	awsCloud.Discriminator = &typStr

	return ComputeConfig{
		AWSCloudConfiguration: &awsCloud,
		Type:                  typ,
	}
}

func CreateComputeConfigSlurmPlatform(slurmPlatform SlurmConfiguration) ComputeConfig {
	typ := ComputeConfigTypeSlurmPlatform

	typStr := string(typ)
	slurmPlatform.Discriminator = &typStr

	return ComputeConfig{
		SlurmConfiguration: &slurmPlatform,
		Type:               typ,
	}
}

func CreateComputeConfigK8sPlatform(k8sPlatform KubernetesComputeConfiguration) ComputeConfig {
	typ := ComputeConfigTypeK8sPlatform

	typStr := string(typ)
	k8sPlatform.Discriminator = &typStr

	return ComputeConfig{
		KubernetesComputeConfiguration: &k8sPlatform,
		Type:                           typ,
	}
}

func CreateComputeConfigAltairPlatform(altairPlatform AltairPBSConfiguration) ComputeConfig {
	typ := ComputeConfigTypeAltairPlatform

	typStr := string(typ)
	altairPlatform.Discriminator = &typStr

	return ComputeConfig{
		AltairPBSConfiguration: &altairPlatform,
		Type:                   typ,
	}
}

func CreateComputeConfigLsfPlatform(lsfPlatform IBMLSFConfiguration) ComputeConfig {
	typ := ComputeConfigTypeLsfPlatform

	typStr := string(typ)
	lsfPlatform.Discriminator = &typStr

	return ComputeConfig{
		IBMLSFConfiguration: &lsfPlatform,
		Type:                typ,
	}
}

func CreateComputeConfigAzureBatch(azureBatch AzureBatchConfiguration) ComputeConfig {
	typ := ComputeConfigTypeAzureBatch

	typStr := string(typ)
	azureBatch.Discriminator = &typStr

	return ComputeConfig{
		AzureBatchConfiguration: &azureBatch,
		Type:                    typ,
	}
}

func CreateComputeConfigSeqeracomputePlatform(seqeracomputePlatform SeqeraComputeConfiguration) ComputeConfig {
	typ := ComputeConfigTypeSeqeracomputePlatform

	typStr := string(typ)
	seqeracomputePlatform.Discriminator = &typStr

	return ComputeConfig{
		SeqeraComputeConfiguration: &seqeracomputePlatform,
		Type:                       typ,
	}
}

func CreateComputeConfigEksPlatform(eksPlatform AmazonEKSClusterConfiguration) ComputeConfig {
	typ := ComputeConfigTypeEksPlatform

	typStr := string(typ)
	eksPlatform.Discriminator = &typStr

	return ComputeConfig{
		AmazonEKSClusterConfiguration: &eksPlatform,
		Type:                          typ,
	}
}

func CreateComputeConfigGoogleLifesciences(googleLifesciences GoogleLifeSciencesConfiguration) ComputeConfig {
	typ := ComputeConfigTypeGoogleLifesciences

	typStr := string(typ)
	googleLifesciences.Discriminator = &typStr

	return ComputeConfig{
		GoogleLifeSciencesConfiguration: &googleLifesciences,
		Type:                            typ,
	}
}

func CreateComputeConfigUgePlatform(ugePlatform UnivaGridEngineConfiguration) ComputeConfig {
	typ := ComputeConfigTypeUgePlatform

	typStr := string(typ)
	ugePlatform.Discriminator = &typStr

	return ComputeConfig{
		UnivaGridEngineConfiguration: &ugePlatform,
		Type:                         typ,
	}
}

func (u *ComputeConfig) UnmarshalJSON(data []byte) error {

	type discriminator struct {
		Discriminator string `json:"discriminator"`
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.Discriminator {
	case "moab-platform":
		moabConfiguration := new(MoabConfiguration)
		if err := utils.UnmarshalJSON(data, &moabConfiguration, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Discriminator == moab-platform) type MoabConfiguration within ComputeConfig: %w", string(data), err)
		}

		u.MoabConfiguration = moabConfiguration
		u.Type = ComputeConfigTypeMoabPlatform
		return nil
	case "aws-batch":
		awsBatchConfiguration := new(AWSBatchConfiguration)
		if err := utils.UnmarshalJSON(data, &awsBatchConfiguration, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Discriminator == aws-batch) type AWSBatchConfiguration within ComputeConfig: %w", string(data), err)
		}

		u.AWSBatchConfiguration = awsBatchConfiguration
		u.Type = ComputeConfigTypeAwsBatch
		return nil
	case "gke-platform":
		googleGKEClusterConfiguration := new(GoogleGKEClusterConfiguration)
		if err := utils.UnmarshalJSON(data, &googleGKEClusterConfiguration, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Discriminator == gke-platform) type GoogleGKEClusterConfiguration within ComputeConfig: %w", string(data), err)
		}

		u.GoogleGKEClusterConfiguration = googleGKEClusterConfiguration
		u.Type = ComputeConfigTypeGkePlatform
		return nil
	case "google-batch":
		googleBatchServiceConfiguration := new(GoogleBatchServiceConfiguration)
		if err := utils.UnmarshalJSON(data, &googleBatchServiceConfiguration, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Discriminator == google-batch) type GoogleBatchServiceConfiguration within ComputeConfig: %w", string(data), err)
		}

		u.GoogleBatchServiceConfiguration = googleBatchServiceConfiguration
		u.Type = ComputeConfigTypeGoogleBatch
		return nil
	case "aws-cloud":
		awsCloudConfiguration := new(AWSCloudConfiguration)
		if err := utils.UnmarshalJSON(data, &awsCloudConfiguration, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Discriminator == aws-cloud) type AWSCloudConfiguration within ComputeConfig: %w", string(data), err)
		}

		u.AWSCloudConfiguration = awsCloudConfiguration
		u.Type = ComputeConfigTypeAwsCloud
		return nil
	case "slurm-platform":
		slurmConfiguration := new(SlurmConfiguration)
		if err := utils.UnmarshalJSON(data, &slurmConfiguration, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Discriminator == slurm-platform) type SlurmConfiguration within ComputeConfig: %w", string(data), err)
		}

		u.SlurmConfiguration = slurmConfiguration
		u.Type = ComputeConfigTypeSlurmPlatform
		return nil
	case "k8s-platform":
		kubernetesComputeConfiguration := new(KubernetesComputeConfiguration)
		if err := utils.UnmarshalJSON(data, &kubernetesComputeConfiguration, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Discriminator == k8s-platform) type KubernetesComputeConfiguration within ComputeConfig: %w", string(data), err)
		}

		u.KubernetesComputeConfiguration = kubernetesComputeConfiguration
		u.Type = ComputeConfigTypeK8sPlatform
		return nil
	case "altair-platform":
		altairPBSConfiguration := new(AltairPBSConfiguration)
		if err := utils.UnmarshalJSON(data, &altairPBSConfiguration, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Discriminator == altair-platform) type AltairPBSConfiguration within ComputeConfig: %w", string(data), err)
		}

		u.AltairPBSConfiguration = altairPBSConfiguration
		u.Type = ComputeConfigTypeAltairPlatform
		return nil
	case "lsf-platform":
		ibmLSFConfiguration := new(IBMLSFConfiguration)
		if err := utils.UnmarshalJSON(data, &ibmLSFConfiguration, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Discriminator == lsf-platform) type IBMLSFConfiguration within ComputeConfig: %w", string(data), err)
		}

		u.IBMLSFConfiguration = ibmLSFConfiguration
		u.Type = ComputeConfigTypeLsfPlatform
		return nil
	case "azure-batch":
		azureBatchConfiguration := new(AzureBatchConfiguration)
		if err := utils.UnmarshalJSON(data, &azureBatchConfiguration, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Discriminator == azure-batch) type AzureBatchConfiguration within ComputeConfig: %w", string(data), err)
		}

		u.AzureBatchConfiguration = azureBatchConfiguration
		u.Type = ComputeConfigTypeAzureBatch
		return nil
	case "seqeracompute-platform":
		seqeraComputeConfiguration := new(SeqeraComputeConfiguration)
		if err := utils.UnmarshalJSON(data, &seqeraComputeConfiguration, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Discriminator == seqeracompute-platform) type SeqeraComputeConfiguration within ComputeConfig: %w", string(data), err)
		}

		u.SeqeraComputeConfiguration = seqeraComputeConfiguration
		u.Type = ComputeConfigTypeSeqeracomputePlatform
		return nil
	case "eks-platform":
		amazonEKSClusterConfiguration := new(AmazonEKSClusterConfiguration)
		if err := utils.UnmarshalJSON(data, &amazonEKSClusterConfiguration, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Discriminator == eks-platform) type AmazonEKSClusterConfiguration within ComputeConfig: %w", string(data), err)
		}

		u.AmazonEKSClusterConfiguration = amazonEKSClusterConfiguration
		u.Type = ComputeConfigTypeEksPlatform
		return nil
	case "google-lifesciences":
		googleLifeSciencesConfiguration := new(GoogleLifeSciencesConfiguration)
		if err := utils.UnmarshalJSON(data, &googleLifeSciencesConfiguration, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Discriminator == google-lifesciences) type GoogleLifeSciencesConfiguration within ComputeConfig: %w", string(data), err)
		}

		u.GoogleLifeSciencesConfiguration = googleLifeSciencesConfiguration
		u.Type = ComputeConfigTypeGoogleLifesciences
		return nil
	case "uge-platform":
		univaGridEngineConfiguration := new(UnivaGridEngineConfiguration)
		if err := utils.UnmarshalJSON(data, &univaGridEngineConfiguration, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Discriminator == uge-platform) type UnivaGridEngineConfiguration within ComputeConfig: %w", string(data), err)
		}

		u.UnivaGridEngineConfiguration = univaGridEngineConfiguration
		u.Type = ComputeConfigTypeUgePlatform
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ComputeConfig", string(data))
}

func (u ComputeConfig) MarshalJSON() ([]byte, error) {
	if u.AWSBatchConfiguration != nil {
		return utils.MarshalJSON(u.AWSBatchConfiguration, "", true)
	}

	if u.AWSCloudConfiguration != nil {
		return utils.MarshalJSON(u.AWSCloudConfiguration, "", true)
	}

	if u.SeqeraComputeConfiguration != nil {
		return utils.MarshalJSON(u.SeqeraComputeConfiguration, "", true)
	}

	if u.GoogleLifeSciencesConfiguration != nil {
		return utils.MarshalJSON(u.GoogleLifeSciencesConfiguration, "", true)
	}

	if u.GoogleBatchServiceConfiguration != nil {
		return utils.MarshalJSON(u.GoogleBatchServiceConfiguration, "", true)
	}

	if u.AzureBatchConfiguration != nil {
		return utils.MarshalJSON(u.AzureBatchConfiguration, "", true)
	}

	if u.IBMLSFConfiguration != nil {
		return utils.MarshalJSON(u.IBMLSFConfiguration, "", true)
	}

	if u.SlurmConfiguration != nil {
		return utils.MarshalJSON(u.SlurmConfiguration, "", true)
	}

	if u.KubernetesComputeConfiguration != nil {
		return utils.MarshalJSON(u.KubernetesComputeConfiguration, "", true)
	}

	if u.AmazonEKSClusterConfiguration != nil {
		return utils.MarshalJSON(u.AmazonEKSClusterConfiguration, "", true)
	}

	if u.GoogleGKEClusterConfiguration != nil {
		return utils.MarshalJSON(u.GoogleGKEClusterConfiguration, "", true)
	}

	if u.UnivaGridEngineConfiguration != nil {
		return utils.MarshalJSON(u.UnivaGridEngineConfiguration, "", true)
	}

	if u.AltairPBSConfiguration != nil {
		return utils.MarshalJSON(u.AltairPBSConfiguration, "", true)
	}

	if u.MoabConfiguration != nil {
		return utils.MarshalJSON(u.MoabConfiguration, "", true)
	}

	return nil, errors.New("could not marshal union type ComputeConfig: all fields are null")
}
