// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/seqeralabs/terraform-provider-seqera/internal/sdk/internal/utils"
)

type ComputeConfigLocalExecutionConfiguration struct {
	// Read-only property identifying the compute platform type
	Discriminator *string `json:"discriminator,omitempty"`
	// Working directory path for workflow execution
	WorkDir string `json:"workDir"`
	// Shell script to execute before workflow starts
	PreRunScript *string `json:"preRunScript,omitempty"`
	// Shell script to execute after workflow completes
	PostRunScript *string `json:"postRunScript,omitempty"`
	// Array of environment variables for the compute environment
	Environment    []ConfigEnvVariable `json:"environment,omitempty"`
	WaveEnabled    *bool               `json:"waveEnabled,omitempty"`
	Fusion2Enabled *bool               `json:"fusion2Enabled,omitempty"`
	// Nextflow configuration settings and parameters
	NextflowConfig *string `json:"nextflowConfig,omitempty"`
}

func (c ComputeConfigLocalExecutionConfiguration) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ComputeConfigLocalExecutionConfiguration) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"workDir"}); err != nil {
		return err
	}
	return nil
}

func (c *ComputeConfigLocalExecutionConfiguration) GetDiscriminator() *string {
	if c == nil {
		return nil
	}
	return c.Discriminator
}

func (c *ComputeConfigLocalExecutionConfiguration) GetWorkDir() string {
	if c == nil {
		return ""
	}
	return c.WorkDir
}

func (c *ComputeConfigLocalExecutionConfiguration) GetPreRunScript() *string {
	if c == nil {
		return nil
	}
	return c.PreRunScript
}

func (c *ComputeConfigLocalExecutionConfiguration) GetPostRunScript() *string {
	if c == nil {
		return nil
	}
	return c.PostRunScript
}

func (c *ComputeConfigLocalExecutionConfiguration) GetEnvironment() []ConfigEnvVariable {
	if c == nil {
		return nil
	}
	return c.Environment
}

func (c *ComputeConfigLocalExecutionConfiguration) GetWaveEnabled() *bool {
	if c == nil {
		return nil
	}
	return c.WaveEnabled
}

func (c *ComputeConfigLocalExecutionConfiguration) GetFusion2Enabled() *bool {
	if c == nil {
		return nil
	}
	return c.Fusion2Enabled
}

func (c *ComputeConfigLocalExecutionConfiguration) GetNextflowConfig() *string {
	if c == nil {
		return nil
	}
	return c.NextflowConfig
}

type ComputeConfigMoabConfiguration struct {
	// Read-only property identifying the compute platform type
	Discriminator *string `json:"discriminator,omitempty"`
	// Working directory path for workflow execution
	WorkDir                 string  `json:"workDir"`
	LaunchDir               *string `json:"launchDir,omitempty"`
	UserName                *string `json:"userName,omitempty"`
	HostName                *string `json:"hostName,omitempty"`
	Port                    *int    `json:"port,omitempty"`
	HeadQueue               *string `json:"headQueue,omitempty"`
	ComputeQueue            *string `json:"computeQueue,omitempty"`
	MaxQueueSize            *int    `json:"maxQueueSize,omitempty"`
	HeadJobOptions          *string `json:"headJobOptions,omitempty"`
	PropagateHeadJobOptions *bool   `json:"propagateHeadJobOptions,omitempty"`
	// Shell script to execute before workflow starts
	PreRunScript *string `json:"preRunScript,omitempty"`
	// Shell script to execute after workflow completes
	PostRunScript *string `json:"postRunScript,omitempty"`
	// Nextflow configuration settings and parameters
	NextflowConfig *string `json:"nextflowConfig,omitempty"`
	// Array of environment variables for the compute environment
	Environment []ConfigEnvVariable `json:"environment,omitempty"`
}

func (c ComputeConfigMoabConfiguration) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ComputeConfigMoabConfiguration) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"workDir"}); err != nil {
		return err
	}
	return nil
}

func (c *ComputeConfigMoabConfiguration) GetDiscriminator() *string {
	if c == nil {
		return nil
	}
	return c.Discriminator
}

func (c *ComputeConfigMoabConfiguration) GetWorkDir() string {
	if c == nil {
		return ""
	}
	return c.WorkDir
}

func (c *ComputeConfigMoabConfiguration) GetLaunchDir() *string {
	if c == nil {
		return nil
	}
	return c.LaunchDir
}

func (c *ComputeConfigMoabConfiguration) GetUserName() *string {
	if c == nil {
		return nil
	}
	return c.UserName
}

func (c *ComputeConfigMoabConfiguration) GetHostName() *string {
	if c == nil {
		return nil
	}
	return c.HostName
}

func (c *ComputeConfigMoabConfiguration) GetPort() *int {
	if c == nil {
		return nil
	}
	return c.Port
}

func (c *ComputeConfigMoabConfiguration) GetHeadQueue() *string {
	if c == nil {
		return nil
	}
	return c.HeadQueue
}

func (c *ComputeConfigMoabConfiguration) GetComputeQueue() *string {
	if c == nil {
		return nil
	}
	return c.ComputeQueue
}

func (c *ComputeConfigMoabConfiguration) GetMaxQueueSize() *int {
	if c == nil {
		return nil
	}
	return c.MaxQueueSize
}

func (c *ComputeConfigMoabConfiguration) GetHeadJobOptions() *string {
	if c == nil {
		return nil
	}
	return c.HeadJobOptions
}

func (c *ComputeConfigMoabConfiguration) GetPropagateHeadJobOptions() *bool {
	if c == nil {
		return nil
	}
	return c.PropagateHeadJobOptions
}

func (c *ComputeConfigMoabConfiguration) GetPreRunScript() *string {
	if c == nil {
		return nil
	}
	return c.PreRunScript
}

func (c *ComputeConfigMoabConfiguration) GetPostRunScript() *string {
	if c == nil {
		return nil
	}
	return c.PostRunScript
}

func (c *ComputeConfigMoabConfiguration) GetNextflowConfig() *string {
	if c == nil {
		return nil
	}
	return c.NextflowConfig
}

func (c *ComputeConfigMoabConfiguration) GetEnvironment() []ConfigEnvVariable {
	if c == nil {
		return nil
	}
	return c.Environment
}

type ComputeConfigAltairPBSConfiguration struct {
	// Read-only property identifying the compute platform type
	Discriminator *string `json:"discriminator,omitempty"`
	// Working directory path for workflow execution
	WorkDir                 string  `json:"workDir"`
	LaunchDir               *string `json:"launchDir,omitempty"`
	UserName                *string `json:"userName,omitempty"`
	HostName                *string `json:"hostName,omitempty"`
	Port                    *int    `json:"port,omitempty"`
	HeadQueue               *string `json:"headQueue,omitempty"`
	ComputeQueue            *string `json:"computeQueue,omitempty"`
	MaxQueueSize            *int    `json:"maxQueueSize,omitempty"`
	HeadJobOptions          *string `json:"headJobOptions,omitempty"`
	PropagateHeadJobOptions *bool   `json:"propagateHeadJobOptions,omitempty"`
	// Shell script to execute before workflow starts
	PreRunScript *string `json:"preRunScript,omitempty"`
	// Shell script to execute after workflow completes
	PostRunScript *string `json:"postRunScript,omitempty"`
	// Nextflow configuration settings and parameters
	NextflowConfig *string `json:"nextflowConfig,omitempty"`
	// Array of environment variables for the compute environment
	Environment []ConfigEnvVariable `json:"environment,omitempty"`
}

func (c ComputeConfigAltairPBSConfiguration) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ComputeConfigAltairPBSConfiguration) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"workDir"}); err != nil {
		return err
	}
	return nil
}

func (c *ComputeConfigAltairPBSConfiguration) GetDiscriminator() *string {
	if c == nil {
		return nil
	}
	return c.Discriminator
}

func (c *ComputeConfigAltairPBSConfiguration) GetWorkDir() string {
	if c == nil {
		return ""
	}
	return c.WorkDir
}

func (c *ComputeConfigAltairPBSConfiguration) GetLaunchDir() *string {
	if c == nil {
		return nil
	}
	return c.LaunchDir
}

func (c *ComputeConfigAltairPBSConfiguration) GetUserName() *string {
	if c == nil {
		return nil
	}
	return c.UserName
}

func (c *ComputeConfigAltairPBSConfiguration) GetHostName() *string {
	if c == nil {
		return nil
	}
	return c.HostName
}

func (c *ComputeConfigAltairPBSConfiguration) GetPort() *int {
	if c == nil {
		return nil
	}
	return c.Port
}

func (c *ComputeConfigAltairPBSConfiguration) GetHeadQueue() *string {
	if c == nil {
		return nil
	}
	return c.HeadQueue
}

func (c *ComputeConfigAltairPBSConfiguration) GetComputeQueue() *string {
	if c == nil {
		return nil
	}
	return c.ComputeQueue
}

func (c *ComputeConfigAltairPBSConfiguration) GetMaxQueueSize() *int {
	if c == nil {
		return nil
	}
	return c.MaxQueueSize
}

func (c *ComputeConfigAltairPBSConfiguration) GetHeadJobOptions() *string {
	if c == nil {
		return nil
	}
	return c.HeadJobOptions
}

func (c *ComputeConfigAltairPBSConfiguration) GetPropagateHeadJobOptions() *bool {
	if c == nil {
		return nil
	}
	return c.PropagateHeadJobOptions
}

func (c *ComputeConfigAltairPBSConfiguration) GetPreRunScript() *string {
	if c == nil {
		return nil
	}
	return c.PreRunScript
}

func (c *ComputeConfigAltairPBSConfiguration) GetPostRunScript() *string {
	if c == nil {
		return nil
	}
	return c.PostRunScript
}

func (c *ComputeConfigAltairPBSConfiguration) GetNextflowConfig() *string {
	if c == nil {
		return nil
	}
	return c.NextflowConfig
}

func (c *ComputeConfigAltairPBSConfiguration) GetEnvironment() []ConfigEnvVariable {
	if c == nil {
		return nil
	}
	return c.Environment
}

type ComputeConfigUnivaGridEngineConfiguration struct {
	// Read-only property identifying the compute platform type
	Discriminator *string `json:"discriminator,omitempty"`
	// Working directory path for workflow execution
	WorkDir                 string  `json:"workDir"`
	LaunchDir               *string `json:"launchDir,omitempty"`
	UserName                *string `json:"userName,omitempty"`
	HostName                *string `json:"hostName,omitempty"`
	Port                    *int    `json:"port,omitempty"`
	HeadQueue               *string `json:"headQueue,omitempty"`
	ComputeQueue            *string `json:"computeQueue,omitempty"`
	MaxQueueSize            *int    `json:"maxQueueSize,omitempty"`
	HeadJobOptions          *string `json:"headJobOptions,omitempty"`
	PropagateHeadJobOptions *bool   `json:"propagateHeadJobOptions,omitempty"`
	// Shell script to execute before workflow starts
	PreRunScript *string `json:"preRunScript,omitempty"`
	// Shell script to execute after workflow completes
	PostRunScript *string `json:"postRunScript,omitempty"`
	// Nextflow configuration settings and parameters
	NextflowConfig *string `json:"nextflowConfig,omitempty"`
	// Array of environment variables for the compute environment
	Environment []ConfigEnvVariable `json:"environment,omitempty"`
}

func (c ComputeConfigUnivaGridEngineConfiguration) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ComputeConfigUnivaGridEngineConfiguration) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"workDir"}); err != nil {
		return err
	}
	return nil
}

func (c *ComputeConfigUnivaGridEngineConfiguration) GetDiscriminator() *string {
	if c == nil {
		return nil
	}
	return c.Discriminator
}

func (c *ComputeConfigUnivaGridEngineConfiguration) GetWorkDir() string {
	if c == nil {
		return ""
	}
	return c.WorkDir
}

func (c *ComputeConfigUnivaGridEngineConfiguration) GetLaunchDir() *string {
	if c == nil {
		return nil
	}
	return c.LaunchDir
}

func (c *ComputeConfigUnivaGridEngineConfiguration) GetUserName() *string {
	if c == nil {
		return nil
	}
	return c.UserName
}

func (c *ComputeConfigUnivaGridEngineConfiguration) GetHostName() *string {
	if c == nil {
		return nil
	}
	return c.HostName
}

func (c *ComputeConfigUnivaGridEngineConfiguration) GetPort() *int {
	if c == nil {
		return nil
	}
	return c.Port
}

func (c *ComputeConfigUnivaGridEngineConfiguration) GetHeadQueue() *string {
	if c == nil {
		return nil
	}
	return c.HeadQueue
}

func (c *ComputeConfigUnivaGridEngineConfiguration) GetComputeQueue() *string {
	if c == nil {
		return nil
	}
	return c.ComputeQueue
}

func (c *ComputeConfigUnivaGridEngineConfiguration) GetMaxQueueSize() *int {
	if c == nil {
		return nil
	}
	return c.MaxQueueSize
}

func (c *ComputeConfigUnivaGridEngineConfiguration) GetHeadJobOptions() *string {
	if c == nil {
		return nil
	}
	return c.HeadJobOptions
}

func (c *ComputeConfigUnivaGridEngineConfiguration) GetPropagateHeadJobOptions() *bool {
	if c == nil {
		return nil
	}
	return c.PropagateHeadJobOptions
}

func (c *ComputeConfigUnivaGridEngineConfiguration) GetPreRunScript() *string {
	if c == nil {
		return nil
	}
	return c.PreRunScript
}

func (c *ComputeConfigUnivaGridEngineConfiguration) GetPostRunScript() *string {
	if c == nil {
		return nil
	}
	return c.PostRunScript
}

func (c *ComputeConfigUnivaGridEngineConfiguration) GetNextflowConfig() *string {
	if c == nil {
		return nil
	}
	return c.NextflowConfig
}

func (c *ComputeConfigUnivaGridEngineConfiguration) GetEnvironment() []ConfigEnvVariable {
	if c == nil {
		return nil
	}
	return c.Environment
}

type ComputeConfigGoogleGKEClusterConfiguration struct {
	// Read-only property identifying the compute platform type
	Discriminator *string `json:"discriminator,omitempty"`
	// Working directory path for workflow execution
	WorkDir *string `json:"workDir,omitempty"`
	// Shell script to execute before workflow starts
	PreRunScript *string `json:"preRunScript,omitempty"`
	// Shell script to execute after workflow completes
	PostRunScript         *string           `json:"postRunScript,omitempty"`
	Server                string            `json:"server"`
	SslCert               string            `json:"sslCert"`
	Namespace             string            `json:"namespace"`
	ComputeServiceAccount *string           `json:"computeServiceAccount,omitempty"`
	HeadServiceAccount    string            `json:"headServiceAccount"`
	StorageClaimName      string            `json:"storageClaimName"`
	StorageMountPath      *string           `json:"storageMountPath,omitempty"`
	PodCleanup            *PodCleanupPolicy `json:"podCleanup,omitempty"`
	HeadPodSpec           *string           `json:"headPodSpec,omitempty"`
	ServicePodSpec        *string           `json:"servicePodSpec,omitempty"`
	// Array of environment variables for the compute environment
	Environment     []ConfigEnvVariable `json:"environment,omitempty"`
	HeadJobCpus     *int                `json:"headJobCpus,omitempty"`
	HeadJobMemoryMb *int                `json:"headJobMemoryMb,omitempty"`
	// Nextflow configuration settings and parameters
	NextflowConfig *string `json:"nextflowConfig,omitempty"`
	// The GKE cluster region - or - zone
	Region string `json:"region"`
	// The GKE cluster name
	ClusterName    string `json:"clusterName"`
	Fusion2Enabled *bool  `json:"fusion2Enabled,omitempty"`
	WaveEnabled    *bool  `json:"waveEnabled,omitempty"`
}

func (c ComputeConfigGoogleGKEClusterConfiguration) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ComputeConfigGoogleGKEClusterConfiguration) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"server", "sslCert", "namespace", "headServiceAccount", "storageClaimName", "region", "clusterName"}); err != nil {
		return err
	}
	return nil
}

func (c *ComputeConfigGoogleGKEClusterConfiguration) GetDiscriminator() *string {
	if c == nil {
		return nil
	}
	return c.Discriminator
}

func (c *ComputeConfigGoogleGKEClusterConfiguration) GetWorkDir() *string {
	if c == nil {
		return nil
	}
	return c.WorkDir
}

func (c *ComputeConfigGoogleGKEClusterConfiguration) GetPreRunScript() *string {
	if c == nil {
		return nil
	}
	return c.PreRunScript
}

func (c *ComputeConfigGoogleGKEClusterConfiguration) GetPostRunScript() *string {
	if c == nil {
		return nil
	}
	return c.PostRunScript
}

func (c *ComputeConfigGoogleGKEClusterConfiguration) GetServer() string {
	if c == nil {
		return ""
	}
	return c.Server
}

func (c *ComputeConfigGoogleGKEClusterConfiguration) GetSslCert() string {
	if c == nil {
		return ""
	}
	return c.SslCert
}

func (c *ComputeConfigGoogleGKEClusterConfiguration) GetNamespace() string {
	if c == nil {
		return ""
	}
	return c.Namespace
}

func (c *ComputeConfigGoogleGKEClusterConfiguration) GetComputeServiceAccount() *string {
	if c == nil {
		return nil
	}
	return c.ComputeServiceAccount
}

func (c *ComputeConfigGoogleGKEClusterConfiguration) GetHeadServiceAccount() string {
	if c == nil {
		return ""
	}
	return c.HeadServiceAccount
}

func (c *ComputeConfigGoogleGKEClusterConfiguration) GetStorageClaimName() string {
	if c == nil {
		return ""
	}
	return c.StorageClaimName
}

func (c *ComputeConfigGoogleGKEClusterConfiguration) GetStorageMountPath() *string {
	if c == nil {
		return nil
	}
	return c.StorageMountPath
}

func (c *ComputeConfigGoogleGKEClusterConfiguration) GetPodCleanup() *PodCleanupPolicy {
	if c == nil {
		return nil
	}
	return c.PodCleanup
}

func (c *ComputeConfigGoogleGKEClusterConfiguration) GetHeadPodSpec() *string {
	if c == nil {
		return nil
	}
	return c.HeadPodSpec
}

func (c *ComputeConfigGoogleGKEClusterConfiguration) GetServicePodSpec() *string {
	if c == nil {
		return nil
	}
	return c.ServicePodSpec
}

func (c *ComputeConfigGoogleGKEClusterConfiguration) GetEnvironment() []ConfigEnvVariable {
	if c == nil {
		return nil
	}
	return c.Environment
}

func (c *ComputeConfigGoogleGKEClusterConfiguration) GetHeadJobCpus() *int {
	if c == nil {
		return nil
	}
	return c.HeadJobCpus
}

func (c *ComputeConfigGoogleGKEClusterConfiguration) GetHeadJobMemoryMb() *int {
	if c == nil {
		return nil
	}
	return c.HeadJobMemoryMb
}

func (c *ComputeConfigGoogleGKEClusterConfiguration) GetNextflowConfig() *string {
	if c == nil {
		return nil
	}
	return c.NextflowConfig
}

func (c *ComputeConfigGoogleGKEClusterConfiguration) GetRegion() string {
	if c == nil {
		return ""
	}
	return c.Region
}

func (c *ComputeConfigGoogleGKEClusterConfiguration) GetClusterName() string {
	if c == nil {
		return ""
	}
	return c.ClusterName
}

func (c *ComputeConfigGoogleGKEClusterConfiguration) GetFusion2Enabled() *bool {
	if c == nil {
		return nil
	}
	return c.Fusion2Enabled
}

func (c *ComputeConfigGoogleGKEClusterConfiguration) GetWaveEnabled() *bool {
	if c == nil {
		return nil
	}
	return c.WaveEnabled
}

type ComputeConfigAmazonEKSClusterConfiguration struct {
	// Read-only property identifying the compute platform type
	Discriminator *string `json:"discriminator,omitempty"`
	// Working directory path for workflow execution
	WorkDir *string `json:"workDir,omitempty"`
	// Shell script to execute before workflow starts
	PreRunScript *string `json:"preRunScript,omitempty"`
	// Shell script to execute after workflow completes
	PostRunScript         *string           `json:"postRunScript,omitempty"`
	Server                string            `json:"server"`
	SslCert               string            `json:"sslCert"`
	Namespace             string            `json:"namespace"`
	ComputeServiceAccount *string           `json:"computeServiceAccount,omitempty"`
	HeadServiceAccount    string            `json:"headServiceAccount"`
	StorageClaimName      string            `json:"storageClaimName"`
	StorageMountPath      *string           `json:"storageMountPath,omitempty"`
	PodCleanup            *PodCleanupPolicy `json:"podCleanup,omitempty"`
	HeadPodSpec           *string           `json:"headPodSpec,omitempty"`
	ServicePodSpec        *string           `json:"servicePodSpec,omitempty"`
	// Array of environment variables for the compute environment
	Environment     []ConfigEnvVariable `json:"environment,omitempty"`
	HeadJobCpus     *int                `json:"headJobCpus,omitempty"`
	HeadJobMemoryMb *int                `json:"headJobMemoryMb,omitempty"`
	// Nextflow configuration settings and parameters
	NextflowConfig *string `json:"nextflowConfig,omitempty"`
	// AWS region
	Region string `json:"region"`
	// The AWS EKS cluster name
	ClusterName    string `json:"clusterName"`
	WaveEnabled    *bool  `json:"waveEnabled,omitempty"`
	Fusion2Enabled *bool  `json:"fusion2Enabled,omitempty"`
}

func (c ComputeConfigAmazonEKSClusterConfiguration) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ComputeConfigAmazonEKSClusterConfiguration) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"server", "sslCert", "namespace", "headServiceAccount", "storageClaimName", "region", "clusterName"}); err != nil {
		return err
	}
	return nil
}

func (c *ComputeConfigAmazonEKSClusterConfiguration) GetDiscriminator() *string {
	if c == nil {
		return nil
	}
	return c.Discriminator
}

func (c *ComputeConfigAmazonEKSClusterConfiguration) GetWorkDir() *string {
	if c == nil {
		return nil
	}
	return c.WorkDir
}

func (c *ComputeConfigAmazonEKSClusterConfiguration) GetPreRunScript() *string {
	if c == nil {
		return nil
	}
	return c.PreRunScript
}

func (c *ComputeConfigAmazonEKSClusterConfiguration) GetPostRunScript() *string {
	if c == nil {
		return nil
	}
	return c.PostRunScript
}

func (c *ComputeConfigAmazonEKSClusterConfiguration) GetServer() string {
	if c == nil {
		return ""
	}
	return c.Server
}

func (c *ComputeConfigAmazonEKSClusterConfiguration) GetSslCert() string {
	if c == nil {
		return ""
	}
	return c.SslCert
}

func (c *ComputeConfigAmazonEKSClusterConfiguration) GetNamespace() string {
	if c == nil {
		return ""
	}
	return c.Namespace
}

func (c *ComputeConfigAmazonEKSClusterConfiguration) GetComputeServiceAccount() *string {
	if c == nil {
		return nil
	}
	return c.ComputeServiceAccount
}

func (c *ComputeConfigAmazonEKSClusterConfiguration) GetHeadServiceAccount() string {
	if c == nil {
		return ""
	}
	return c.HeadServiceAccount
}

func (c *ComputeConfigAmazonEKSClusterConfiguration) GetStorageClaimName() string {
	if c == nil {
		return ""
	}
	return c.StorageClaimName
}

func (c *ComputeConfigAmazonEKSClusterConfiguration) GetStorageMountPath() *string {
	if c == nil {
		return nil
	}
	return c.StorageMountPath
}

func (c *ComputeConfigAmazonEKSClusterConfiguration) GetPodCleanup() *PodCleanupPolicy {
	if c == nil {
		return nil
	}
	return c.PodCleanup
}

func (c *ComputeConfigAmazonEKSClusterConfiguration) GetHeadPodSpec() *string {
	if c == nil {
		return nil
	}
	return c.HeadPodSpec
}

func (c *ComputeConfigAmazonEKSClusterConfiguration) GetServicePodSpec() *string {
	if c == nil {
		return nil
	}
	return c.ServicePodSpec
}

func (c *ComputeConfigAmazonEKSClusterConfiguration) GetEnvironment() []ConfigEnvVariable {
	if c == nil {
		return nil
	}
	return c.Environment
}

func (c *ComputeConfigAmazonEKSClusterConfiguration) GetHeadJobCpus() *int {
	if c == nil {
		return nil
	}
	return c.HeadJobCpus
}

func (c *ComputeConfigAmazonEKSClusterConfiguration) GetHeadJobMemoryMb() *int {
	if c == nil {
		return nil
	}
	return c.HeadJobMemoryMb
}

func (c *ComputeConfigAmazonEKSClusterConfiguration) GetNextflowConfig() *string {
	if c == nil {
		return nil
	}
	return c.NextflowConfig
}

func (c *ComputeConfigAmazonEKSClusterConfiguration) GetRegion() string {
	if c == nil {
		return ""
	}
	return c.Region
}

func (c *ComputeConfigAmazonEKSClusterConfiguration) GetClusterName() string {
	if c == nil {
		return ""
	}
	return c.ClusterName
}

func (c *ComputeConfigAmazonEKSClusterConfiguration) GetWaveEnabled() *bool {
	if c == nil {
		return nil
	}
	return c.WaveEnabled
}

func (c *ComputeConfigAmazonEKSClusterConfiguration) GetFusion2Enabled() *bool {
	if c == nil {
		return nil
	}
	return c.Fusion2Enabled
}

type ComputeConfigKubernetesComputeConfiguration struct {
	// Read-only property identifying the compute platform type
	Discriminator *string `json:"discriminator,omitempty"`
	// Working directory path for workflow execution
	WorkDir *string `json:"workDir,omitempty"`
	// Shell script to execute before workflow starts
	PreRunScript *string `json:"preRunScript,omitempty"`
	// Shell script to execute after workflow completes
	PostRunScript         *string           `json:"postRunScript,omitempty"`
	Server                string            `json:"server"`
	SslCert               string            `json:"sslCert"`
	Namespace             string            `json:"namespace"`
	ComputeServiceAccount *string           `json:"computeServiceAccount,omitempty"`
	HeadServiceAccount    string            `json:"headServiceAccount"`
	StorageClaimName      string            `json:"storageClaimName"`
	StorageMountPath      *string           `json:"storageMountPath,omitempty"`
	PodCleanup            *PodCleanupPolicy `json:"podCleanup,omitempty"`
	HeadPodSpec           *string           `json:"headPodSpec,omitempty"`
	ServicePodSpec        *string           `json:"servicePodSpec,omitempty"`
	// Array of environment variables for the compute environment
	Environment     []ConfigEnvVariable `json:"environment,omitempty"`
	HeadJobCpus     *int                `json:"headJobCpus,omitempty"`
	HeadJobMemoryMb *int                `json:"headJobMemoryMb,omitempty"`
	// Nextflow configuration settings and parameters
	NextflowConfig *string `json:"nextflowConfig,omitempty"`
}

func (c ComputeConfigKubernetesComputeConfiguration) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ComputeConfigKubernetesComputeConfiguration) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"server", "sslCert", "namespace", "headServiceAccount", "storageClaimName"}); err != nil {
		return err
	}
	return nil
}

func (c *ComputeConfigKubernetesComputeConfiguration) GetDiscriminator() *string {
	if c == nil {
		return nil
	}
	return c.Discriminator
}

func (c *ComputeConfigKubernetesComputeConfiguration) GetWorkDir() *string {
	if c == nil {
		return nil
	}
	return c.WorkDir
}

func (c *ComputeConfigKubernetesComputeConfiguration) GetPreRunScript() *string {
	if c == nil {
		return nil
	}
	return c.PreRunScript
}

func (c *ComputeConfigKubernetesComputeConfiguration) GetPostRunScript() *string {
	if c == nil {
		return nil
	}
	return c.PostRunScript
}

func (c *ComputeConfigKubernetesComputeConfiguration) GetServer() string {
	if c == nil {
		return ""
	}
	return c.Server
}

func (c *ComputeConfigKubernetesComputeConfiguration) GetSslCert() string {
	if c == nil {
		return ""
	}
	return c.SslCert
}

func (c *ComputeConfigKubernetesComputeConfiguration) GetNamespace() string {
	if c == nil {
		return ""
	}
	return c.Namespace
}

func (c *ComputeConfigKubernetesComputeConfiguration) GetComputeServiceAccount() *string {
	if c == nil {
		return nil
	}
	return c.ComputeServiceAccount
}

func (c *ComputeConfigKubernetesComputeConfiguration) GetHeadServiceAccount() string {
	if c == nil {
		return ""
	}
	return c.HeadServiceAccount
}

func (c *ComputeConfigKubernetesComputeConfiguration) GetStorageClaimName() string {
	if c == nil {
		return ""
	}
	return c.StorageClaimName
}

func (c *ComputeConfigKubernetesComputeConfiguration) GetStorageMountPath() *string {
	if c == nil {
		return nil
	}
	return c.StorageMountPath
}

func (c *ComputeConfigKubernetesComputeConfiguration) GetPodCleanup() *PodCleanupPolicy {
	if c == nil {
		return nil
	}
	return c.PodCleanup
}

func (c *ComputeConfigKubernetesComputeConfiguration) GetHeadPodSpec() *string {
	if c == nil {
		return nil
	}
	return c.HeadPodSpec
}

func (c *ComputeConfigKubernetesComputeConfiguration) GetServicePodSpec() *string {
	if c == nil {
		return nil
	}
	return c.ServicePodSpec
}

func (c *ComputeConfigKubernetesComputeConfiguration) GetEnvironment() []ConfigEnvVariable {
	if c == nil {
		return nil
	}
	return c.Environment
}

func (c *ComputeConfigKubernetesComputeConfiguration) GetHeadJobCpus() *int {
	if c == nil {
		return nil
	}
	return c.HeadJobCpus
}

func (c *ComputeConfigKubernetesComputeConfiguration) GetHeadJobMemoryMb() *int {
	if c == nil {
		return nil
	}
	return c.HeadJobMemoryMb
}

func (c *ComputeConfigKubernetesComputeConfiguration) GetNextflowConfig() *string {
	if c == nil {
		return nil
	}
	return c.NextflowConfig
}

type ComputeConfigSlurmConfiguration struct {
	// Read-only property identifying the compute platform type
	Discriminator *string `json:"discriminator,omitempty"`
	// Working directory path for workflow execution
	WorkDir                 string  `json:"workDir"`
	LaunchDir               *string `json:"launchDir,omitempty"`
	UserName                *string `json:"userName,omitempty"`
	HostName                *string `json:"hostName,omitempty"`
	Port                    *int    `json:"port,omitempty"`
	HeadQueue               *string `json:"headQueue,omitempty"`
	ComputeQueue            *string `json:"computeQueue,omitempty"`
	MaxQueueSize            *int    `json:"maxQueueSize,omitempty"`
	HeadJobOptions          *string `json:"headJobOptions,omitempty"`
	PropagateHeadJobOptions *bool   `json:"propagateHeadJobOptions,omitempty"`
	// Shell script to execute before workflow starts
	PreRunScript *string `json:"preRunScript,omitempty"`
	// Shell script to execute after workflow completes
	PostRunScript *string `json:"postRunScript,omitempty"`
	// Nextflow configuration settings and parameters
	NextflowConfig *string `json:"nextflowConfig,omitempty"`
	// Array of environment variables for the compute environment
	Environment []ConfigEnvVariable `json:"environment,omitempty"`
}

func (c ComputeConfigSlurmConfiguration) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ComputeConfigSlurmConfiguration) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"workDir"}); err != nil {
		return err
	}
	return nil
}

func (c *ComputeConfigSlurmConfiguration) GetDiscriminator() *string {
	if c == nil {
		return nil
	}
	return c.Discriminator
}

func (c *ComputeConfigSlurmConfiguration) GetWorkDir() string {
	if c == nil {
		return ""
	}
	return c.WorkDir
}

func (c *ComputeConfigSlurmConfiguration) GetLaunchDir() *string {
	if c == nil {
		return nil
	}
	return c.LaunchDir
}

func (c *ComputeConfigSlurmConfiguration) GetUserName() *string {
	if c == nil {
		return nil
	}
	return c.UserName
}

func (c *ComputeConfigSlurmConfiguration) GetHostName() *string {
	if c == nil {
		return nil
	}
	return c.HostName
}

func (c *ComputeConfigSlurmConfiguration) GetPort() *int {
	if c == nil {
		return nil
	}
	return c.Port
}

func (c *ComputeConfigSlurmConfiguration) GetHeadQueue() *string {
	if c == nil {
		return nil
	}
	return c.HeadQueue
}

func (c *ComputeConfigSlurmConfiguration) GetComputeQueue() *string {
	if c == nil {
		return nil
	}
	return c.ComputeQueue
}

func (c *ComputeConfigSlurmConfiguration) GetMaxQueueSize() *int {
	if c == nil {
		return nil
	}
	return c.MaxQueueSize
}

func (c *ComputeConfigSlurmConfiguration) GetHeadJobOptions() *string {
	if c == nil {
		return nil
	}
	return c.HeadJobOptions
}

func (c *ComputeConfigSlurmConfiguration) GetPropagateHeadJobOptions() *bool {
	if c == nil {
		return nil
	}
	return c.PropagateHeadJobOptions
}

func (c *ComputeConfigSlurmConfiguration) GetPreRunScript() *string {
	if c == nil {
		return nil
	}
	return c.PreRunScript
}

func (c *ComputeConfigSlurmConfiguration) GetPostRunScript() *string {
	if c == nil {
		return nil
	}
	return c.PostRunScript
}

func (c *ComputeConfigSlurmConfiguration) GetNextflowConfig() *string {
	if c == nil {
		return nil
	}
	return c.NextflowConfig
}

func (c *ComputeConfigSlurmConfiguration) GetEnvironment() []ConfigEnvVariable {
	if c == nil {
		return nil
	}
	return c.Environment
}

type ComputeConfigIBMLSFConfiguration struct {
	// Read-only property identifying the compute platform type
	Discriminator *string `json:"discriminator,omitempty"`
	// Working directory path for workflow execution
	WorkDir                 string  `json:"workDir"`
	LaunchDir               *string `json:"launchDir,omitempty"`
	UserName                *string `json:"userName,omitempty"`
	HostName                *string `json:"hostName,omitempty"`
	Port                    *int    `json:"port,omitempty"`
	HeadQueue               *string `json:"headQueue,omitempty"`
	ComputeQueue            *string `json:"computeQueue,omitempty"`
	MaxQueueSize            *int    `json:"maxQueueSize,omitempty"`
	HeadJobOptions          *string `json:"headJobOptions,omitempty"`
	PropagateHeadJobOptions *bool   `json:"propagateHeadJobOptions,omitempty"`
	// Shell script to execute before workflow starts
	PreRunScript *string `json:"preRunScript,omitempty"`
	// Shell script to execute after workflow completes
	PostRunScript *string `json:"postRunScript,omitempty"`
	// Nextflow configuration settings and parameters
	NextflowConfig *string `json:"nextflowConfig,omitempty"`
	UnitForLimits  *string `json:"unitForLimits,omitempty"`
	PerJobMemLimit *bool   `json:"perJobMemLimit,omitempty"`
	PerTaskReserve *bool   `json:"perTaskReserve,omitempty"`
	// Array of environment variables for the compute environment
	Environment []ConfigEnvVariable `json:"environment,omitempty"`
}

func (c ComputeConfigIBMLSFConfiguration) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ComputeConfigIBMLSFConfiguration) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"workDir"}); err != nil {
		return err
	}
	return nil
}

func (c *ComputeConfigIBMLSFConfiguration) GetDiscriminator() *string {
	if c == nil {
		return nil
	}
	return c.Discriminator
}

func (c *ComputeConfigIBMLSFConfiguration) GetWorkDir() string {
	if c == nil {
		return ""
	}
	return c.WorkDir
}

func (c *ComputeConfigIBMLSFConfiguration) GetLaunchDir() *string {
	if c == nil {
		return nil
	}
	return c.LaunchDir
}

func (c *ComputeConfigIBMLSFConfiguration) GetUserName() *string {
	if c == nil {
		return nil
	}
	return c.UserName
}

func (c *ComputeConfigIBMLSFConfiguration) GetHostName() *string {
	if c == nil {
		return nil
	}
	return c.HostName
}

func (c *ComputeConfigIBMLSFConfiguration) GetPort() *int {
	if c == nil {
		return nil
	}
	return c.Port
}

func (c *ComputeConfigIBMLSFConfiguration) GetHeadQueue() *string {
	if c == nil {
		return nil
	}
	return c.HeadQueue
}

func (c *ComputeConfigIBMLSFConfiguration) GetComputeQueue() *string {
	if c == nil {
		return nil
	}
	return c.ComputeQueue
}

func (c *ComputeConfigIBMLSFConfiguration) GetMaxQueueSize() *int {
	if c == nil {
		return nil
	}
	return c.MaxQueueSize
}

func (c *ComputeConfigIBMLSFConfiguration) GetHeadJobOptions() *string {
	if c == nil {
		return nil
	}
	return c.HeadJobOptions
}

func (c *ComputeConfigIBMLSFConfiguration) GetPropagateHeadJobOptions() *bool {
	if c == nil {
		return nil
	}
	return c.PropagateHeadJobOptions
}

func (c *ComputeConfigIBMLSFConfiguration) GetPreRunScript() *string {
	if c == nil {
		return nil
	}
	return c.PreRunScript
}

func (c *ComputeConfigIBMLSFConfiguration) GetPostRunScript() *string {
	if c == nil {
		return nil
	}
	return c.PostRunScript
}

func (c *ComputeConfigIBMLSFConfiguration) GetNextflowConfig() *string {
	if c == nil {
		return nil
	}
	return c.NextflowConfig
}

func (c *ComputeConfigIBMLSFConfiguration) GetUnitForLimits() *string {
	if c == nil {
		return nil
	}
	return c.UnitForLimits
}

func (c *ComputeConfigIBMLSFConfiguration) GetPerJobMemLimit() *bool {
	if c == nil {
		return nil
	}
	return c.PerJobMemLimit
}

func (c *ComputeConfigIBMLSFConfiguration) GetPerTaskReserve() *bool {
	if c == nil {
		return nil
	}
	return c.PerTaskReserve
}

func (c *ComputeConfigIBMLSFConfiguration) GetEnvironment() []ConfigEnvVariable {
	if c == nil {
		return nil
	}
	return c.Environment
}

type ComputeConfigAzureCloudConfiguration struct {
	// Read-only property identifying the compute platform type
	Discriminator *string `json:"discriminator,omitempty"`
	// Working directory path for workflow execution
	WorkDir *string `json:"workDir,omitempty"`
	// Shell script to execute before workflow starts
	PreRunScript *string `json:"preRunScript,omitempty"`
	// Shell script to execute after workflow completes
	PostRunScript *string `json:"postRunScript,omitempty"`
	// Array of environment variables for the compute environment
	Environment    []ConfigEnvVariable `json:"environment,omitempty"`
	WaveEnabled    *bool               `json:"waveEnabled,omitempty"`
	Fusion2Enabled *bool               `json:"fusion2Enabled,omitempty"`
	// Nextflow configuration settings and parameters
	NextflowConfig          *string                `json:"nextflowConfig,omitempty"`
	InstanceType            *string                `json:"instanceType,omitempty"`
	Region                  *string                `json:"region,omitempty"`
	ResourceGroup           *string                `json:"resourceGroup,omitempty"`
	NetworkID               *string                `json:"networkId,omitempty"`
	SubscriptionID          *string                `json:"subscriptionId,omitempty"`
	ManagedIdentityID       *string                `json:"managedIdentityId,omitempty"`
	ManagedIdentityClientID *string                `json:"managedIdentityClientId,omitempty"`
	LogWorkspaceID          *string                `json:"logWorkspaceId,omitempty"`
	LogTableName            *string                `json:"logTableName,omitempty"`
	DataCollectionEndpoint  *string                `json:"dataCollectionEndpoint,omitempty"`
	DataCollectionRuleID    *string                `json:"dataCollectionRuleId,omitempty"`
	ForgedResources         []MapEntryStringString `json:"forgedResources,omitempty"`
}

func (c ComputeConfigAzureCloudConfiguration) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ComputeConfigAzureCloudConfiguration) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (c *ComputeConfigAzureCloudConfiguration) GetDiscriminator() *string {
	if c == nil {
		return nil
	}
	return c.Discriminator
}

func (c *ComputeConfigAzureCloudConfiguration) GetWorkDir() *string {
	if c == nil {
		return nil
	}
	return c.WorkDir
}

func (c *ComputeConfigAzureCloudConfiguration) GetPreRunScript() *string {
	if c == nil {
		return nil
	}
	return c.PreRunScript
}

func (c *ComputeConfigAzureCloudConfiguration) GetPostRunScript() *string {
	if c == nil {
		return nil
	}
	return c.PostRunScript
}

func (c *ComputeConfigAzureCloudConfiguration) GetEnvironment() []ConfigEnvVariable {
	if c == nil {
		return nil
	}
	return c.Environment
}

func (c *ComputeConfigAzureCloudConfiguration) GetWaveEnabled() *bool {
	if c == nil {
		return nil
	}
	return c.WaveEnabled
}

func (c *ComputeConfigAzureCloudConfiguration) GetFusion2Enabled() *bool {
	if c == nil {
		return nil
	}
	return c.Fusion2Enabled
}

func (c *ComputeConfigAzureCloudConfiguration) GetNextflowConfig() *string {
	if c == nil {
		return nil
	}
	return c.NextflowConfig
}

func (c *ComputeConfigAzureCloudConfiguration) GetInstanceType() *string {
	if c == nil {
		return nil
	}
	return c.InstanceType
}

func (c *ComputeConfigAzureCloudConfiguration) GetRegion() *string {
	if c == nil {
		return nil
	}
	return c.Region
}

func (c *ComputeConfigAzureCloudConfiguration) GetResourceGroup() *string {
	if c == nil {
		return nil
	}
	return c.ResourceGroup
}

func (c *ComputeConfigAzureCloudConfiguration) GetNetworkID() *string {
	if c == nil {
		return nil
	}
	return c.NetworkID
}

func (c *ComputeConfigAzureCloudConfiguration) GetSubscriptionID() *string {
	if c == nil {
		return nil
	}
	return c.SubscriptionID
}

func (c *ComputeConfigAzureCloudConfiguration) GetManagedIdentityID() *string {
	if c == nil {
		return nil
	}
	return c.ManagedIdentityID
}

func (c *ComputeConfigAzureCloudConfiguration) GetManagedIdentityClientID() *string {
	if c == nil {
		return nil
	}
	return c.ManagedIdentityClientID
}

func (c *ComputeConfigAzureCloudConfiguration) GetLogWorkspaceID() *string {
	if c == nil {
		return nil
	}
	return c.LogWorkspaceID
}

func (c *ComputeConfigAzureCloudConfiguration) GetLogTableName() *string {
	if c == nil {
		return nil
	}
	return c.LogTableName
}

func (c *ComputeConfigAzureCloudConfiguration) GetDataCollectionEndpoint() *string {
	if c == nil {
		return nil
	}
	return c.DataCollectionEndpoint
}

func (c *ComputeConfigAzureCloudConfiguration) GetDataCollectionRuleID() *string {
	if c == nil {
		return nil
	}
	return c.DataCollectionRuleID
}

func (c *ComputeConfigAzureCloudConfiguration) GetForgedResources() []MapEntryStringString {
	if c == nil {
		return nil
	}
	return c.ForgedResources
}

type ComputeConfigAzureBatchConfiguration struct {
	// Read-only property identifying the compute platform type
	Discriminator *string `json:"discriminator,omitempty"`
	// Working directory path for workflow execution
	WorkDir *string `json:"workDir,omitempty"`
	// Shell script to execute before workflow starts
	PreRunScript *string `json:"preRunScript,omitempty"`
	// Shell script to execute after workflow completes
	PostRunScript *string `json:"postRunScript,omitempty"`
	Region        string  `json:"region"`
	HeadPool      *string `json:"headPool,omitempty"`
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	AutoPoolMode            *bool               `json:"autoPoolMode,omitempty"`
	Forge                   *AzBatchForgeConfig `json:"forge,omitempty"`
	TokenDuration           *string             `json:"tokenDuration,omitempty"`
	DeleteJobsOnCompletion  *JobCleanupPolicy   `json:"deleteJobsOnCompletion,omitempty"`
	DeletePoolsOnCompletion *bool               `json:"deletePoolsOnCompletion,omitempty"`
	// Array of environment variables for the compute environment
	Environment    []ConfigEnvVariable `json:"environment,omitempty"`
	WaveEnabled    *bool               `json:"waveEnabled,omitempty"`
	Fusion2Enabled *bool               `json:"fusion2Enabled,omitempty"`
	// Nextflow configuration settings and parameters
	NextflowConfig          *string `json:"nextflowConfig,omitempty"`
	ManagedIdentityClientID *string `json:"managedIdentityClientId,omitempty"`
}

func (c ComputeConfigAzureBatchConfiguration) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ComputeConfigAzureBatchConfiguration) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"region"}); err != nil {
		return err
	}
	return nil
}

func (c *ComputeConfigAzureBatchConfiguration) GetDiscriminator() *string {
	if c == nil {
		return nil
	}
	return c.Discriminator
}

func (c *ComputeConfigAzureBatchConfiguration) GetWorkDir() *string {
	if c == nil {
		return nil
	}
	return c.WorkDir
}

func (c *ComputeConfigAzureBatchConfiguration) GetPreRunScript() *string {
	if c == nil {
		return nil
	}
	return c.PreRunScript
}

func (c *ComputeConfigAzureBatchConfiguration) GetPostRunScript() *string {
	if c == nil {
		return nil
	}
	return c.PostRunScript
}

func (c *ComputeConfigAzureBatchConfiguration) GetRegion() string {
	if c == nil {
		return ""
	}
	return c.Region
}

func (c *ComputeConfigAzureBatchConfiguration) GetHeadPool() *string {
	if c == nil {
		return nil
	}
	return c.HeadPool
}

func (c *ComputeConfigAzureBatchConfiguration) GetAutoPoolMode() *bool {
	if c == nil {
		return nil
	}
	return c.AutoPoolMode
}

func (c *ComputeConfigAzureBatchConfiguration) GetForge() *AzBatchForgeConfig {
	if c == nil {
		return nil
	}
	return c.Forge
}

func (c *ComputeConfigAzureBatchConfiguration) GetTokenDuration() *string {
	if c == nil {
		return nil
	}
	return c.TokenDuration
}

func (c *ComputeConfigAzureBatchConfiguration) GetDeleteJobsOnCompletion() *JobCleanupPolicy {
	if c == nil {
		return nil
	}
	return c.DeleteJobsOnCompletion
}

func (c *ComputeConfigAzureBatchConfiguration) GetDeletePoolsOnCompletion() *bool {
	if c == nil {
		return nil
	}
	return c.DeletePoolsOnCompletion
}

func (c *ComputeConfigAzureBatchConfiguration) GetEnvironment() []ConfigEnvVariable {
	if c == nil {
		return nil
	}
	return c.Environment
}

func (c *ComputeConfigAzureBatchConfiguration) GetWaveEnabled() *bool {
	if c == nil {
		return nil
	}
	return c.WaveEnabled
}

func (c *ComputeConfigAzureBatchConfiguration) GetFusion2Enabled() *bool {
	if c == nil {
		return nil
	}
	return c.Fusion2Enabled
}

func (c *ComputeConfigAzureBatchConfiguration) GetNextflowConfig() *string {
	if c == nil {
		return nil
	}
	return c.NextflowConfig
}

func (c *ComputeConfigAzureBatchConfiguration) GetManagedIdentityClientID() *string {
	if c == nil {
		return nil
	}
	return c.ManagedIdentityClientID
}

type ComputeConfigGoogleCloudConfiguration struct {
	// Read-only property identifying the compute platform type
	Discriminator *string `json:"discriminator,omitempty"`
	// Shell script to execute before workflow starts
	PreRunScript *string `json:"preRunScript,omitempty"`
	// Shell script to execute after workflow completes
	PostRunScript *string `json:"postRunScript,omitempty"`
	// Working directory path for workflow execution
	WorkDir *string `json:"workDir,omitempty"`
	// Nextflow configuration settings and parameters
	NextflowConfig *string `json:"nextflowConfig,omitempty"`
	// Array of environment variables for the compute environment
	Environment         []ConfigEnvVariable `json:"environment,omitempty"`
	WaveEnabled         *bool               `json:"waveEnabled,omitempty"`
	Fusion2Enabled      *bool               `json:"fusion2Enabled,omitempty"`
	ProjectID           *string             `json:"projectId,omitempty"`
	Region              *string             `json:"region,omitempty"`
	Zone                *string             `json:"zone,omitempty"`
	ServiceAccountEmail *string             `json:"serviceAccountEmail,omitempty"`
	InstanceType        *string             `json:"instanceType,omitempty"`
	ImageID             *string             `json:"imageId,omitempty"`
	Arm64Enabled        *bool               `json:"arm64Enabled,omitempty"`
	GpuEnabled          *bool               `json:"gpuEnabled,omitempty"`
	BootDiskSizeGb      *int                `json:"bootDiskSizeGb,omitempty"`
	ForgedResources     []map[string]any    `json:"forgedResources,omitempty"`
}

func (c ComputeConfigGoogleCloudConfiguration) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ComputeConfigGoogleCloudConfiguration) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (c *ComputeConfigGoogleCloudConfiguration) GetDiscriminator() *string {
	if c == nil {
		return nil
	}
	return c.Discriminator
}

func (c *ComputeConfigGoogleCloudConfiguration) GetPreRunScript() *string {
	if c == nil {
		return nil
	}
	return c.PreRunScript
}

func (c *ComputeConfigGoogleCloudConfiguration) GetPostRunScript() *string {
	if c == nil {
		return nil
	}
	return c.PostRunScript
}

func (c *ComputeConfigGoogleCloudConfiguration) GetWorkDir() *string {
	if c == nil {
		return nil
	}
	return c.WorkDir
}

func (c *ComputeConfigGoogleCloudConfiguration) GetNextflowConfig() *string {
	if c == nil {
		return nil
	}
	return c.NextflowConfig
}

func (c *ComputeConfigGoogleCloudConfiguration) GetEnvironment() []ConfigEnvVariable {
	if c == nil {
		return nil
	}
	return c.Environment
}

func (c *ComputeConfigGoogleCloudConfiguration) GetWaveEnabled() *bool {
	if c == nil {
		return nil
	}
	return c.WaveEnabled
}

func (c *ComputeConfigGoogleCloudConfiguration) GetFusion2Enabled() *bool {
	if c == nil {
		return nil
	}
	return c.Fusion2Enabled
}

func (c *ComputeConfigGoogleCloudConfiguration) GetProjectID() *string {
	if c == nil {
		return nil
	}
	return c.ProjectID
}

func (c *ComputeConfigGoogleCloudConfiguration) GetRegion() *string {
	if c == nil {
		return nil
	}
	return c.Region
}

func (c *ComputeConfigGoogleCloudConfiguration) GetZone() *string {
	if c == nil {
		return nil
	}
	return c.Zone
}

func (c *ComputeConfigGoogleCloudConfiguration) GetServiceAccountEmail() *string {
	if c == nil {
		return nil
	}
	return c.ServiceAccountEmail
}

func (c *ComputeConfigGoogleCloudConfiguration) GetInstanceType() *string {
	if c == nil {
		return nil
	}
	return c.InstanceType
}

func (c *ComputeConfigGoogleCloudConfiguration) GetImageID() *string {
	if c == nil {
		return nil
	}
	return c.ImageID
}

func (c *ComputeConfigGoogleCloudConfiguration) GetArm64Enabled() *bool {
	if c == nil {
		return nil
	}
	return c.Arm64Enabled
}

func (c *ComputeConfigGoogleCloudConfiguration) GetGpuEnabled() *bool {
	if c == nil {
		return nil
	}
	return c.GpuEnabled
}

func (c *ComputeConfigGoogleCloudConfiguration) GetBootDiskSizeGb() *int {
	if c == nil {
		return nil
	}
	return c.BootDiskSizeGb
}

func (c *ComputeConfigGoogleCloudConfiguration) GetForgedResources() []map[string]any {
	if c == nil {
		return nil
	}
	return c.ForgedResources
}

type ComputeConfigGoogleBatchServiceConfiguration struct {
	// Read-only property identifying the compute platform type
	Discriminator *string `json:"discriminator,omitempty"`
	Location      *string `json:"location,omitempty"`
	// Working directory path for workflow execution
	WorkDir           *string           `json:"workDir,omitempty"`
	Spot              *bool             `json:"spot,omitempty"`
	BootDiskSizeGb    *int              `json:"bootDiskSizeGb,omitempty"`
	CPUPlatform       *string           `json:"cpuPlatform,omitempty"`
	MachineType       *string           `json:"machineType,omitempty"`
	ProjectID         *string           `json:"projectId,omitempty"`
	SSHDaemon         *bool             `json:"sshDaemon,omitempty"`
	SSHImage          *string           `json:"sshImage,omitempty"`
	DebugMode         *int              `json:"debugMode,omitempty"`
	CopyImage         *string           `json:"copyImage,omitempty"`
	UsePrivateAddress *bool             `json:"usePrivateAddress,omitempty"`
	Labels            map[string]string `json:"labels,omitempty"`
	// Shell script to execute before workflow starts
	PreRunScript *string `json:"preRunScript,omitempty"`
	// Shell script to execute after workflow completes
	PostRunScript   *string `json:"postRunScript,omitempty"`
	HeadJobCpus     *int    `json:"headJobCpus,omitempty"`
	HeadJobMemoryMb *int    `json:"headJobMemoryMb,omitempty"`
	// Nextflow configuration settings and parameters
	NextflowConfig *string `json:"nextflowConfig,omitempty"`
	NfsTarget      *string `json:"nfsTarget,omitempty"`
	NfsMount       *string `json:"nfsMount,omitempty"`
	// Array of environment variables for the compute environment
	Environment                 []ConfigEnvVariable `json:"environment,omitempty"`
	WaveEnabled                 *bool               `json:"waveEnabled,omitempty"`
	Fusion2Enabled              *bool               `json:"fusion2Enabled,omitempty"`
	ServiceAccount              *string             `json:"serviceAccount,omitempty"`
	Network                     *string             `json:"network,omitempty"`
	Subnetwork                  *string             `json:"subnetwork,omitempty"`
	HeadJobInstanceTemplate     *string             `json:"headJobInstanceTemplate,omitempty"`
	ComputeJobsInstanceTemplate *string             `json:"computeJobsInstanceTemplate,omitempty"`
}

func (c ComputeConfigGoogleBatchServiceConfiguration) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ComputeConfigGoogleBatchServiceConfiguration) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (c *ComputeConfigGoogleBatchServiceConfiguration) GetDiscriminator() *string {
	if c == nil {
		return nil
	}
	return c.Discriminator
}

func (c *ComputeConfigGoogleBatchServiceConfiguration) GetLocation() *string {
	if c == nil {
		return nil
	}
	return c.Location
}

func (c *ComputeConfigGoogleBatchServiceConfiguration) GetWorkDir() *string {
	if c == nil {
		return nil
	}
	return c.WorkDir
}

func (c *ComputeConfigGoogleBatchServiceConfiguration) GetSpot() *bool {
	if c == nil {
		return nil
	}
	return c.Spot
}

func (c *ComputeConfigGoogleBatchServiceConfiguration) GetBootDiskSizeGb() *int {
	if c == nil {
		return nil
	}
	return c.BootDiskSizeGb
}

func (c *ComputeConfigGoogleBatchServiceConfiguration) GetCPUPlatform() *string {
	if c == nil {
		return nil
	}
	return c.CPUPlatform
}

func (c *ComputeConfigGoogleBatchServiceConfiguration) GetMachineType() *string {
	if c == nil {
		return nil
	}
	return c.MachineType
}

func (c *ComputeConfigGoogleBatchServiceConfiguration) GetProjectID() *string {
	if c == nil {
		return nil
	}
	return c.ProjectID
}

func (c *ComputeConfigGoogleBatchServiceConfiguration) GetSSHDaemon() *bool {
	if c == nil {
		return nil
	}
	return c.SSHDaemon
}

func (c *ComputeConfigGoogleBatchServiceConfiguration) GetSSHImage() *string {
	if c == nil {
		return nil
	}
	return c.SSHImage
}

func (c *ComputeConfigGoogleBatchServiceConfiguration) GetDebugMode() *int {
	if c == nil {
		return nil
	}
	return c.DebugMode
}

func (c *ComputeConfigGoogleBatchServiceConfiguration) GetCopyImage() *string {
	if c == nil {
		return nil
	}
	return c.CopyImage
}

func (c *ComputeConfigGoogleBatchServiceConfiguration) GetUsePrivateAddress() *bool {
	if c == nil {
		return nil
	}
	return c.UsePrivateAddress
}

func (c *ComputeConfigGoogleBatchServiceConfiguration) GetLabels() map[string]string {
	if c == nil {
		return nil
	}
	return c.Labels
}

func (c *ComputeConfigGoogleBatchServiceConfiguration) GetPreRunScript() *string {
	if c == nil {
		return nil
	}
	return c.PreRunScript
}

func (c *ComputeConfigGoogleBatchServiceConfiguration) GetPostRunScript() *string {
	if c == nil {
		return nil
	}
	return c.PostRunScript
}

func (c *ComputeConfigGoogleBatchServiceConfiguration) GetHeadJobCpus() *int {
	if c == nil {
		return nil
	}
	return c.HeadJobCpus
}

func (c *ComputeConfigGoogleBatchServiceConfiguration) GetHeadJobMemoryMb() *int {
	if c == nil {
		return nil
	}
	return c.HeadJobMemoryMb
}

func (c *ComputeConfigGoogleBatchServiceConfiguration) GetNextflowConfig() *string {
	if c == nil {
		return nil
	}
	return c.NextflowConfig
}

func (c *ComputeConfigGoogleBatchServiceConfiguration) GetNfsTarget() *string {
	if c == nil {
		return nil
	}
	return c.NfsTarget
}

func (c *ComputeConfigGoogleBatchServiceConfiguration) GetNfsMount() *string {
	if c == nil {
		return nil
	}
	return c.NfsMount
}

func (c *ComputeConfigGoogleBatchServiceConfiguration) GetEnvironment() []ConfigEnvVariable {
	if c == nil {
		return nil
	}
	return c.Environment
}

func (c *ComputeConfigGoogleBatchServiceConfiguration) GetWaveEnabled() *bool {
	if c == nil {
		return nil
	}
	return c.WaveEnabled
}

func (c *ComputeConfigGoogleBatchServiceConfiguration) GetFusion2Enabled() *bool {
	if c == nil {
		return nil
	}
	return c.Fusion2Enabled
}

func (c *ComputeConfigGoogleBatchServiceConfiguration) GetServiceAccount() *string {
	if c == nil {
		return nil
	}
	return c.ServiceAccount
}

func (c *ComputeConfigGoogleBatchServiceConfiguration) GetNetwork() *string {
	if c == nil {
		return nil
	}
	return c.Network
}

func (c *ComputeConfigGoogleBatchServiceConfiguration) GetSubnetwork() *string {
	if c == nil {
		return nil
	}
	return c.Subnetwork
}

func (c *ComputeConfigGoogleBatchServiceConfiguration) GetHeadJobInstanceTemplate() *string {
	if c == nil {
		return nil
	}
	return c.HeadJobInstanceTemplate
}

func (c *ComputeConfigGoogleBatchServiceConfiguration) GetComputeJobsInstanceTemplate() *string {
	if c == nil {
		return nil
	}
	return c.ComputeJobsInstanceTemplate
}

type ComputeConfigGoogleLifeSciencesConfiguration struct {
	// Read-only property identifying the compute platform type
	Discriminator *string  `json:"discriminator,omitempty"`
	Region        *string  `json:"region,omitempty"`
	Zones         []string `json:"zones,omitempty"`
	Location      *string  `json:"location,omitempty"`
	// Working directory path for workflow execution
	WorkDir           *string           `json:"workDir,omitempty"`
	Preemptible       *bool             `json:"preemptible,omitempty"`
	BootDiskSizeGb    *int              `json:"bootDiskSizeGb,omitempty"`
	ProjectID         *string           `json:"projectId,omitempty"`
	SSHDaemon         *bool             `json:"sshDaemon,omitempty"`
	SSHImage          *string           `json:"sshImage,omitempty"`
	DebugMode         *int              `json:"debugMode,omitempty"`
	CopyImage         *string           `json:"copyImage,omitempty"`
	UsePrivateAddress *bool             `json:"usePrivateAddress,omitempty"`
	Labels            map[string]string `json:"labels,omitempty"`
	// Shell script to execute before workflow starts
	PreRunScript *string `json:"preRunScript,omitempty"`
	// Shell script to execute after workflow completes
	PostRunScript   *string `json:"postRunScript,omitempty"`
	HeadJobCpus     *int    `json:"headJobCpus,omitempty"`
	HeadJobMemoryMb *int    `json:"headJobMemoryMb,omitempty"`
	// Nextflow configuration settings and parameters
	NextflowConfig *string `json:"nextflowConfig,omitempty"`
	NfsTarget      *string `json:"nfsTarget,omitempty"`
	NfsMount       *string `json:"nfsMount,omitempty"`
	// Array of environment variables for the compute environment
	Environment []ConfigEnvVariable `json:"environment,omitempty"`
}

func (c ComputeConfigGoogleLifeSciencesConfiguration) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ComputeConfigGoogleLifeSciencesConfiguration) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (c *ComputeConfigGoogleLifeSciencesConfiguration) GetDiscriminator() *string {
	if c == nil {
		return nil
	}
	return c.Discriminator
}

func (c *ComputeConfigGoogleLifeSciencesConfiguration) GetRegion() *string {
	if c == nil {
		return nil
	}
	return c.Region
}

func (c *ComputeConfigGoogleLifeSciencesConfiguration) GetZones() []string {
	if c == nil {
		return nil
	}
	return c.Zones
}

func (c *ComputeConfigGoogleLifeSciencesConfiguration) GetLocation() *string {
	if c == nil {
		return nil
	}
	return c.Location
}

func (c *ComputeConfigGoogleLifeSciencesConfiguration) GetWorkDir() *string {
	if c == nil {
		return nil
	}
	return c.WorkDir
}

func (c *ComputeConfigGoogleLifeSciencesConfiguration) GetPreemptible() *bool {
	if c == nil {
		return nil
	}
	return c.Preemptible
}

func (c *ComputeConfigGoogleLifeSciencesConfiguration) GetBootDiskSizeGb() *int {
	if c == nil {
		return nil
	}
	return c.BootDiskSizeGb
}

func (c *ComputeConfigGoogleLifeSciencesConfiguration) GetProjectID() *string {
	if c == nil {
		return nil
	}
	return c.ProjectID
}

func (c *ComputeConfigGoogleLifeSciencesConfiguration) GetSSHDaemon() *bool {
	if c == nil {
		return nil
	}
	return c.SSHDaemon
}

func (c *ComputeConfigGoogleLifeSciencesConfiguration) GetSSHImage() *string {
	if c == nil {
		return nil
	}
	return c.SSHImage
}

func (c *ComputeConfigGoogleLifeSciencesConfiguration) GetDebugMode() *int {
	if c == nil {
		return nil
	}
	return c.DebugMode
}

func (c *ComputeConfigGoogleLifeSciencesConfiguration) GetCopyImage() *string {
	if c == nil {
		return nil
	}
	return c.CopyImage
}

func (c *ComputeConfigGoogleLifeSciencesConfiguration) GetUsePrivateAddress() *bool {
	if c == nil {
		return nil
	}
	return c.UsePrivateAddress
}

func (c *ComputeConfigGoogleLifeSciencesConfiguration) GetLabels() map[string]string {
	if c == nil {
		return nil
	}
	return c.Labels
}

func (c *ComputeConfigGoogleLifeSciencesConfiguration) GetPreRunScript() *string {
	if c == nil {
		return nil
	}
	return c.PreRunScript
}

func (c *ComputeConfigGoogleLifeSciencesConfiguration) GetPostRunScript() *string {
	if c == nil {
		return nil
	}
	return c.PostRunScript
}

func (c *ComputeConfigGoogleLifeSciencesConfiguration) GetHeadJobCpus() *int {
	if c == nil {
		return nil
	}
	return c.HeadJobCpus
}

func (c *ComputeConfigGoogleLifeSciencesConfiguration) GetHeadJobMemoryMb() *int {
	if c == nil {
		return nil
	}
	return c.HeadJobMemoryMb
}

func (c *ComputeConfigGoogleLifeSciencesConfiguration) GetNextflowConfig() *string {
	if c == nil {
		return nil
	}
	return c.NextflowConfig
}

func (c *ComputeConfigGoogleLifeSciencesConfiguration) GetNfsTarget() *string {
	if c == nil {
		return nil
	}
	return c.NfsTarget
}

func (c *ComputeConfigGoogleLifeSciencesConfiguration) GetNfsMount() *string {
	if c == nil {
		return nil
	}
	return c.NfsMount
}

func (c *ComputeConfigGoogleLifeSciencesConfiguration) GetEnvironment() []ConfigEnvVariable {
	if c == nil {
		return nil
	}
	return c.Environment
}

type ComputeConfigSeqeraComputeConfiguration struct {
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	StorageType *string `json:"storageType,omitempty"`
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	LustreID *string  `json:"lustreId,omitempty"`
	Volumes  []string `json:"volumes,omitempty"`
	// Read-only property identifying the compute platform type
	Discriminator      *string `json:"discriminator,omitempty"`
	Region             string  `json:"region"`
	ComputeQueue       *string `json:"computeQueue,omitempty"`
	DragenQueue        *string `json:"dragenQueue,omitempty"`
	DragenInstanceType *string `json:"dragenInstanceType,omitempty"`
	ComputeJobRole     *string `json:"computeJobRole,omitempty"`
	ExecutionRole      *string `json:"executionRole,omitempty"`
	HeadQueue          *string `json:"headQueue,omitempty"`
	HeadJobRole        *string `json:"headJobRole,omitempty"`
	CliPath            *string `json:"cliPath,omitempty"`
	// Working directory path for workflow execution
	WorkDir *string `json:"workDir,omitempty"`
	// Shell script to execute before workflow starts
	PreRunScript *string `json:"preRunScript,omitempty"`
	// Shell script to execute after workflow completes
	PostRunScript   *string `json:"postRunScript,omitempty"`
	HeadJobCpus     *int    `json:"headJobCpus,omitempty"`
	HeadJobMemoryMb *int    `json:"headJobMemoryMb,omitempty"`
	// Array of environment variables for the compute environment
	Environment         []ConfigEnvVariable `json:"environment,omitempty"`
	WaveEnabled         *bool               `json:"waveEnabled,omitempty"`
	Fusion2Enabled      *bool               `json:"fusion2Enabled,omitempty"`
	NvnmeStorageEnabled *bool               `json:"nvnmeStorageEnabled,omitempty"`
	LogGroup            *string             `json:"logGroup,omitempty"`
	// Nextflow configuration settings and parameters
	NextflowConfig  *string          `json:"nextflowConfig,omitempty"`
	FusionSnapshots *bool            `json:"fusionSnapshots,omitempty"`
	Forge           *ForgeConfig     `json:"forge,omitempty"`
	ForgedResources []map[string]any `json:"forgedResources,omitempty"`
}

func (c ComputeConfigSeqeraComputeConfiguration) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ComputeConfigSeqeraComputeConfiguration) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"region"}); err != nil {
		return err
	}
	return nil
}

func (c *ComputeConfigSeqeraComputeConfiguration) GetStorageType() *string {
	if c == nil {
		return nil
	}
	return c.StorageType
}

func (c *ComputeConfigSeqeraComputeConfiguration) GetLustreID() *string {
	if c == nil {
		return nil
	}
	return c.LustreID
}

func (c *ComputeConfigSeqeraComputeConfiguration) GetVolumes() []string {
	if c == nil {
		return nil
	}
	return c.Volumes
}

func (c *ComputeConfigSeqeraComputeConfiguration) GetDiscriminator() *string {
	if c == nil {
		return nil
	}
	return c.Discriminator
}

func (c *ComputeConfigSeqeraComputeConfiguration) GetRegion() string {
	if c == nil {
		return ""
	}
	return c.Region
}

func (c *ComputeConfigSeqeraComputeConfiguration) GetComputeQueue() *string {
	if c == nil {
		return nil
	}
	return c.ComputeQueue
}

func (c *ComputeConfigSeqeraComputeConfiguration) GetDragenQueue() *string {
	if c == nil {
		return nil
	}
	return c.DragenQueue
}

func (c *ComputeConfigSeqeraComputeConfiguration) GetDragenInstanceType() *string {
	if c == nil {
		return nil
	}
	return c.DragenInstanceType
}

func (c *ComputeConfigSeqeraComputeConfiguration) GetComputeJobRole() *string {
	if c == nil {
		return nil
	}
	return c.ComputeJobRole
}

func (c *ComputeConfigSeqeraComputeConfiguration) GetExecutionRole() *string {
	if c == nil {
		return nil
	}
	return c.ExecutionRole
}

func (c *ComputeConfigSeqeraComputeConfiguration) GetHeadQueue() *string {
	if c == nil {
		return nil
	}
	return c.HeadQueue
}

func (c *ComputeConfigSeqeraComputeConfiguration) GetHeadJobRole() *string {
	if c == nil {
		return nil
	}
	return c.HeadJobRole
}

func (c *ComputeConfigSeqeraComputeConfiguration) GetCliPath() *string {
	if c == nil {
		return nil
	}
	return c.CliPath
}

func (c *ComputeConfigSeqeraComputeConfiguration) GetWorkDir() *string {
	if c == nil {
		return nil
	}
	return c.WorkDir
}

func (c *ComputeConfigSeqeraComputeConfiguration) GetPreRunScript() *string {
	if c == nil {
		return nil
	}
	return c.PreRunScript
}

func (c *ComputeConfigSeqeraComputeConfiguration) GetPostRunScript() *string {
	if c == nil {
		return nil
	}
	return c.PostRunScript
}

func (c *ComputeConfigSeqeraComputeConfiguration) GetHeadJobCpus() *int {
	if c == nil {
		return nil
	}
	return c.HeadJobCpus
}

func (c *ComputeConfigSeqeraComputeConfiguration) GetHeadJobMemoryMb() *int {
	if c == nil {
		return nil
	}
	return c.HeadJobMemoryMb
}

func (c *ComputeConfigSeqeraComputeConfiguration) GetEnvironment() []ConfigEnvVariable {
	if c == nil {
		return nil
	}
	return c.Environment
}

func (c *ComputeConfigSeqeraComputeConfiguration) GetWaveEnabled() *bool {
	if c == nil {
		return nil
	}
	return c.WaveEnabled
}

func (c *ComputeConfigSeqeraComputeConfiguration) GetFusion2Enabled() *bool {
	if c == nil {
		return nil
	}
	return c.Fusion2Enabled
}

func (c *ComputeConfigSeqeraComputeConfiguration) GetNvnmeStorageEnabled() *bool {
	if c == nil {
		return nil
	}
	return c.NvnmeStorageEnabled
}

func (c *ComputeConfigSeqeraComputeConfiguration) GetLogGroup() *string {
	if c == nil {
		return nil
	}
	return c.LogGroup
}

func (c *ComputeConfigSeqeraComputeConfiguration) GetNextflowConfig() *string {
	if c == nil {
		return nil
	}
	return c.NextflowConfig
}

func (c *ComputeConfigSeqeraComputeConfiguration) GetFusionSnapshots() *bool {
	if c == nil {
		return nil
	}
	return c.FusionSnapshots
}

func (c *ComputeConfigSeqeraComputeConfiguration) GetForge() *ForgeConfig {
	if c == nil {
		return nil
	}
	return c.Forge
}

func (c *ComputeConfigSeqeraComputeConfiguration) GetForgedResources() []map[string]any {
	if c == nil {
		return nil
	}
	return c.ForgedResources
}

type ComputeConfigAWSCloudConfiguration struct {
	// Read-only property identifying the compute platform type
	Discriminator *string  `json:"discriminator,omitempty"`
	AllowBuckets  []string `json:"allowBuckets,omitempty"`
	Region        string   `json:"region"`
	InstanceType  *string  `json:"instanceType,omitempty"`
	ImageID       *string  `json:"imageId,omitempty"`
	// Working directory path for workflow execution
	WorkDir *string `json:"workDir,omitempty"`
	// Shell script to execute before workflow starts
	PreRunScript *string `json:"preRunScript,omitempty"`
	// Shell script to execute after workflow completes
	PostRunScript *string `json:"postRunScript,omitempty"`
	// Nextflow configuration settings and parameters
	NextflowConfig *string `json:"nextflowConfig,omitempty"`
	// Array of environment variables for the compute environment
	Environment        []ConfigEnvVariable `json:"environment,omitempty"`
	WaveEnabled        *bool               `json:"waveEnabled,omitempty"`
	Fusion2Enabled     *bool               `json:"fusion2Enabled,omitempty"`
	LogGroup           *string             `json:"logGroup,omitempty"`
	Arm64Enabled       *bool               `json:"arm64Enabled,omitempty"`
	GpuEnabled         *bool               `json:"gpuEnabled,omitempty"`
	Ec2KeyPair         *string             `json:"ec2KeyPair,omitempty"`
	EbsBootSize        *int                `json:"ebsBootSize,omitempty"`
	InstanceProfileArn *string             `json:"instanceProfileArn,omitempty"`
	SubnetID           *string             `json:"subnetId,omitempty"`
	SecurityGroups     []string            `json:"securityGroups,omitempty"`
	ForgedResources    []map[string]any    `json:"forgedResources,omitempty"`
}

func (c ComputeConfigAWSCloudConfiguration) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ComputeConfigAWSCloudConfiguration) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"region"}); err != nil {
		return err
	}
	return nil
}

func (c *ComputeConfigAWSCloudConfiguration) GetDiscriminator() *string {
	if c == nil {
		return nil
	}
	return c.Discriminator
}

func (c *ComputeConfigAWSCloudConfiguration) GetAllowBuckets() []string {
	if c == nil {
		return nil
	}
	return c.AllowBuckets
}

func (c *ComputeConfigAWSCloudConfiguration) GetRegion() string {
	if c == nil {
		return ""
	}
	return c.Region
}

func (c *ComputeConfigAWSCloudConfiguration) GetInstanceType() *string {
	if c == nil {
		return nil
	}
	return c.InstanceType
}

func (c *ComputeConfigAWSCloudConfiguration) GetImageID() *string {
	if c == nil {
		return nil
	}
	return c.ImageID
}

func (c *ComputeConfigAWSCloudConfiguration) GetWorkDir() *string {
	if c == nil {
		return nil
	}
	return c.WorkDir
}

func (c *ComputeConfigAWSCloudConfiguration) GetPreRunScript() *string {
	if c == nil {
		return nil
	}
	return c.PreRunScript
}

func (c *ComputeConfigAWSCloudConfiguration) GetPostRunScript() *string {
	if c == nil {
		return nil
	}
	return c.PostRunScript
}

func (c *ComputeConfigAWSCloudConfiguration) GetNextflowConfig() *string {
	if c == nil {
		return nil
	}
	return c.NextflowConfig
}

func (c *ComputeConfigAWSCloudConfiguration) GetEnvironment() []ConfigEnvVariable {
	if c == nil {
		return nil
	}
	return c.Environment
}

func (c *ComputeConfigAWSCloudConfiguration) GetWaveEnabled() *bool {
	if c == nil {
		return nil
	}
	return c.WaveEnabled
}

func (c *ComputeConfigAWSCloudConfiguration) GetFusion2Enabled() *bool {
	if c == nil {
		return nil
	}
	return c.Fusion2Enabled
}

func (c *ComputeConfigAWSCloudConfiguration) GetLogGroup() *string {
	if c == nil {
		return nil
	}
	return c.LogGroup
}

func (c *ComputeConfigAWSCloudConfiguration) GetArm64Enabled() *bool {
	if c == nil {
		return nil
	}
	return c.Arm64Enabled
}

func (c *ComputeConfigAWSCloudConfiguration) GetGpuEnabled() *bool {
	if c == nil {
		return nil
	}
	return c.GpuEnabled
}

func (c *ComputeConfigAWSCloudConfiguration) GetEc2KeyPair() *string {
	if c == nil {
		return nil
	}
	return c.Ec2KeyPair
}

func (c *ComputeConfigAWSCloudConfiguration) GetEbsBootSize() *int {
	if c == nil {
		return nil
	}
	return c.EbsBootSize
}

func (c *ComputeConfigAWSCloudConfiguration) GetInstanceProfileArn() *string {
	if c == nil {
		return nil
	}
	return c.InstanceProfileArn
}

func (c *ComputeConfigAWSCloudConfiguration) GetSubnetID() *string {
	if c == nil {
		return nil
	}
	return c.SubnetID
}

func (c *ComputeConfigAWSCloudConfiguration) GetSecurityGroups() []string {
	if c == nil {
		return nil
	}
	return c.SecurityGroups
}

func (c *ComputeConfigAWSCloudConfiguration) GetForgedResources() []map[string]any {
	if c == nil {
		return nil
	}
	return c.ForgedResources
}

type ComputeConfigAWSBatchConfiguration struct {
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	StorageType *string `json:"storageType,omitempty"`
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	LustreID *string  `json:"lustreId,omitempty"`
	Volumes  []string `json:"volumes,omitempty"`
	// Read-only property identifying the compute platform type
	Discriminator      *string `json:"discriminator,omitempty"`
	Region             string  `json:"region"`
	ComputeQueue       *string `json:"computeQueue,omitempty"`
	DragenQueue        *string `json:"dragenQueue,omitempty"`
	DragenInstanceType *string `json:"dragenInstanceType,omitempty"`
	ComputeJobRole     *string `json:"computeJobRole,omitempty"`
	ExecutionRole      *string `json:"executionRole,omitempty"`
	HeadQueue          *string `json:"headQueue,omitempty"`
	HeadJobRole        *string `json:"headJobRole,omitempty"`
	CliPath            *string `json:"cliPath,omitempty"`
	// Working directory path for workflow execution
	WorkDir *string `json:"workDir,omitempty"`
	// Shell script to execute before workflow starts
	PreRunScript *string `json:"preRunScript,omitempty"`
	// Shell script to execute after workflow completes
	PostRunScript   *string `json:"postRunScript,omitempty"`
	HeadJobCpus     *int    `json:"headJobCpus,omitempty"`
	HeadJobMemoryMb *int    `json:"headJobMemoryMb,omitempty"`
	// Array of environment variables for the compute environment
	Environment         []ConfigEnvVariable `json:"environment,omitempty"`
	WaveEnabled         *bool               `json:"waveEnabled,omitempty"`
	Fusion2Enabled      *bool               `json:"fusion2Enabled,omitempty"`
	NvnmeStorageEnabled *bool               `json:"nvnmeStorageEnabled,omitempty"`
	LogGroup            *string             `json:"logGroup,omitempty"`
	// Nextflow configuration settings and parameters
	NextflowConfig  *string          `json:"nextflowConfig,omitempty"`
	FusionSnapshots *bool            `json:"fusionSnapshots,omitempty"`
	Forge           *ForgeConfig     `json:"forge,omitempty"`
	ForgedResources []map[string]any `json:"forgedResources,omitempty"`
}

func (c ComputeConfigAWSBatchConfiguration) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ComputeConfigAWSBatchConfiguration) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"region"}); err != nil {
		return err
	}
	return nil
}

func (c *ComputeConfigAWSBatchConfiguration) GetStorageType() *string {
	if c == nil {
		return nil
	}
	return c.StorageType
}

func (c *ComputeConfigAWSBatchConfiguration) GetLustreID() *string {
	if c == nil {
		return nil
	}
	return c.LustreID
}

func (c *ComputeConfigAWSBatchConfiguration) GetVolumes() []string {
	if c == nil {
		return nil
	}
	return c.Volumes
}

func (c *ComputeConfigAWSBatchConfiguration) GetDiscriminator() *string {
	if c == nil {
		return nil
	}
	return c.Discriminator
}

func (c *ComputeConfigAWSBatchConfiguration) GetRegion() string {
	if c == nil {
		return ""
	}
	return c.Region
}

func (c *ComputeConfigAWSBatchConfiguration) GetComputeQueue() *string {
	if c == nil {
		return nil
	}
	return c.ComputeQueue
}

func (c *ComputeConfigAWSBatchConfiguration) GetDragenQueue() *string {
	if c == nil {
		return nil
	}
	return c.DragenQueue
}

func (c *ComputeConfigAWSBatchConfiguration) GetDragenInstanceType() *string {
	if c == nil {
		return nil
	}
	return c.DragenInstanceType
}

func (c *ComputeConfigAWSBatchConfiguration) GetComputeJobRole() *string {
	if c == nil {
		return nil
	}
	return c.ComputeJobRole
}

func (c *ComputeConfigAWSBatchConfiguration) GetExecutionRole() *string {
	if c == nil {
		return nil
	}
	return c.ExecutionRole
}

func (c *ComputeConfigAWSBatchConfiguration) GetHeadQueue() *string {
	if c == nil {
		return nil
	}
	return c.HeadQueue
}

func (c *ComputeConfigAWSBatchConfiguration) GetHeadJobRole() *string {
	if c == nil {
		return nil
	}
	return c.HeadJobRole
}

func (c *ComputeConfigAWSBatchConfiguration) GetCliPath() *string {
	if c == nil {
		return nil
	}
	return c.CliPath
}

func (c *ComputeConfigAWSBatchConfiguration) GetWorkDir() *string {
	if c == nil {
		return nil
	}
	return c.WorkDir
}

func (c *ComputeConfigAWSBatchConfiguration) GetPreRunScript() *string {
	if c == nil {
		return nil
	}
	return c.PreRunScript
}

func (c *ComputeConfigAWSBatchConfiguration) GetPostRunScript() *string {
	if c == nil {
		return nil
	}
	return c.PostRunScript
}

func (c *ComputeConfigAWSBatchConfiguration) GetHeadJobCpus() *int {
	if c == nil {
		return nil
	}
	return c.HeadJobCpus
}

func (c *ComputeConfigAWSBatchConfiguration) GetHeadJobMemoryMb() *int {
	if c == nil {
		return nil
	}
	return c.HeadJobMemoryMb
}

func (c *ComputeConfigAWSBatchConfiguration) GetEnvironment() []ConfigEnvVariable {
	if c == nil {
		return nil
	}
	return c.Environment
}

func (c *ComputeConfigAWSBatchConfiguration) GetWaveEnabled() *bool {
	if c == nil {
		return nil
	}
	return c.WaveEnabled
}

func (c *ComputeConfigAWSBatchConfiguration) GetFusion2Enabled() *bool {
	if c == nil {
		return nil
	}
	return c.Fusion2Enabled
}

func (c *ComputeConfigAWSBatchConfiguration) GetNvnmeStorageEnabled() *bool {
	if c == nil {
		return nil
	}
	return c.NvnmeStorageEnabled
}

func (c *ComputeConfigAWSBatchConfiguration) GetLogGroup() *string {
	if c == nil {
		return nil
	}
	return c.LogGroup
}

func (c *ComputeConfigAWSBatchConfiguration) GetNextflowConfig() *string {
	if c == nil {
		return nil
	}
	return c.NextflowConfig
}

func (c *ComputeConfigAWSBatchConfiguration) GetFusionSnapshots() *bool {
	if c == nil {
		return nil
	}
	return c.FusionSnapshots
}

func (c *ComputeConfigAWSBatchConfiguration) GetForge() *ForgeConfig {
	if c == nil {
		return nil
	}
	return c.Forge
}

func (c *ComputeConfigAWSBatchConfiguration) GetForgedResources() []map[string]any {
	if c == nil {
		return nil
	}
	return c.ForgedResources
}

type ComputeConfigType string

const (
	ComputeConfigTypeMoabPlatform          ComputeConfigType = "moab-platform"
	ComputeConfigTypeAwsBatch              ComputeConfigType = "aws-batch"
	ComputeConfigTypeLocalPlatform         ComputeConfigType = "local-platform"
	ComputeConfigTypeGkePlatform           ComputeConfigType = "gke-platform"
	ComputeConfigTypeGoogleBatch           ComputeConfigType = "google-batch"
	ComputeConfigTypeAwsCloud              ComputeConfigType = "aws-cloud"
	ComputeConfigTypeSlurmPlatform         ComputeConfigType = "slurm-platform"
	ComputeConfigTypeK8sPlatform           ComputeConfigType = "k8s-platform"
	ComputeConfigTypeAltairPlatform        ComputeConfigType = "altair-platform"
	ComputeConfigTypeLsfPlatform           ComputeConfigType = "lsf-platform"
	ComputeConfigTypeAzureBatch            ComputeConfigType = "azure-batch"
	ComputeConfigTypeSeqeracomputePlatform ComputeConfigType = "seqeracompute-platform"
	ComputeConfigTypeEksPlatform           ComputeConfigType = "eks-platform"
	ComputeConfigTypeGoogleLifesciences    ComputeConfigType = "google-lifesciences"
	ComputeConfigTypeUgePlatform           ComputeConfigType = "uge-platform"
)

// ComputeConfig - Configuration settings for compute environments including work directories,
// pre/post run scripts, and environment-specific parameters.
type ComputeConfig struct {
	ComputeConfigAWSBatchConfiguration           *ComputeConfigAWSBatchConfiguration           `queryParam:"inline,name=ComputeConfig"`
	ComputeConfigAWSCloudConfiguration           *ComputeConfigAWSCloudConfiguration           `queryParam:"inline,name=ComputeConfig"`
	ComputeConfigSeqeraComputeConfiguration      *ComputeConfigSeqeraComputeConfiguration      `queryParam:"inline,name=ComputeConfig"`
	ComputeConfigGoogleLifeSciencesConfiguration *ComputeConfigGoogleLifeSciencesConfiguration `queryParam:"inline,name=ComputeConfig"`
	ComputeConfigGoogleBatchServiceConfiguration *ComputeConfigGoogleBatchServiceConfiguration `queryParam:"inline,name=ComputeConfig"`
	ComputeConfigGoogleCloudConfiguration        *ComputeConfigGoogleCloudConfiguration        `queryParam:"inline,name=ComputeConfig"`
	ComputeConfigAzureBatchConfiguration         *ComputeConfigAzureBatchConfiguration         `queryParam:"inline,name=ComputeConfig"`
	ComputeConfigAzureCloudConfiguration         *ComputeConfigAzureCloudConfiguration         `queryParam:"inline,name=ComputeConfig"`
	ComputeConfigIBMLSFConfiguration             *ComputeConfigIBMLSFConfiguration             `queryParam:"inline,name=ComputeConfig"`
	ComputeConfigSlurmConfiguration              *ComputeConfigSlurmConfiguration              `queryParam:"inline,name=ComputeConfig"`
	ComputeConfigKubernetesComputeConfiguration  *ComputeConfigKubernetesComputeConfiguration  `queryParam:"inline,name=ComputeConfig"`
	ComputeConfigAmazonEKSClusterConfiguration   *ComputeConfigAmazonEKSClusterConfiguration   `queryParam:"inline,name=ComputeConfig"`
	ComputeConfigGoogleGKEClusterConfiguration   *ComputeConfigGoogleGKEClusterConfiguration   `queryParam:"inline,name=ComputeConfig"`
	ComputeConfigUnivaGridEngineConfiguration    *ComputeConfigUnivaGridEngineConfiguration    `queryParam:"inline,name=ComputeConfig"`
	ComputeConfigAltairPBSConfiguration          *ComputeConfigAltairPBSConfiguration          `queryParam:"inline,name=ComputeConfig"`
	ComputeConfigMoabConfiguration               *ComputeConfigMoabConfiguration               `queryParam:"inline,name=ComputeConfig"`
	ComputeConfigLocalExecutionConfiguration     *ComputeConfigLocalExecutionConfiguration     `queryParam:"inline,name=ComputeConfig"`

	Type ComputeConfigType
}

func CreateComputeConfigMoabPlatform(moabPlatform ComputeConfigMoabConfiguration) ComputeConfig {
	typ := ComputeConfigTypeMoabPlatform

	typStr := string(typ)
	moabPlatform.Discriminator = &typStr

	return ComputeConfig{
		ComputeConfigMoabConfiguration: &moabPlatform,
		Type:                           typ,
	}
}

func CreateComputeConfigAwsBatch(awsBatch ComputeConfigAWSBatchConfiguration) ComputeConfig {
	typ := ComputeConfigTypeAwsBatch

	typStr := string(typ)
	awsBatch.Discriminator = &typStr

	return ComputeConfig{
		ComputeConfigAWSBatchConfiguration: &awsBatch,
		Type:                               typ,
	}
}

func CreateComputeConfigLocalPlatform(localPlatform ComputeConfigLocalExecutionConfiguration) ComputeConfig {
	typ := ComputeConfigTypeLocalPlatform

	typStr := string(typ)
	localPlatform.Discriminator = &typStr

	return ComputeConfig{
		ComputeConfigLocalExecutionConfiguration: &localPlatform,
		Type:                                     typ,
	}
}

func CreateComputeConfigGkePlatform(gkePlatform ComputeConfigGoogleGKEClusterConfiguration) ComputeConfig {
	typ := ComputeConfigTypeGkePlatform

	typStr := string(typ)
	gkePlatform.Discriminator = &typStr

	return ComputeConfig{
		ComputeConfigGoogleGKEClusterConfiguration: &gkePlatform,
		Type: typ,
	}
}

func CreateComputeConfigGoogleBatch(googleBatch ComputeConfigGoogleBatchServiceConfiguration) ComputeConfig {
	typ := ComputeConfigTypeGoogleBatch

	typStr := string(typ)
	googleBatch.Discriminator = &typStr

	return ComputeConfig{
		ComputeConfigGoogleBatchServiceConfiguration: &googleBatch,
		Type: typ,
	}
}

func CreateComputeConfigAwsCloud(awsCloud ComputeConfigAWSCloudConfiguration) ComputeConfig {
	typ := ComputeConfigTypeAwsCloud

	typStr := string(typ)
	awsCloud.Discriminator = &typStr

	return ComputeConfig{
		ComputeConfigAWSCloudConfiguration: &awsCloud,
		Type:                               typ,
	}
}

func CreateComputeConfigSlurmPlatform(slurmPlatform ComputeConfigSlurmConfiguration) ComputeConfig {
	typ := ComputeConfigTypeSlurmPlatform

	typStr := string(typ)
	slurmPlatform.Discriminator = &typStr

	return ComputeConfig{
		ComputeConfigSlurmConfiguration: &slurmPlatform,
		Type:                            typ,
	}
}

func CreateComputeConfigK8sPlatform(k8sPlatform ComputeConfigKubernetesComputeConfiguration) ComputeConfig {
	typ := ComputeConfigTypeK8sPlatform

	typStr := string(typ)
	k8sPlatform.Discriminator = &typStr

	return ComputeConfig{
		ComputeConfigKubernetesComputeConfiguration: &k8sPlatform,
		Type: typ,
	}
}

func CreateComputeConfigAltairPlatform(altairPlatform ComputeConfigAltairPBSConfiguration) ComputeConfig {
	typ := ComputeConfigTypeAltairPlatform

	typStr := string(typ)
	altairPlatform.Discriminator = &typStr

	return ComputeConfig{
		ComputeConfigAltairPBSConfiguration: &altairPlatform,
		Type:                                typ,
	}
}

func CreateComputeConfigLsfPlatform(lsfPlatform ComputeConfigIBMLSFConfiguration) ComputeConfig {
	typ := ComputeConfigTypeLsfPlatform

	typStr := string(typ)
	lsfPlatform.Discriminator = &typStr

	return ComputeConfig{
		ComputeConfigIBMLSFConfiguration: &lsfPlatform,
		Type:                             typ,
	}
}

func CreateComputeConfigAzureBatch(azureBatch ComputeConfigAzureBatchConfiguration) ComputeConfig {
	typ := ComputeConfigTypeAzureBatch

	typStr := string(typ)
	azureBatch.Discriminator = &typStr

	return ComputeConfig{
		ComputeConfigAzureBatchConfiguration: &azureBatch,
		Type:                                 typ,
	}
}

func CreateComputeConfigSeqeracomputePlatform(seqeracomputePlatform ComputeConfigSeqeraComputeConfiguration) ComputeConfig {
	typ := ComputeConfigTypeSeqeracomputePlatform

	typStr := string(typ)
	seqeracomputePlatform.Discriminator = &typStr

	return ComputeConfig{
		ComputeConfigSeqeraComputeConfiguration: &seqeracomputePlatform,
		Type:                                    typ,
	}
}

func CreateComputeConfigEksPlatform(eksPlatform ComputeConfigAmazonEKSClusterConfiguration) ComputeConfig {
	typ := ComputeConfigTypeEksPlatform

	typStr := string(typ)
	eksPlatform.Discriminator = &typStr

	return ComputeConfig{
		ComputeConfigAmazonEKSClusterConfiguration: &eksPlatform,
		Type: typ,
	}
}

func CreateComputeConfigGoogleLifesciences(googleLifesciences ComputeConfigGoogleLifeSciencesConfiguration) ComputeConfig {
	typ := ComputeConfigTypeGoogleLifesciences

	typStr := string(typ)
	googleLifesciences.Discriminator = &typStr

	return ComputeConfig{
		ComputeConfigGoogleLifeSciencesConfiguration: &googleLifesciences,
		Type: typ,
	}
}

func CreateComputeConfigUgePlatform(ugePlatform ComputeConfigUnivaGridEngineConfiguration) ComputeConfig {
	typ := ComputeConfigTypeUgePlatform

	typStr := string(typ)
	ugePlatform.Discriminator = &typStr

	return ComputeConfig{
		ComputeConfigUnivaGridEngineConfiguration: &ugePlatform,
		Type: typ,
	}
}

func (u *ComputeConfig) UnmarshalJSON(data []byte) error {

	type discriminator struct {
		Discriminator string `json:"discriminator"`
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.Discriminator {
	case "moab-platform":
		computeConfigMoabConfiguration := new(ComputeConfigMoabConfiguration)
		if err := utils.UnmarshalJSON(data, &computeConfigMoabConfiguration, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Discriminator == moab-platform) type ComputeConfigMoabConfiguration within ComputeConfig: %w", string(data), err)
		}

		u.ComputeConfigMoabConfiguration = computeConfigMoabConfiguration
		u.Type = ComputeConfigTypeMoabPlatform
		return nil
	case "aws-batch":
		computeConfigAWSBatchConfiguration := new(ComputeConfigAWSBatchConfiguration)
		if err := utils.UnmarshalJSON(data, &computeConfigAWSBatchConfiguration, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Discriminator == aws-batch) type ComputeConfigAWSBatchConfiguration within ComputeConfig: %w", string(data), err)
		}

		u.ComputeConfigAWSBatchConfiguration = computeConfigAWSBatchConfiguration
		u.Type = ComputeConfigTypeAwsBatch
		return nil
	case "local-platform":
		computeConfigLocalExecutionConfiguration := new(ComputeConfigLocalExecutionConfiguration)
		if err := utils.UnmarshalJSON(data, &computeConfigLocalExecutionConfiguration, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Discriminator == local-platform) type ComputeConfigLocalExecutionConfiguration within ComputeConfig: %w", string(data), err)
		}

		u.ComputeConfigLocalExecutionConfiguration = computeConfigLocalExecutionConfiguration
		u.Type = ComputeConfigTypeLocalPlatform
		return nil
	case "gke-platform":
		computeConfigGoogleGKEClusterConfiguration := new(ComputeConfigGoogleGKEClusterConfiguration)
		if err := utils.UnmarshalJSON(data, &computeConfigGoogleGKEClusterConfiguration, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Discriminator == gke-platform) type ComputeConfigGoogleGKEClusterConfiguration within ComputeConfig: %w", string(data), err)
		}

		u.ComputeConfigGoogleGKEClusterConfiguration = computeConfigGoogleGKEClusterConfiguration
		u.Type = ComputeConfigTypeGkePlatform
		return nil
	case "google-batch":
		computeConfigGoogleBatchServiceConfiguration := new(ComputeConfigGoogleBatchServiceConfiguration)
		if err := utils.UnmarshalJSON(data, &computeConfigGoogleBatchServiceConfiguration, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Discriminator == google-batch) type ComputeConfigGoogleBatchServiceConfiguration within ComputeConfig: %w", string(data), err)
		}

		u.ComputeConfigGoogleBatchServiceConfiguration = computeConfigGoogleBatchServiceConfiguration
		u.Type = ComputeConfigTypeGoogleBatch
		return nil
	case "aws-cloud":
		computeConfigAWSCloudConfiguration := new(ComputeConfigAWSCloudConfiguration)
		if err := utils.UnmarshalJSON(data, &computeConfigAWSCloudConfiguration, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Discriminator == aws-cloud) type ComputeConfigAWSCloudConfiguration within ComputeConfig: %w", string(data), err)
		}

		u.ComputeConfigAWSCloudConfiguration = computeConfigAWSCloudConfiguration
		u.Type = ComputeConfigTypeAwsCloud
		return nil
	case "slurm-platform":
		computeConfigSlurmConfiguration := new(ComputeConfigSlurmConfiguration)
		if err := utils.UnmarshalJSON(data, &computeConfigSlurmConfiguration, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Discriminator == slurm-platform) type ComputeConfigSlurmConfiguration within ComputeConfig: %w", string(data), err)
		}

		u.ComputeConfigSlurmConfiguration = computeConfigSlurmConfiguration
		u.Type = ComputeConfigTypeSlurmPlatform
		return nil
	case "k8s-platform":
		computeConfigKubernetesComputeConfiguration := new(ComputeConfigKubernetesComputeConfiguration)
		if err := utils.UnmarshalJSON(data, &computeConfigKubernetesComputeConfiguration, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Discriminator == k8s-platform) type ComputeConfigKubernetesComputeConfiguration within ComputeConfig: %w", string(data), err)
		}

		u.ComputeConfigKubernetesComputeConfiguration = computeConfigKubernetesComputeConfiguration
		u.Type = ComputeConfigTypeK8sPlatform
		return nil
	case "altair-platform":
		computeConfigAltairPBSConfiguration := new(ComputeConfigAltairPBSConfiguration)
		if err := utils.UnmarshalJSON(data, &computeConfigAltairPBSConfiguration, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Discriminator == altair-platform) type ComputeConfigAltairPBSConfiguration within ComputeConfig: %w", string(data), err)
		}

		u.ComputeConfigAltairPBSConfiguration = computeConfigAltairPBSConfiguration
		u.Type = ComputeConfigTypeAltairPlatform
		return nil
	case "lsf-platform":
		computeConfigIBMLSFConfiguration := new(ComputeConfigIBMLSFConfiguration)
		if err := utils.UnmarshalJSON(data, &computeConfigIBMLSFConfiguration, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Discriminator == lsf-platform) type ComputeConfigIBMLSFConfiguration within ComputeConfig: %w", string(data), err)
		}

		u.ComputeConfigIBMLSFConfiguration = computeConfigIBMLSFConfiguration
		u.Type = ComputeConfigTypeLsfPlatform
		return nil
	case "azure-batch":
		computeConfigAzureBatchConfiguration := new(ComputeConfigAzureBatchConfiguration)
		if err := utils.UnmarshalJSON(data, &computeConfigAzureBatchConfiguration, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Discriminator == azure-batch) type ComputeConfigAzureBatchConfiguration within ComputeConfig: %w", string(data), err)
		}

		u.ComputeConfigAzureBatchConfiguration = computeConfigAzureBatchConfiguration
		u.Type = ComputeConfigTypeAzureBatch
		return nil
	case "seqeracompute-platform":
		computeConfigSeqeraComputeConfiguration := new(ComputeConfigSeqeraComputeConfiguration)
		if err := utils.UnmarshalJSON(data, &computeConfigSeqeraComputeConfiguration, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Discriminator == seqeracompute-platform) type ComputeConfigSeqeraComputeConfiguration within ComputeConfig: %w", string(data), err)
		}

		u.ComputeConfigSeqeraComputeConfiguration = computeConfigSeqeraComputeConfiguration
		u.Type = ComputeConfigTypeSeqeracomputePlatform
		return nil
	case "eks-platform":
		computeConfigAmazonEKSClusterConfiguration := new(ComputeConfigAmazonEKSClusterConfiguration)
		if err := utils.UnmarshalJSON(data, &computeConfigAmazonEKSClusterConfiguration, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Discriminator == eks-platform) type ComputeConfigAmazonEKSClusterConfiguration within ComputeConfig: %w", string(data), err)
		}

		u.ComputeConfigAmazonEKSClusterConfiguration = computeConfigAmazonEKSClusterConfiguration
		u.Type = ComputeConfigTypeEksPlatform
		return nil
	case "google-lifesciences":
		computeConfigGoogleLifeSciencesConfiguration := new(ComputeConfigGoogleLifeSciencesConfiguration)
		if err := utils.UnmarshalJSON(data, &computeConfigGoogleLifeSciencesConfiguration, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Discriminator == google-lifesciences) type ComputeConfigGoogleLifeSciencesConfiguration within ComputeConfig: %w", string(data), err)
		}

		u.ComputeConfigGoogleLifeSciencesConfiguration = computeConfigGoogleLifeSciencesConfiguration
		u.Type = ComputeConfigTypeGoogleLifesciences
		return nil
	case "uge-platform":
		computeConfigUnivaGridEngineConfiguration := new(ComputeConfigUnivaGridEngineConfiguration)
		if err := utils.UnmarshalJSON(data, &computeConfigUnivaGridEngineConfiguration, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Discriminator == uge-platform) type ComputeConfigUnivaGridEngineConfiguration within ComputeConfig: %w", string(data), err)
		}

		u.ComputeConfigUnivaGridEngineConfiguration = computeConfigUnivaGridEngineConfiguration
		u.Type = ComputeConfigTypeUgePlatform
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ComputeConfig", string(data))
}

func (u ComputeConfig) MarshalJSON() ([]byte, error) {
	if u.ComputeConfigAWSBatchConfiguration != nil {
		return utils.MarshalJSON(u.ComputeConfigAWSBatchConfiguration, "", true)
	}

	if u.ComputeConfigAWSCloudConfiguration != nil {
		return utils.MarshalJSON(u.ComputeConfigAWSCloudConfiguration, "", true)
	}

	if u.ComputeConfigSeqeraComputeConfiguration != nil {
		return utils.MarshalJSON(u.ComputeConfigSeqeraComputeConfiguration, "", true)
	}

	if u.ComputeConfigGoogleLifeSciencesConfiguration != nil {
		return utils.MarshalJSON(u.ComputeConfigGoogleLifeSciencesConfiguration, "", true)
	}

	if u.ComputeConfigGoogleBatchServiceConfiguration != nil {
		return utils.MarshalJSON(u.ComputeConfigGoogleBatchServiceConfiguration, "", true)
	}

	if u.ComputeConfigGoogleCloudConfiguration != nil {
		return utils.MarshalJSON(u.ComputeConfigGoogleCloudConfiguration, "", true)
	}

	if u.ComputeConfigAzureBatchConfiguration != nil {
		return utils.MarshalJSON(u.ComputeConfigAzureBatchConfiguration, "", true)
	}

	if u.ComputeConfigAzureCloudConfiguration != nil {
		return utils.MarshalJSON(u.ComputeConfigAzureCloudConfiguration, "", true)
	}

	if u.ComputeConfigIBMLSFConfiguration != nil {
		return utils.MarshalJSON(u.ComputeConfigIBMLSFConfiguration, "", true)
	}

	if u.ComputeConfigSlurmConfiguration != nil {
		return utils.MarshalJSON(u.ComputeConfigSlurmConfiguration, "", true)
	}

	if u.ComputeConfigKubernetesComputeConfiguration != nil {
		return utils.MarshalJSON(u.ComputeConfigKubernetesComputeConfiguration, "", true)
	}

	if u.ComputeConfigAmazonEKSClusterConfiguration != nil {
		return utils.MarshalJSON(u.ComputeConfigAmazonEKSClusterConfiguration, "", true)
	}

	if u.ComputeConfigGoogleGKEClusterConfiguration != nil {
		return utils.MarshalJSON(u.ComputeConfigGoogleGKEClusterConfiguration, "", true)
	}

	if u.ComputeConfigUnivaGridEngineConfiguration != nil {
		return utils.MarshalJSON(u.ComputeConfigUnivaGridEngineConfiguration, "", true)
	}

	if u.ComputeConfigAltairPBSConfiguration != nil {
		return utils.MarshalJSON(u.ComputeConfigAltairPBSConfiguration, "", true)
	}

	if u.ComputeConfigMoabConfiguration != nil {
		return utils.MarshalJSON(u.ComputeConfigMoabConfiguration, "", true)
	}

	if u.ComputeConfigLocalExecutionConfiguration != nil {
		return utils.MarshalJSON(u.ComputeConfigLocalExecutionConfiguration, "", true)
	}

	return nil, errors.New("could not marshal union type ComputeConfig: all fields are null")
}
