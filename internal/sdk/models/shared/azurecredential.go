// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/seqeralabs/terraform-provider-seqera/internal/sdk/internal/utils"
	"time"
)

// AzureCredentialProviderType - Cloud provider type (automatically set to "azure")
type AzureCredentialProviderType string

const (
	AzureCredentialProviderTypeAzure AzureCredentialProviderType = "azure"
)

func (e AzureCredentialProviderType) ToPointer() *AzureCredentialProviderType {
	return &e
}
func (e *AzureCredentialProviderType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "azure":
		*e = AzureCredentialProviderType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AzureCredentialProviderType: %v", v)
	}
}

// Discriminator - Authentication mode discriminator (azure, azure-entra, or azure-cloud)
type Discriminator string

const (
	DiscriminatorAzure      Discriminator = "azure"
	DiscriminatorAzureEntra Discriminator = "azure-entra"
	DiscriminatorAzureCloud Discriminator = "azure-cloud"
)

func (e Discriminator) ToPointer() *Discriminator {
	return &e
}
func (e *Discriminator) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "azure":
		fallthrough
	case "azure-entra":
		fallthrough
	case "azure-cloud":
		*e = Discriminator(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Discriminator: %v", v)
	}
}

type AzureCredentialKeys struct {
	// Authentication mode discriminator (azure, azure-entra, or azure-cloud)
	Discriminator *Discriminator `default:"azure" json:"discriminator"`
	// Azure Batch account name (required)
	BatchName string `json:"batchName"`
	// Azure Blob Storage account name (required)
	StorageName string `json:"storageName"`
	// Azure Batch account key (for shared key authentication)
	BatchKey *string `json:"batchKey,omitempty"`
	// Azure Storage account key (for shared key authentication)
	StorageKey *string `json:"storageKey,omitempty"`
	// Azure tenant ID (for Entra/Cloud authentication)
	TenantID *string `json:"tenantId,omitempty"`
	// Azure service principal client ID (for Entra/Cloud authentication)
	ClientID *string `json:"clientId,omitempty"`
	// Azure service principal client secret (for Entra/Cloud authentication)
	ClientSecret *string `json:"clientSecret,omitempty"`
}

func (a AzureCredentialKeys) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AzureCredentialKeys) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, []string{"batchName", "storageName"}); err != nil {
		return err
	}
	return nil
}

func (a *AzureCredentialKeys) GetDiscriminator() *Discriminator {
	if a == nil {
		return nil
	}
	return a.Discriminator
}

func (a *AzureCredentialKeys) GetBatchName() string {
	if a == nil {
		return ""
	}
	return a.BatchName
}

func (a *AzureCredentialKeys) GetStorageName() string {
	if a == nil {
		return ""
	}
	return a.StorageName
}

func (a *AzureCredentialKeys) GetBatchKey() *string {
	if a == nil {
		return nil
	}
	return a.BatchKey
}

func (a *AzureCredentialKeys) GetStorageKey() *string {
	if a == nil {
		return nil
	}
	return a.StorageKey
}

func (a *AzureCredentialKeys) GetTenantID() *string {
	if a == nil {
		return nil
	}
	return a.TenantID
}

func (a *AzureCredentialKeys) GetClientID() *string {
	if a == nil {
		return nil
	}
	return a.ClientID
}

func (a *AzureCredentialKeys) GetClientSecret() *string {
	if a == nil {
		return nil
	}
	return a.ClientSecret
}

type AzureCredential struct {
	// Unique identifier for the credential (max 22 characters)
	ID *string `json:"id,omitempty"`
	// Display name for the credential. Must be 2-99 characters using only letters, numbers, underscores, and hyphens. No spaces allowed.
	Name string `json:"name"`
	// Cloud provider type (automatically set to "azure")
	ProviderType *AzureCredentialProviderType `default:"azure" json:"provider"`
	// Flag indicating if the credential has been soft-deleted
	Deleted *bool `json:"deleted,omitempty"`
	// Timestamp when the credential was last used
	LastUsed *time.Time `json:"lastUsed,omitempty"`
	// Timestamp when the credential was created
	DateCreated *time.Time `json:"dateCreated,omitempty"`
	// Timestamp when the credential was last updated
	LastUpdated *time.Time          `json:"lastUpdated,omitempty"`
	Keys        AzureCredentialKeys `json:"keys"`
}

func (a AzureCredential) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AzureCredential) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, []string{"name", "keys"}); err != nil {
		return err
	}
	return nil
}

func (a *AzureCredential) GetID() *string {
	if a == nil {
		return nil
	}
	return a.ID
}

func (a *AzureCredential) GetName() string {
	if a == nil {
		return ""
	}
	return a.Name
}

func (a *AzureCredential) GetProviderType() *AzureCredentialProviderType {
	if a == nil {
		return nil
	}
	return a.ProviderType
}

func (a *AzureCredential) GetDeleted() *bool {
	if a == nil {
		return nil
	}
	return a.Deleted
}

func (a *AzureCredential) GetLastUsed() *time.Time {
	if a == nil {
		return nil
	}
	return a.LastUsed
}

func (a *AzureCredential) GetDateCreated() *time.Time {
	if a == nil {
		return nil
	}
	return a.DateCreated
}

func (a *AzureCredential) GetLastUpdated() *time.Time {
	if a == nil {
		return nil
	}
	return a.LastUpdated
}

func (a *AzureCredential) GetKeys() AzureCredentialKeys {
	if a == nil {
		return AzureCredentialKeys{}
	}
	return a.Keys
}

type AzureCredentialKeysOutput struct {
	// Authentication mode discriminator (azure, azure-entra, or azure-cloud)
	Discriminator *Discriminator `default:"azure" json:"discriminator"`
	// Azure Batch account name (required)
	BatchName string `json:"batchName"`
	// Azure Blob Storage account name (required)
	StorageName string `json:"storageName"`
}

func (a AzureCredentialKeysOutput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AzureCredentialKeysOutput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, []string{"batchName", "storageName"}); err != nil {
		return err
	}
	return nil
}

func (a *AzureCredentialKeysOutput) GetDiscriminator() *Discriminator {
	if a == nil {
		return nil
	}
	return a.Discriminator
}

func (a *AzureCredentialKeysOutput) GetBatchName() string {
	if a == nil {
		return ""
	}
	return a.BatchName
}

func (a *AzureCredentialKeysOutput) GetStorageName() string {
	if a == nil {
		return ""
	}
	return a.StorageName
}

type AzureCredentialOutput struct {
	// Unique identifier for the credential (max 22 characters)
	ID *string `json:"id,omitempty"`
	// Display name for the credential. Must be 2-99 characters using only letters, numbers, underscores, and hyphens. No spaces allowed.
	Name string `json:"name"`
	// Cloud provider type (automatically set to "azure")
	ProviderType *AzureCredentialProviderType `default:"azure" json:"provider"`
	// Flag indicating if the credential has been soft-deleted
	Deleted *bool `json:"deleted,omitempty"`
	// Timestamp when the credential was last used
	LastUsed *time.Time `json:"lastUsed,omitempty"`
	// Timestamp when the credential was created
	DateCreated *time.Time `json:"dateCreated,omitempty"`
	// Timestamp when the credential was last updated
	LastUpdated *time.Time                `json:"lastUpdated,omitempty"`
	Keys        AzureCredentialKeysOutput `json:"keys"`
}

func (a AzureCredentialOutput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AzureCredentialOutput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, []string{"name", "keys"}); err != nil {
		return err
	}
	return nil
}

func (a *AzureCredentialOutput) GetID() *string {
	if a == nil {
		return nil
	}
	return a.ID
}

func (a *AzureCredentialOutput) GetName() string {
	if a == nil {
		return ""
	}
	return a.Name
}

func (a *AzureCredentialOutput) GetProviderType() *AzureCredentialProviderType {
	if a == nil {
		return nil
	}
	return a.ProviderType
}

func (a *AzureCredentialOutput) GetDeleted() *bool {
	if a == nil {
		return nil
	}
	return a.Deleted
}

func (a *AzureCredentialOutput) GetLastUsed() *time.Time {
	if a == nil {
		return nil
	}
	return a.LastUsed
}

func (a *AzureCredentialOutput) GetDateCreated() *time.Time {
	if a == nil {
		return nil
	}
	return a.DateCreated
}

func (a *AzureCredentialOutput) GetLastUpdated() *time.Time {
	if a == nil {
		return nil
	}
	return a.LastUpdated
}

func (a *AzureCredentialOutput) GetKeys() AzureCredentialKeysOutput {
	if a == nil {
		return AzureCredentialKeysOutput{}
	}
	return a.Keys
}
