// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/seqeralabs/terraform-provider-seqera/internal/sdk/internal/utils"
	"time"
)

type ComputeEnvResponseDtoPlatform string

const (
	ComputeEnvResponseDtoPlatformAwsBatch              ComputeEnvResponseDtoPlatform = "aws-batch"
	ComputeEnvResponseDtoPlatformAwsCloud              ComputeEnvResponseDtoPlatform = "aws-cloud"
	ComputeEnvResponseDtoPlatformSeqeracomputePlatform ComputeEnvResponseDtoPlatform = "seqeracompute-platform"
	ComputeEnvResponseDtoPlatformGoogleLifesciences    ComputeEnvResponseDtoPlatform = "google-lifesciences"
	ComputeEnvResponseDtoPlatformGoogleBatch           ComputeEnvResponseDtoPlatform = "google-batch"
	ComputeEnvResponseDtoPlatformAzureBatch            ComputeEnvResponseDtoPlatform = "azure-batch"
	ComputeEnvResponseDtoPlatformK8sPlatform           ComputeEnvResponseDtoPlatform = "k8s-platform"
	ComputeEnvResponseDtoPlatformEksPlatform           ComputeEnvResponseDtoPlatform = "eks-platform"
	ComputeEnvResponseDtoPlatformGkePlatform           ComputeEnvResponseDtoPlatform = "gke-platform"
	ComputeEnvResponseDtoPlatformUgePlatform           ComputeEnvResponseDtoPlatform = "uge-platform"
	ComputeEnvResponseDtoPlatformSlurmPlatform         ComputeEnvResponseDtoPlatform = "slurm-platform"
	ComputeEnvResponseDtoPlatformLsfPlatform           ComputeEnvResponseDtoPlatform = "lsf-platform"
	ComputeEnvResponseDtoPlatformAltairPlatform        ComputeEnvResponseDtoPlatform = "altair-platform"
)

func (e ComputeEnvResponseDtoPlatform) ToPointer() *ComputeEnvResponseDtoPlatform {
	return &e
}
func (e *ComputeEnvResponseDtoPlatform) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "aws-batch":
		fallthrough
	case "aws-cloud":
		fallthrough
	case "seqeracompute-platform":
		fallthrough
	case "google-lifesciences":
		fallthrough
	case "google-batch":
		fallthrough
	case "azure-batch":
		fallthrough
	case "k8s-platform":
		fallthrough
	case "eks-platform":
		fallthrough
	case "gke-platform":
		fallthrough
	case "uge-platform":
		fallthrough
	case "slurm-platform":
		fallthrough
	case "lsf-platform":
		fallthrough
	case "altair-platform":
		*e = ComputeEnvResponseDtoPlatform(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ComputeEnvResponseDtoPlatform: %v", v)
	}
}

type ComputeEnvResponseDto struct {
	ComputeEnvID *string                        `json:"id,omitempty"`
	Name         *string                        `json:"name,omitempty"`
	Description  *string                        `json:"description,omitempty"`
	Platform     *ComputeEnvResponseDtoPlatform `json:"platform,omitempty"`
	// Configuration settings for compute environments including work directories,
	// pre/post run scripts, and environment-specific parameters.
	//
	Config            *ComputeConfig    `json:"config,omitempty"`
	DateCreated       *time.Time        `json:"dateCreated,omitempty"`
	LastUpdated       *time.Time        `json:"lastUpdated,omitempty"`
	LastUsed          *time.Time        `json:"lastUsed,omitempty"`
	Deleted           *bool             `json:"deleted,omitempty"`
	Status            *ComputeEnvStatus `json:"status,omitempty"`
	Message           *string           `json:"message,omitempty"`
	Primary           *bool             `json:"primary,omitempty"`
	CredentialsID     *string           `json:"credentialsId,omitempty"`
	ManagedIdentityID *string           `json:"managedIdentityId,omitempty"`
	OrgID             *int64            `json:"orgId,omitempty"`
	WorkspaceID       *int64            `json:"workspaceId,omitempty"`
	Labels            []LabelDbDto      `json:"labels,omitempty"`
}

func (c ComputeEnvResponseDto) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ComputeEnvResponseDto) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ComputeEnvResponseDto) GetComputeEnvID() *string {
	if o == nil {
		return nil
	}
	return o.ComputeEnvID
}

func (o *ComputeEnvResponseDto) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *ComputeEnvResponseDto) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *ComputeEnvResponseDto) GetPlatform() *ComputeEnvResponseDtoPlatform {
	if o == nil {
		return nil
	}
	return o.Platform
}

func (o *ComputeEnvResponseDto) GetConfig() *ComputeConfig {
	if o == nil {
		return nil
	}
	return o.Config
}

func (o *ComputeEnvResponseDto) GetConfigMoabPlatform() *MoabConfiguration {
	if v := o.GetConfig(); v != nil {
		return v.MoabConfiguration
	}
	return nil
}

func (o *ComputeEnvResponseDto) GetConfigAwsBatch() *AWSBatchConfiguration {
	if v := o.GetConfig(); v != nil {
		return v.AWSBatchConfiguration
	}
	return nil
}

func (o *ComputeEnvResponseDto) GetConfigGkePlatform() *GoogleGKEClusterConfiguration {
	if v := o.GetConfig(); v != nil {
		return v.GoogleGKEClusterConfiguration
	}
	return nil
}

func (o *ComputeEnvResponseDto) GetConfigGoogleBatch() *GoogleBatchServiceConfiguration {
	if v := o.GetConfig(); v != nil {
		return v.GoogleBatchServiceConfiguration
	}
	return nil
}

func (o *ComputeEnvResponseDto) GetConfigAwsCloud() *AWSCloudConfiguration {
	if v := o.GetConfig(); v != nil {
		return v.AWSCloudConfiguration
	}
	return nil
}

func (o *ComputeEnvResponseDto) GetConfigSlurmPlatform() *SlurmConfiguration {
	if v := o.GetConfig(); v != nil {
		return v.SlurmConfiguration
	}
	return nil
}

func (o *ComputeEnvResponseDto) GetConfigK8sPlatform() *KubernetesComputeConfiguration {
	if v := o.GetConfig(); v != nil {
		return v.KubernetesComputeConfiguration
	}
	return nil
}

func (o *ComputeEnvResponseDto) GetConfigAltairPlatform() *AltairPBSConfiguration {
	if v := o.GetConfig(); v != nil {
		return v.AltairPBSConfiguration
	}
	return nil
}

func (o *ComputeEnvResponseDto) GetConfigLsfPlatform() *IBMLSFConfiguration {
	if v := o.GetConfig(); v != nil {
		return v.IBMLSFConfiguration
	}
	return nil
}

func (o *ComputeEnvResponseDto) GetConfigAzureBatch() *AzureBatchConfiguration {
	if v := o.GetConfig(); v != nil {
		return v.AzureBatchConfiguration
	}
	return nil
}

func (o *ComputeEnvResponseDto) GetConfigSeqeracomputePlatform() *SeqeraComputeConfiguration {
	if v := o.GetConfig(); v != nil {
		return v.SeqeraComputeConfiguration
	}
	return nil
}

func (o *ComputeEnvResponseDto) GetConfigEksPlatform() *AmazonEKSClusterConfiguration {
	if v := o.GetConfig(); v != nil {
		return v.AmazonEKSClusterConfiguration
	}
	return nil
}

func (o *ComputeEnvResponseDto) GetConfigGoogleLifesciences() *GoogleLifeSciencesConfiguration {
	if v := o.GetConfig(); v != nil {
		return v.GoogleLifeSciencesConfiguration
	}
	return nil
}

func (o *ComputeEnvResponseDto) GetConfigUgePlatform() *UnivaGridEngineConfiguration {
	if v := o.GetConfig(); v != nil {
		return v.UnivaGridEngineConfiguration
	}
	return nil
}

func (o *ComputeEnvResponseDto) GetDateCreated() *time.Time {
	if o == nil {
		return nil
	}
	return o.DateCreated
}

func (o *ComputeEnvResponseDto) GetLastUpdated() *time.Time {
	if o == nil {
		return nil
	}
	return o.LastUpdated
}

func (o *ComputeEnvResponseDto) GetLastUsed() *time.Time {
	if o == nil {
		return nil
	}
	return o.LastUsed
}

func (o *ComputeEnvResponseDto) GetDeleted() *bool {
	if o == nil {
		return nil
	}
	return o.Deleted
}

func (o *ComputeEnvResponseDto) GetStatus() *ComputeEnvStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *ComputeEnvResponseDto) GetMessage() *string {
	if o == nil {
		return nil
	}
	return o.Message
}

func (o *ComputeEnvResponseDto) GetPrimary() *bool {
	if o == nil {
		return nil
	}
	return o.Primary
}

func (o *ComputeEnvResponseDto) GetCredentialsID() *string {
	if o == nil {
		return nil
	}
	return o.CredentialsID
}

func (o *ComputeEnvResponseDto) GetManagedIdentityID() *string {
	if o == nil {
		return nil
	}
	return o.ManagedIdentityID
}

func (o *ComputeEnvResponseDto) GetOrgID() *int64 {
	if o == nil {
		return nil
	}
	return o.OrgID
}

func (o *ComputeEnvResponseDto) GetWorkspaceID() *int64 {
	if o == nil {
		return nil
	}
	return o.WorkspaceID
}

func (o *ComputeEnvResponseDto) GetLabels() []LabelDbDto {
	if o == nil {
		return nil
	}
	return o.Labels
}
