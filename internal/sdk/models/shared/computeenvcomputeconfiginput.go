// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/seqeralabs/terraform-provider-seqera/internal/sdk/internal/utils"
	"time"
)

type ComputeEnvComputeConfigPlatform string

const (
	ComputeEnvComputeConfigPlatformAwsBatch              ComputeEnvComputeConfigPlatform = "aws-batch"
	ComputeEnvComputeConfigPlatformAwsCloud              ComputeEnvComputeConfigPlatform = "aws-cloud"
	ComputeEnvComputeConfigPlatformGoogleLifesciences    ComputeEnvComputeConfigPlatform = "google-lifesciences"
	ComputeEnvComputeConfigPlatformGoogleBatch           ComputeEnvComputeConfigPlatform = "google-batch"
	ComputeEnvComputeConfigPlatformAzureBatch            ComputeEnvComputeConfigPlatform = "azure-batch"
	ComputeEnvComputeConfigPlatformK8sPlatform           ComputeEnvComputeConfigPlatform = "k8s-platform"
	ComputeEnvComputeConfigPlatformEksPlatform           ComputeEnvComputeConfigPlatform = "eks-platform"
	ComputeEnvComputeConfigPlatformGkePlatform           ComputeEnvComputeConfigPlatform = "gke-platform"
	ComputeEnvComputeConfigPlatformUgePlatform           ComputeEnvComputeConfigPlatform = "uge-platform"
	ComputeEnvComputeConfigPlatformSlurmPlatform         ComputeEnvComputeConfigPlatform = "slurm-platform"
	ComputeEnvComputeConfigPlatformLsfPlatform           ComputeEnvComputeConfigPlatform = "lsf-platform"
	ComputeEnvComputeConfigPlatformAltairPlatform        ComputeEnvComputeConfigPlatform = "altair-platform"
	ComputeEnvComputeConfigPlatformMoabPlatform          ComputeEnvComputeConfigPlatform = "moab-platform"
	ComputeEnvComputeConfigPlatformLocalPlatform         ComputeEnvComputeConfigPlatform = "local-platform"
	ComputeEnvComputeConfigPlatformSeqeracomputePlatform ComputeEnvComputeConfigPlatform = "seqeracompute-platform"
)

func (e ComputeEnvComputeConfigPlatform) ToPointer() *ComputeEnvComputeConfigPlatform {
	return &e
}
func (e *ComputeEnvComputeConfigPlatform) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "aws-batch":
		fallthrough
	case "aws-cloud":
		fallthrough
	case "google-lifesciences":
		fallthrough
	case "google-batch":
		fallthrough
	case "azure-batch":
		fallthrough
	case "k8s-platform":
		fallthrough
	case "eks-platform":
		fallthrough
	case "gke-platform":
		fallthrough
	case "uge-platform":
		fallthrough
	case "slurm-platform":
		fallthrough
	case "lsf-platform":
		fallthrough
	case "altair-platform":
		fallthrough
	case "moab-platform":
		fallthrough
	case "local-platform":
		fallthrough
	case "seqeracompute-platform":
		*e = ComputeEnvComputeConfigPlatform(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ComputeEnvComputeConfigPlatform: %v", v)
	}
}

type ComputeEnvComputeConfigStatus string

const (
	ComputeEnvComputeConfigStatusCreating  ComputeEnvComputeConfigStatus = "CREATING"
	ComputeEnvComputeConfigStatusAvailable ComputeEnvComputeConfigStatus = "AVAILABLE"
	ComputeEnvComputeConfigStatusErrored   ComputeEnvComputeConfigStatus = "ERRORED"
	ComputeEnvComputeConfigStatusInvalid   ComputeEnvComputeConfigStatus = "INVALID"
)

func (e ComputeEnvComputeConfigStatus) ToPointer() *ComputeEnvComputeConfigStatus {
	return &e
}
func (e *ComputeEnvComputeConfigStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CREATING":
		fallthrough
	case "AVAILABLE":
		fallthrough
	case "ERRORED":
		fallthrough
	case "INVALID":
		*e = ComputeEnvComputeConfigStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ComputeEnvComputeConfigStatus: %v", v)
	}
}

type ComputeEnvComputeConfigInput struct {
	CredentialsID string                          `json:"credentialsId"`
	Name          string                          `json:"name"`
	Description   *string                         `json:"description,omitempty"`
	Platform      ComputeEnvComputeConfigPlatform `json:"platform"`
	// Configuration settings for compute environments including work directories,
	// pre/post run scripts, and environment-specific parameters.
	//
	Config  ComputeConfig                  `json:"config"`
	Status  *ComputeEnvComputeConfigStatus `json:"status,omitempty"`
	Message *string                        `json:"message,omitempty"`
}

func (c *ComputeEnvComputeConfigInput) GetCredentialsID() string {
	if c == nil {
		return ""
	}
	return c.CredentialsID
}

func (c *ComputeEnvComputeConfigInput) GetName() string {
	if c == nil {
		return ""
	}
	return c.Name
}

func (c *ComputeEnvComputeConfigInput) GetDescription() *string {
	if c == nil {
		return nil
	}
	return c.Description
}

func (c *ComputeEnvComputeConfigInput) GetPlatform() ComputeEnvComputeConfigPlatform {
	if c == nil {
		return ComputeEnvComputeConfigPlatform("")
	}
	return c.Platform
}

func (c *ComputeEnvComputeConfigInput) GetConfig() ComputeConfig {
	if c == nil {
		return ComputeConfig{}
	}
	return c.Config
}

func (c *ComputeEnvComputeConfigInput) GetConfigMoabPlatform() *MoabConfiguration {
	return c.GetConfig().MoabConfiguration
}

func (c *ComputeEnvComputeConfigInput) GetConfigAwsBatch() *AWSBatchConfiguration {
	return c.GetConfig().AWSBatchConfiguration
}

func (c *ComputeEnvComputeConfigInput) GetConfigGkePlatform() *GoogleGKEClusterConfiguration {
	return c.GetConfig().GoogleGKEClusterConfiguration
}

func (c *ComputeEnvComputeConfigInput) GetConfigGoogleBatch() *GoogleBatchServiceConfiguration {
	return c.GetConfig().GoogleBatchServiceConfiguration
}

func (c *ComputeEnvComputeConfigInput) GetConfigAwsCloud() *AWSCloudConfiguration {
	return c.GetConfig().AWSCloudConfiguration
}

func (c *ComputeEnvComputeConfigInput) GetConfigSlurmPlatform() *SlurmConfiguration {
	return c.GetConfig().SlurmConfiguration
}

func (c *ComputeEnvComputeConfigInput) GetConfigK8sPlatform() *KubernetesComputeConfiguration {
	return c.GetConfig().KubernetesComputeConfiguration
}

func (c *ComputeEnvComputeConfigInput) GetConfigAltairPlatform() *AltairPBSConfiguration {
	return c.GetConfig().AltairPBSConfiguration
}

func (c *ComputeEnvComputeConfigInput) GetConfigLsfPlatform() *IBMLSFConfiguration {
	return c.GetConfig().IBMLSFConfiguration
}

func (c *ComputeEnvComputeConfigInput) GetConfigAzureBatch() *AzureBatchConfiguration {
	return c.GetConfig().AzureBatchConfiguration
}

func (c *ComputeEnvComputeConfigInput) GetConfigSeqeracomputePlatform() *SeqeraComputeConfiguration {
	return c.GetConfig().SeqeraComputeConfiguration
}

func (c *ComputeEnvComputeConfigInput) GetConfigEksPlatform() *AmazonEKSClusterConfiguration {
	return c.GetConfig().AmazonEKSClusterConfiguration
}

func (c *ComputeEnvComputeConfigInput) GetConfigGoogleLifesciences() *GoogleLifeSciencesConfiguration {
	return c.GetConfig().GoogleLifeSciencesConfiguration
}

func (c *ComputeEnvComputeConfigInput) GetConfigUgePlatform() *UnivaGridEngineConfiguration {
	return c.GetConfig().UnivaGridEngineConfiguration
}

func (c *ComputeEnvComputeConfigInput) GetStatus() *ComputeEnvComputeConfigStatus {
	if c == nil {
		return nil
	}
	return c.Status
}

func (c *ComputeEnvComputeConfigInput) GetMessage() *string {
	if c == nil {
		return nil
	}
	return c.Message
}

type ComputeEnvComputeConfig struct {
	CredentialsID string                          `json:"credentialsId"`
	OrgID         *int64                          `json:"orgId,omitempty"`
	WorkspaceID   *int64                          `json:"workspaceId,omitempty"`
	ComputeEnvID  *string                         `json:"id,omitempty"`
	Name          string                          `json:"name"`
	Description   *string                         `json:"description,omitempty"`
	Platform      ComputeEnvComputeConfigPlatform `json:"platform"`
	// Configuration settings for compute environments including work directories,
	// pre/post run scripts, and environment-specific parameters.
	//
	Config      ComputeConfig                  `json:"config"`
	DateCreated *time.Time                     `json:"dateCreated,omitempty"`
	LastUpdated *time.Time                     `json:"lastUpdated,omitempty"`
	LastUsed    *time.Time                     `json:"lastUsed,omitempty"`
	Deleted     *bool                          `json:"deleted,omitempty"`
	Status      *ComputeEnvComputeConfigStatus `json:"status,omitempty"`
	Message     *string                        `json:"message,omitempty"`
	Primary     *bool                          `json:"primary,omitempty"`
}

func (c ComputeEnvComputeConfig) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ComputeEnvComputeConfig) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"credentialsId", "name", "platform", "config"}); err != nil {
		return err
	}
	return nil
}

func (c *ComputeEnvComputeConfig) GetCredentialsID() string {
	if c == nil {
		return ""
	}
	return c.CredentialsID
}

func (c *ComputeEnvComputeConfig) GetOrgID() *int64 {
	if c == nil {
		return nil
	}
	return c.OrgID
}

func (c *ComputeEnvComputeConfig) GetWorkspaceID() *int64 {
	if c == nil {
		return nil
	}
	return c.WorkspaceID
}

func (c *ComputeEnvComputeConfig) GetComputeEnvID() *string {
	if c == nil {
		return nil
	}
	return c.ComputeEnvID
}

func (c *ComputeEnvComputeConfig) GetName() string {
	if c == nil {
		return ""
	}
	return c.Name
}

func (c *ComputeEnvComputeConfig) GetDescription() *string {
	if c == nil {
		return nil
	}
	return c.Description
}

func (c *ComputeEnvComputeConfig) GetPlatform() ComputeEnvComputeConfigPlatform {
	if c == nil {
		return ComputeEnvComputeConfigPlatform("")
	}
	return c.Platform
}

func (c *ComputeEnvComputeConfig) GetConfig() ComputeConfig {
	if c == nil {
		return ComputeConfig{}
	}
	return c.Config
}

func (c *ComputeEnvComputeConfig) GetConfigMoabPlatform() *MoabConfiguration {
	return c.GetConfig().MoabConfiguration
}

func (c *ComputeEnvComputeConfig) GetConfigAwsBatch() *AWSBatchConfiguration {
	return c.GetConfig().AWSBatchConfiguration
}

func (c *ComputeEnvComputeConfig) GetConfigGkePlatform() *GoogleGKEClusterConfiguration {
	return c.GetConfig().GoogleGKEClusterConfiguration
}

func (c *ComputeEnvComputeConfig) GetConfigGoogleBatch() *GoogleBatchServiceConfiguration {
	return c.GetConfig().GoogleBatchServiceConfiguration
}

func (c *ComputeEnvComputeConfig) GetConfigAwsCloud() *AWSCloudConfiguration {
	return c.GetConfig().AWSCloudConfiguration
}

func (c *ComputeEnvComputeConfig) GetConfigSlurmPlatform() *SlurmConfiguration {
	return c.GetConfig().SlurmConfiguration
}

func (c *ComputeEnvComputeConfig) GetConfigK8sPlatform() *KubernetesComputeConfiguration {
	return c.GetConfig().KubernetesComputeConfiguration
}

func (c *ComputeEnvComputeConfig) GetConfigAltairPlatform() *AltairPBSConfiguration {
	return c.GetConfig().AltairPBSConfiguration
}

func (c *ComputeEnvComputeConfig) GetConfigLsfPlatform() *IBMLSFConfiguration {
	return c.GetConfig().IBMLSFConfiguration
}

func (c *ComputeEnvComputeConfig) GetConfigAzureBatch() *AzureBatchConfiguration {
	return c.GetConfig().AzureBatchConfiguration
}

func (c *ComputeEnvComputeConfig) GetConfigSeqeracomputePlatform() *SeqeraComputeConfiguration {
	return c.GetConfig().SeqeraComputeConfiguration
}

func (c *ComputeEnvComputeConfig) GetConfigEksPlatform() *AmazonEKSClusterConfiguration {
	return c.GetConfig().AmazonEKSClusterConfiguration
}

func (c *ComputeEnvComputeConfig) GetConfigGoogleLifesciences() *GoogleLifeSciencesConfiguration {
	return c.GetConfig().GoogleLifeSciencesConfiguration
}

func (c *ComputeEnvComputeConfig) GetConfigUgePlatform() *UnivaGridEngineConfiguration {
	return c.GetConfig().UnivaGridEngineConfiguration
}

func (c *ComputeEnvComputeConfig) GetDateCreated() *time.Time {
	if c == nil {
		return nil
	}
	return c.DateCreated
}

func (c *ComputeEnvComputeConfig) GetLastUpdated() *time.Time {
	if c == nil {
		return nil
	}
	return c.LastUpdated
}

func (c *ComputeEnvComputeConfig) GetLastUsed() *time.Time {
	if c == nil {
		return nil
	}
	return c.LastUsed
}

func (c *ComputeEnvComputeConfig) GetDeleted() *bool {
	if c == nil {
		return nil
	}
	return c.Deleted
}

func (c *ComputeEnvComputeConfig) GetStatus() *ComputeEnvComputeConfigStatus {
	if c == nil {
		return nil
	}
	return c.Status
}

func (c *ComputeEnvComputeConfig) GetMessage() *string {
	if c == nil {
		return nil
	}
	return c.Message
}

func (c *ComputeEnvComputeConfig) GetPrimary() *bool {
	if c == nil {
		return nil
	}
	return c.Primary
}
