// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"github.com/seqeralabs/terraform-provider-seqera/internal/sdk/internal/utils"
	"time"
)

type WorkflowLaunchResponse struct {
	ID                  *string                  `json:"id,omitempty"`
	ComputeEnv          *ComputeEnvComputeConfig `json:"computeEnv,omitempty"`
	Pipeline            *string                  `json:"pipeline,omitempty"`
	PipelineID          *int64                   `json:"pipelineId,omitempty"`
	WorkDir             *string                  `json:"workDir,omitempty"`
	Revision            *string                  `json:"revision,omitempty"`
	CommitID            *string                  `json:"commitId,omitempty"`
	SessionID           *string                  `json:"sessionId,omitempty"`
	ConfigProfiles      []string                 `json:"configProfiles,omitempty"`
	UserSecrets         []string                 `json:"userSecrets,omitempty"`
	WorkspaceSecrets    []string                 `json:"workspaceSecrets,omitempty"`
	ConfigText          *string                  `json:"configText,omitempty"`
	TowerConfig         *string                  `json:"towerConfig,omitempty"`
	ParamsText          *string                  `json:"paramsText,omitempty"`
	PreRunScript        *string                  `json:"preRunScript,omitempty"`
	PostRunScript       *string                  `json:"postRunScript,omitempty"`
	MainScript          *string                  `json:"mainScript,omitempty"`
	EntryName           *string                  `json:"entryName,omitempty"`
	SchemaName          *string                  `json:"schemaName,omitempty"`
	Resume              *bool                    `json:"resume,omitempty"`
	PullLatest          *bool                    `json:"pullLatest,omitempty"`
	StubRun             *bool                    `json:"stubRun,omitempty"`
	ResumeDir           *string                  `json:"resumeDir,omitempty"`
	ResumeCommitID      *string                  `json:"resumeCommitId,omitempty"`
	HeadJobMemoryMb     *int                     `json:"headJobMemoryMb,omitempty"`
	HeadJobCpus         *int                     `json:"headJobCpus,omitempty"`
	OptimizationID      *string                  `json:"optimizationId,omitempty"`
	OptimizationTargets *string                  `json:"optimizationTargets,omitempty"`
	DateCreated         *time.Time               `json:"dateCreated,omitempty"`
}

func (w WorkflowLaunchResponse) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(w, "", false)
}

func (w *WorkflowLaunchResponse) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &w, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (w *WorkflowLaunchResponse) GetID() *string {
	if w == nil {
		return nil
	}
	return w.ID
}

func (w *WorkflowLaunchResponse) GetComputeEnv() *ComputeEnvComputeConfig {
	if w == nil {
		return nil
	}
	return w.ComputeEnv
}

func (w *WorkflowLaunchResponse) GetPipeline() *string {
	if w == nil {
		return nil
	}
	return w.Pipeline
}

func (w *WorkflowLaunchResponse) GetPipelineID() *int64 {
	if w == nil {
		return nil
	}
	return w.PipelineID
}

func (w *WorkflowLaunchResponse) GetWorkDir() *string {
	if w == nil {
		return nil
	}
	return w.WorkDir
}

func (w *WorkflowLaunchResponse) GetRevision() *string {
	if w == nil {
		return nil
	}
	return w.Revision
}

func (w *WorkflowLaunchResponse) GetCommitID() *string {
	if w == nil {
		return nil
	}
	return w.CommitID
}

func (w *WorkflowLaunchResponse) GetSessionID() *string {
	if w == nil {
		return nil
	}
	return w.SessionID
}

func (w *WorkflowLaunchResponse) GetConfigProfiles() []string {
	if w == nil {
		return nil
	}
	return w.ConfigProfiles
}

func (w *WorkflowLaunchResponse) GetUserSecrets() []string {
	if w == nil {
		return nil
	}
	return w.UserSecrets
}

func (w *WorkflowLaunchResponse) GetWorkspaceSecrets() []string {
	if w == nil {
		return nil
	}
	return w.WorkspaceSecrets
}

func (w *WorkflowLaunchResponse) GetConfigText() *string {
	if w == nil {
		return nil
	}
	return w.ConfigText
}

func (w *WorkflowLaunchResponse) GetTowerConfig() *string {
	if w == nil {
		return nil
	}
	return w.TowerConfig
}

func (w *WorkflowLaunchResponse) GetParamsText() *string {
	if w == nil {
		return nil
	}
	return w.ParamsText
}

func (w *WorkflowLaunchResponse) GetPreRunScript() *string {
	if w == nil {
		return nil
	}
	return w.PreRunScript
}

func (w *WorkflowLaunchResponse) GetPostRunScript() *string {
	if w == nil {
		return nil
	}
	return w.PostRunScript
}

func (w *WorkflowLaunchResponse) GetMainScript() *string {
	if w == nil {
		return nil
	}
	return w.MainScript
}

func (w *WorkflowLaunchResponse) GetEntryName() *string {
	if w == nil {
		return nil
	}
	return w.EntryName
}

func (w *WorkflowLaunchResponse) GetSchemaName() *string {
	if w == nil {
		return nil
	}
	return w.SchemaName
}

func (w *WorkflowLaunchResponse) GetResume() *bool {
	if w == nil {
		return nil
	}
	return w.Resume
}

func (w *WorkflowLaunchResponse) GetPullLatest() *bool {
	if w == nil {
		return nil
	}
	return w.PullLatest
}

func (w *WorkflowLaunchResponse) GetStubRun() *bool {
	if w == nil {
		return nil
	}
	return w.StubRun
}

func (w *WorkflowLaunchResponse) GetResumeDir() *string {
	if w == nil {
		return nil
	}
	return w.ResumeDir
}

func (w *WorkflowLaunchResponse) GetResumeCommitID() *string {
	if w == nil {
		return nil
	}
	return w.ResumeCommitID
}

func (w *WorkflowLaunchResponse) GetHeadJobMemoryMb() *int {
	if w == nil {
		return nil
	}
	return w.HeadJobMemoryMb
}

func (w *WorkflowLaunchResponse) GetHeadJobCpus() *int {
	if w == nil {
		return nil
	}
	return w.HeadJobCpus
}

func (w *WorkflowLaunchResponse) GetOptimizationID() *string {
	if w == nil {
		return nil
	}
	return w.OptimizationID
}

func (w *WorkflowLaunchResponse) GetOptimizationTargets() *string {
	if w == nil {
		return nil
	}
	return w.OptimizationTargets
}

func (w *WorkflowLaunchResponse) GetDateCreated() *time.Time {
	if w == nil {
		return nil
	}
	return w.DateCreated
}
