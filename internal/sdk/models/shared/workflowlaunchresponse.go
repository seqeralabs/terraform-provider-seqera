// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"github.com/seqeralabs/terraform-provider-seqera/internal/sdk/internal/utils"
	"time"
)

type WorkflowLaunchResponse struct {
	ID               *string                  `json:"id,omitempty"`
	ComputeEnv       *ComputeEnvComputeConfig `json:"computeEnv,omitempty"`
	Pipeline         *string                  `json:"pipeline,omitempty"`
	PipelineID       *int64                   `json:"pipelineId,omitempty"`
	WorkDir          *string                  `json:"workDir,omitempty"`
	Revision         *string                  `json:"revision,omitempty"`
	SessionID        *string                  `json:"sessionId,omitempty"`
	ConfigProfiles   []string                 `json:"configProfiles,omitempty"`
	UserSecrets      []string                 `json:"userSecrets,omitempty"`
	WorkspaceSecrets []string                 `json:"workspaceSecrets,omitempty"`
	ConfigText       *string                  `json:"configText,omitempty"`
	TowerConfig      *string                  `json:"towerConfig,omitempty"`
	ParamsText       *string                  `json:"paramsText,omitempty"`
	// Add a script that executes in the nf-launch script prior to invoking Nextflow processes. See [Pre and post-run scripts](https://docs.seqera.io/platform-cloud/launch/advanced#pre-and-post-run-scripts).
	PreRunScript *string `json:"preRunScript,omitempty"`
	// Add a script that executes after all Nextflow processes have completed. See [Pre and post-run scripts](https://docs.seqera.io/platform-cloud/launch/advanced#pre-and-post-run-scripts).
	PostRunScript       *string    `json:"postRunScript,omitempty"`
	MainScript          *string    `json:"mainScript,omitempty"`
	EntryName           *string    `json:"entryName,omitempty"`
	SchemaName          *string    `json:"schemaName,omitempty"`
	Resume              *bool      `json:"resume,omitempty"`
	PullLatest          *bool      `json:"pullLatest,omitempty"`
	StubRun             *bool      `json:"stubRun,omitempty"`
	ResumeDir           *string    `json:"resumeDir,omitempty"`
	ResumeCommitID      *string    `json:"resumeCommitId,omitempty"`
	HeadJobMemoryMb     *int       `json:"headJobMemoryMb,omitempty"`
	HeadJobCpus         *int       `json:"headJobCpus,omitempty"`
	OptimizationID      *string    `json:"optimizationId,omitempty"`
	OptimizationTargets *string    `json:"optimizationTargets,omitempty"`
	DateCreated         *time.Time `json:"dateCreated,omitempty"`
}

func (w WorkflowLaunchResponse) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(w, "", false)
}

func (w *WorkflowLaunchResponse) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &w, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *WorkflowLaunchResponse) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *WorkflowLaunchResponse) GetComputeEnv() *ComputeEnvComputeConfig {
	if o == nil {
		return nil
	}
	return o.ComputeEnv
}

func (o *WorkflowLaunchResponse) GetPipeline() *string {
	if o == nil {
		return nil
	}
	return o.Pipeline
}

func (o *WorkflowLaunchResponse) GetPipelineID() *int64 {
	if o == nil {
		return nil
	}
	return o.PipelineID
}

func (o *WorkflowLaunchResponse) GetWorkDir() *string {
	if o == nil {
		return nil
	}
	return o.WorkDir
}

func (o *WorkflowLaunchResponse) GetRevision() *string {
	if o == nil {
		return nil
	}
	return o.Revision
}

func (o *WorkflowLaunchResponse) GetSessionID() *string {
	if o == nil {
		return nil
	}
	return o.SessionID
}

func (o *WorkflowLaunchResponse) GetConfigProfiles() []string {
	if o == nil {
		return nil
	}
	return o.ConfigProfiles
}

func (o *WorkflowLaunchResponse) GetUserSecrets() []string {
	if o == nil {
		return nil
	}
	return o.UserSecrets
}

func (o *WorkflowLaunchResponse) GetWorkspaceSecrets() []string {
	if o == nil {
		return nil
	}
	return o.WorkspaceSecrets
}

func (o *WorkflowLaunchResponse) GetConfigText() *string {
	if o == nil {
		return nil
	}
	return o.ConfigText
}

func (o *WorkflowLaunchResponse) GetTowerConfig() *string {
	if o == nil {
		return nil
	}
	return o.TowerConfig
}

func (o *WorkflowLaunchResponse) GetParamsText() *string {
	if o == nil {
		return nil
	}
	return o.ParamsText
}

func (o *WorkflowLaunchResponse) GetPreRunScript() *string {
	if o == nil {
		return nil
	}
	return o.PreRunScript
}

func (o *WorkflowLaunchResponse) GetPostRunScript() *string {
	if o == nil {
		return nil
	}
	return o.PostRunScript
}

func (o *WorkflowLaunchResponse) GetMainScript() *string {
	if o == nil {
		return nil
	}
	return o.MainScript
}

func (o *WorkflowLaunchResponse) GetEntryName() *string {
	if o == nil {
		return nil
	}
	return o.EntryName
}

func (o *WorkflowLaunchResponse) GetSchemaName() *string {
	if o == nil {
		return nil
	}
	return o.SchemaName
}

func (o *WorkflowLaunchResponse) GetResume() *bool {
	if o == nil {
		return nil
	}
	return o.Resume
}

func (o *WorkflowLaunchResponse) GetPullLatest() *bool {
	if o == nil {
		return nil
	}
	return o.PullLatest
}

func (o *WorkflowLaunchResponse) GetStubRun() *bool {
	if o == nil {
		return nil
	}
	return o.StubRun
}

func (o *WorkflowLaunchResponse) GetResumeDir() *string {
	if o == nil {
		return nil
	}
	return o.ResumeDir
}

func (o *WorkflowLaunchResponse) GetResumeCommitID() *string {
	if o == nil {
		return nil
	}
	return o.ResumeCommitID
}

func (o *WorkflowLaunchResponse) GetHeadJobMemoryMb() *int {
	if o == nil {
		return nil
	}
	return o.HeadJobMemoryMb
}

func (o *WorkflowLaunchResponse) GetHeadJobCpus() *int {
	if o == nil {
		return nil
	}
	return o.HeadJobCpus
}

func (o *WorkflowLaunchResponse) GetOptimizationID() *string {
	if o == nil {
		return nil
	}
	return o.OptimizationID
}

func (o *WorkflowLaunchResponse) GetOptimizationTargets() *string {
	if o == nil {
		return nil
	}
	return o.OptimizationTargets
}

func (o *WorkflowLaunchResponse) GetDateCreated() *time.Time {
	if o == nil {
		return nil
	}
	return o.DateCreated
}
