// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"github.com/seqeralabs/terraform-provider-seqera/internal/sdk/internal/utils"
	"time"
)

// PipelineDbDto - Represents a pipeline configuration in the Seqera Platform.
// Contains pipeline metadata, configuration settings, and execution parameters
// for Nextflow workflows.
type PipelineDbDto struct {
	// Unique numeric identifier for the pipeline
	PipelineID *int64 `json:"pipelineId,omitempty"`
	// Display name for the pipeline
	Name *string `json:"name,omitempty"`
	// Detailed description of the pipeline's purpose and functionality
	Description *string `json:"description,omitempty"`
	// Icon identifier or URL for visual representation
	Icon *string `json:"icon,omitempty"`
	// Git repository URL containing the pipeline source code
	Repository *string `json:"repository,omitempty"`
	// Numeric identifier of the user who created the pipeline
	UserID *int64 `json:"userId,omitempty"`
	// Username of the pipeline creator
	UserName *string `json:"userName,omitempty"`
	// First name of the user who created the pipeline
	UserFirstName       *string                     `json:"userFirstName,omitempty"`
	UserLastName        *string                     `json:"userLastName,omitempty"`
	OrgID               *int64                      `json:"orgId,omitempty"`
	OrgName             *string                     `json:"orgName,omitempty"`
	WorkspaceID         *int64                      `json:"workspaceId,omitempty"`
	WorkspaceName       *string                     `json:"workspaceName,omitempty"`
	Visibility          *string                     `json:"visibility,omitempty"`
	Deleted             *bool                       `json:"deleted,omitempty"`
	LastUpdated         *time.Time                  `json:"lastUpdated,omitempty"`
	OptimizationID      *string                     `json:"optimizationId,omitempty"`
	OptimizationTargets *string                     `json:"optimizationTargets,omitempty"`
	OptimizationStatus  *PipelineOptimizationStatus `json:"optimizationStatus,omitempty"`
	Labels              []LabelDbDto                `json:"labels,omitempty"`
	ComputeEnv          *ComputeEnvDbDto            `json:"computeEnv,omitempty"`
}

func (p PipelineDbDto) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PipelineDbDto) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *PipelineDbDto) GetPipelineID() *int64 {
	if o == nil {
		return nil
	}
	return o.PipelineID
}

func (o *PipelineDbDto) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *PipelineDbDto) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *PipelineDbDto) GetIcon() *string {
	if o == nil {
		return nil
	}
	return o.Icon
}

func (o *PipelineDbDto) GetRepository() *string {
	if o == nil {
		return nil
	}
	return o.Repository
}

func (o *PipelineDbDto) GetUserID() *int64 {
	if o == nil {
		return nil
	}
	return o.UserID
}

func (o *PipelineDbDto) GetUserName() *string {
	if o == nil {
		return nil
	}
	return o.UserName
}

func (o *PipelineDbDto) GetUserFirstName() *string {
	if o == nil {
		return nil
	}
	return o.UserFirstName
}

func (o *PipelineDbDto) GetUserLastName() *string {
	if o == nil {
		return nil
	}
	return o.UserLastName
}

func (o *PipelineDbDto) GetOrgID() *int64 {
	if o == nil {
		return nil
	}
	return o.OrgID
}

func (o *PipelineDbDto) GetOrgName() *string {
	if o == nil {
		return nil
	}
	return o.OrgName
}

func (o *PipelineDbDto) GetWorkspaceID() *int64 {
	if o == nil {
		return nil
	}
	return o.WorkspaceID
}

func (o *PipelineDbDto) GetWorkspaceName() *string {
	if o == nil {
		return nil
	}
	return o.WorkspaceName
}

func (o *PipelineDbDto) GetVisibility() *string {
	if o == nil {
		return nil
	}
	return o.Visibility
}

func (o *PipelineDbDto) GetDeleted() *bool {
	if o == nil {
		return nil
	}
	return o.Deleted
}

func (o *PipelineDbDto) GetLastUpdated() *time.Time {
	if o == nil {
		return nil
	}
	return o.LastUpdated
}

func (o *PipelineDbDto) GetOptimizationID() *string {
	if o == nil {
		return nil
	}
	return o.OptimizationID
}

func (o *PipelineDbDto) GetOptimizationTargets() *string {
	if o == nil {
		return nil
	}
	return o.OptimizationTargets
}

func (o *PipelineDbDto) GetOptimizationStatus() *PipelineOptimizationStatus {
	if o == nil {
		return nil
	}
	return o.OptimizationStatus
}

func (o *PipelineDbDto) GetLabels() []LabelDbDto {
	if o == nil {
		return nil
	}
	return o.Labels
}

func (o *PipelineDbDto) GetComputeEnv() *ComputeEnvDbDto {
	if o == nil {
		return nil
	}
	return o.ComputeEnv
}
