// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type State string

const (
	StateUnknown       State = "UNKNOWN"
	StateQueued        State = "QUEUED"
	StateInitializing  State = "INITIALIZING"
	StateRunning       State = "RUNNING"
	StatePaused        State = "PAUSED"
	StateComplete      State = "COMPLETE"
	StateExecutorError State = "EXECUTOR_ERROR"
	StateSystemError   State = "SYSTEM_ERROR"
	StateCanceled      State = "CANCELED"
	StateCanceling     State = "CANCELING"
)

func (e State) ToPointer() *State {
	return &e
}
func (e *State) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UNKNOWN":
		fallthrough
	case "QUEUED":
		fallthrough
	case "INITIALIZING":
		fallthrough
	case "RUNNING":
		fallthrough
	case "PAUSED":
		fallthrough
	case "COMPLETE":
		fallthrough
	case "EXECUTOR_ERROR":
		fallthrough
	case "SYSTEM_ERROR":
		fallthrough
	case "CANCELED":
		fallthrough
	case "CANCELING":
		*e = State(v)
		return nil
	default:
		return fmt.Errorf("invalid value for State: %v", v)
	}
}
