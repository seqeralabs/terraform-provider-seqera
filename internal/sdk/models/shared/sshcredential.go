// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/seqeralabs/terraform-provider-seqera/internal/sdk/internal/utils"
	"time"
)

// SSHCredentialProviderType - Cloud provider type (automatically set to "ssh")
type SSHCredentialProviderType string

const (
	SSHCredentialProviderTypeSSH SSHCredentialProviderType = "ssh"
)

func (e SSHCredentialProviderType) ToPointer() *SSHCredentialProviderType {
	return &e
}
func (e *SSHCredentialProviderType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ssh":
		*e = SSHCredentialProviderType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SSHCredentialProviderType: %v", v)
	}
}

type SSHCredentialKeys struct {
	// SSH private key content (required, sensitive). The content of the private key file from the SSH asymmetrical key pair. Generate with: ssh-keygen
	PrivateKey string `json:"privateKey"`
	// Passphrase associated with the SSH private key (optional, sensitive). Leave empty if no passphrase is needed.
	Passphrase *string `json:"passphrase,omitempty"`
}

func (s *SSHCredentialKeys) GetPrivateKey() string {
	if s == nil {
		return ""
	}
	return s.PrivateKey
}

func (s *SSHCredentialKeys) GetPassphrase() *string {
	if s == nil {
		return nil
	}
	return s.Passphrase
}

type SSHCredential struct {
	// Unique identifier for the credential (max 22 characters)
	CredentialsID *string `json:"id,omitempty"`
	// Display name for the credential (max 100 characters)
	Name string `json:"name"`
	// Cloud provider type (automatically set to "ssh")
	ProviderType *SSHCredentialProviderType `default:"ssh" json:"provider"`
	// Flag indicating if the credential has been soft-deleted
	Deleted *bool `json:"deleted,omitempty"`
	// Timestamp when the credential was last used
	LastUsed *time.Time `json:"lastUsed,omitempty"`
	// Timestamp when the credential was created
	DateCreated *time.Time `json:"dateCreated,omitempty"`
	// Timestamp when the credential was last updated
	LastUpdated *time.Time        `json:"lastUpdated,omitempty"`
	Keys        SSHCredentialKeys `json:"keys"`
}

func (s SSHCredential) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SSHCredential) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, []string{"name", "keys"}); err != nil {
		return err
	}
	return nil
}

func (s *SSHCredential) GetCredentialsID() *string {
	if s == nil {
		return nil
	}
	return s.CredentialsID
}

func (s *SSHCredential) GetName() string {
	if s == nil {
		return ""
	}
	return s.Name
}

func (s *SSHCredential) GetProviderType() *SSHCredentialProviderType {
	if s == nil {
		return nil
	}
	return s.ProviderType
}

func (s *SSHCredential) GetDeleted() *bool {
	if s == nil {
		return nil
	}
	return s.Deleted
}

func (s *SSHCredential) GetLastUsed() *time.Time {
	if s == nil {
		return nil
	}
	return s.LastUsed
}

func (s *SSHCredential) GetDateCreated() *time.Time {
	if s == nil {
		return nil
	}
	return s.DateCreated
}

func (s *SSHCredential) GetLastUpdated() *time.Time {
	if s == nil {
		return nil
	}
	return s.LastUpdated
}

func (s *SSHCredential) GetKeys() SSHCredentialKeys {
	if s == nil {
		return SSHCredentialKeys{}
	}
	return s.Keys
}

type SSHCredentialKeysOutput struct {
}

type SSHCredentialOutput struct {
	// Unique identifier for the credential (max 22 characters)
	CredentialsID *string `json:"id,omitempty"`
	// Display name for the credential (max 100 characters)
	Name string `json:"name"`
	// Cloud provider type (automatically set to "ssh")
	ProviderType *SSHCredentialProviderType `default:"ssh" json:"provider"`
	// Flag indicating if the credential has been soft-deleted
	Deleted *bool `json:"deleted,omitempty"`
	// Timestamp when the credential was last used
	LastUsed *time.Time `json:"lastUsed,omitempty"`
	// Timestamp when the credential was created
	DateCreated *time.Time `json:"dateCreated,omitempty"`
	// Timestamp when the credential was last updated
	LastUpdated *time.Time              `json:"lastUpdated,omitempty"`
	Keys        SSHCredentialKeysOutput `json:"keys"`
}

func (s SSHCredentialOutput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SSHCredentialOutput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, []string{"name", "keys"}); err != nil {
		return err
	}
	return nil
}

func (s *SSHCredentialOutput) GetCredentialsID() *string {
	if s == nil {
		return nil
	}
	return s.CredentialsID
}

func (s *SSHCredentialOutput) GetName() string {
	if s == nil {
		return ""
	}
	return s.Name
}

func (s *SSHCredentialOutput) GetProviderType() *SSHCredentialProviderType {
	if s == nil {
		return nil
	}
	return s.ProviderType
}

func (s *SSHCredentialOutput) GetDeleted() *bool {
	if s == nil {
		return nil
	}
	return s.Deleted
}

func (s *SSHCredentialOutput) GetLastUsed() *time.Time {
	if s == nil {
		return nil
	}
	return s.LastUsed
}

func (s *SSHCredentialOutput) GetDateCreated() *time.Time {
	if s == nil {
		return nil
	}
	return s.DateCreated
}

func (s *SSHCredentialOutput) GetLastUpdated() *time.Time {
	if s == nil {
		return nil
	}
	return s.LastUpdated
}

func (s *SSHCredentialOutput) GetKeys() SSHCredentialKeysOutput {
	if s == nil {
		return SSHCredentialKeysOutput{}
	}
	return s.Keys
}
