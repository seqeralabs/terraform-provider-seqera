// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/seqeralabs/terraform-provider-seqera/internal/sdk/internal/utils"
	"time"
)

// KubernetesCredentialProviderType - Cloud provider type (automatically set to "k8s")
type KubernetesCredentialProviderType string

const (
	KubernetesCredentialProviderTypeK8s KubernetesCredentialProviderType = "k8s"
)

func (e KubernetesCredentialProviderType) ToPointer() *KubernetesCredentialProviderType {
	return &e
}
func (e *KubernetesCredentialProviderType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "k8s":
		*e = KubernetesCredentialProviderType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for KubernetesCredentialProviderType: %v", v)
	}
}

type KubernetesCredentialKeys struct {
	// Service Account token for Kubernetes authentication (optional). Required if using token-based authentication.
	Token *string `json:"token,omitempty"`
	// X.509 client certificate for Kubernetes authentication (optional). Required if using certificate-based authentication.
	ClientCertificate *string `json:"certificate,omitempty"`
	// Private key for X.509 client certificate (optional). Required if using certificate-based authentication.
	PrivateKey *string `json:"privateKey,omitempty"`
}

func (k *KubernetesCredentialKeys) GetToken() *string {
	if k == nil {
		return nil
	}
	return k.Token
}

func (k *KubernetesCredentialKeys) GetClientCertificate() *string {
	if k == nil {
		return nil
	}
	return k.ClientCertificate
}

func (k *KubernetesCredentialKeys) GetPrivateKey() *string {
	if k == nil {
		return nil
	}
	return k.PrivateKey
}

type KubernetesCredential struct {
	// Unique identifier for the credential (max 22 characters)
	ID *string `json:"id,omitempty"`
	// Display name for the credential. Must be 2-99 characters using only letters, numbers, underscores, and hyphens. No spaces allowed.
	Name string `json:"name"`
	// Cloud provider type (automatically set to "k8s")
	ProviderType *KubernetesCredentialProviderType `default:"k8s" json:"provider"`
	// Flag indicating if the credential has been soft-deleted
	Deleted *bool `json:"deleted,omitempty"`
	// Timestamp when the credential was last used
	LastUsed *time.Time `json:"lastUsed,omitempty"`
	// Timestamp when the credential was created
	DateCreated *time.Time `json:"dateCreated,omitempty"`
	// Timestamp when the credential was last updated
	LastUpdated *time.Time               `json:"lastUpdated,omitempty"`
	Keys        KubernetesCredentialKeys `json:"keys"`
}

func (k KubernetesCredential) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(k, "", false)
}

func (k *KubernetesCredential) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &k, "", false, []string{"name", "keys"}); err != nil {
		return err
	}
	return nil
}

func (k *KubernetesCredential) GetID() *string {
	if k == nil {
		return nil
	}
	return k.ID
}

func (k *KubernetesCredential) GetName() string {
	if k == nil {
		return ""
	}
	return k.Name
}

func (k *KubernetesCredential) GetProviderType() *KubernetesCredentialProviderType {
	if k == nil {
		return nil
	}
	return k.ProviderType
}

func (k *KubernetesCredential) GetDeleted() *bool {
	if k == nil {
		return nil
	}
	return k.Deleted
}

func (k *KubernetesCredential) GetLastUsed() *time.Time {
	if k == nil {
		return nil
	}
	return k.LastUsed
}

func (k *KubernetesCredential) GetDateCreated() *time.Time {
	if k == nil {
		return nil
	}
	return k.DateCreated
}

func (k *KubernetesCredential) GetLastUpdated() *time.Time {
	if k == nil {
		return nil
	}
	return k.LastUpdated
}

func (k *KubernetesCredential) GetKeys() KubernetesCredentialKeys {
	if k == nil {
		return KubernetesCredentialKeys{}
	}
	return k.Keys
}

type KubernetesCredentialKeysOutput struct {
}

type KubernetesCredentialOutput struct {
	// Unique identifier for the credential (max 22 characters)
	ID *string `json:"id,omitempty"`
	// Display name for the credential. Must be 2-99 characters using only letters, numbers, underscores, and hyphens. No spaces allowed.
	Name string `json:"name"`
	// Cloud provider type (automatically set to "k8s")
	ProviderType *KubernetesCredentialProviderType `default:"k8s" json:"provider"`
	// Flag indicating if the credential has been soft-deleted
	Deleted *bool `json:"deleted,omitempty"`
	// Timestamp when the credential was last used
	LastUsed *time.Time `json:"lastUsed,omitempty"`
	// Timestamp when the credential was created
	DateCreated *time.Time `json:"dateCreated,omitempty"`
	// Timestamp when the credential was last updated
	LastUpdated *time.Time                     `json:"lastUpdated,omitempty"`
	Keys        KubernetesCredentialKeysOutput `json:"keys"`
}

func (k KubernetesCredentialOutput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(k, "", false)
}

func (k *KubernetesCredentialOutput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &k, "", false, []string{"name", "keys"}); err != nil {
		return err
	}
	return nil
}

func (k *KubernetesCredentialOutput) GetID() *string {
	if k == nil {
		return nil
	}
	return k.ID
}

func (k *KubernetesCredentialOutput) GetName() string {
	if k == nil {
		return ""
	}
	return k.Name
}

func (k *KubernetesCredentialOutput) GetProviderType() *KubernetesCredentialProviderType {
	if k == nil {
		return nil
	}
	return k.ProviderType
}

func (k *KubernetesCredentialOutput) GetDeleted() *bool {
	if k == nil {
		return nil
	}
	return k.Deleted
}

func (k *KubernetesCredentialOutput) GetLastUsed() *time.Time {
	if k == nil {
		return nil
	}
	return k.LastUsed
}

func (k *KubernetesCredentialOutput) GetDateCreated() *time.Time {
	if k == nil {
		return nil
	}
	return k.DateCreated
}

func (k *KubernetesCredentialOutput) GetLastUpdated() *time.Time {
	if k == nil {
		return nil
	}
	return k.LastUpdated
}

func (k *KubernetesCredentialOutput) GetKeys() KubernetesCredentialKeysOutput {
	if k == nil {
		return KubernetesCredentialKeysOutput{}
	}
	return k.Keys
}
