// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/seqeralabs/terraform-provider-seqera/internal/sdk/internal/utils"
	"time"
)

// BitbucketCredentialProviderType - Cloud provider type (automatically set to "bitbucket")
type BitbucketCredentialProviderType string

const (
	BitbucketCredentialProviderTypeBitbucket BitbucketCredentialProviderType = "bitbucket"
)

func (e BitbucketCredentialProviderType) ToPointer() *BitbucketCredentialProviderType {
	return &e
}
func (e *BitbucketCredentialProviderType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bitbucket":
		*e = BitbucketCredentialProviderType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BitbucketCredentialProviderType: %v", v)
	}
}

type BitbucketCredentialKeys struct {
	// Bitbucket account username (for app passwords) or email (for API tokens). Required.
	Username string `json:"username"`
	// Bitbucket API token (required, sensitive). App passwords are deprecated.
	Token string `json:"token"`
	// Repository base URL for on-premises Bitbucket server (optional). Example: https://bitbucket.org/seqeralabs
	BaseURL *string `json:"baseUrl,omitempty"`
}

func (b *BitbucketCredentialKeys) GetUsername() string {
	if b == nil {
		return ""
	}
	return b.Username
}

func (b *BitbucketCredentialKeys) GetToken() string {
	if b == nil {
		return ""
	}
	return b.Token
}

func (b *BitbucketCredentialKeys) GetBaseURL() *string {
	if b == nil {
		return nil
	}
	return b.BaseURL
}

type BitbucketCredential struct {
	// Unique identifier for the credential (max 22 characters)
	CredentialsID *string `json:"id,omitempty"`
	// Display name for the credential (max 100 characters)
	Name string `json:"name"`
	// Cloud provider type (automatically set to "bitbucket")
	ProviderType *BitbucketCredentialProviderType `default:"bitbucket" json:"provider"`
	// Flag indicating if the credential has been soft-deleted
	Deleted *bool `json:"deleted,omitempty"`
	// Timestamp when the credential was last used
	LastUsed *time.Time `json:"lastUsed,omitempty"`
	// Timestamp when the credential was created
	DateCreated *time.Time `json:"dateCreated,omitempty"`
	// Timestamp when the credential was last updated
	LastUpdated *time.Time              `json:"lastUpdated,omitempty"`
	Keys        BitbucketCredentialKeys `json:"keys"`
}

func (b BitbucketCredential) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(b, "", false)
}

func (b *BitbucketCredential) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &b, "", false, []string{"name", "keys"}); err != nil {
		return err
	}
	return nil
}

func (b *BitbucketCredential) GetCredentialsID() *string {
	if b == nil {
		return nil
	}
	return b.CredentialsID
}

func (b *BitbucketCredential) GetName() string {
	if b == nil {
		return ""
	}
	return b.Name
}

func (b *BitbucketCredential) GetProviderType() *BitbucketCredentialProviderType {
	if b == nil {
		return nil
	}
	return b.ProviderType
}

func (b *BitbucketCredential) GetDeleted() *bool {
	if b == nil {
		return nil
	}
	return b.Deleted
}

func (b *BitbucketCredential) GetLastUsed() *time.Time {
	if b == nil {
		return nil
	}
	return b.LastUsed
}

func (b *BitbucketCredential) GetDateCreated() *time.Time {
	if b == nil {
		return nil
	}
	return b.DateCreated
}

func (b *BitbucketCredential) GetLastUpdated() *time.Time {
	if b == nil {
		return nil
	}
	return b.LastUpdated
}

func (b *BitbucketCredential) GetKeys() BitbucketCredentialKeys {
	if b == nil {
		return BitbucketCredentialKeys{}
	}
	return b.Keys
}

type BitbucketCredentialKeysOutput struct {
	// Bitbucket account username (for app passwords) or email (for API tokens). Required.
	Username string `json:"username"`
}

func (b *BitbucketCredentialKeysOutput) GetUsername() string {
	if b == nil {
		return ""
	}
	return b.Username
}

type BitbucketCredentialOutput struct {
	// Unique identifier for the credential (max 22 characters)
	CredentialsID *string `json:"id,omitempty"`
	// Display name for the credential (max 100 characters)
	Name string `json:"name"`
	// Cloud provider type (automatically set to "bitbucket")
	ProviderType *BitbucketCredentialProviderType `default:"bitbucket" json:"provider"`
	// Flag indicating if the credential has been soft-deleted
	Deleted *bool `json:"deleted,omitempty"`
	// Timestamp when the credential was last used
	LastUsed *time.Time `json:"lastUsed,omitempty"`
	// Timestamp when the credential was created
	DateCreated *time.Time `json:"dateCreated,omitempty"`
	// Timestamp when the credential was last updated
	LastUpdated *time.Time                    `json:"lastUpdated,omitempty"`
	Keys        BitbucketCredentialKeysOutput `json:"keys"`
}

func (b BitbucketCredentialOutput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(b, "", false)
}

func (b *BitbucketCredentialOutput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &b, "", false, []string{"name", "keys"}); err != nil {
		return err
	}
	return nil
}

func (b *BitbucketCredentialOutput) GetCredentialsID() *string {
	if b == nil {
		return nil
	}
	return b.CredentialsID
}

func (b *BitbucketCredentialOutput) GetName() string {
	if b == nil {
		return ""
	}
	return b.Name
}

func (b *BitbucketCredentialOutput) GetProviderType() *BitbucketCredentialProviderType {
	if b == nil {
		return nil
	}
	return b.ProviderType
}

func (b *BitbucketCredentialOutput) GetDeleted() *bool {
	if b == nil {
		return nil
	}
	return b.Deleted
}

func (b *BitbucketCredentialOutput) GetLastUsed() *time.Time {
	if b == nil {
		return nil
	}
	return b.LastUsed
}

func (b *BitbucketCredentialOutput) GetDateCreated() *time.Time {
	if b == nil {
		return nil
	}
	return b.DateCreated
}

func (b *BitbucketCredentialOutput) GetLastUpdated() *time.Time {
	if b == nil {
		return nil
	}
	return b.LastUpdated
}

func (b *BitbucketCredentialOutput) GetKeys() BitbucketCredentialKeysOutput {
	if b == nil {
		return BitbucketCredentialKeysOutput{}
	}
	return b.Keys
}
