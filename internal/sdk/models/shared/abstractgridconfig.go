// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/seqeralabs/terraform-provider-seqera/internal/sdk/internal/utils"
)

type AbstractGridConfigLocalExecutionConfiguration struct {
	// Read-only property identifying the compute platform type
	Discriminator *string `json:"discriminator,omitempty"`
	WorkDir       string  `json:"workDir"`
	PreRunScript  *string `json:"preRunScript,omitempty"`
	PostRunScript *string `json:"postRunScript,omitempty"`
	// Array of environment variables for the compute environment
	Environment             []ConfigEnvVariable `json:"environment,omitempty"`
	WaveEnabled             *bool               `json:"waveEnabled,omitempty"`
	Fusion2Enabled          *bool               `json:"fusion2Enabled,omitempty"`
	NextflowConfig          *string             `json:"nextflowConfig,omitempty"`
	LaunchDir               *string             `json:"launchDir,omitempty"`
	UserName                *string             `json:"userName,omitempty"`
	HostName                *string             `json:"hostName,omitempty"`
	Port                    *int                `json:"port,omitempty"`
	HeadQueue               *string             `json:"headQueue,omitempty"`
	ComputeQueue            *string             `json:"computeQueue,omitempty"`
	MaxQueueSize            *int                `json:"maxQueueSize,omitempty"`
	HeadJobOptions          *string             `json:"headJobOptions,omitempty"`
	PropagateHeadJobOptions *bool               `json:"propagateHeadJobOptions,omitempty"`
}

func (a AbstractGridConfigLocalExecutionConfiguration) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AbstractGridConfigLocalExecutionConfiguration) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, []string{"workDir"}); err != nil {
		return err
	}
	return nil
}

func (a *AbstractGridConfigLocalExecutionConfiguration) GetDiscriminator() *string {
	if a == nil {
		return nil
	}
	return a.Discriminator
}

func (a *AbstractGridConfigLocalExecutionConfiguration) GetWorkDir() string {
	if a == nil {
		return ""
	}
	return a.WorkDir
}

func (a *AbstractGridConfigLocalExecutionConfiguration) GetPreRunScript() *string {
	if a == nil {
		return nil
	}
	return a.PreRunScript
}

func (a *AbstractGridConfigLocalExecutionConfiguration) GetPostRunScript() *string {
	if a == nil {
		return nil
	}
	return a.PostRunScript
}

func (a *AbstractGridConfigLocalExecutionConfiguration) GetEnvironment() []ConfigEnvVariable {
	if a == nil {
		return nil
	}
	return a.Environment
}

func (a *AbstractGridConfigLocalExecutionConfiguration) GetWaveEnabled() *bool {
	if a == nil {
		return nil
	}
	return a.WaveEnabled
}

func (a *AbstractGridConfigLocalExecutionConfiguration) GetFusion2Enabled() *bool {
	if a == nil {
		return nil
	}
	return a.Fusion2Enabled
}

func (a *AbstractGridConfigLocalExecutionConfiguration) GetNextflowConfig() *string {
	if a == nil {
		return nil
	}
	return a.NextflowConfig
}

func (a *AbstractGridConfigLocalExecutionConfiguration) GetLaunchDir() *string {
	if a == nil {
		return nil
	}
	return a.LaunchDir
}

func (a *AbstractGridConfigLocalExecutionConfiguration) GetUserName() *string {
	if a == nil {
		return nil
	}
	return a.UserName
}

func (a *AbstractGridConfigLocalExecutionConfiguration) GetHostName() *string {
	if a == nil {
		return nil
	}
	return a.HostName
}

func (a *AbstractGridConfigLocalExecutionConfiguration) GetPort() *int {
	if a == nil {
		return nil
	}
	return a.Port
}

func (a *AbstractGridConfigLocalExecutionConfiguration) GetHeadQueue() *string {
	if a == nil {
		return nil
	}
	return a.HeadQueue
}

func (a *AbstractGridConfigLocalExecutionConfiguration) GetComputeQueue() *string {
	if a == nil {
		return nil
	}
	return a.ComputeQueue
}

func (a *AbstractGridConfigLocalExecutionConfiguration) GetMaxQueueSize() *int {
	if a == nil {
		return nil
	}
	return a.MaxQueueSize
}

func (a *AbstractGridConfigLocalExecutionConfiguration) GetHeadJobOptions() *string {
	if a == nil {
		return nil
	}
	return a.HeadJobOptions
}

func (a *AbstractGridConfigLocalExecutionConfiguration) GetPropagateHeadJobOptions() *bool {
	if a == nil {
		return nil
	}
	return a.PropagateHeadJobOptions
}

type AbstractGridConfigMoabConfiguration struct {
	// Read-only property identifying the compute platform type
	Discriminator           *string `json:"discriminator,omitempty"`
	WorkDir                 string  `json:"workDir"`
	LaunchDir               *string `json:"launchDir,omitempty"`
	UserName                *string `json:"userName,omitempty"`
	HostName                *string `json:"hostName,omitempty"`
	Port                    *int    `json:"port,omitempty"`
	HeadQueue               *string `json:"headQueue,omitempty"`
	ComputeQueue            *string `json:"computeQueue,omitempty"`
	MaxQueueSize            *int    `json:"maxQueueSize,omitempty"`
	HeadJobOptions          *string `json:"headJobOptions,omitempty"`
	PropagateHeadJobOptions *bool   `json:"propagateHeadJobOptions,omitempty"`
	PreRunScript            *string `json:"preRunScript,omitempty"`
	PostRunScript           *string `json:"postRunScript,omitempty"`
	NextflowConfig          *string `json:"nextflowConfig,omitempty"`
	// Array of environment variables for the compute environment
	Environment []ConfigEnvVariable `json:"environment,omitempty"`
}

func (a AbstractGridConfigMoabConfiguration) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AbstractGridConfigMoabConfiguration) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, []string{"workDir"}); err != nil {
		return err
	}
	return nil
}

func (a *AbstractGridConfigMoabConfiguration) GetDiscriminator() *string {
	if a == nil {
		return nil
	}
	return a.Discriminator
}

func (a *AbstractGridConfigMoabConfiguration) GetWorkDir() string {
	if a == nil {
		return ""
	}
	return a.WorkDir
}

func (a *AbstractGridConfigMoabConfiguration) GetLaunchDir() *string {
	if a == nil {
		return nil
	}
	return a.LaunchDir
}

func (a *AbstractGridConfigMoabConfiguration) GetUserName() *string {
	if a == nil {
		return nil
	}
	return a.UserName
}

func (a *AbstractGridConfigMoabConfiguration) GetHostName() *string {
	if a == nil {
		return nil
	}
	return a.HostName
}

func (a *AbstractGridConfigMoabConfiguration) GetPort() *int {
	if a == nil {
		return nil
	}
	return a.Port
}

func (a *AbstractGridConfigMoabConfiguration) GetHeadQueue() *string {
	if a == nil {
		return nil
	}
	return a.HeadQueue
}

func (a *AbstractGridConfigMoabConfiguration) GetComputeQueue() *string {
	if a == nil {
		return nil
	}
	return a.ComputeQueue
}

func (a *AbstractGridConfigMoabConfiguration) GetMaxQueueSize() *int {
	if a == nil {
		return nil
	}
	return a.MaxQueueSize
}

func (a *AbstractGridConfigMoabConfiguration) GetHeadJobOptions() *string {
	if a == nil {
		return nil
	}
	return a.HeadJobOptions
}

func (a *AbstractGridConfigMoabConfiguration) GetPropagateHeadJobOptions() *bool {
	if a == nil {
		return nil
	}
	return a.PropagateHeadJobOptions
}

func (a *AbstractGridConfigMoabConfiguration) GetPreRunScript() *string {
	if a == nil {
		return nil
	}
	return a.PreRunScript
}

func (a *AbstractGridConfigMoabConfiguration) GetPostRunScript() *string {
	if a == nil {
		return nil
	}
	return a.PostRunScript
}

func (a *AbstractGridConfigMoabConfiguration) GetNextflowConfig() *string {
	if a == nil {
		return nil
	}
	return a.NextflowConfig
}

func (a *AbstractGridConfigMoabConfiguration) GetEnvironment() []ConfigEnvVariable {
	if a == nil {
		return nil
	}
	return a.Environment
}

type AbstractGridConfigAltairPBSConfiguration struct {
	// Read-only property identifying the compute platform type
	Discriminator           *string `json:"discriminator,omitempty"`
	WorkDir                 string  `json:"workDir"`
	LaunchDir               *string `json:"launchDir,omitempty"`
	UserName                *string `json:"userName,omitempty"`
	HostName                *string `json:"hostName,omitempty"`
	Port                    *int    `json:"port,omitempty"`
	HeadQueue               *string `json:"headQueue,omitempty"`
	ComputeQueue            *string `json:"computeQueue,omitempty"`
	MaxQueueSize            *int    `json:"maxQueueSize,omitempty"`
	HeadJobOptions          *string `json:"headJobOptions,omitempty"`
	PropagateHeadJobOptions *bool   `json:"propagateHeadJobOptions,omitempty"`
	PreRunScript            *string `json:"preRunScript,omitempty"`
	PostRunScript           *string `json:"postRunScript,omitempty"`
	NextflowConfig          *string `json:"nextflowConfig,omitempty"`
	// Array of environment variables for the compute environment
	Environment []ConfigEnvVariable `json:"environment,omitempty"`
}

func (a AbstractGridConfigAltairPBSConfiguration) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AbstractGridConfigAltairPBSConfiguration) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, []string{"workDir"}); err != nil {
		return err
	}
	return nil
}

func (a *AbstractGridConfigAltairPBSConfiguration) GetDiscriminator() *string {
	if a == nil {
		return nil
	}
	return a.Discriminator
}

func (a *AbstractGridConfigAltairPBSConfiguration) GetWorkDir() string {
	if a == nil {
		return ""
	}
	return a.WorkDir
}

func (a *AbstractGridConfigAltairPBSConfiguration) GetLaunchDir() *string {
	if a == nil {
		return nil
	}
	return a.LaunchDir
}

func (a *AbstractGridConfigAltairPBSConfiguration) GetUserName() *string {
	if a == nil {
		return nil
	}
	return a.UserName
}

func (a *AbstractGridConfigAltairPBSConfiguration) GetHostName() *string {
	if a == nil {
		return nil
	}
	return a.HostName
}

func (a *AbstractGridConfigAltairPBSConfiguration) GetPort() *int {
	if a == nil {
		return nil
	}
	return a.Port
}

func (a *AbstractGridConfigAltairPBSConfiguration) GetHeadQueue() *string {
	if a == nil {
		return nil
	}
	return a.HeadQueue
}

func (a *AbstractGridConfigAltairPBSConfiguration) GetComputeQueue() *string {
	if a == nil {
		return nil
	}
	return a.ComputeQueue
}

func (a *AbstractGridConfigAltairPBSConfiguration) GetMaxQueueSize() *int {
	if a == nil {
		return nil
	}
	return a.MaxQueueSize
}

func (a *AbstractGridConfigAltairPBSConfiguration) GetHeadJobOptions() *string {
	if a == nil {
		return nil
	}
	return a.HeadJobOptions
}

func (a *AbstractGridConfigAltairPBSConfiguration) GetPropagateHeadJobOptions() *bool {
	if a == nil {
		return nil
	}
	return a.PropagateHeadJobOptions
}

func (a *AbstractGridConfigAltairPBSConfiguration) GetPreRunScript() *string {
	if a == nil {
		return nil
	}
	return a.PreRunScript
}

func (a *AbstractGridConfigAltairPBSConfiguration) GetPostRunScript() *string {
	if a == nil {
		return nil
	}
	return a.PostRunScript
}

func (a *AbstractGridConfigAltairPBSConfiguration) GetNextflowConfig() *string {
	if a == nil {
		return nil
	}
	return a.NextflowConfig
}

func (a *AbstractGridConfigAltairPBSConfiguration) GetEnvironment() []ConfigEnvVariable {
	if a == nil {
		return nil
	}
	return a.Environment
}

type AbstractGridConfigUnivaGridEngineConfiguration struct {
	// Read-only property identifying the compute platform type
	Discriminator           *string `json:"discriminator,omitempty"`
	WorkDir                 string  `json:"workDir"`
	LaunchDir               *string `json:"launchDir,omitempty"`
	UserName                *string `json:"userName,omitempty"`
	HostName                *string `json:"hostName,omitempty"`
	Port                    *int    `json:"port,omitempty"`
	HeadQueue               *string `json:"headQueue,omitempty"`
	ComputeQueue            *string `json:"computeQueue,omitempty"`
	MaxQueueSize            *int    `json:"maxQueueSize,omitempty"`
	HeadJobOptions          *string `json:"headJobOptions,omitempty"`
	PropagateHeadJobOptions *bool   `json:"propagateHeadJobOptions,omitempty"`
	PreRunScript            *string `json:"preRunScript,omitempty"`
	PostRunScript           *string `json:"postRunScript,omitempty"`
	NextflowConfig          *string `json:"nextflowConfig,omitempty"`
	// Array of environment variables for the compute environment
	Environment []ConfigEnvVariable `json:"environment,omitempty"`
}

func (a AbstractGridConfigUnivaGridEngineConfiguration) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AbstractGridConfigUnivaGridEngineConfiguration) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, []string{"workDir"}); err != nil {
		return err
	}
	return nil
}

func (a *AbstractGridConfigUnivaGridEngineConfiguration) GetDiscriminator() *string {
	if a == nil {
		return nil
	}
	return a.Discriminator
}

func (a *AbstractGridConfigUnivaGridEngineConfiguration) GetWorkDir() string {
	if a == nil {
		return ""
	}
	return a.WorkDir
}

func (a *AbstractGridConfigUnivaGridEngineConfiguration) GetLaunchDir() *string {
	if a == nil {
		return nil
	}
	return a.LaunchDir
}

func (a *AbstractGridConfigUnivaGridEngineConfiguration) GetUserName() *string {
	if a == nil {
		return nil
	}
	return a.UserName
}

func (a *AbstractGridConfigUnivaGridEngineConfiguration) GetHostName() *string {
	if a == nil {
		return nil
	}
	return a.HostName
}

func (a *AbstractGridConfigUnivaGridEngineConfiguration) GetPort() *int {
	if a == nil {
		return nil
	}
	return a.Port
}

func (a *AbstractGridConfigUnivaGridEngineConfiguration) GetHeadQueue() *string {
	if a == nil {
		return nil
	}
	return a.HeadQueue
}

func (a *AbstractGridConfigUnivaGridEngineConfiguration) GetComputeQueue() *string {
	if a == nil {
		return nil
	}
	return a.ComputeQueue
}

func (a *AbstractGridConfigUnivaGridEngineConfiguration) GetMaxQueueSize() *int {
	if a == nil {
		return nil
	}
	return a.MaxQueueSize
}

func (a *AbstractGridConfigUnivaGridEngineConfiguration) GetHeadJobOptions() *string {
	if a == nil {
		return nil
	}
	return a.HeadJobOptions
}

func (a *AbstractGridConfigUnivaGridEngineConfiguration) GetPropagateHeadJobOptions() *bool {
	if a == nil {
		return nil
	}
	return a.PropagateHeadJobOptions
}

func (a *AbstractGridConfigUnivaGridEngineConfiguration) GetPreRunScript() *string {
	if a == nil {
		return nil
	}
	return a.PreRunScript
}

func (a *AbstractGridConfigUnivaGridEngineConfiguration) GetPostRunScript() *string {
	if a == nil {
		return nil
	}
	return a.PostRunScript
}

func (a *AbstractGridConfigUnivaGridEngineConfiguration) GetNextflowConfig() *string {
	if a == nil {
		return nil
	}
	return a.NextflowConfig
}

func (a *AbstractGridConfigUnivaGridEngineConfiguration) GetEnvironment() []ConfigEnvVariable {
	if a == nil {
		return nil
	}
	return a.Environment
}

type AbstractGridConfigGoogleGKEClusterConfiguration struct {
	// Read-only property identifying the compute platform type
	Discriminator         *string           `json:"discriminator,omitempty"`
	WorkDir               *string           `json:"workDir,omitempty"`
	PreRunScript          *string           `json:"preRunScript,omitempty"`
	PostRunScript         *string           `json:"postRunScript,omitempty"`
	Server                string            `json:"server"`
	SslCert               string            `json:"sslCert"`
	Namespace             string            `json:"namespace"`
	ComputeServiceAccount *string           `json:"computeServiceAccount,omitempty"`
	HeadServiceAccount    string            `json:"headServiceAccount"`
	StorageClaimName      string            `json:"storageClaimName"`
	StorageMountPath      *string           `json:"storageMountPath,omitempty"`
	PodCleanup            *PodCleanupPolicy `json:"podCleanup,omitempty"`
	HeadPodSpec           *string           `json:"headPodSpec,omitempty"`
	ServicePodSpec        *string           `json:"servicePodSpec,omitempty"`
	// Array of environment variables for the compute environment
	Environment     []ConfigEnvVariable `json:"environment,omitempty"`
	HeadJobCpus     *int                `json:"headJobCpus,omitempty"`
	HeadJobMemoryMb *int                `json:"headJobMemoryMb,omitempty"`
	NextflowConfig  *string             `json:"nextflowConfig,omitempty"`
	// GCP region or zone where the GKE cluster is located. This field is required and must be provided
	Region string `json:"region"`
	// The GKE cluster name
	ClusterName             string  `json:"clusterName"`
	Fusion2Enabled          *bool   `json:"fusion2Enabled,omitempty"`
	WaveEnabled             *bool   `json:"waveEnabled,omitempty"`
	LaunchDir               *string `json:"launchDir,omitempty"`
	UserName                *string `json:"userName,omitempty"`
	HostName                *string `json:"hostName,omitempty"`
	Port                    *int    `json:"port,omitempty"`
	HeadQueue               *string `json:"headQueue,omitempty"`
	ComputeQueue            *string `json:"computeQueue,omitempty"`
	MaxQueueSize            *int    `json:"maxQueueSize,omitempty"`
	HeadJobOptions          *string `json:"headJobOptions,omitempty"`
	PropagateHeadJobOptions *bool   `json:"propagateHeadJobOptions,omitempty"`
}

func (a AbstractGridConfigGoogleGKEClusterConfiguration) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AbstractGridConfigGoogleGKEClusterConfiguration) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, []string{"server", "sslCert", "namespace", "headServiceAccount", "storageClaimName", "region", "clusterName"}); err != nil {
		return err
	}
	return nil
}

func (a *AbstractGridConfigGoogleGKEClusterConfiguration) GetDiscriminator() *string {
	if a == nil {
		return nil
	}
	return a.Discriminator
}

func (a *AbstractGridConfigGoogleGKEClusterConfiguration) GetWorkDir() *string {
	if a == nil {
		return nil
	}
	return a.WorkDir
}

func (a *AbstractGridConfigGoogleGKEClusterConfiguration) GetPreRunScript() *string {
	if a == nil {
		return nil
	}
	return a.PreRunScript
}

func (a *AbstractGridConfigGoogleGKEClusterConfiguration) GetPostRunScript() *string {
	if a == nil {
		return nil
	}
	return a.PostRunScript
}

func (a *AbstractGridConfigGoogleGKEClusterConfiguration) GetServer() string {
	if a == nil {
		return ""
	}
	return a.Server
}

func (a *AbstractGridConfigGoogleGKEClusterConfiguration) GetSslCert() string {
	if a == nil {
		return ""
	}
	return a.SslCert
}

func (a *AbstractGridConfigGoogleGKEClusterConfiguration) GetNamespace() string {
	if a == nil {
		return ""
	}
	return a.Namespace
}

func (a *AbstractGridConfigGoogleGKEClusterConfiguration) GetComputeServiceAccount() *string {
	if a == nil {
		return nil
	}
	return a.ComputeServiceAccount
}

func (a *AbstractGridConfigGoogleGKEClusterConfiguration) GetHeadServiceAccount() string {
	if a == nil {
		return ""
	}
	return a.HeadServiceAccount
}

func (a *AbstractGridConfigGoogleGKEClusterConfiguration) GetStorageClaimName() string {
	if a == nil {
		return ""
	}
	return a.StorageClaimName
}

func (a *AbstractGridConfigGoogleGKEClusterConfiguration) GetStorageMountPath() *string {
	if a == nil {
		return nil
	}
	return a.StorageMountPath
}

func (a *AbstractGridConfigGoogleGKEClusterConfiguration) GetPodCleanup() *PodCleanupPolicy {
	if a == nil {
		return nil
	}
	return a.PodCleanup
}

func (a *AbstractGridConfigGoogleGKEClusterConfiguration) GetHeadPodSpec() *string {
	if a == nil {
		return nil
	}
	return a.HeadPodSpec
}

func (a *AbstractGridConfigGoogleGKEClusterConfiguration) GetServicePodSpec() *string {
	if a == nil {
		return nil
	}
	return a.ServicePodSpec
}

func (a *AbstractGridConfigGoogleGKEClusterConfiguration) GetEnvironment() []ConfigEnvVariable {
	if a == nil {
		return nil
	}
	return a.Environment
}

func (a *AbstractGridConfigGoogleGKEClusterConfiguration) GetHeadJobCpus() *int {
	if a == nil {
		return nil
	}
	return a.HeadJobCpus
}

func (a *AbstractGridConfigGoogleGKEClusterConfiguration) GetHeadJobMemoryMb() *int {
	if a == nil {
		return nil
	}
	return a.HeadJobMemoryMb
}

func (a *AbstractGridConfigGoogleGKEClusterConfiguration) GetNextflowConfig() *string {
	if a == nil {
		return nil
	}
	return a.NextflowConfig
}

func (a *AbstractGridConfigGoogleGKEClusterConfiguration) GetRegion() string {
	if a == nil {
		return ""
	}
	return a.Region
}

func (a *AbstractGridConfigGoogleGKEClusterConfiguration) GetClusterName() string {
	if a == nil {
		return ""
	}
	return a.ClusterName
}

func (a *AbstractGridConfigGoogleGKEClusterConfiguration) GetFusion2Enabled() *bool {
	if a == nil {
		return nil
	}
	return a.Fusion2Enabled
}

func (a *AbstractGridConfigGoogleGKEClusterConfiguration) GetWaveEnabled() *bool {
	if a == nil {
		return nil
	}
	return a.WaveEnabled
}

func (a *AbstractGridConfigGoogleGKEClusterConfiguration) GetLaunchDir() *string {
	if a == nil {
		return nil
	}
	return a.LaunchDir
}

func (a *AbstractGridConfigGoogleGKEClusterConfiguration) GetUserName() *string {
	if a == nil {
		return nil
	}
	return a.UserName
}

func (a *AbstractGridConfigGoogleGKEClusterConfiguration) GetHostName() *string {
	if a == nil {
		return nil
	}
	return a.HostName
}

func (a *AbstractGridConfigGoogleGKEClusterConfiguration) GetPort() *int {
	if a == nil {
		return nil
	}
	return a.Port
}

func (a *AbstractGridConfigGoogleGKEClusterConfiguration) GetHeadQueue() *string {
	if a == nil {
		return nil
	}
	return a.HeadQueue
}

func (a *AbstractGridConfigGoogleGKEClusterConfiguration) GetComputeQueue() *string {
	if a == nil {
		return nil
	}
	return a.ComputeQueue
}

func (a *AbstractGridConfigGoogleGKEClusterConfiguration) GetMaxQueueSize() *int {
	if a == nil {
		return nil
	}
	return a.MaxQueueSize
}

func (a *AbstractGridConfigGoogleGKEClusterConfiguration) GetHeadJobOptions() *string {
	if a == nil {
		return nil
	}
	return a.HeadJobOptions
}

func (a *AbstractGridConfigGoogleGKEClusterConfiguration) GetPropagateHeadJobOptions() *bool {
	if a == nil {
		return nil
	}
	return a.PropagateHeadJobOptions
}

type AbstractGridConfigAmazonEKSClusterConfiguration struct {
	// Read-only property identifying the compute platform type
	Discriminator         *string           `json:"discriminator,omitempty"`
	WorkDir               *string           `json:"workDir,omitempty"`
	PreRunScript          *string           `json:"preRunScript,omitempty"`
	PostRunScript         *string           `json:"postRunScript,omitempty"`
	Server                string            `json:"server"`
	SslCert               string            `json:"sslCert"`
	Namespace             string            `json:"namespace"`
	ComputeServiceAccount *string           `json:"computeServiceAccount,omitempty"`
	HeadServiceAccount    string            `json:"headServiceAccount"`
	StorageClaimName      string            `json:"storageClaimName"`
	StorageMountPath      *string           `json:"storageMountPath,omitempty"`
	PodCleanup            *PodCleanupPolicy `json:"podCleanup,omitempty"`
	HeadPodSpec           *string           `json:"headPodSpec,omitempty"`
	ServicePodSpec        *string           `json:"servicePodSpec,omitempty"`
	// Array of environment variables for the compute environment
	Environment     []ConfigEnvVariable `json:"environment,omitempty"`
	HeadJobCpus     *int                `json:"headJobCpus,omitempty"`
	HeadJobMemoryMb *int                `json:"headJobMemoryMb,omitempty"`
	NextflowConfig  *string             `json:"nextflowConfig,omitempty"`
	// AWS region where the EKS cluster is located. This field is required and must be provided
	Region string `json:"region"`
	// The AWS EKS cluster name
	ClusterName             string  `json:"clusterName"`
	WaveEnabled             *bool   `json:"waveEnabled,omitempty"`
	Fusion2Enabled          *bool   `json:"fusion2Enabled,omitempty"`
	LaunchDir               *string `json:"launchDir,omitempty"`
	UserName                *string `json:"userName,omitempty"`
	HostName                *string `json:"hostName,omitempty"`
	Port                    *int    `json:"port,omitempty"`
	HeadQueue               *string `json:"headQueue,omitempty"`
	ComputeQueue            *string `json:"computeQueue,omitempty"`
	MaxQueueSize            *int    `json:"maxQueueSize,omitempty"`
	HeadJobOptions          *string `json:"headJobOptions,omitempty"`
	PropagateHeadJobOptions *bool   `json:"propagateHeadJobOptions,omitempty"`
}

func (a AbstractGridConfigAmazonEKSClusterConfiguration) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AbstractGridConfigAmazonEKSClusterConfiguration) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, []string{"server", "sslCert", "namespace", "headServiceAccount", "storageClaimName", "region", "clusterName"}); err != nil {
		return err
	}
	return nil
}

func (a *AbstractGridConfigAmazonEKSClusterConfiguration) GetDiscriminator() *string {
	if a == nil {
		return nil
	}
	return a.Discriminator
}

func (a *AbstractGridConfigAmazonEKSClusterConfiguration) GetWorkDir() *string {
	if a == nil {
		return nil
	}
	return a.WorkDir
}

func (a *AbstractGridConfigAmazonEKSClusterConfiguration) GetPreRunScript() *string {
	if a == nil {
		return nil
	}
	return a.PreRunScript
}

func (a *AbstractGridConfigAmazonEKSClusterConfiguration) GetPostRunScript() *string {
	if a == nil {
		return nil
	}
	return a.PostRunScript
}

func (a *AbstractGridConfigAmazonEKSClusterConfiguration) GetServer() string {
	if a == nil {
		return ""
	}
	return a.Server
}

func (a *AbstractGridConfigAmazonEKSClusterConfiguration) GetSslCert() string {
	if a == nil {
		return ""
	}
	return a.SslCert
}

func (a *AbstractGridConfigAmazonEKSClusterConfiguration) GetNamespace() string {
	if a == nil {
		return ""
	}
	return a.Namespace
}

func (a *AbstractGridConfigAmazonEKSClusterConfiguration) GetComputeServiceAccount() *string {
	if a == nil {
		return nil
	}
	return a.ComputeServiceAccount
}

func (a *AbstractGridConfigAmazonEKSClusterConfiguration) GetHeadServiceAccount() string {
	if a == nil {
		return ""
	}
	return a.HeadServiceAccount
}

func (a *AbstractGridConfigAmazonEKSClusterConfiguration) GetStorageClaimName() string {
	if a == nil {
		return ""
	}
	return a.StorageClaimName
}

func (a *AbstractGridConfigAmazonEKSClusterConfiguration) GetStorageMountPath() *string {
	if a == nil {
		return nil
	}
	return a.StorageMountPath
}

func (a *AbstractGridConfigAmazonEKSClusterConfiguration) GetPodCleanup() *PodCleanupPolicy {
	if a == nil {
		return nil
	}
	return a.PodCleanup
}

func (a *AbstractGridConfigAmazonEKSClusterConfiguration) GetHeadPodSpec() *string {
	if a == nil {
		return nil
	}
	return a.HeadPodSpec
}

func (a *AbstractGridConfigAmazonEKSClusterConfiguration) GetServicePodSpec() *string {
	if a == nil {
		return nil
	}
	return a.ServicePodSpec
}

func (a *AbstractGridConfigAmazonEKSClusterConfiguration) GetEnvironment() []ConfigEnvVariable {
	if a == nil {
		return nil
	}
	return a.Environment
}

func (a *AbstractGridConfigAmazonEKSClusterConfiguration) GetHeadJobCpus() *int {
	if a == nil {
		return nil
	}
	return a.HeadJobCpus
}

func (a *AbstractGridConfigAmazonEKSClusterConfiguration) GetHeadJobMemoryMb() *int {
	if a == nil {
		return nil
	}
	return a.HeadJobMemoryMb
}

func (a *AbstractGridConfigAmazonEKSClusterConfiguration) GetNextflowConfig() *string {
	if a == nil {
		return nil
	}
	return a.NextflowConfig
}

func (a *AbstractGridConfigAmazonEKSClusterConfiguration) GetRegion() string {
	if a == nil {
		return ""
	}
	return a.Region
}

func (a *AbstractGridConfigAmazonEKSClusterConfiguration) GetClusterName() string {
	if a == nil {
		return ""
	}
	return a.ClusterName
}

func (a *AbstractGridConfigAmazonEKSClusterConfiguration) GetWaveEnabled() *bool {
	if a == nil {
		return nil
	}
	return a.WaveEnabled
}

func (a *AbstractGridConfigAmazonEKSClusterConfiguration) GetFusion2Enabled() *bool {
	if a == nil {
		return nil
	}
	return a.Fusion2Enabled
}

func (a *AbstractGridConfigAmazonEKSClusterConfiguration) GetLaunchDir() *string {
	if a == nil {
		return nil
	}
	return a.LaunchDir
}

func (a *AbstractGridConfigAmazonEKSClusterConfiguration) GetUserName() *string {
	if a == nil {
		return nil
	}
	return a.UserName
}

func (a *AbstractGridConfigAmazonEKSClusterConfiguration) GetHostName() *string {
	if a == nil {
		return nil
	}
	return a.HostName
}

func (a *AbstractGridConfigAmazonEKSClusterConfiguration) GetPort() *int {
	if a == nil {
		return nil
	}
	return a.Port
}

func (a *AbstractGridConfigAmazonEKSClusterConfiguration) GetHeadQueue() *string {
	if a == nil {
		return nil
	}
	return a.HeadQueue
}

func (a *AbstractGridConfigAmazonEKSClusterConfiguration) GetComputeQueue() *string {
	if a == nil {
		return nil
	}
	return a.ComputeQueue
}

func (a *AbstractGridConfigAmazonEKSClusterConfiguration) GetMaxQueueSize() *int {
	if a == nil {
		return nil
	}
	return a.MaxQueueSize
}

func (a *AbstractGridConfigAmazonEKSClusterConfiguration) GetHeadJobOptions() *string {
	if a == nil {
		return nil
	}
	return a.HeadJobOptions
}

func (a *AbstractGridConfigAmazonEKSClusterConfiguration) GetPropagateHeadJobOptions() *bool {
	if a == nil {
		return nil
	}
	return a.PropagateHeadJobOptions
}

type AbstractGridConfigKubernetesComputeConfiguration struct {
	// Read-only property identifying the compute platform type
	Discriminator         *string           `json:"discriminator,omitempty"`
	WorkDir               *string           `json:"workDir,omitempty"`
	PreRunScript          *string           `json:"preRunScript,omitempty"`
	PostRunScript         *string           `json:"postRunScript,omitempty"`
	Server                string            `json:"server"`
	SslCert               string            `json:"sslCert"`
	Namespace             string            `json:"namespace"`
	ComputeServiceAccount *string           `json:"computeServiceAccount,omitempty"`
	HeadServiceAccount    string            `json:"headServiceAccount"`
	StorageClaimName      string            `json:"storageClaimName"`
	StorageMountPath      *string           `json:"storageMountPath,omitempty"`
	PodCleanup            *PodCleanupPolicy `json:"podCleanup,omitempty"`
	HeadPodSpec           *string           `json:"headPodSpec,omitempty"`
	ServicePodSpec        *string           `json:"servicePodSpec,omitempty"`
	// Array of environment variables for the compute environment
	Environment             []ConfigEnvVariable `json:"environment,omitempty"`
	HeadJobCpus             *int                `json:"headJobCpus,omitempty"`
	HeadJobMemoryMb         *int                `json:"headJobMemoryMb,omitempty"`
	NextflowConfig          *string             `json:"nextflowConfig,omitempty"`
	LaunchDir               *string             `json:"launchDir,omitempty"`
	UserName                *string             `json:"userName,omitempty"`
	HostName                *string             `json:"hostName,omitempty"`
	Port                    *int                `json:"port,omitempty"`
	HeadQueue               *string             `json:"headQueue,omitempty"`
	ComputeQueue            *string             `json:"computeQueue,omitempty"`
	MaxQueueSize            *int                `json:"maxQueueSize,omitempty"`
	HeadJobOptions          *string             `json:"headJobOptions,omitempty"`
	PropagateHeadJobOptions *bool               `json:"propagateHeadJobOptions,omitempty"`
}

func (a AbstractGridConfigKubernetesComputeConfiguration) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AbstractGridConfigKubernetesComputeConfiguration) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, []string{"server", "sslCert", "namespace", "headServiceAccount", "storageClaimName"}); err != nil {
		return err
	}
	return nil
}

func (a *AbstractGridConfigKubernetesComputeConfiguration) GetDiscriminator() *string {
	if a == nil {
		return nil
	}
	return a.Discriminator
}

func (a *AbstractGridConfigKubernetesComputeConfiguration) GetWorkDir() *string {
	if a == nil {
		return nil
	}
	return a.WorkDir
}

func (a *AbstractGridConfigKubernetesComputeConfiguration) GetPreRunScript() *string {
	if a == nil {
		return nil
	}
	return a.PreRunScript
}

func (a *AbstractGridConfigKubernetesComputeConfiguration) GetPostRunScript() *string {
	if a == nil {
		return nil
	}
	return a.PostRunScript
}

func (a *AbstractGridConfigKubernetesComputeConfiguration) GetServer() string {
	if a == nil {
		return ""
	}
	return a.Server
}

func (a *AbstractGridConfigKubernetesComputeConfiguration) GetSslCert() string {
	if a == nil {
		return ""
	}
	return a.SslCert
}

func (a *AbstractGridConfigKubernetesComputeConfiguration) GetNamespace() string {
	if a == nil {
		return ""
	}
	return a.Namespace
}

func (a *AbstractGridConfigKubernetesComputeConfiguration) GetComputeServiceAccount() *string {
	if a == nil {
		return nil
	}
	return a.ComputeServiceAccount
}

func (a *AbstractGridConfigKubernetesComputeConfiguration) GetHeadServiceAccount() string {
	if a == nil {
		return ""
	}
	return a.HeadServiceAccount
}

func (a *AbstractGridConfigKubernetesComputeConfiguration) GetStorageClaimName() string {
	if a == nil {
		return ""
	}
	return a.StorageClaimName
}

func (a *AbstractGridConfigKubernetesComputeConfiguration) GetStorageMountPath() *string {
	if a == nil {
		return nil
	}
	return a.StorageMountPath
}

func (a *AbstractGridConfigKubernetesComputeConfiguration) GetPodCleanup() *PodCleanupPolicy {
	if a == nil {
		return nil
	}
	return a.PodCleanup
}

func (a *AbstractGridConfigKubernetesComputeConfiguration) GetHeadPodSpec() *string {
	if a == nil {
		return nil
	}
	return a.HeadPodSpec
}

func (a *AbstractGridConfigKubernetesComputeConfiguration) GetServicePodSpec() *string {
	if a == nil {
		return nil
	}
	return a.ServicePodSpec
}

func (a *AbstractGridConfigKubernetesComputeConfiguration) GetEnvironment() []ConfigEnvVariable {
	if a == nil {
		return nil
	}
	return a.Environment
}

func (a *AbstractGridConfigKubernetesComputeConfiguration) GetHeadJobCpus() *int {
	if a == nil {
		return nil
	}
	return a.HeadJobCpus
}

func (a *AbstractGridConfigKubernetesComputeConfiguration) GetHeadJobMemoryMb() *int {
	if a == nil {
		return nil
	}
	return a.HeadJobMemoryMb
}

func (a *AbstractGridConfigKubernetesComputeConfiguration) GetNextflowConfig() *string {
	if a == nil {
		return nil
	}
	return a.NextflowConfig
}

func (a *AbstractGridConfigKubernetesComputeConfiguration) GetLaunchDir() *string {
	if a == nil {
		return nil
	}
	return a.LaunchDir
}

func (a *AbstractGridConfigKubernetesComputeConfiguration) GetUserName() *string {
	if a == nil {
		return nil
	}
	return a.UserName
}

func (a *AbstractGridConfigKubernetesComputeConfiguration) GetHostName() *string {
	if a == nil {
		return nil
	}
	return a.HostName
}

func (a *AbstractGridConfigKubernetesComputeConfiguration) GetPort() *int {
	if a == nil {
		return nil
	}
	return a.Port
}

func (a *AbstractGridConfigKubernetesComputeConfiguration) GetHeadQueue() *string {
	if a == nil {
		return nil
	}
	return a.HeadQueue
}

func (a *AbstractGridConfigKubernetesComputeConfiguration) GetComputeQueue() *string {
	if a == nil {
		return nil
	}
	return a.ComputeQueue
}

func (a *AbstractGridConfigKubernetesComputeConfiguration) GetMaxQueueSize() *int {
	if a == nil {
		return nil
	}
	return a.MaxQueueSize
}

func (a *AbstractGridConfigKubernetesComputeConfiguration) GetHeadJobOptions() *string {
	if a == nil {
		return nil
	}
	return a.HeadJobOptions
}

func (a *AbstractGridConfigKubernetesComputeConfiguration) GetPropagateHeadJobOptions() *bool {
	if a == nil {
		return nil
	}
	return a.PropagateHeadJobOptions
}

type AbstractGridConfigSlurmConfiguration struct {
	// Read-only property identifying the compute platform type
	Discriminator           *string `json:"discriminator,omitempty"`
	WorkDir                 string  `json:"workDir"`
	LaunchDir               *string `json:"launchDir,omitempty"`
	UserName                *string `json:"userName,omitempty"`
	HostName                *string `json:"hostName,omitempty"`
	Port                    *int    `json:"port,omitempty"`
	HeadQueue               *string `json:"headQueue,omitempty"`
	ComputeQueue            *string `json:"computeQueue,omitempty"`
	MaxQueueSize            *int    `json:"maxQueueSize,omitempty"`
	HeadJobOptions          *string `json:"headJobOptions,omitempty"`
	PropagateHeadJobOptions *bool   `json:"propagateHeadJobOptions,omitempty"`
	PreRunScript            *string `json:"preRunScript,omitempty"`
	PostRunScript           *string `json:"postRunScript,omitempty"`
	NextflowConfig          *string `json:"nextflowConfig,omitempty"`
	// Array of environment variables for the compute environment
	Environment []ConfigEnvVariable `json:"environment,omitempty"`
}

func (a AbstractGridConfigSlurmConfiguration) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AbstractGridConfigSlurmConfiguration) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, []string{"workDir"}); err != nil {
		return err
	}
	return nil
}

func (a *AbstractGridConfigSlurmConfiguration) GetDiscriminator() *string {
	if a == nil {
		return nil
	}
	return a.Discriminator
}

func (a *AbstractGridConfigSlurmConfiguration) GetWorkDir() string {
	if a == nil {
		return ""
	}
	return a.WorkDir
}

func (a *AbstractGridConfigSlurmConfiguration) GetLaunchDir() *string {
	if a == nil {
		return nil
	}
	return a.LaunchDir
}

func (a *AbstractGridConfigSlurmConfiguration) GetUserName() *string {
	if a == nil {
		return nil
	}
	return a.UserName
}

func (a *AbstractGridConfigSlurmConfiguration) GetHostName() *string {
	if a == nil {
		return nil
	}
	return a.HostName
}

func (a *AbstractGridConfigSlurmConfiguration) GetPort() *int {
	if a == nil {
		return nil
	}
	return a.Port
}

func (a *AbstractGridConfigSlurmConfiguration) GetHeadQueue() *string {
	if a == nil {
		return nil
	}
	return a.HeadQueue
}

func (a *AbstractGridConfigSlurmConfiguration) GetComputeQueue() *string {
	if a == nil {
		return nil
	}
	return a.ComputeQueue
}

func (a *AbstractGridConfigSlurmConfiguration) GetMaxQueueSize() *int {
	if a == nil {
		return nil
	}
	return a.MaxQueueSize
}

func (a *AbstractGridConfigSlurmConfiguration) GetHeadJobOptions() *string {
	if a == nil {
		return nil
	}
	return a.HeadJobOptions
}

func (a *AbstractGridConfigSlurmConfiguration) GetPropagateHeadJobOptions() *bool {
	if a == nil {
		return nil
	}
	return a.PropagateHeadJobOptions
}

func (a *AbstractGridConfigSlurmConfiguration) GetPreRunScript() *string {
	if a == nil {
		return nil
	}
	return a.PreRunScript
}

func (a *AbstractGridConfigSlurmConfiguration) GetPostRunScript() *string {
	if a == nil {
		return nil
	}
	return a.PostRunScript
}

func (a *AbstractGridConfigSlurmConfiguration) GetNextflowConfig() *string {
	if a == nil {
		return nil
	}
	return a.NextflowConfig
}

func (a *AbstractGridConfigSlurmConfiguration) GetEnvironment() []ConfigEnvVariable {
	if a == nil {
		return nil
	}
	return a.Environment
}

type AbstractGridConfigIBMLSFConfiguration struct {
	// Read-only property identifying the compute platform type
	Discriminator           *string `json:"discriminator,omitempty"`
	WorkDir                 string  `json:"workDir"`
	LaunchDir               *string `json:"launchDir,omitempty"`
	UserName                *string `json:"userName,omitempty"`
	HostName                *string `json:"hostName,omitempty"`
	Port                    *int    `json:"port,omitempty"`
	HeadQueue               *string `json:"headQueue,omitempty"`
	ComputeQueue            *string `json:"computeQueue,omitempty"`
	MaxQueueSize            *int    `json:"maxQueueSize,omitempty"`
	HeadJobOptions          *string `json:"headJobOptions,omitempty"`
	PropagateHeadJobOptions *bool   `json:"propagateHeadJobOptions,omitempty"`
	PreRunScript            *string `json:"preRunScript,omitempty"`
	PostRunScript           *string `json:"postRunScript,omitempty"`
	NextflowConfig          *string `json:"nextflowConfig,omitempty"`
	UnitForLimits           *string `json:"unitForLimits,omitempty"`
	PerJobMemLimit          *bool   `json:"perJobMemLimit,omitempty"`
	PerTaskReserve          *bool   `json:"perTaskReserve,omitempty"`
	// Array of environment variables for the compute environment
	Environment []ConfigEnvVariable `json:"environment,omitempty"`
}

func (a AbstractGridConfigIBMLSFConfiguration) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AbstractGridConfigIBMLSFConfiguration) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, []string{"workDir"}); err != nil {
		return err
	}
	return nil
}

func (a *AbstractGridConfigIBMLSFConfiguration) GetDiscriminator() *string {
	if a == nil {
		return nil
	}
	return a.Discriminator
}

func (a *AbstractGridConfigIBMLSFConfiguration) GetWorkDir() string {
	if a == nil {
		return ""
	}
	return a.WorkDir
}

func (a *AbstractGridConfigIBMLSFConfiguration) GetLaunchDir() *string {
	if a == nil {
		return nil
	}
	return a.LaunchDir
}

func (a *AbstractGridConfigIBMLSFConfiguration) GetUserName() *string {
	if a == nil {
		return nil
	}
	return a.UserName
}

func (a *AbstractGridConfigIBMLSFConfiguration) GetHostName() *string {
	if a == nil {
		return nil
	}
	return a.HostName
}

func (a *AbstractGridConfigIBMLSFConfiguration) GetPort() *int {
	if a == nil {
		return nil
	}
	return a.Port
}

func (a *AbstractGridConfigIBMLSFConfiguration) GetHeadQueue() *string {
	if a == nil {
		return nil
	}
	return a.HeadQueue
}

func (a *AbstractGridConfigIBMLSFConfiguration) GetComputeQueue() *string {
	if a == nil {
		return nil
	}
	return a.ComputeQueue
}

func (a *AbstractGridConfigIBMLSFConfiguration) GetMaxQueueSize() *int {
	if a == nil {
		return nil
	}
	return a.MaxQueueSize
}

func (a *AbstractGridConfigIBMLSFConfiguration) GetHeadJobOptions() *string {
	if a == nil {
		return nil
	}
	return a.HeadJobOptions
}

func (a *AbstractGridConfigIBMLSFConfiguration) GetPropagateHeadJobOptions() *bool {
	if a == nil {
		return nil
	}
	return a.PropagateHeadJobOptions
}

func (a *AbstractGridConfigIBMLSFConfiguration) GetPreRunScript() *string {
	if a == nil {
		return nil
	}
	return a.PreRunScript
}

func (a *AbstractGridConfigIBMLSFConfiguration) GetPostRunScript() *string {
	if a == nil {
		return nil
	}
	return a.PostRunScript
}

func (a *AbstractGridConfigIBMLSFConfiguration) GetNextflowConfig() *string {
	if a == nil {
		return nil
	}
	return a.NextflowConfig
}

func (a *AbstractGridConfigIBMLSFConfiguration) GetUnitForLimits() *string {
	if a == nil {
		return nil
	}
	return a.UnitForLimits
}

func (a *AbstractGridConfigIBMLSFConfiguration) GetPerJobMemLimit() *bool {
	if a == nil {
		return nil
	}
	return a.PerJobMemLimit
}

func (a *AbstractGridConfigIBMLSFConfiguration) GetPerTaskReserve() *bool {
	if a == nil {
		return nil
	}
	return a.PerTaskReserve
}

func (a *AbstractGridConfigIBMLSFConfiguration) GetEnvironment() []ConfigEnvVariable {
	if a == nil {
		return nil
	}
	return a.Environment
}

type AbstractGridConfigAzureCloudConfiguration struct {
	// Read-only property identifying the compute platform type
	Discriminator *string `json:"discriminator,omitempty"`
	WorkDir       *string `json:"workDir,omitempty"`
	PreRunScript  *string `json:"preRunScript,omitempty"`
	PostRunScript *string `json:"postRunScript,omitempty"`
	// Array of environment variables for the compute environment
	Environment             []ConfigEnvVariable    `json:"environment,omitempty"`
	WaveEnabled             *bool                  `json:"waveEnabled,omitempty"`
	Fusion2Enabled          *bool                  `json:"fusion2Enabled,omitempty"`
	NextflowConfig          *string                `json:"nextflowConfig,omitempty"`
	InstanceType            *string                `json:"instanceType,omitempty"`
	Region                  *string                `json:"region,omitempty"`
	ResourceGroup           *string                `json:"resourceGroup,omitempty"`
	NetworkID               *string                `json:"networkId,omitempty"`
	SubscriptionID          *string                `json:"subscriptionId,omitempty"`
	ManagedIdentityID       *string                `json:"managedIdentityId,omitempty"`
	ManagedIdentityClientID *string                `json:"managedIdentityClientId,omitempty"`
	LogWorkspaceID          *string                `json:"logWorkspaceId,omitempty"`
	LogTableName            *string                `json:"logTableName,omitempty"`
	DataCollectionEndpoint  *string                `json:"dataCollectionEndpoint,omitempty"`
	DataCollectionRuleID    *string                `json:"dataCollectionRuleId,omitempty"`
	ForgedResources         []MapEntryStringString `json:"forgedResources,omitempty"`
	LaunchDir               *string                `json:"launchDir,omitempty"`
	UserName                *string                `json:"userName,omitempty"`
	HostName                *string                `json:"hostName,omitempty"`
	Port                    *int                   `json:"port,omitempty"`
	HeadQueue               *string                `json:"headQueue,omitempty"`
	ComputeQueue            *string                `json:"computeQueue,omitempty"`
	MaxQueueSize            *int                   `json:"maxQueueSize,omitempty"`
	HeadJobOptions          *string                `json:"headJobOptions,omitempty"`
	PropagateHeadJobOptions *bool                  `json:"propagateHeadJobOptions,omitempty"`
}

func (a AbstractGridConfigAzureCloudConfiguration) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AbstractGridConfigAzureCloudConfiguration) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (a *AbstractGridConfigAzureCloudConfiguration) GetDiscriminator() *string {
	if a == nil {
		return nil
	}
	return a.Discriminator
}

func (a *AbstractGridConfigAzureCloudConfiguration) GetWorkDir() *string {
	if a == nil {
		return nil
	}
	return a.WorkDir
}

func (a *AbstractGridConfigAzureCloudConfiguration) GetPreRunScript() *string {
	if a == nil {
		return nil
	}
	return a.PreRunScript
}

func (a *AbstractGridConfigAzureCloudConfiguration) GetPostRunScript() *string {
	if a == nil {
		return nil
	}
	return a.PostRunScript
}

func (a *AbstractGridConfigAzureCloudConfiguration) GetEnvironment() []ConfigEnvVariable {
	if a == nil {
		return nil
	}
	return a.Environment
}

func (a *AbstractGridConfigAzureCloudConfiguration) GetWaveEnabled() *bool {
	if a == nil {
		return nil
	}
	return a.WaveEnabled
}

func (a *AbstractGridConfigAzureCloudConfiguration) GetFusion2Enabled() *bool {
	if a == nil {
		return nil
	}
	return a.Fusion2Enabled
}

func (a *AbstractGridConfigAzureCloudConfiguration) GetNextflowConfig() *string {
	if a == nil {
		return nil
	}
	return a.NextflowConfig
}

func (a *AbstractGridConfigAzureCloudConfiguration) GetInstanceType() *string {
	if a == nil {
		return nil
	}
	return a.InstanceType
}

func (a *AbstractGridConfigAzureCloudConfiguration) GetRegion() *string {
	if a == nil {
		return nil
	}
	return a.Region
}

func (a *AbstractGridConfigAzureCloudConfiguration) GetResourceGroup() *string {
	if a == nil {
		return nil
	}
	return a.ResourceGroup
}

func (a *AbstractGridConfigAzureCloudConfiguration) GetNetworkID() *string {
	if a == nil {
		return nil
	}
	return a.NetworkID
}

func (a *AbstractGridConfigAzureCloudConfiguration) GetSubscriptionID() *string {
	if a == nil {
		return nil
	}
	return a.SubscriptionID
}

func (a *AbstractGridConfigAzureCloudConfiguration) GetManagedIdentityID() *string {
	if a == nil {
		return nil
	}
	return a.ManagedIdentityID
}

func (a *AbstractGridConfigAzureCloudConfiguration) GetManagedIdentityClientID() *string {
	if a == nil {
		return nil
	}
	return a.ManagedIdentityClientID
}

func (a *AbstractGridConfigAzureCloudConfiguration) GetLogWorkspaceID() *string {
	if a == nil {
		return nil
	}
	return a.LogWorkspaceID
}

func (a *AbstractGridConfigAzureCloudConfiguration) GetLogTableName() *string {
	if a == nil {
		return nil
	}
	return a.LogTableName
}

func (a *AbstractGridConfigAzureCloudConfiguration) GetDataCollectionEndpoint() *string {
	if a == nil {
		return nil
	}
	return a.DataCollectionEndpoint
}

func (a *AbstractGridConfigAzureCloudConfiguration) GetDataCollectionRuleID() *string {
	if a == nil {
		return nil
	}
	return a.DataCollectionRuleID
}

func (a *AbstractGridConfigAzureCloudConfiguration) GetForgedResources() []MapEntryStringString {
	if a == nil {
		return nil
	}
	return a.ForgedResources
}

func (a *AbstractGridConfigAzureCloudConfiguration) GetLaunchDir() *string {
	if a == nil {
		return nil
	}
	return a.LaunchDir
}

func (a *AbstractGridConfigAzureCloudConfiguration) GetUserName() *string {
	if a == nil {
		return nil
	}
	return a.UserName
}

func (a *AbstractGridConfigAzureCloudConfiguration) GetHostName() *string {
	if a == nil {
		return nil
	}
	return a.HostName
}

func (a *AbstractGridConfigAzureCloudConfiguration) GetPort() *int {
	if a == nil {
		return nil
	}
	return a.Port
}

func (a *AbstractGridConfigAzureCloudConfiguration) GetHeadQueue() *string {
	if a == nil {
		return nil
	}
	return a.HeadQueue
}

func (a *AbstractGridConfigAzureCloudConfiguration) GetComputeQueue() *string {
	if a == nil {
		return nil
	}
	return a.ComputeQueue
}

func (a *AbstractGridConfigAzureCloudConfiguration) GetMaxQueueSize() *int {
	if a == nil {
		return nil
	}
	return a.MaxQueueSize
}

func (a *AbstractGridConfigAzureCloudConfiguration) GetHeadJobOptions() *string {
	if a == nil {
		return nil
	}
	return a.HeadJobOptions
}

func (a *AbstractGridConfigAzureCloudConfiguration) GetPropagateHeadJobOptions() *bool {
	if a == nil {
		return nil
	}
	return a.PropagateHeadJobOptions
}

type AbstractGridConfigAzureBatchConfiguration struct {
	// Read-only property identifying the compute platform type
	Discriminator *string `json:"discriminator,omitempty"`
	WorkDir       *string `json:"workDir,omitempty"`
	PreRunScript  *string `json:"preRunScript,omitempty"`
	PostRunScript *string `json:"postRunScript,omitempty"`
	// Azure region where the compute environment will be deployed. This field is required and must be provided
	Region   string  `json:"region"`
	HeadPool *string `json:"headPool,omitempty"`
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	AutoPoolMode            *bool               `json:"autoPoolMode,omitempty"`
	Forge                   *AzBatchForgeConfig `json:"forge,omitempty"`
	TokenDuration           *string             `json:"tokenDuration,omitempty"`
	DeleteJobsOnCompletion  *JobCleanupPolicy   `json:"deleteJobsOnCompletion,omitempty"`
	DeletePoolsOnCompletion *bool               `json:"deletePoolsOnCompletion,omitempty"`
	// Array of environment variables for the compute environment
	Environment             []ConfigEnvVariable `json:"environment,omitempty"`
	WaveEnabled             *bool               `json:"waveEnabled,omitempty"`
	Fusion2Enabled          *bool               `json:"fusion2Enabled,omitempty"`
	NextflowConfig          *string             `json:"nextflowConfig,omitempty"`
	ManagedIdentityClientID *string             `json:"managedIdentityClientId,omitempty"`
	LaunchDir               *string             `json:"launchDir,omitempty"`
	UserName                *string             `json:"userName,omitempty"`
	HostName                *string             `json:"hostName,omitempty"`
	Port                    *int                `json:"port,omitempty"`
	HeadQueue               *string             `json:"headQueue,omitempty"`
	ComputeQueue            *string             `json:"computeQueue,omitempty"`
	MaxQueueSize            *int                `json:"maxQueueSize,omitempty"`
	HeadJobOptions          *string             `json:"headJobOptions,omitempty"`
	PropagateHeadJobOptions *bool               `json:"propagateHeadJobOptions,omitempty"`
}

func (a AbstractGridConfigAzureBatchConfiguration) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AbstractGridConfigAzureBatchConfiguration) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, []string{"region"}); err != nil {
		return err
	}
	return nil
}

func (a *AbstractGridConfigAzureBatchConfiguration) GetDiscriminator() *string {
	if a == nil {
		return nil
	}
	return a.Discriminator
}

func (a *AbstractGridConfigAzureBatchConfiguration) GetWorkDir() *string {
	if a == nil {
		return nil
	}
	return a.WorkDir
}

func (a *AbstractGridConfigAzureBatchConfiguration) GetPreRunScript() *string {
	if a == nil {
		return nil
	}
	return a.PreRunScript
}

func (a *AbstractGridConfigAzureBatchConfiguration) GetPostRunScript() *string {
	if a == nil {
		return nil
	}
	return a.PostRunScript
}

func (a *AbstractGridConfigAzureBatchConfiguration) GetRegion() string {
	if a == nil {
		return ""
	}
	return a.Region
}

func (a *AbstractGridConfigAzureBatchConfiguration) GetHeadPool() *string {
	if a == nil {
		return nil
	}
	return a.HeadPool
}

func (a *AbstractGridConfigAzureBatchConfiguration) GetAutoPoolMode() *bool {
	if a == nil {
		return nil
	}
	return a.AutoPoolMode
}

func (a *AbstractGridConfigAzureBatchConfiguration) GetForge() *AzBatchForgeConfig {
	if a == nil {
		return nil
	}
	return a.Forge
}

func (a *AbstractGridConfigAzureBatchConfiguration) GetTokenDuration() *string {
	if a == nil {
		return nil
	}
	return a.TokenDuration
}

func (a *AbstractGridConfigAzureBatchConfiguration) GetDeleteJobsOnCompletion() *JobCleanupPolicy {
	if a == nil {
		return nil
	}
	return a.DeleteJobsOnCompletion
}

func (a *AbstractGridConfigAzureBatchConfiguration) GetDeletePoolsOnCompletion() *bool {
	if a == nil {
		return nil
	}
	return a.DeletePoolsOnCompletion
}

func (a *AbstractGridConfigAzureBatchConfiguration) GetEnvironment() []ConfigEnvVariable {
	if a == nil {
		return nil
	}
	return a.Environment
}

func (a *AbstractGridConfigAzureBatchConfiguration) GetWaveEnabled() *bool {
	if a == nil {
		return nil
	}
	return a.WaveEnabled
}

func (a *AbstractGridConfigAzureBatchConfiguration) GetFusion2Enabled() *bool {
	if a == nil {
		return nil
	}
	return a.Fusion2Enabled
}

func (a *AbstractGridConfigAzureBatchConfiguration) GetNextflowConfig() *string {
	if a == nil {
		return nil
	}
	return a.NextflowConfig
}

func (a *AbstractGridConfigAzureBatchConfiguration) GetManagedIdentityClientID() *string {
	if a == nil {
		return nil
	}
	return a.ManagedIdentityClientID
}

func (a *AbstractGridConfigAzureBatchConfiguration) GetLaunchDir() *string {
	if a == nil {
		return nil
	}
	return a.LaunchDir
}

func (a *AbstractGridConfigAzureBatchConfiguration) GetUserName() *string {
	if a == nil {
		return nil
	}
	return a.UserName
}

func (a *AbstractGridConfigAzureBatchConfiguration) GetHostName() *string {
	if a == nil {
		return nil
	}
	return a.HostName
}

func (a *AbstractGridConfigAzureBatchConfiguration) GetPort() *int {
	if a == nil {
		return nil
	}
	return a.Port
}

func (a *AbstractGridConfigAzureBatchConfiguration) GetHeadQueue() *string {
	if a == nil {
		return nil
	}
	return a.HeadQueue
}

func (a *AbstractGridConfigAzureBatchConfiguration) GetComputeQueue() *string {
	if a == nil {
		return nil
	}
	return a.ComputeQueue
}

func (a *AbstractGridConfigAzureBatchConfiguration) GetMaxQueueSize() *int {
	if a == nil {
		return nil
	}
	return a.MaxQueueSize
}

func (a *AbstractGridConfigAzureBatchConfiguration) GetHeadJobOptions() *string {
	if a == nil {
		return nil
	}
	return a.HeadJobOptions
}

func (a *AbstractGridConfigAzureBatchConfiguration) GetPropagateHeadJobOptions() *bool {
	if a == nil {
		return nil
	}
	return a.PropagateHeadJobOptions
}

type AbstractGridConfigGoogleCloudConfiguration struct {
	// Read-only property identifying the compute platform type
	Discriminator  *string `json:"discriminator,omitempty"`
	PreRunScript   *string `json:"preRunScript,omitempty"`
	PostRunScript  *string `json:"postRunScript,omitempty"`
	WorkDir        *string `json:"workDir,omitempty"`
	NextflowConfig *string `json:"nextflowConfig,omitempty"`
	// Array of environment variables for the compute environment
	Environment             []ConfigEnvVariable `json:"environment,omitempty"`
	WaveEnabled             *bool               `json:"waveEnabled,omitempty"`
	Fusion2Enabled          *bool               `json:"fusion2Enabled,omitempty"`
	ProjectID               *string             `json:"projectId,omitempty"`
	Region                  *string             `json:"region,omitempty"`
	Zone                    *string             `json:"zone,omitempty"`
	ServiceAccountEmail     *string             `json:"serviceAccountEmail,omitempty"`
	InstanceType            *string             `json:"instanceType,omitempty"`
	ImageID                 *string             `json:"imageId,omitempty"`
	Arm64Enabled            *bool               `json:"arm64Enabled,omitempty"`
	GpuEnabled              *bool               `json:"gpuEnabled,omitempty"`
	BootDiskSizeGb          *int                `json:"bootDiskSizeGb,omitempty"`
	ForgedResources         []map[string]any    `json:"forgedResources,omitempty"`
	LaunchDir               *string             `json:"launchDir,omitempty"`
	UserName                *string             `json:"userName,omitempty"`
	HostName                *string             `json:"hostName,omitempty"`
	Port                    *int                `json:"port,omitempty"`
	HeadQueue               *string             `json:"headQueue,omitempty"`
	ComputeQueue            *string             `json:"computeQueue,omitempty"`
	MaxQueueSize            *int                `json:"maxQueueSize,omitempty"`
	HeadJobOptions          *string             `json:"headJobOptions,omitempty"`
	PropagateHeadJobOptions *bool               `json:"propagateHeadJobOptions,omitempty"`
}

func (a AbstractGridConfigGoogleCloudConfiguration) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AbstractGridConfigGoogleCloudConfiguration) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (a *AbstractGridConfigGoogleCloudConfiguration) GetDiscriminator() *string {
	if a == nil {
		return nil
	}
	return a.Discriminator
}

func (a *AbstractGridConfigGoogleCloudConfiguration) GetPreRunScript() *string {
	if a == nil {
		return nil
	}
	return a.PreRunScript
}

func (a *AbstractGridConfigGoogleCloudConfiguration) GetPostRunScript() *string {
	if a == nil {
		return nil
	}
	return a.PostRunScript
}

func (a *AbstractGridConfigGoogleCloudConfiguration) GetWorkDir() *string {
	if a == nil {
		return nil
	}
	return a.WorkDir
}

func (a *AbstractGridConfigGoogleCloudConfiguration) GetNextflowConfig() *string {
	if a == nil {
		return nil
	}
	return a.NextflowConfig
}

func (a *AbstractGridConfigGoogleCloudConfiguration) GetEnvironment() []ConfigEnvVariable {
	if a == nil {
		return nil
	}
	return a.Environment
}

func (a *AbstractGridConfigGoogleCloudConfiguration) GetWaveEnabled() *bool {
	if a == nil {
		return nil
	}
	return a.WaveEnabled
}

func (a *AbstractGridConfigGoogleCloudConfiguration) GetFusion2Enabled() *bool {
	if a == nil {
		return nil
	}
	return a.Fusion2Enabled
}

func (a *AbstractGridConfigGoogleCloudConfiguration) GetProjectID() *string {
	if a == nil {
		return nil
	}
	return a.ProjectID
}

func (a *AbstractGridConfigGoogleCloudConfiguration) GetRegion() *string {
	if a == nil {
		return nil
	}
	return a.Region
}

func (a *AbstractGridConfigGoogleCloudConfiguration) GetZone() *string {
	if a == nil {
		return nil
	}
	return a.Zone
}

func (a *AbstractGridConfigGoogleCloudConfiguration) GetServiceAccountEmail() *string {
	if a == nil {
		return nil
	}
	return a.ServiceAccountEmail
}

func (a *AbstractGridConfigGoogleCloudConfiguration) GetInstanceType() *string {
	if a == nil {
		return nil
	}
	return a.InstanceType
}

func (a *AbstractGridConfigGoogleCloudConfiguration) GetImageID() *string {
	if a == nil {
		return nil
	}
	return a.ImageID
}

func (a *AbstractGridConfigGoogleCloudConfiguration) GetArm64Enabled() *bool {
	if a == nil {
		return nil
	}
	return a.Arm64Enabled
}

func (a *AbstractGridConfigGoogleCloudConfiguration) GetGpuEnabled() *bool {
	if a == nil {
		return nil
	}
	return a.GpuEnabled
}

func (a *AbstractGridConfigGoogleCloudConfiguration) GetBootDiskSizeGb() *int {
	if a == nil {
		return nil
	}
	return a.BootDiskSizeGb
}

func (a *AbstractGridConfigGoogleCloudConfiguration) GetForgedResources() []map[string]any {
	if a == nil {
		return nil
	}
	return a.ForgedResources
}

func (a *AbstractGridConfigGoogleCloudConfiguration) GetLaunchDir() *string {
	if a == nil {
		return nil
	}
	return a.LaunchDir
}

func (a *AbstractGridConfigGoogleCloudConfiguration) GetUserName() *string {
	if a == nil {
		return nil
	}
	return a.UserName
}

func (a *AbstractGridConfigGoogleCloudConfiguration) GetHostName() *string {
	if a == nil {
		return nil
	}
	return a.HostName
}

func (a *AbstractGridConfigGoogleCloudConfiguration) GetPort() *int {
	if a == nil {
		return nil
	}
	return a.Port
}

func (a *AbstractGridConfigGoogleCloudConfiguration) GetHeadQueue() *string {
	if a == nil {
		return nil
	}
	return a.HeadQueue
}

func (a *AbstractGridConfigGoogleCloudConfiguration) GetComputeQueue() *string {
	if a == nil {
		return nil
	}
	return a.ComputeQueue
}

func (a *AbstractGridConfigGoogleCloudConfiguration) GetMaxQueueSize() *int {
	if a == nil {
		return nil
	}
	return a.MaxQueueSize
}

func (a *AbstractGridConfigGoogleCloudConfiguration) GetHeadJobOptions() *string {
	if a == nil {
		return nil
	}
	return a.HeadJobOptions
}

func (a *AbstractGridConfigGoogleCloudConfiguration) GetPropagateHeadJobOptions() *bool {
	if a == nil {
		return nil
	}
	return a.PropagateHeadJobOptions
}

type AbstractGridConfigGoogleBatchServiceConfiguration struct {
	// Read-only property identifying the compute platform type
	Discriminator     *string           `json:"discriminator,omitempty"`
	Location          *string           `json:"location,omitempty"`
	WorkDir           *string           `json:"workDir,omitempty"`
	Spot              *bool             `json:"spot,omitempty"`
	BootDiskSizeGb    *int              `json:"bootDiskSizeGb,omitempty"`
	CPUPlatform       *string           `json:"cpuPlatform,omitempty"`
	MachineType       *string           `json:"machineType,omitempty"`
	ProjectID         *string           `json:"projectId,omitempty"`
	SSHDaemon         *bool             `json:"sshDaemon,omitempty"`
	SSHImage          *string           `json:"sshImage,omitempty"`
	DebugMode         *int              `json:"debugMode,omitempty"`
	CopyImage         *string           `json:"copyImage,omitempty"`
	UsePrivateAddress *bool             `json:"usePrivateAddress,omitempty"`
	Labels            map[string]string `json:"labels,omitempty"`
	PreRunScript      *string           `json:"preRunScript,omitempty"`
	PostRunScript     *string           `json:"postRunScript,omitempty"`
	HeadJobCpus       *int              `json:"headJobCpus,omitempty"`
	HeadJobMemoryMb   *int              `json:"headJobMemoryMb,omitempty"`
	NextflowConfig    *string           `json:"nextflowConfig,omitempty"`
	NfsTarget         *string           `json:"nfsTarget,omitempty"`
	NfsMount          *string           `json:"nfsMount,omitempty"`
	// Array of environment variables for the compute environment
	Environment                 []ConfigEnvVariable `json:"environment,omitempty"`
	WaveEnabled                 *bool               `json:"waveEnabled,omitempty"`
	Fusion2Enabled              *bool               `json:"fusion2Enabled,omitempty"`
	ServiceAccount              *string             `json:"serviceAccount,omitempty"`
	Network                     *string             `json:"network,omitempty"`
	Subnetwork                  *string             `json:"subnetwork,omitempty"`
	HeadJobInstanceTemplate     *string             `json:"headJobInstanceTemplate,omitempty"`
	ComputeJobsInstanceTemplate *string             `json:"computeJobsInstanceTemplate,omitempty"`
	LaunchDir                   *string             `json:"launchDir,omitempty"`
	UserName                    *string             `json:"userName,omitempty"`
	HostName                    *string             `json:"hostName,omitempty"`
	Port                        *int                `json:"port,omitempty"`
	HeadQueue                   *string             `json:"headQueue,omitempty"`
	ComputeQueue                *string             `json:"computeQueue,omitempty"`
	MaxQueueSize                *int                `json:"maxQueueSize,omitempty"`
	HeadJobOptions              *string             `json:"headJobOptions,omitempty"`
	PropagateHeadJobOptions     *bool               `json:"propagateHeadJobOptions,omitempty"`
}

func (a AbstractGridConfigGoogleBatchServiceConfiguration) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AbstractGridConfigGoogleBatchServiceConfiguration) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (a *AbstractGridConfigGoogleBatchServiceConfiguration) GetDiscriminator() *string {
	if a == nil {
		return nil
	}
	return a.Discriminator
}

func (a *AbstractGridConfigGoogleBatchServiceConfiguration) GetLocation() *string {
	if a == nil {
		return nil
	}
	return a.Location
}

func (a *AbstractGridConfigGoogleBatchServiceConfiguration) GetWorkDir() *string {
	if a == nil {
		return nil
	}
	return a.WorkDir
}

func (a *AbstractGridConfigGoogleBatchServiceConfiguration) GetSpot() *bool {
	if a == nil {
		return nil
	}
	return a.Spot
}

func (a *AbstractGridConfigGoogleBatchServiceConfiguration) GetBootDiskSizeGb() *int {
	if a == nil {
		return nil
	}
	return a.BootDiskSizeGb
}

func (a *AbstractGridConfigGoogleBatchServiceConfiguration) GetCPUPlatform() *string {
	if a == nil {
		return nil
	}
	return a.CPUPlatform
}

func (a *AbstractGridConfigGoogleBatchServiceConfiguration) GetMachineType() *string {
	if a == nil {
		return nil
	}
	return a.MachineType
}

func (a *AbstractGridConfigGoogleBatchServiceConfiguration) GetProjectID() *string {
	if a == nil {
		return nil
	}
	return a.ProjectID
}

func (a *AbstractGridConfigGoogleBatchServiceConfiguration) GetSSHDaemon() *bool {
	if a == nil {
		return nil
	}
	return a.SSHDaemon
}

func (a *AbstractGridConfigGoogleBatchServiceConfiguration) GetSSHImage() *string {
	if a == nil {
		return nil
	}
	return a.SSHImage
}

func (a *AbstractGridConfigGoogleBatchServiceConfiguration) GetDebugMode() *int {
	if a == nil {
		return nil
	}
	return a.DebugMode
}

func (a *AbstractGridConfigGoogleBatchServiceConfiguration) GetCopyImage() *string {
	if a == nil {
		return nil
	}
	return a.CopyImage
}

func (a *AbstractGridConfigGoogleBatchServiceConfiguration) GetUsePrivateAddress() *bool {
	if a == nil {
		return nil
	}
	return a.UsePrivateAddress
}

func (a *AbstractGridConfigGoogleBatchServiceConfiguration) GetLabels() map[string]string {
	if a == nil {
		return nil
	}
	return a.Labels
}

func (a *AbstractGridConfigGoogleBatchServiceConfiguration) GetPreRunScript() *string {
	if a == nil {
		return nil
	}
	return a.PreRunScript
}

func (a *AbstractGridConfigGoogleBatchServiceConfiguration) GetPostRunScript() *string {
	if a == nil {
		return nil
	}
	return a.PostRunScript
}

func (a *AbstractGridConfigGoogleBatchServiceConfiguration) GetHeadJobCpus() *int {
	if a == nil {
		return nil
	}
	return a.HeadJobCpus
}

func (a *AbstractGridConfigGoogleBatchServiceConfiguration) GetHeadJobMemoryMb() *int {
	if a == nil {
		return nil
	}
	return a.HeadJobMemoryMb
}

func (a *AbstractGridConfigGoogleBatchServiceConfiguration) GetNextflowConfig() *string {
	if a == nil {
		return nil
	}
	return a.NextflowConfig
}

func (a *AbstractGridConfigGoogleBatchServiceConfiguration) GetNfsTarget() *string {
	if a == nil {
		return nil
	}
	return a.NfsTarget
}

func (a *AbstractGridConfigGoogleBatchServiceConfiguration) GetNfsMount() *string {
	if a == nil {
		return nil
	}
	return a.NfsMount
}

func (a *AbstractGridConfigGoogleBatchServiceConfiguration) GetEnvironment() []ConfigEnvVariable {
	if a == nil {
		return nil
	}
	return a.Environment
}

func (a *AbstractGridConfigGoogleBatchServiceConfiguration) GetWaveEnabled() *bool {
	if a == nil {
		return nil
	}
	return a.WaveEnabled
}

func (a *AbstractGridConfigGoogleBatchServiceConfiguration) GetFusion2Enabled() *bool {
	if a == nil {
		return nil
	}
	return a.Fusion2Enabled
}

func (a *AbstractGridConfigGoogleBatchServiceConfiguration) GetServiceAccount() *string {
	if a == nil {
		return nil
	}
	return a.ServiceAccount
}

func (a *AbstractGridConfigGoogleBatchServiceConfiguration) GetNetwork() *string {
	if a == nil {
		return nil
	}
	return a.Network
}

func (a *AbstractGridConfigGoogleBatchServiceConfiguration) GetSubnetwork() *string {
	if a == nil {
		return nil
	}
	return a.Subnetwork
}

func (a *AbstractGridConfigGoogleBatchServiceConfiguration) GetHeadJobInstanceTemplate() *string {
	if a == nil {
		return nil
	}
	return a.HeadJobInstanceTemplate
}

func (a *AbstractGridConfigGoogleBatchServiceConfiguration) GetComputeJobsInstanceTemplate() *string {
	if a == nil {
		return nil
	}
	return a.ComputeJobsInstanceTemplate
}

func (a *AbstractGridConfigGoogleBatchServiceConfiguration) GetLaunchDir() *string {
	if a == nil {
		return nil
	}
	return a.LaunchDir
}

func (a *AbstractGridConfigGoogleBatchServiceConfiguration) GetUserName() *string {
	if a == nil {
		return nil
	}
	return a.UserName
}

func (a *AbstractGridConfigGoogleBatchServiceConfiguration) GetHostName() *string {
	if a == nil {
		return nil
	}
	return a.HostName
}

func (a *AbstractGridConfigGoogleBatchServiceConfiguration) GetPort() *int {
	if a == nil {
		return nil
	}
	return a.Port
}

func (a *AbstractGridConfigGoogleBatchServiceConfiguration) GetHeadQueue() *string {
	if a == nil {
		return nil
	}
	return a.HeadQueue
}

func (a *AbstractGridConfigGoogleBatchServiceConfiguration) GetComputeQueue() *string {
	if a == nil {
		return nil
	}
	return a.ComputeQueue
}

func (a *AbstractGridConfigGoogleBatchServiceConfiguration) GetMaxQueueSize() *int {
	if a == nil {
		return nil
	}
	return a.MaxQueueSize
}

func (a *AbstractGridConfigGoogleBatchServiceConfiguration) GetHeadJobOptions() *string {
	if a == nil {
		return nil
	}
	return a.HeadJobOptions
}

func (a *AbstractGridConfigGoogleBatchServiceConfiguration) GetPropagateHeadJobOptions() *bool {
	if a == nil {
		return nil
	}
	return a.PropagateHeadJobOptions
}

type AbstractGridConfigGoogleLifeSciencesConfiguration struct {
	// Read-only property identifying the compute platform type
	Discriminator     *string           `json:"discriminator,omitempty"`
	Region            *string           `json:"region,omitempty"`
	Zones             []string          `json:"zones,omitempty"`
	Location          *string           `json:"location,omitempty"`
	WorkDir           *string           `json:"workDir,omitempty"`
	Preemptible       *bool             `json:"preemptible,omitempty"`
	BootDiskSizeGb    *int              `json:"bootDiskSizeGb,omitempty"`
	ProjectID         *string           `json:"projectId,omitempty"`
	SSHDaemon         *bool             `json:"sshDaemon,omitempty"`
	SSHImage          *string           `json:"sshImage,omitempty"`
	DebugMode         *int              `json:"debugMode,omitempty"`
	CopyImage         *string           `json:"copyImage,omitempty"`
	UsePrivateAddress *bool             `json:"usePrivateAddress,omitempty"`
	Labels            map[string]string `json:"labels,omitempty"`
	PreRunScript      *string           `json:"preRunScript,omitempty"`
	PostRunScript     *string           `json:"postRunScript,omitempty"`
	HeadJobCpus       *int              `json:"headJobCpus,omitempty"`
	HeadJobMemoryMb   *int              `json:"headJobMemoryMb,omitempty"`
	NextflowConfig    *string           `json:"nextflowConfig,omitempty"`
	NfsTarget         *string           `json:"nfsTarget,omitempty"`
	NfsMount          *string           `json:"nfsMount,omitempty"`
	// Array of environment variables for the compute environment
	Environment             []ConfigEnvVariable `json:"environment,omitempty"`
	LaunchDir               *string             `json:"launchDir,omitempty"`
	UserName                *string             `json:"userName,omitempty"`
	HostName                *string             `json:"hostName,omitempty"`
	Port                    *int                `json:"port,omitempty"`
	HeadQueue               *string             `json:"headQueue,omitempty"`
	ComputeQueue            *string             `json:"computeQueue,omitempty"`
	MaxQueueSize            *int                `json:"maxQueueSize,omitempty"`
	HeadJobOptions          *string             `json:"headJobOptions,omitempty"`
	PropagateHeadJobOptions *bool               `json:"propagateHeadJobOptions,omitempty"`
}

func (a AbstractGridConfigGoogleLifeSciencesConfiguration) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AbstractGridConfigGoogleLifeSciencesConfiguration) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (a *AbstractGridConfigGoogleLifeSciencesConfiguration) GetDiscriminator() *string {
	if a == nil {
		return nil
	}
	return a.Discriminator
}

func (a *AbstractGridConfigGoogleLifeSciencesConfiguration) GetRegion() *string {
	if a == nil {
		return nil
	}
	return a.Region
}

func (a *AbstractGridConfigGoogleLifeSciencesConfiguration) GetZones() []string {
	if a == nil {
		return nil
	}
	return a.Zones
}

func (a *AbstractGridConfigGoogleLifeSciencesConfiguration) GetLocation() *string {
	if a == nil {
		return nil
	}
	return a.Location
}

func (a *AbstractGridConfigGoogleLifeSciencesConfiguration) GetWorkDir() *string {
	if a == nil {
		return nil
	}
	return a.WorkDir
}

func (a *AbstractGridConfigGoogleLifeSciencesConfiguration) GetPreemptible() *bool {
	if a == nil {
		return nil
	}
	return a.Preemptible
}

func (a *AbstractGridConfigGoogleLifeSciencesConfiguration) GetBootDiskSizeGb() *int {
	if a == nil {
		return nil
	}
	return a.BootDiskSizeGb
}

func (a *AbstractGridConfigGoogleLifeSciencesConfiguration) GetProjectID() *string {
	if a == nil {
		return nil
	}
	return a.ProjectID
}

func (a *AbstractGridConfigGoogleLifeSciencesConfiguration) GetSSHDaemon() *bool {
	if a == nil {
		return nil
	}
	return a.SSHDaemon
}

func (a *AbstractGridConfigGoogleLifeSciencesConfiguration) GetSSHImage() *string {
	if a == nil {
		return nil
	}
	return a.SSHImage
}

func (a *AbstractGridConfigGoogleLifeSciencesConfiguration) GetDebugMode() *int {
	if a == nil {
		return nil
	}
	return a.DebugMode
}

func (a *AbstractGridConfigGoogleLifeSciencesConfiguration) GetCopyImage() *string {
	if a == nil {
		return nil
	}
	return a.CopyImage
}

func (a *AbstractGridConfigGoogleLifeSciencesConfiguration) GetUsePrivateAddress() *bool {
	if a == nil {
		return nil
	}
	return a.UsePrivateAddress
}

func (a *AbstractGridConfigGoogleLifeSciencesConfiguration) GetLabels() map[string]string {
	if a == nil {
		return nil
	}
	return a.Labels
}

func (a *AbstractGridConfigGoogleLifeSciencesConfiguration) GetPreRunScript() *string {
	if a == nil {
		return nil
	}
	return a.PreRunScript
}

func (a *AbstractGridConfigGoogleLifeSciencesConfiguration) GetPostRunScript() *string {
	if a == nil {
		return nil
	}
	return a.PostRunScript
}

func (a *AbstractGridConfigGoogleLifeSciencesConfiguration) GetHeadJobCpus() *int {
	if a == nil {
		return nil
	}
	return a.HeadJobCpus
}

func (a *AbstractGridConfigGoogleLifeSciencesConfiguration) GetHeadJobMemoryMb() *int {
	if a == nil {
		return nil
	}
	return a.HeadJobMemoryMb
}

func (a *AbstractGridConfigGoogleLifeSciencesConfiguration) GetNextflowConfig() *string {
	if a == nil {
		return nil
	}
	return a.NextflowConfig
}

func (a *AbstractGridConfigGoogleLifeSciencesConfiguration) GetNfsTarget() *string {
	if a == nil {
		return nil
	}
	return a.NfsTarget
}

func (a *AbstractGridConfigGoogleLifeSciencesConfiguration) GetNfsMount() *string {
	if a == nil {
		return nil
	}
	return a.NfsMount
}

func (a *AbstractGridConfigGoogleLifeSciencesConfiguration) GetEnvironment() []ConfigEnvVariable {
	if a == nil {
		return nil
	}
	return a.Environment
}

func (a *AbstractGridConfigGoogleLifeSciencesConfiguration) GetLaunchDir() *string {
	if a == nil {
		return nil
	}
	return a.LaunchDir
}

func (a *AbstractGridConfigGoogleLifeSciencesConfiguration) GetUserName() *string {
	if a == nil {
		return nil
	}
	return a.UserName
}

func (a *AbstractGridConfigGoogleLifeSciencesConfiguration) GetHostName() *string {
	if a == nil {
		return nil
	}
	return a.HostName
}

func (a *AbstractGridConfigGoogleLifeSciencesConfiguration) GetPort() *int {
	if a == nil {
		return nil
	}
	return a.Port
}

func (a *AbstractGridConfigGoogleLifeSciencesConfiguration) GetHeadQueue() *string {
	if a == nil {
		return nil
	}
	return a.HeadQueue
}

func (a *AbstractGridConfigGoogleLifeSciencesConfiguration) GetComputeQueue() *string {
	if a == nil {
		return nil
	}
	return a.ComputeQueue
}

func (a *AbstractGridConfigGoogleLifeSciencesConfiguration) GetMaxQueueSize() *int {
	if a == nil {
		return nil
	}
	return a.MaxQueueSize
}

func (a *AbstractGridConfigGoogleLifeSciencesConfiguration) GetHeadJobOptions() *string {
	if a == nil {
		return nil
	}
	return a.HeadJobOptions
}

func (a *AbstractGridConfigGoogleLifeSciencesConfiguration) GetPropagateHeadJobOptions() *bool {
	if a == nil {
		return nil
	}
	return a.PropagateHeadJobOptions
}

type AbstractGridConfigSeqeraComputeConfiguration struct {
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	StorageType *string `json:"storageType,omitempty"`
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	LustreID *string  `json:"lustreId,omitempty"`
	Volumes  []string `json:"volumes,omitempty"`
	// Read-only property identifying the compute platform type
	Discriminator *string `json:"discriminator,omitempty"`
	// AWS region where the compute environment will be deployed. This field is required and must be provided
	Region             string  `json:"region"`
	ComputeQueue       *string `json:"computeQueue,omitempty"`
	DragenQueue        *string `json:"dragenQueue,omitempty"`
	DragenInstanceType *string `json:"dragenInstanceType,omitempty"`
	ComputeJobRole     *string `json:"computeJobRole,omitempty"`
	ExecutionRole      *string `json:"executionRole,omitempty"`
	HeadQueue          *string `json:"headQueue,omitempty"`
	HeadJobRole        *string `json:"headJobRole,omitempty"`
	CliPath            *string `json:"cliPath,omitempty"`
	WorkDir            *string `json:"workDir,omitempty"`
	PreRunScript       *string `json:"preRunScript,omitempty"`
	PostRunScript      *string `json:"postRunScript,omitempty"`
	HeadJobCpus        *int    `json:"headJobCpus,omitempty"`
	HeadJobMemoryMb    *int    `json:"headJobMemoryMb,omitempty"`
	// Array of environment variables for the compute environment
	Environment             []ConfigEnvVariable `json:"environment,omitempty"`
	WaveEnabled             *bool               `json:"waveEnabled,omitempty"`
	Fusion2Enabled          *bool               `json:"fusion2Enabled,omitempty"`
	NvnmeStorageEnabled     *bool               `json:"nvnmeStorageEnabled,omitempty"`
	LogGroup                *string             `json:"logGroup,omitempty"`
	NextflowConfig          *string             `json:"nextflowConfig,omitempty"`
	FusionSnapshots         *bool               `json:"fusionSnapshots,omitempty"`
	Forge                   *ForgeConfig        `json:"forge,omitempty"`
	ForgedResources         []map[string]any    `json:"forgedResources,omitempty"`
	LaunchDir               *string             `json:"launchDir,omitempty"`
	UserName                *string             `json:"userName,omitempty"`
	HostName                *string             `json:"hostName,omitempty"`
	Port                    *int                `json:"port,omitempty"`
	MaxQueueSize            *int                `json:"maxQueueSize,omitempty"`
	HeadJobOptions          *string             `json:"headJobOptions,omitempty"`
	PropagateHeadJobOptions *bool               `json:"propagateHeadJobOptions,omitempty"`
}

func (a AbstractGridConfigSeqeraComputeConfiguration) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AbstractGridConfigSeqeraComputeConfiguration) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, []string{"region"}); err != nil {
		return err
	}
	return nil
}

func (a *AbstractGridConfigSeqeraComputeConfiguration) GetStorageType() *string {
	if a == nil {
		return nil
	}
	return a.StorageType
}

func (a *AbstractGridConfigSeqeraComputeConfiguration) GetLustreID() *string {
	if a == nil {
		return nil
	}
	return a.LustreID
}

func (a *AbstractGridConfigSeqeraComputeConfiguration) GetVolumes() []string {
	if a == nil {
		return nil
	}
	return a.Volumes
}

func (a *AbstractGridConfigSeqeraComputeConfiguration) GetDiscriminator() *string {
	if a == nil {
		return nil
	}
	return a.Discriminator
}

func (a *AbstractGridConfigSeqeraComputeConfiguration) GetRegion() string {
	if a == nil {
		return ""
	}
	return a.Region
}

func (a *AbstractGridConfigSeqeraComputeConfiguration) GetComputeQueue() *string {
	if a == nil {
		return nil
	}
	return a.ComputeQueue
}

func (a *AbstractGridConfigSeqeraComputeConfiguration) GetDragenQueue() *string {
	if a == nil {
		return nil
	}
	return a.DragenQueue
}

func (a *AbstractGridConfigSeqeraComputeConfiguration) GetDragenInstanceType() *string {
	if a == nil {
		return nil
	}
	return a.DragenInstanceType
}

func (a *AbstractGridConfigSeqeraComputeConfiguration) GetComputeJobRole() *string {
	if a == nil {
		return nil
	}
	return a.ComputeJobRole
}

func (a *AbstractGridConfigSeqeraComputeConfiguration) GetExecutionRole() *string {
	if a == nil {
		return nil
	}
	return a.ExecutionRole
}

func (a *AbstractGridConfigSeqeraComputeConfiguration) GetHeadQueue() *string {
	if a == nil {
		return nil
	}
	return a.HeadQueue
}

func (a *AbstractGridConfigSeqeraComputeConfiguration) GetHeadJobRole() *string {
	if a == nil {
		return nil
	}
	return a.HeadJobRole
}

func (a *AbstractGridConfigSeqeraComputeConfiguration) GetCliPath() *string {
	if a == nil {
		return nil
	}
	return a.CliPath
}

func (a *AbstractGridConfigSeqeraComputeConfiguration) GetWorkDir() *string {
	if a == nil {
		return nil
	}
	return a.WorkDir
}

func (a *AbstractGridConfigSeqeraComputeConfiguration) GetPreRunScript() *string {
	if a == nil {
		return nil
	}
	return a.PreRunScript
}

func (a *AbstractGridConfigSeqeraComputeConfiguration) GetPostRunScript() *string {
	if a == nil {
		return nil
	}
	return a.PostRunScript
}

func (a *AbstractGridConfigSeqeraComputeConfiguration) GetHeadJobCpus() *int {
	if a == nil {
		return nil
	}
	return a.HeadJobCpus
}

func (a *AbstractGridConfigSeqeraComputeConfiguration) GetHeadJobMemoryMb() *int {
	if a == nil {
		return nil
	}
	return a.HeadJobMemoryMb
}

func (a *AbstractGridConfigSeqeraComputeConfiguration) GetEnvironment() []ConfigEnvVariable {
	if a == nil {
		return nil
	}
	return a.Environment
}

func (a *AbstractGridConfigSeqeraComputeConfiguration) GetWaveEnabled() *bool {
	if a == nil {
		return nil
	}
	return a.WaveEnabled
}

func (a *AbstractGridConfigSeqeraComputeConfiguration) GetFusion2Enabled() *bool {
	if a == nil {
		return nil
	}
	return a.Fusion2Enabled
}

func (a *AbstractGridConfigSeqeraComputeConfiguration) GetNvnmeStorageEnabled() *bool {
	if a == nil {
		return nil
	}
	return a.NvnmeStorageEnabled
}

func (a *AbstractGridConfigSeqeraComputeConfiguration) GetLogGroup() *string {
	if a == nil {
		return nil
	}
	return a.LogGroup
}

func (a *AbstractGridConfigSeqeraComputeConfiguration) GetNextflowConfig() *string {
	if a == nil {
		return nil
	}
	return a.NextflowConfig
}

func (a *AbstractGridConfigSeqeraComputeConfiguration) GetFusionSnapshots() *bool {
	if a == nil {
		return nil
	}
	return a.FusionSnapshots
}

func (a *AbstractGridConfigSeqeraComputeConfiguration) GetForge() *ForgeConfig {
	if a == nil {
		return nil
	}
	return a.Forge
}

func (a *AbstractGridConfigSeqeraComputeConfiguration) GetForgedResources() []map[string]any {
	if a == nil {
		return nil
	}
	return a.ForgedResources
}

func (a *AbstractGridConfigSeqeraComputeConfiguration) GetLaunchDir() *string {
	if a == nil {
		return nil
	}
	return a.LaunchDir
}

func (a *AbstractGridConfigSeqeraComputeConfiguration) GetUserName() *string {
	if a == nil {
		return nil
	}
	return a.UserName
}

func (a *AbstractGridConfigSeqeraComputeConfiguration) GetHostName() *string {
	if a == nil {
		return nil
	}
	return a.HostName
}

func (a *AbstractGridConfigSeqeraComputeConfiguration) GetPort() *int {
	if a == nil {
		return nil
	}
	return a.Port
}

func (a *AbstractGridConfigSeqeraComputeConfiguration) GetMaxQueueSize() *int {
	if a == nil {
		return nil
	}
	return a.MaxQueueSize
}

func (a *AbstractGridConfigSeqeraComputeConfiguration) GetHeadJobOptions() *string {
	if a == nil {
		return nil
	}
	return a.HeadJobOptions
}

func (a *AbstractGridConfigSeqeraComputeConfiguration) GetPropagateHeadJobOptions() *bool {
	if a == nil {
		return nil
	}
	return a.PropagateHeadJobOptions
}

type AbstractGridConfigAWSCloudConfiguration struct {
	// Read-only property identifying the compute platform type
	Discriminator *string  `json:"discriminator,omitempty"`
	AllowBuckets  []string `json:"allowBuckets,omitempty"`
	// AWS region where the compute environment will be deployed. This field is required and must be provided
	Region         string  `json:"region"`
	InstanceType   *string `json:"instanceType,omitempty"`
	ImageID        *string `json:"imageId,omitempty"`
	WorkDir        *string `json:"workDir,omitempty"`
	PreRunScript   *string `json:"preRunScript,omitempty"`
	PostRunScript  *string `json:"postRunScript,omitempty"`
	NextflowConfig *string `json:"nextflowConfig,omitempty"`
	// Array of environment variables for the compute environment
	Environment             []ConfigEnvVariable `json:"environment,omitempty"`
	WaveEnabled             *bool               `json:"waveEnabled,omitempty"`
	Fusion2Enabled          *bool               `json:"fusion2Enabled,omitempty"`
	LogGroup                *string             `json:"logGroup,omitempty"`
	Arm64Enabled            *bool               `json:"arm64Enabled,omitempty"`
	GpuEnabled              *bool               `json:"gpuEnabled,omitempty"`
	Ec2KeyPair              *string             `json:"ec2KeyPair,omitempty"`
	EbsBootSize             *int                `json:"ebsBootSize,omitempty"`
	InstanceProfileArn      *string             `json:"instanceProfileArn,omitempty"`
	SubnetID                *string             `json:"subnetId,omitempty"`
	SecurityGroups          []string            `json:"securityGroups,omitempty"`
	ForgedResources         []map[string]any    `json:"forgedResources,omitempty"`
	LaunchDir               *string             `json:"launchDir,omitempty"`
	UserName                *string             `json:"userName,omitempty"`
	HostName                *string             `json:"hostName,omitempty"`
	Port                    *int                `json:"port,omitempty"`
	HeadQueue               *string             `json:"headQueue,omitempty"`
	ComputeQueue            *string             `json:"computeQueue,omitempty"`
	MaxQueueSize            *int                `json:"maxQueueSize,omitempty"`
	HeadJobOptions          *string             `json:"headJobOptions,omitempty"`
	PropagateHeadJobOptions *bool               `json:"propagateHeadJobOptions,omitempty"`
}

func (a AbstractGridConfigAWSCloudConfiguration) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AbstractGridConfigAWSCloudConfiguration) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, []string{"region"}); err != nil {
		return err
	}
	return nil
}

func (a *AbstractGridConfigAWSCloudConfiguration) GetDiscriminator() *string {
	if a == nil {
		return nil
	}
	return a.Discriminator
}

func (a *AbstractGridConfigAWSCloudConfiguration) GetAllowBuckets() []string {
	if a == nil {
		return nil
	}
	return a.AllowBuckets
}

func (a *AbstractGridConfigAWSCloudConfiguration) GetRegion() string {
	if a == nil {
		return ""
	}
	return a.Region
}

func (a *AbstractGridConfigAWSCloudConfiguration) GetInstanceType() *string {
	if a == nil {
		return nil
	}
	return a.InstanceType
}

func (a *AbstractGridConfigAWSCloudConfiguration) GetImageID() *string {
	if a == nil {
		return nil
	}
	return a.ImageID
}

func (a *AbstractGridConfigAWSCloudConfiguration) GetWorkDir() *string {
	if a == nil {
		return nil
	}
	return a.WorkDir
}

func (a *AbstractGridConfigAWSCloudConfiguration) GetPreRunScript() *string {
	if a == nil {
		return nil
	}
	return a.PreRunScript
}

func (a *AbstractGridConfigAWSCloudConfiguration) GetPostRunScript() *string {
	if a == nil {
		return nil
	}
	return a.PostRunScript
}

func (a *AbstractGridConfigAWSCloudConfiguration) GetNextflowConfig() *string {
	if a == nil {
		return nil
	}
	return a.NextflowConfig
}

func (a *AbstractGridConfigAWSCloudConfiguration) GetEnvironment() []ConfigEnvVariable {
	if a == nil {
		return nil
	}
	return a.Environment
}

func (a *AbstractGridConfigAWSCloudConfiguration) GetWaveEnabled() *bool {
	if a == nil {
		return nil
	}
	return a.WaveEnabled
}

func (a *AbstractGridConfigAWSCloudConfiguration) GetFusion2Enabled() *bool {
	if a == nil {
		return nil
	}
	return a.Fusion2Enabled
}

func (a *AbstractGridConfigAWSCloudConfiguration) GetLogGroup() *string {
	if a == nil {
		return nil
	}
	return a.LogGroup
}

func (a *AbstractGridConfigAWSCloudConfiguration) GetArm64Enabled() *bool {
	if a == nil {
		return nil
	}
	return a.Arm64Enabled
}

func (a *AbstractGridConfigAWSCloudConfiguration) GetGpuEnabled() *bool {
	if a == nil {
		return nil
	}
	return a.GpuEnabled
}

func (a *AbstractGridConfigAWSCloudConfiguration) GetEc2KeyPair() *string {
	if a == nil {
		return nil
	}
	return a.Ec2KeyPair
}

func (a *AbstractGridConfigAWSCloudConfiguration) GetEbsBootSize() *int {
	if a == nil {
		return nil
	}
	return a.EbsBootSize
}

func (a *AbstractGridConfigAWSCloudConfiguration) GetInstanceProfileArn() *string {
	if a == nil {
		return nil
	}
	return a.InstanceProfileArn
}

func (a *AbstractGridConfigAWSCloudConfiguration) GetSubnetID() *string {
	if a == nil {
		return nil
	}
	return a.SubnetID
}

func (a *AbstractGridConfigAWSCloudConfiguration) GetSecurityGroups() []string {
	if a == nil {
		return nil
	}
	return a.SecurityGroups
}

func (a *AbstractGridConfigAWSCloudConfiguration) GetForgedResources() []map[string]any {
	if a == nil {
		return nil
	}
	return a.ForgedResources
}

func (a *AbstractGridConfigAWSCloudConfiguration) GetLaunchDir() *string {
	if a == nil {
		return nil
	}
	return a.LaunchDir
}

func (a *AbstractGridConfigAWSCloudConfiguration) GetUserName() *string {
	if a == nil {
		return nil
	}
	return a.UserName
}

func (a *AbstractGridConfigAWSCloudConfiguration) GetHostName() *string {
	if a == nil {
		return nil
	}
	return a.HostName
}

func (a *AbstractGridConfigAWSCloudConfiguration) GetPort() *int {
	if a == nil {
		return nil
	}
	return a.Port
}

func (a *AbstractGridConfigAWSCloudConfiguration) GetHeadQueue() *string {
	if a == nil {
		return nil
	}
	return a.HeadQueue
}

func (a *AbstractGridConfigAWSCloudConfiguration) GetComputeQueue() *string {
	if a == nil {
		return nil
	}
	return a.ComputeQueue
}

func (a *AbstractGridConfigAWSCloudConfiguration) GetMaxQueueSize() *int {
	if a == nil {
		return nil
	}
	return a.MaxQueueSize
}

func (a *AbstractGridConfigAWSCloudConfiguration) GetHeadJobOptions() *string {
	if a == nil {
		return nil
	}
	return a.HeadJobOptions
}

func (a *AbstractGridConfigAWSCloudConfiguration) GetPropagateHeadJobOptions() *bool {
	if a == nil {
		return nil
	}
	return a.PropagateHeadJobOptions
}

type AbstractGridConfigAWSBatchConfiguration struct {
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	StorageType *string `json:"storageType,omitempty"`
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	LustreID *string  `json:"lustreId,omitempty"`
	Volumes  []string `json:"volumes,omitempty"`
	// Read-only property identifying the compute platform type
	Discriminator *string `json:"discriminator,omitempty"`
	// AWS region where the compute environment will be deployed. This field is required and must be provided
	Region             string  `json:"region"`
	ComputeQueue       *string `json:"computeQueue,omitempty"`
	DragenQueue        *string `json:"dragenQueue,omitempty"`
	DragenInstanceType *string `json:"dragenInstanceType,omitempty"`
	ComputeJobRole     *string `json:"computeJobRole,omitempty"`
	ExecutionRole      *string `json:"executionRole,omitempty"`
	HeadQueue          *string `json:"headQueue,omitempty"`
	HeadJobRole        *string `json:"headJobRole,omitempty"`
	CliPath            *string `json:"cliPath,omitempty"`
	WorkDir            *string `json:"workDir,omitempty"`
	PreRunScript       *string `json:"preRunScript,omitempty"`
	PostRunScript      *string `json:"postRunScript,omitempty"`
	HeadJobCpus        *int    `json:"headJobCpus,omitempty"`
	HeadJobMemoryMb    *int    `json:"headJobMemoryMb,omitempty"`
	// Array of environment variables for the compute environment
	Environment             []ConfigEnvVariable `json:"environment,omitempty"`
	WaveEnabled             *bool               `json:"waveEnabled,omitempty"`
	Fusion2Enabled          *bool               `json:"fusion2Enabled,omitempty"`
	NvnmeStorageEnabled     *bool               `json:"nvnmeStorageEnabled,omitempty"`
	LogGroup                *string             `json:"logGroup,omitempty"`
	NextflowConfig          *string             `json:"nextflowConfig,omitempty"`
	FusionSnapshots         *bool               `json:"fusionSnapshots,omitempty"`
	Forge                   *ForgeConfig        `json:"forge,omitempty"`
	ForgedResources         []map[string]any    `json:"forgedResources,omitempty"`
	LaunchDir               *string             `json:"launchDir,omitempty"`
	UserName                *string             `json:"userName,omitempty"`
	HostName                *string             `json:"hostName,omitempty"`
	Port                    *int                `json:"port,omitempty"`
	MaxQueueSize            *int                `json:"maxQueueSize,omitempty"`
	HeadJobOptions          *string             `json:"headJobOptions,omitempty"`
	PropagateHeadJobOptions *bool               `json:"propagateHeadJobOptions,omitempty"`
}

func (a AbstractGridConfigAWSBatchConfiguration) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AbstractGridConfigAWSBatchConfiguration) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, []string{"region"}); err != nil {
		return err
	}
	return nil
}

func (a *AbstractGridConfigAWSBatchConfiguration) GetStorageType() *string {
	if a == nil {
		return nil
	}
	return a.StorageType
}

func (a *AbstractGridConfigAWSBatchConfiguration) GetLustreID() *string {
	if a == nil {
		return nil
	}
	return a.LustreID
}

func (a *AbstractGridConfigAWSBatchConfiguration) GetVolumes() []string {
	if a == nil {
		return nil
	}
	return a.Volumes
}

func (a *AbstractGridConfigAWSBatchConfiguration) GetDiscriminator() *string {
	if a == nil {
		return nil
	}
	return a.Discriminator
}

func (a *AbstractGridConfigAWSBatchConfiguration) GetRegion() string {
	if a == nil {
		return ""
	}
	return a.Region
}

func (a *AbstractGridConfigAWSBatchConfiguration) GetComputeQueue() *string {
	if a == nil {
		return nil
	}
	return a.ComputeQueue
}

func (a *AbstractGridConfigAWSBatchConfiguration) GetDragenQueue() *string {
	if a == nil {
		return nil
	}
	return a.DragenQueue
}

func (a *AbstractGridConfigAWSBatchConfiguration) GetDragenInstanceType() *string {
	if a == nil {
		return nil
	}
	return a.DragenInstanceType
}

func (a *AbstractGridConfigAWSBatchConfiguration) GetComputeJobRole() *string {
	if a == nil {
		return nil
	}
	return a.ComputeJobRole
}

func (a *AbstractGridConfigAWSBatchConfiguration) GetExecutionRole() *string {
	if a == nil {
		return nil
	}
	return a.ExecutionRole
}

func (a *AbstractGridConfigAWSBatchConfiguration) GetHeadQueue() *string {
	if a == nil {
		return nil
	}
	return a.HeadQueue
}

func (a *AbstractGridConfigAWSBatchConfiguration) GetHeadJobRole() *string {
	if a == nil {
		return nil
	}
	return a.HeadJobRole
}

func (a *AbstractGridConfigAWSBatchConfiguration) GetCliPath() *string {
	if a == nil {
		return nil
	}
	return a.CliPath
}

func (a *AbstractGridConfigAWSBatchConfiguration) GetWorkDir() *string {
	if a == nil {
		return nil
	}
	return a.WorkDir
}

func (a *AbstractGridConfigAWSBatchConfiguration) GetPreRunScript() *string {
	if a == nil {
		return nil
	}
	return a.PreRunScript
}

func (a *AbstractGridConfigAWSBatchConfiguration) GetPostRunScript() *string {
	if a == nil {
		return nil
	}
	return a.PostRunScript
}

func (a *AbstractGridConfigAWSBatchConfiguration) GetHeadJobCpus() *int {
	if a == nil {
		return nil
	}
	return a.HeadJobCpus
}

func (a *AbstractGridConfigAWSBatchConfiguration) GetHeadJobMemoryMb() *int {
	if a == nil {
		return nil
	}
	return a.HeadJobMemoryMb
}

func (a *AbstractGridConfigAWSBatchConfiguration) GetEnvironment() []ConfigEnvVariable {
	if a == nil {
		return nil
	}
	return a.Environment
}

func (a *AbstractGridConfigAWSBatchConfiguration) GetWaveEnabled() *bool {
	if a == nil {
		return nil
	}
	return a.WaveEnabled
}

func (a *AbstractGridConfigAWSBatchConfiguration) GetFusion2Enabled() *bool {
	if a == nil {
		return nil
	}
	return a.Fusion2Enabled
}

func (a *AbstractGridConfigAWSBatchConfiguration) GetNvnmeStorageEnabled() *bool {
	if a == nil {
		return nil
	}
	return a.NvnmeStorageEnabled
}

func (a *AbstractGridConfigAWSBatchConfiguration) GetLogGroup() *string {
	if a == nil {
		return nil
	}
	return a.LogGroup
}

func (a *AbstractGridConfigAWSBatchConfiguration) GetNextflowConfig() *string {
	if a == nil {
		return nil
	}
	return a.NextflowConfig
}

func (a *AbstractGridConfigAWSBatchConfiguration) GetFusionSnapshots() *bool {
	if a == nil {
		return nil
	}
	return a.FusionSnapshots
}

func (a *AbstractGridConfigAWSBatchConfiguration) GetForge() *ForgeConfig {
	if a == nil {
		return nil
	}
	return a.Forge
}

func (a *AbstractGridConfigAWSBatchConfiguration) GetForgedResources() []map[string]any {
	if a == nil {
		return nil
	}
	return a.ForgedResources
}

func (a *AbstractGridConfigAWSBatchConfiguration) GetLaunchDir() *string {
	if a == nil {
		return nil
	}
	return a.LaunchDir
}

func (a *AbstractGridConfigAWSBatchConfiguration) GetUserName() *string {
	if a == nil {
		return nil
	}
	return a.UserName
}

func (a *AbstractGridConfigAWSBatchConfiguration) GetHostName() *string {
	if a == nil {
		return nil
	}
	return a.HostName
}

func (a *AbstractGridConfigAWSBatchConfiguration) GetPort() *int {
	if a == nil {
		return nil
	}
	return a.Port
}

func (a *AbstractGridConfigAWSBatchConfiguration) GetMaxQueueSize() *int {
	if a == nil {
		return nil
	}
	return a.MaxQueueSize
}

func (a *AbstractGridConfigAWSBatchConfiguration) GetHeadJobOptions() *string {
	if a == nil {
		return nil
	}
	return a.HeadJobOptions
}

func (a *AbstractGridConfigAWSBatchConfiguration) GetPropagateHeadJobOptions() *bool {
	if a == nil {
		return nil
	}
	return a.PropagateHeadJobOptions
}

type AbstractGridConfigType string

const (
	AbstractGridConfigTypeMoabPlatform          AbstractGridConfigType = "moab-platform"
	AbstractGridConfigTypeAwsBatch              AbstractGridConfigType = "aws-batch"
	AbstractGridConfigTypeLocalPlatform         AbstractGridConfigType = "local-platform"
	AbstractGridConfigTypeGkePlatform           AbstractGridConfigType = "gke-platform"
	AbstractGridConfigTypeGoogleBatch           AbstractGridConfigType = "google-batch"
	AbstractGridConfigTypeAwsCloud              AbstractGridConfigType = "aws-cloud"
	AbstractGridConfigTypeSlurmPlatform         AbstractGridConfigType = "slurm-platform"
	AbstractGridConfigTypeK8sPlatform           AbstractGridConfigType = "k8s-platform"
	AbstractGridConfigTypeAltairPlatform        AbstractGridConfigType = "altair-platform"
	AbstractGridConfigTypeLsfPlatform           AbstractGridConfigType = "lsf-platform"
	AbstractGridConfigTypeAzureBatch            AbstractGridConfigType = "azure-batch"
	AbstractGridConfigTypeSeqeracomputePlatform AbstractGridConfigType = "seqeracompute-platform"
	AbstractGridConfigTypeEksPlatform           AbstractGridConfigType = "eks-platform"
	AbstractGridConfigTypeGoogleLifesciences    AbstractGridConfigType = "google-lifesciences"
	AbstractGridConfigTypeUgePlatform           AbstractGridConfigType = "uge-platform"
)

// AbstractGridConfig - Configuration settings for compute environments including work directories,
// pre/post run scripts, and environment-specific parameters.
type AbstractGridConfig struct {
	AbstractGridConfigAWSBatchConfiguration           *AbstractGridConfigAWSBatchConfiguration           `queryParam:"inline,name=AbstractGridConfig"`
	AbstractGridConfigAWSCloudConfiguration           *AbstractGridConfigAWSCloudConfiguration           `queryParam:"inline,name=AbstractGridConfig"`
	AbstractGridConfigSeqeraComputeConfiguration      *AbstractGridConfigSeqeraComputeConfiguration      `queryParam:"inline,name=AbstractGridConfig"`
	AbstractGridConfigGoogleLifeSciencesConfiguration *AbstractGridConfigGoogleLifeSciencesConfiguration `queryParam:"inline,name=AbstractGridConfig"`
	AbstractGridConfigGoogleBatchServiceConfiguration *AbstractGridConfigGoogleBatchServiceConfiguration `queryParam:"inline,name=AbstractGridConfig"`
	AbstractGridConfigGoogleCloudConfiguration        *AbstractGridConfigGoogleCloudConfiguration        `queryParam:"inline,name=AbstractGridConfig"`
	AbstractGridConfigAzureBatchConfiguration         *AbstractGridConfigAzureBatchConfiguration         `queryParam:"inline,name=AbstractGridConfig"`
	AbstractGridConfigAzureCloudConfiguration         *AbstractGridConfigAzureCloudConfiguration         `queryParam:"inline,name=AbstractGridConfig"`
	AbstractGridConfigIBMLSFConfiguration             *AbstractGridConfigIBMLSFConfiguration             `queryParam:"inline,name=AbstractGridConfig"`
	AbstractGridConfigSlurmConfiguration              *AbstractGridConfigSlurmConfiguration              `queryParam:"inline,name=AbstractGridConfig"`
	AbstractGridConfigKubernetesComputeConfiguration  *AbstractGridConfigKubernetesComputeConfiguration  `queryParam:"inline,name=AbstractGridConfig"`
	AbstractGridConfigAmazonEKSClusterConfiguration   *AbstractGridConfigAmazonEKSClusterConfiguration   `queryParam:"inline,name=AbstractGridConfig"`
	AbstractGridConfigGoogleGKEClusterConfiguration   *AbstractGridConfigGoogleGKEClusterConfiguration   `queryParam:"inline,name=AbstractGridConfig"`
	AbstractGridConfigUnivaGridEngineConfiguration    *AbstractGridConfigUnivaGridEngineConfiguration    `queryParam:"inline,name=AbstractGridConfig"`
	AbstractGridConfigAltairPBSConfiguration          *AbstractGridConfigAltairPBSConfiguration          `queryParam:"inline,name=AbstractGridConfig"`
	AbstractGridConfigMoabConfiguration               *AbstractGridConfigMoabConfiguration               `queryParam:"inline,name=AbstractGridConfig"`
	AbstractGridConfigLocalExecutionConfiguration     *AbstractGridConfigLocalExecutionConfiguration     `queryParam:"inline,name=AbstractGridConfig"`

	Type AbstractGridConfigType
}

func CreateAbstractGridConfigMoabPlatform(moabPlatform AbstractGridConfigMoabConfiguration) AbstractGridConfig {
	typ := AbstractGridConfigTypeMoabPlatform

	typStr := string(typ)
	moabPlatform.Discriminator = &typStr

	return AbstractGridConfig{
		AbstractGridConfigMoabConfiguration: &moabPlatform,
		Type:                                typ,
	}
}

func CreateAbstractGridConfigAwsBatch(awsBatch AbstractGridConfigAWSBatchConfiguration) AbstractGridConfig {
	typ := AbstractGridConfigTypeAwsBatch

	typStr := string(typ)
	awsBatch.Discriminator = &typStr

	return AbstractGridConfig{
		AbstractGridConfigAWSBatchConfiguration: &awsBatch,
		Type:                                    typ,
	}
}

func CreateAbstractGridConfigLocalPlatform(localPlatform AbstractGridConfigLocalExecutionConfiguration) AbstractGridConfig {
	typ := AbstractGridConfigTypeLocalPlatform

	typStr := string(typ)
	localPlatform.Discriminator = &typStr

	return AbstractGridConfig{
		AbstractGridConfigLocalExecutionConfiguration: &localPlatform,
		Type: typ,
	}
}

func CreateAbstractGridConfigGkePlatform(gkePlatform AbstractGridConfigGoogleGKEClusterConfiguration) AbstractGridConfig {
	typ := AbstractGridConfigTypeGkePlatform

	typStr := string(typ)
	gkePlatform.Discriminator = &typStr

	return AbstractGridConfig{
		AbstractGridConfigGoogleGKEClusterConfiguration: &gkePlatform,
		Type: typ,
	}
}

func CreateAbstractGridConfigGoogleBatch(googleBatch AbstractGridConfigGoogleBatchServiceConfiguration) AbstractGridConfig {
	typ := AbstractGridConfigTypeGoogleBatch

	typStr := string(typ)
	googleBatch.Discriminator = &typStr

	return AbstractGridConfig{
		AbstractGridConfigGoogleBatchServiceConfiguration: &googleBatch,
		Type: typ,
	}
}

func CreateAbstractGridConfigAwsCloud(awsCloud AbstractGridConfigAWSCloudConfiguration) AbstractGridConfig {
	typ := AbstractGridConfigTypeAwsCloud

	typStr := string(typ)
	awsCloud.Discriminator = &typStr

	return AbstractGridConfig{
		AbstractGridConfigAWSCloudConfiguration: &awsCloud,
		Type:                                    typ,
	}
}

func CreateAbstractGridConfigSlurmPlatform(slurmPlatform AbstractGridConfigSlurmConfiguration) AbstractGridConfig {
	typ := AbstractGridConfigTypeSlurmPlatform

	typStr := string(typ)
	slurmPlatform.Discriminator = &typStr

	return AbstractGridConfig{
		AbstractGridConfigSlurmConfiguration: &slurmPlatform,
		Type:                                 typ,
	}
}

func CreateAbstractGridConfigK8sPlatform(k8sPlatform AbstractGridConfigKubernetesComputeConfiguration) AbstractGridConfig {
	typ := AbstractGridConfigTypeK8sPlatform

	typStr := string(typ)
	k8sPlatform.Discriminator = &typStr

	return AbstractGridConfig{
		AbstractGridConfigKubernetesComputeConfiguration: &k8sPlatform,
		Type: typ,
	}
}

func CreateAbstractGridConfigAltairPlatform(altairPlatform AbstractGridConfigAltairPBSConfiguration) AbstractGridConfig {
	typ := AbstractGridConfigTypeAltairPlatform

	typStr := string(typ)
	altairPlatform.Discriminator = &typStr

	return AbstractGridConfig{
		AbstractGridConfigAltairPBSConfiguration: &altairPlatform,
		Type:                                     typ,
	}
}

func CreateAbstractGridConfigLsfPlatform(lsfPlatform AbstractGridConfigIBMLSFConfiguration) AbstractGridConfig {
	typ := AbstractGridConfigTypeLsfPlatform

	typStr := string(typ)
	lsfPlatform.Discriminator = &typStr

	return AbstractGridConfig{
		AbstractGridConfigIBMLSFConfiguration: &lsfPlatform,
		Type:                                  typ,
	}
}

func CreateAbstractGridConfigAzureBatch(azureBatch AbstractGridConfigAzureBatchConfiguration) AbstractGridConfig {
	typ := AbstractGridConfigTypeAzureBatch

	typStr := string(typ)
	azureBatch.Discriminator = &typStr

	return AbstractGridConfig{
		AbstractGridConfigAzureBatchConfiguration: &azureBatch,
		Type: typ,
	}
}

func CreateAbstractGridConfigSeqeracomputePlatform(seqeracomputePlatform AbstractGridConfigSeqeraComputeConfiguration) AbstractGridConfig {
	typ := AbstractGridConfigTypeSeqeracomputePlatform

	typStr := string(typ)
	seqeracomputePlatform.Discriminator = &typStr

	return AbstractGridConfig{
		AbstractGridConfigSeqeraComputeConfiguration: &seqeracomputePlatform,
		Type: typ,
	}
}

func CreateAbstractGridConfigEksPlatform(eksPlatform AbstractGridConfigAmazonEKSClusterConfiguration) AbstractGridConfig {
	typ := AbstractGridConfigTypeEksPlatform

	typStr := string(typ)
	eksPlatform.Discriminator = &typStr

	return AbstractGridConfig{
		AbstractGridConfigAmazonEKSClusterConfiguration: &eksPlatform,
		Type: typ,
	}
}

func CreateAbstractGridConfigGoogleLifesciences(googleLifesciences AbstractGridConfigGoogleLifeSciencesConfiguration) AbstractGridConfig {
	typ := AbstractGridConfigTypeGoogleLifesciences

	typStr := string(typ)
	googleLifesciences.Discriminator = &typStr

	return AbstractGridConfig{
		AbstractGridConfigGoogleLifeSciencesConfiguration: &googleLifesciences,
		Type: typ,
	}
}

func CreateAbstractGridConfigUgePlatform(ugePlatform AbstractGridConfigUnivaGridEngineConfiguration) AbstractGridConfig {
	typ := AbstractGridConfigTypeUgePlatform

	typStr := string(typ)
	ugePlatform.Discriminator = &typStr

	return AbstractGridConfig{
		AbstractGridConfigUnivaGridEngineConfiguration: &ugePlatform,
		Type: typ,
	}
}

func (u *AbstractGridConfig) UnmarshalJSON(data []byte) error {

	type discriminator struct {
		Discriminator string `json:"discriminator"`
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.Discriminator {
	case "moab-platform":
		abstractGridConfigMoabConfiguration := new(AbstractGridConfigMoabConfiguration)
		if err := utils.UnmarshalJSON(data, &abstractGridConfigMoabConfiguration, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Discriminator == moab-platform) type AbstractGridConfigMoabConfiguration within AbstractGridConfig: %w", string(data), err)
		}

		u.AbstractGridConfigMoabConfiguration = abstractGridConfigMoabConfiguration
		u.Type = AbstractGridConfigTypeMoabPlatform
		return nil
	case "aws-batch":
		abstractGridConfigAWSBatchConfiguration := new(AbstractGridConfigAWSBatchConfiguration)
		if err := utils.UnmarshalJSON(data, &abstractGridConfigAWSBatchConfiguration, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Discriminator == aws-batch) type AbstractGridConfigAWSBatchConfiguration within AbstractGridConfig: %w", string(data), err)
		}

		u.AbstractGridConfigAWSBatchConfiguration = abstractGridConfigAWSBatchConfiguration
		u.Type = AbstractGridConfigTypeAwsBatch
		return nil
	case "local-platform":
		abstractGridConfigLocalExecutionConfiguration := new(AbstractGridConfigLocalExecutionConfiguration)
		if err := utils.UnmarshalJSON(data, &abstractGridConfigLocalExecutionConfiguration, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Discriminator == local-platform) type AbstractGridConfigLocalExecutionConfiguration within AbstractGridConfig: %w", string(data), err)
		}

		u.AbstractGridConfigLocalExecutionConfiguration = abstractGridConfigLocalExecutionConfiguration
		u.Type = AbstractGridConfigTypeLocalPlatform
		return nil
	case "gke-platform":
		abstractGridConfigGoogleGKEClusterConfiguration := new(AbstractGridConfigGoogleGKEClusterConfiguration)
		if err := utils.UnmarshalJSON(data, &abstractGridConfigGoogleGKEClusterConfiguration, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Discriminator == gke-platform) type AbstractGridConfigGoogleGKEClusterConfiguration within AbstractGridConfig: %w", string(data), err)
		}

		u.AbstractGridConfigGoogleGKEClusterConfiguration = abstractGridConfigGoogleGKEClusterConfiguration
		u.Type = AbstractGridConfigTypeGkePlatform
		return nil
	case "google-batch":
		abstractGridConfigGoogleBatchServiceConfiguration := new(AbstractGridConfigGoogleBatchServiceConfiguration)
		if err := utils.UnmarshalJSON(data, &abstractGridConfigGoogleBatchServiceConfiguration, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Discriminator == google-batch) type AbstractGridConfigGoogleBatchServiceConfiguration within AbstractGridConfig: %w", string(data), err)
		}

		u.AbstractGridConfigGoogleBatchServiceConfiguration = abstractGridConfigGoogleBatchServiceConfiguration
		u.Type = AbstractGridConfigTypeGoogleBatch
		return nil
	case "aws-cloud":
		abstractGridConfigAWSCloudConfiguration := new(AbstractGridConfigAWSCloudConfiguration)
		if err := utils.UnmarshalJSON(data, &abstractGridConfigAWSCloudConfiguration, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Discriminator == aws-cloud) type AbstractGridConfigAWSCloudConfiguration within AbstractGridConfig: %w", string(data), err)
		}

		u.AbstractGridConfigAWSCloudConfiguration = abstractGridConfigAWSCloudConfiguration
		u.Type = AbstractGridConfigTypeAwsCloud
		return nil
	case "slurm-platform":
		abstractGridConfigSlurmConfiguration := new(AbstractGridConfigSlurmConfiguration)
		if err := utils.UnmarshalJSON(data, &abstractGridConfigSlurmConfiguration, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Discriminator == slurm-platform) type AbstractGridConfigSlurmConfiguration within AbstractGridConfig: %w", string(data), err)
		}

		u.AbstractGridConfigSlurmConfiguration = abstractGridConfigSlurmConfiguration
		u.Type = AbstractGridConfigTypeSlurmPlatform
		return nil
	case "k8s-platform":
		abstractGridConfigKubernetesComputeConfiguration := new(AbstractGridConfigKubernetesComputeConfiguration)
		if err := utils.UnmarshalJSON(data, &abstractGridConfigKubernetesComputeConfiguration, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Discriminator == k8s-platform) type AbstractGridConfigKubernetesComputeConfiguration within AbstractGridConfig: %w", string(data), err)
		}

		u.AbstractGridConfigKubernetesComputeConfiguration = abstractGridConfigKubernetesComputeConfiguration
		u.Type = AbstractGridConfigTypeK8sPlatform
		return nil
	case "altair-platform":
		abstractGridConfigAltairPBSConfiguration := new(AbstractGridConfigAltairPBSConfiguration)
		if err := utils.UnmarshalJSON(data, &abstractGridConfigAltairPBSConfiguration, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Discriminator == altair-platform) type AbstractGridConfigAltairPBSConfiguration within AbstractGridConfig: %w", string(data), err)
		}

		u.AbstractGridConfigAltairPBSConfiguration = abstractGridConfigAltairPBSConfiguration
		u.Type = AbstractGridConfigTypeAltairPlatform
		return nil
	case "lsf-platform":
		abstractGridConfigIBMLSFConfiguration := new(AbstractGridConfigIBMLSFConfiguration)
		if err := utils.UnmarshalJSON(data, &abstractGridConfigIBMLSFConfiguration, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Discriminator == lsf-platform) type AbstractGridConfigIBMLSFConfiguration within AbstractGridConfig: %w", string(data), err)
		}

		u.AbstractGridConfigIBMLSFConfiguration = abstractGridConfigIBMLSFConfiguration
		u.Type = AbstractGridConfigTypeLsfPlatform
		return nil
	case "azure-batch":
		abstractGridConfigAzureBatchConfiguration := new(AbstractGridConfigAzureBatchConfiguration)
		if err := utils.UnmarshalJSON(data, &abstractGridConfigAzureBatchConfiguration, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Discriminator == azure-batch) type AbstractGridConfigAzureBatchConfiguration within AbstractGridConfig: %w", string(data), err)
		}

		u.AbstractGridConfigAzureBatchConfiguration = abstractGridConfigAzureBatchConfiguration
		u.Type = AbstractGridConfigTypeAzureBatch
		return nil
	case "seqeracompute-platform":
		abstractGridConfigSeqeraComputeConfiguration := new(AbstractGridConfigSeqeraComputeConfiguration)
		if err := utils.UnmarshalJSON(data, &abstractGridConfigSeqeraComputeConfiguration, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Discriminator == seqeracompute-platform) type AbstractGridConfigSeqeraComputeConfiguration within AbstractGridConfig: %w", string(data), err)
		}

		u.AbstractGridConfigSeqeraComputeConfiguration = abstractGridConfigSeqeraComputeConfiguration
		u.Type = AbstractGridConfigTypeSeqeracomputePlatform
		return nil
	case "eks-platform":
		abstractGridConfigAmazonEKSClusterConfiguration := new(AbstractGridConfigAmazonEKSClusterConfiguration)
		if err := utils.UnmarshalJSON(data, &abstractGridConfigAmazonEKSClusterConfiguration, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Discriminator == eks-platform) type AbstractGridConfigAmazonEKSClusterConfiguration within AbstractGridConfig: %w", string(data), err)
		}

		u.AbstractGridConfigAmazonEKSClusterConfiguration = abstractGridConfigAmazonEKSClusterConfiguration
		u.Type = AbstractGridConfigTypeEksPlatform
		return nil
	case "google-lifesciences":
		abstractGridConfigGoogleLifeSciencesConfiguration := new(AbstractGridConfigGoogleLifeSciencesConfiguration)
		if err := utils.UnmarshalJSON(data, &abstractGridConfigGoogleLifeSciencesConfiguration, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Discriminator == google-lifesciences) type AbstractGridConfigGoogleLifeSciencesConfiguration within AbstractGridConfig: %w", string(data), err)
		}

		u.AbstractGridConfigGoogleLifeSciencesConfiguration = abstractGridConfigGoogleLifeSciencesConfiguration
		u.Type = AbstractGridConfigTypeGoogleLifesciences
		return nil
	case "uge-platform":
		abstractGridConfigUnivaGridEngineConfiguration := new(AbstractGridConfigUnivaGridEngineConfiguration)
		if err := utils.UnmarshalJSON(data, &abstractGridConfigUnivaGridEngineConfiguration, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Discriminator == uge-platform) type AbstractGridConfigUnivaGridEngineConfiguration within AbstractGridConfig: %w", string(data), err)
		}

		u.AbstractGridConfigUnivaGridEngineConfiguration = abstractGridConfigUnivaGridEngineConfiguration
		u.Type = AbstractGridConfigTypeUgePlatform
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for AbstractGridConfig", string(data))
}

func (u AbstractGridConfig) MarshalJSON() ([]byte, error) {
	if u.AbstractGridConfigAWSBatchConfiguration != nil {
		return utils.MarshalJSON(u.AbstractGridConfigAWSBatchConfiguration, "", true)
	}

	if u.AbstractGridConfigAWSCloudConfiguration != nil {
		return utils.MarshalJSON(u.AbstractGridConfigAWSCloudConfiguration, "", true)
	}

	if u.AbstractGridConfigSeqeraComputeConfiguration != nil {
		return utils.MarshalJSON(u.AbstractGridConfigSeqeraComputeConfiguration, "", true)
	}

	if u.AbstractGridConfigGoogleLifeSciencesConfiguration != nil {
		return utils.MarshalJSON(u.AbstractGridConfigGoogleLifeSciencesConfiguration, "", true)
	}

	if u.AbstractGridConfigGoogleBatchServiceConfiguration != nil {
		return utils.MarshalJSON(u.AbstractGridConfigGoogleBatchServiceConfiguration, "", true)
	}

	if u.AbstractGridConfigGoogleCloudConfiguration != nil {
		return utils.MarshalJSON(u.AbstractGridConfigGoogleCloudConfiguration, "", true)
	}

	if u.AbstractGridConfigAzureBatchConfiguration != nil {
		return utils.MarshalJSON(u.AbstractGridConfigAzureBatchConfiguration, "", true)
	}

	if u.AbstractGridConfigAzureCloudConfiguration != nil {
		return utils.MarshalJSON(u.AbstractGridConfigAzureCloudConfiguration, "", true)
	}

	if u.AbstractGridConfigIBMLSFConfiguration != nil {
		return utils.MarshalJSON(u.AbstractGridConfigIBMLSFConfiguration, "", true)
	}

	if u.AbstractGridConfigSlurmConfiguration != nil {
		return utils.MarshalJSON(u.AbstractGridConfigSlurmConfiguration, "", true)
	}

	if u.AbstractGridConfigKubernetesComputeConfiguration != nil {
		return utils.MarshalJSON(u.AbstractGridConfigKubernetesComputeConfiguration, "", true)
	}

	if u.AbstractGridConfigAmazonEKSClusterConfiguration != nil {
		return utils.MarshalJSON(u.AbstractGridConfigAmazonEKSClusterConfiguration, "", true)
	}

	if u.AbstractGridConfigGoogleGKEClusterConfiguration != nil {
		return utils.MarshalJSON(u.AbstractGridConfigGoogleGKEClusterConfiguration, "", true)
	}

	if u.AbstractGridConfigUnivaGridEngineConfiguration != nil {
		return utils.MarshalJSON(u.AbstractGridConfigUnivaGridEngineConfiguration, "", true)
	}

	if u.AbstractGridConfigAltairPBSConfiguration != nil {
		return utils.MarshalJSON(u.AbstractGridConfigAltairPBSConfiguration, "", true)
	}

	if u.AbstractGridConfigMoabConfiguration != nil {
		return utils.MarshalJSON(u.AbstractGridConfigMoabConfiguration, "", true)
	}

	if u.AbstractGridConfigLocalExecutionConfiguration != nil {
		return utils.MarshalJSON(u.AbstractGridConfigLocalExecutionConfiguration, "", true)
	}

	return nil, errors.New("could not marshal union type AbstractGridConfig: all fields are null")
}
