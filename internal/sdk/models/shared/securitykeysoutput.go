// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/seqeralabs/terraform-provider-seqera/internal/sdk/internal/utils"
)

type SeqeraComputeSecurityKeysOutput struct {
	Discriminator *string `json:"discriminator,omitempty"`
	AccessKey     *string `json:"accessKey,omitempty"`
	AssumeRoleArn *string `json:"assumeRoleArn,omitempty"`
}

func (s SeqeraComputeSecurityKeysOutput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SeqeraComputeSecurityKeysOutput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (s *SeqeraComputeSecurityKeysOutput) GetDiscriminator() *string {
	if s == nil {
		return nil
	}
	return s.Discriminator
}

func (s *SeqeraComputeSecurityKeysOutput) GetAccessKey() *string {
	if s == nil {
		return nil
	}
	return s.AccessKey
}

func (s *SeqeraComputeSecurityKeysOutput) GetAssumeRoleArn() *string {
	if s == nil {
		return nil
	}
	return s.AssumeRoleArn
}

type AzureEntraKeysOutput struct {
	Discriminator *string `json:"discriminator,omitempty"`
	BatchName     *string `json:"batchName,omitempty"`
	StorageName   *string `json:"storageName,omitempty"`
	TenantID      *string `json:"tenantId,omitempty"`
	ClientID      *string `json:"clientId,omitempty"`
}

func (a AzureEntraKeysOutput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AzureEntraKeysOutput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (a *AzureEntraKeysOutput) GetDiscriminator() *string {
	if a == nil {
		return nil
	}
	return a.Discriminator
}

func (a *AzureEntraKeysOutput) GetBatchName() *string {
	if a == nil {
		return nil
	}
	return a.BatchName
}

func (a *AzureEntraKeysOutput) GetStorageName() *string {
	if a == nil {
		return nil
	}
	return a.StorageName
}

func (a *AzureEntraKeysOutput) GetTenantID() *string {
	if a == nil {
		return nil
	}
	return a.TenantID
}

func (a *AzureEntraKeysOutput) GetClientID() *string {
	if a == nil {
		return nil
	}
	return a.ClientID
}

type CodeCommitSecurityKeysOutput struct {
	Discriminator *string `json:"discriminator,omitempty"`
	Username      *string `json:"username,omitempty"`
}

func (c CodeCommitSecurityKeysOutput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CodeCommitSecurityKeysOutput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (c *CodeCommitSecurityKeysOutput) GetDiscriminator() *string {
	if c == nil {
		return nil
	}
	return c.Discriminator
}

func (c *CodeCommitSecurityKeysOutput) GetUsername() *string {
	if c == nil {
		return nil
	}
	return c.Username
}

type AgentSecurityKeys struct {
	Discriminator *string `json:"discriminator,omitempty"`
	ConnectionID  *string `json:"connectionId,omitempty"`
	WorkDir       *string `json:"workDir,omitempty"`
	Shared        *bool   `json:"shared,omitempty"`
}

func (a AgentSecurityKeys) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AgentSecurityKeys) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (a *AgentSecurityKeys) GetDiscriminator() *string {
	if a == nil {
		return nil
	}
	return a.Discriminator
}

func (a *AgentSecurityKeys) GetConnectionID() *string {
	if a == nil {
		return nil
	}
	return a.ConnectionID
}

func (a *AgentSecurityKeys) GetWorkDir() *string {
	if a == nil {
		return nil
	}
	return a.WorkDir
}

func (a *AgentSecurityKeys) GetShared() *bool {
	if a == nil {
		return nil
	}
	return a.Shared
}

type ContainerRegistryKeysOutput struct {
	Discriminator *string `json:"discriminator,omitempty"`
	UserName      *string `json:"userName,omitempty"`
	Registry      *string `json:"registry,omitempty"`
}

func (c ContainerRegistryKeysOutput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ContainerRegistryKeysOutput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (c *ContainerRegistryKeysOutput) GetDiscriminator() *string {
	if c == nil {
		return nil
	}
	return c.Discriminator
}

func (c *ContainerRegistryKeysOutput) GetUserName() *string {
	if c == nil {
		return nil
	}
	return c.UserName
}

func (c *ContainerRegistryKeysOutput) GetRegistry() *string {
	if c == nil {
		return nil
	}
	return c.Registry
}

type AzureReposSecurityKeysOutput struct {
	Discriminator *string `json:"discriminator,omitempty"`
	Username      *string `json:"username,omitempty"`
}

func (a AzureReposSecurityKeysOutput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AzureReposSecurityKeysOutput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (a *AzureReposSecurityKeysOutput) GetDiscriminator() *string {
	if a == nil {
		return nil
	}
	return a.Discriminator
}

func (a *AzureReposSecurityKeysOutput) GetUsername() *string {
	if a == nil {
		return nil
	}
	return a.Username
}

type SecurityKeysAzureSecurityKeysOutput struct {
	Discriminator *string `json:"discriminator,omitempty"`
	BatchName     *string `json:"batchName,omitempty"`
	StorageName   *string `json:"storageName,omitempty"`
}

func (s SecurityKeysAzureSecurityKeysOutput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SecurityKeysAzureSecurityKeysOutput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (s *SecurityKeysAzureSecurityKeysOutput) GetDiscriminator() *string {
	if s == nil {
		return nil
	}
	return s.Discriminator
}

func (s *SecurityKeysAzureSecurityKeysOutput) GetBatchName() *string {
	if s == nil {
		return nil
	}
	return s.BatchName
}

func (s *SecurityKeysAzureSecurityKeysOutput) GetStorageName() *string {
	if s == nil {
		return nil
	}
	return s.StorageName
}

type K8sSecurityKeysOutput struct {
	Discriminator *string `json:"discriminator,omitempty"`
	Certificate   *string `json:"certificate,omitempty"`
}

func (k K8sSecurityKeysOutput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(k, "", false)
}

func (k *K8sSecurityKeysOutput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &k, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (k *K8sSecurityKeysOutput) GetDiscriminator() *string {
	if k == nil {
		return nil
	}
	return k.Discriminator
}

func (k *K8sSecurityKeysOutput) GetCertificate() *string {
	if k == nil {
		return nil
	}
	return k.Certificate
}

type SSHSecurityKeysOutput struct {
	Discriminator *string `json:"discriminator,omitempty"`
}

func (s SSHSecurityKeysOutput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SSHSecurityKeysOutput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (s *SSHSecurityKeysOutput) GetDiscriminator() *string {
	if s == nil {
		return nil
	}
	return s.Discriminator
}

type GiteaSecurityKeysOutput struct {
	Discriminator *string `json:"discriminator,omitempty"`
	Username      *string `json:"username,omitempty"`
}

func (g GiteaSecurityKeysOutput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GiteaSecurityKeysOutput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (g *GiteaSecurityKeysOutput) GetDiscriminator() *string {
	if g == nil {
		return nil
	}
	return g.Discriminator
}

func (g *GiteaSecurityKeysOutput) GetUsername() *string {
	if g == nil {
		return nil
	}
	return g.Username
}

type BitBucketSecurityKeysOutput struct {
	Discriminator *string `json:"discriminator,omitempty"`
	Username      *string `json:"username,omitempty"`
}

func (b BitBucketSecurityKeysOutput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(b, "", false)
}

func (b *BitBucketSecurityKeysOutput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &b, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (b *BitBucketSecurityKeysOutput) GetDiscriminator() *string {
	if b == nil {
		return nil
	}
	return b.Discriminator
}

func (b *BitBucketSecurityKeysOutput) GetUsername() *string {
	if b == nil {
		return nil
	}
	return b.Username
}

type GitLabSecurityKeysOutput struct {
	Discriminator *string `json:"discriminator,omitempty"`
	Username      *string `json:"username,omitempty"`
}

func (g GitLabSecurityKeysOutput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GitLabSecurityKeysOutput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (g *GitLabSecurityKeysOutput) GetDiscriminator() *string {
	if g == nil {
		return nil
	}
	return g.Discriminator
}

func (g *GitLabSecurityKeysOutput) GetUsername() *string {
	if g == nil {
		return nil
	}
	return g.Username
}

type GitHubSecurityKeysOutput struct {
	Discriminator *string `json:"discriminator,omitempty"`
	Username      *string `json:"username,omitempty"`
}

func (g GitHubSecurityKeysOutput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GitHubSecurityKeysOutput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (g *GitHubSecurityKeysOutput) GetDiscriminator() *string {
	if g == nil {
		return nil
	}
	return g.Discriminator
}

func (g *GitHubSecurityKeysOutput) GetUsername() *string {
	if g == nil {
		return nil
	}
	return g.Username
}

type SecurityKeysGoogleSecurityKeysOutput struct {
	Discriminator *string `json:"discriminator,omitempty"`
}

func (s SecurityKeysGoogleSecurityKeysOutput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SecurityKeysGoogleSecurityKeysOutput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (s *SecurityKeysGoogleSecurityKeysOutput) GetDiscriminator() *string {
	if s == nil {
		return nil
	}
	return s.Discriminator
}

type SecurityKeysAwsSecurityKeysOutput struct {
	Discriminator *string `json:"discriminator,omitempty"`
	AccessKey     *string `json:"accessKey,omitempty"`
	AssumeRoleArn *string `json:"assumeRoleArn,omitempty"`
}

func (s SecurityKeysAwsSecurityKeysOutput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SecurityKeysAwsSecurityKeysOutput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (s *SecurityKeysAwsSecurityKeysOutput) GetDiscriminator() *string {
	if s == nil {
		return nil
	}
	return s.Discriminator
}

func (s *SecurityKeysAwsSecurityKeysOutput) GetAccessKey() *string {
	if s == nil {
		return nil
	}
	return s.AccessKey
}

func (s *SecurityKeysAwsSecurityKeysOutput) GetAssumeRoleArn() *string {
	if s == nil {
		return nil
	}
	return s.AssumeRoleArn
}

type SecurityKeysOutputType string

const (
	SecurityKeysOutputTypeGithub        SecurityKeysOutputType = "github"
	SecurityKeysOutputTypeAzurerepos    SecurityKeysOutputType = "azurerepos"
	SecurityKeysOutputTypeAzureEntra    SecurityKeysOutputType = "azure_entra"
	SecurityKeysOutputTypeContainerReg  SecurityKeysOutputType = "container-reg"
	SecurityKeysOutputTypeTwAgent       SecurityKeysOutputType = "tw-agent"
	SecurityKeysOutputTypeK8s           SecurityKeysOutputType = "k8s"
	SecurityKeysOutputTypeSSH           SecurityKeysOutputType = "ssh"
	SecurityKeysOutputTypeGoogle        SecurityKeysOutputType = "google"
	SecurityKeysOutputTypeBitbucket     SecurityKeysOutputType = "bitbucket"
	SecurityKeysOutputTypeGitea         SecurityKeysOutputType = "gitea"
	SecurityKeysOutputTypeSeqeracompute SecurityKeysOutputType = "seqeracompute"
	SecurityKeysOutputTypeCodecommit    SecurityKeysOutputType = "codecommit"
	SecurityKeysOutputTypeGitlab        SecurityKeysOutputType = "gitlab"
	SecurityKeysOutputTypeAws           SecurityKeysOutputType = "aws"
	SecurityKeysOutputTypeAzure         SecurityKeysOutputType = "azure"
)

type SecurityKeysOutput struct {
	SecurityKeysAwsSecurityKeysOutput    *SecurityKeysAwsSecurityKeysOutput    `queryParam:"inline,name=SecurityKeys"`
	SecurityKeysGoogleSecurityKeysOutput *SecurityKeysGoogleSecurityKeysOutput `queryParam:"inline,name=SecurityKeys"`
	GitHubSecurityKeysOutput             *GitHubSecurityKeysOutput             `queryParam:"inline,name=SecurityKeys"`
	GitLabSecurityKeysOutput             *GitLabSecurityKeysOutput             `queryParam:"inline,name=SecurityKeys"`
	BitBucketSecurityKeysOutput          *BitBucketSecurityKeysOutput          `queryParam:"inline,name=SecurityKeys"`
	GiteaSecurityKeysOutput              *GiteaSecurityKeysOutput              `queryParam:"inline,name=SecurityKeys"`
	SSHSecurityKeysOutput                *SSHSecurityKeysOutput                `queryParam:"inline,name=SecurityKeys"`
	K8sSecurityKeysOutput                *K8sSecurityKeysOutput                `queryParam:"inline,name=SecurityKeys"`
	SecurityKeysAzureSecurityKeysOutput  *SecurityKeysAzureSecurityKeysOutput  `queryParam:"inline,name=SecurityKeys"`
	AzureReposSecurityKeysOutput         *AzureReposSecurityKeysOutput         `queryParam:"inline,name=SecurityKeys"`
	ContainerRegistryKeysOutput          *ContainerRegistryKeysOutput          `queryParam:"inline,name=SecurityKeys"`
	AgentSecurityKeys                    *AgentSecurityKeys                    `queryParam:"inline,name=SecurityKeys"`
	CodeCommitSecurityKeysOutput         *CodeCommitSecurityKeysOutput         `queryParam:"inline,name=SecurityKeys"`
	AzureEntraKeysOutput                 *AzureEntraKeysOutput                 `queryParam:"inline,name=SecurityKeys"`
	SeqeraComputeSecurityKeysOutput      *SeqeraComputeSecurityKeysOutput      `queryParam:"inline,name=SecurityKeys"`

	Type SecurityKeysOutputType
}

func CreateSecurityKeysOutputGithub(github GitHubSecurityKeysOutput) SecurityKeysOutput {
	typ := SecurityKeysOutputTypeGithub

	typStr := string(typ)
	github.Discriminator = &typStr

	return SecurityKeysOutput{
		GitHubSecurityKeysOutput: &github,
		Type:                     typ,
	}
}

func CreateSecurityKeysOutputAzurerepos(azurerepos AzureReposSecurityKeysOutput) SecurityKeysOutput {
	typ := SecurityKeysOutputTypeAzurerepos

	typStr := string(typ)
	azurerepos.Discriminator = &typStr

	return SecurityKeysOutput{
		AzureReposSecurityKeysOutput: &azurerepos,
		Type:                         typ,
	}
}

func CreateSecurityKeysOutputAzureEntra(azureEntra AzureEntraKeysOutput) SecurityKeysOutput {
	typ := SecurityKeysOutputTypeAzureEntra

	typStr := string(typ)
	azureEntra.Discriminator = &typStr

	return SecurityKeysOutput{
		AzureEntraKeysOutput: &azureEntra,
		Type:                 typ,
	}
}

func CreateSecurityKeysOutputContainerReg(containerReg ContainerRegistryKeysOutput) SecurityKeysOutput {
	typ := SecurityKeysOutputTypeContainerReg

	typStr := string(typ)
	containerReg.Discriminator = &typStr

	return SecurityKeysOutput{
		ContainerRegistryKeysOutput: &containerReg,
		Type:                        typ,
	}
}

func CreateSecurityKeysOutputTwAgent(twAgent AgentSecurityKeys) SecurityKeysOutput {
	typ := SecurityKeysOutputTypeTwAgent

	typStr := string(typ)
	twAgent.Discriminator = &typStr

	return SecurityKeysOutput{
		AgentSecurityKeys: &twAgent,
		Type:              typ,
	}
}

func CreateSecurityKeysOutputK8s(k8s K8sSecurityKeysOutput) SecurityKeysOutput {
	typ := SecurityKeysOutputTypeK8s

	typStr := string(typ)
	k8s.Discriminator = &typStr

	return SecurityKeysOutput{
		K8sSecurityKeysOutput: &k8s,
		Type:                  typ,
	}
}

func CreateSecurityKeysOutputSSH(ssh SSHSecurityKeysOutput) SecurityKeysOutput {
	typ := SecurityKeysOutputTypeSSH

	typStr := string(typ)
	ssh.Discriminator = &typStr

	return SecurityKeysOutput{
		SSHSecurityKeysOutput: &ssh,
		Type:                  typ,
	}
}

func CreateSecurityKeysOutputGoogle(google SecurityKeysGoogleSecurityKeysOutput) SecurityKeysOutput {
	typ := SecurityKeysOutputTypeGoogle

	typStr := string(typ)
	google.Discriminator = &typStr

	return SecurityKeysOutput{
		SecurityKeysGoogleSecurityKeysOutput: &google,
		Type:                                 typ,
	}
}

func CreateSecurityKeysOutputBitbucket(bitbucket BitBucketSecurityKeysOutput) SecurityKeysOutput {
	typ := SecurityKeysOutputTypeBitbucket

	typStr := string(typ)
	bitbucket.Discriminator = &typStr

	return SecurityKeysOutput{
		BitBucketSecurityKeysOutput: &bitbucket,
		Type:                        typ,
	}
}

func CreateSecurityKeysOutputGitea(gitea GiteaSecurityKeysOutput) SecurityKeysOutput {
	typ := SecurityKeysOutputTypeGitea

	typStr := string(typ)
	gitea.Discriminator = &typStr

	return SecurityKeysOutput{
		GiteaSecurityKeysOutput: &gitea,
		Type:                    typ,
	}
}

func CreateSecurityKeysOutputSeqeracompute(seqeracompute SeqeraComputeSecurityKeysOutput) SecurityKeysOutput {
	typ := SecurityKeysOutputTypeSeqeracompute

	typStr := string(typ)
	seqeracompute.Discriminator = &typStr

	return SecurityKeysOutput{
		SeqeraComputeSecurityKeysOutput: &seqeracompute,
		Type:                            typ,
	}
}

func CreateSecurityKeysOutputCodecommit(codecommit CodeCommitSecurityKeysOutput) SecurityKeysOutput {
	typ := SecurityKeysOutputTypeCodecommit

	typStr := string(typ)
	codecommit.Discriminator = &typStr

	return SecurityKeysOutput{
		CodeCommitSecurityKeysOutput: &codecommit,
		Type:                         typ,
	}
}

func CreateSecurityKeysOutputGitlab(gitlab GitLabSecurityKeysOutput) SecurityKeysOutput {
	typ := SecurityKeysOutputTypeGitlab

	typStr := string(typ)
	gitlab.Discriminator = &typStr

	return SecurityKeysOutput{
		GitLabSecurityKeysOutput: &gitlab,
		Type:                     typ,
	}
}

func CreateSecurityKeysOutputAws(aws SecurityKeysAwsSecurityKeysOutput) SecurityKeysOutput {
	typ := SecurityKeysOutputTypeAws

	typStr := string(typ)
	aws.Discriminator = &typStr

	return SecurityKeysOutput{
		SecurityKeysAwsSecurityKeysOutput: &aws,
		Type:                              typ,
	}
}

func CreateSecurityKeysOutputAzure(azure SecurityKeysAzureSecurityKeysOutput) SecurityKeysOutput {
	typ := SecurityKeysOutputTypeAzure

	typStr := string(typ)
	azure.Discriminator = &typStr

	return SecurityKeysOutput{
		SecurityKeysAzureSecurityKeysOutput: &azure,
		Type:                                typ,
	}
}

func (u *SecurityKeysOutput) UnmarshalJSON(data []byte) error {

	type discriminator struct {
		Discriminator string `json:"discriminator"`
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.Discriminator {
	case "github":
		gitHubSecurityKeysOutput := new(GitHubSecurityKeysOutput)
		if err := utils.UnmarshalJSON(data, &gitHubSecurityKeysOutput, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Discriminator == github) type GitHubSecurityKeysOutput within SecurityKeysOutput: %w", string(data), err)
		}

		u.GitHubSecurityKeysOutput = gitHubSecurityKeysOutput
		u.Type = SecurityKeysOutputTypeGithub
		return nil
	case "azurerepos":
		azureReposSecurityKeysOutput := new(AzureReposSecurityKeysOutput)
		if err := utils.UnmarshalJSON(data, &azureReposSecurityKeysOutput, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Discriminator == azurerepos) type AzureReposSecurityKeysOutput within SecurityKeysOutput: %w", string(data), err)
		}

		u.AzureReposSecurityKeysOutput = azureReposSecurityKeysOutput
		u.Type = SecurityKeysOutputTypeAzurerepos
		return nil
	case "azure_entra":
		azureEntraKeysOutput := new(AzureEntraKeysOutput)
		if err := utils.UnmarshalJSON(data, &azureEntraKeysOutput, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Discriminator == azure_entra) type AzureEntraKeysOutput within SecurityKeysOutput: %w", string(data), err)
		}

		u.AzureEntraKeysOutput = azureEntraKeysOutput
		u.Type = SecurityKeysOutputTypeAzureEntra
		return nil
	case "container-reg":
		containerRegistryKeysOutput := new(ContainerRegistryKeysOutput)
		if err := utils.UnmarshalJSON(data, &containerRegistryKeysOutput, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Discriminator == container-reg) type ContainerRegistryKeysOutput within SecurityKeysOutput: %w", string(data), err)
		}

		u.ContainerRegistryKeysOutput = containerRegistryKeysOutput
		u.Type = SecurityKeysOutputTypeContainerReg
		return nil
	case "tw-agent":
		agentSecurityKeys := new(AgentSecurityKeys)
		if err := utils.UnmarshalJSON(data, &agentSecurityKeys, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Discriminator == tw-agent) type AgentSecurityKeys within SecurityKeysOutput: %w", string(data), err)
		}

		u.AgentSecurityKeys = agentSecurityKeys
		u.Type = SecurityKeysOutputTypeTwAgent
		return nil
	case "k8s":
		k8sSecurityKeysOutput := new(K8sSecurityKeysOutput)
		if err := utils.UnmarshalJSON(data, &k8sSecurityKeysOutput, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Discriminator == k8s) type K8sSecurityKeysOutput within SecurityKeysOutput: %w", string(data), err)
		}

		u.K8sSecurityKeysOutput = k8sSecurityKeysOutput
		u.Type = SecurityKeysOutputTypeK8s
		return nil
	case "ssh":
		sshSecurityKeysOutput := new(SSHSecurityKeysOutput)
		if err := utils.UnmarshalJSON(data, &sshSecurityKeysOutput, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Discriminator == ssh) type SSHSecurityKeysOutput within SecurityKeysOutput: %w", string(data), err)
		}

		u.SSHSecurityKeysOutput = sshSecurityKeysOutput
		u.Type = SecurityKeysOutputTypeSSH
		return nil
	case "google":
		securityKeysGoogleSecurityKeysOutput := new(SecurityKeysGoogleSecurityKeysOutput)
		if err := utils.UnmarshalJSON(data, &securityKeysGoogleSecurityKeysOutput, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Discriminator == google) type SecurityKeysGoogleSecurityKeysOutput within SecurityKeysOutput: %w", string(data), err)
		}

		u.SecurityKeysGoogleSecurityKeysOutput = securityKeysGoogleSecurityKeysOutput
		u.Type = SecurityKeysOutputTypeGoogle
		return nil
	case "bitbucket":
		bitBucketSecurityKeysOutput := new(BitBucketSecurityKeysOutput)
		if err := utils.UnmarshalJSON(data, &bitBucketSecurityKeysOutput, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Discriminator == bitbucket) type BitBucketSecurityKeysOutput within SecurityKeysOutput: %w", string(data), err)
		}

		u.BitBucketSecurityKeysOutput = bitBucketSecurityKeysOutput
		u.Type = SecurityKeysOutputTypeBitbucket
		return nil
	case "gitea":
		giteaSecurityKeysOutput := new(GiteaSecurityKeysOutput)
		if err := utils.UnmarshalJSON(data, &giteaSecurityKeysOutput, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Discriminator == gitea) type GiteaSecurityKeysOutput within SecurityKeysOutput: %w", string(data), err)
		}

		u.GiteaSecurityKeysOutput = giteaSecurityKeysOutput
		u.Type = SecurityKeysOutputTypeGitea
		return nil
	case "seqeracompute":
		seqeraComputeSecurityKeysOutput := new(SeqeraComputeSecurityKeysOutput)
		if err := utils.UnmarshalJSON(data, &seqeraComputeSecurityKeysOutput, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Discriminator == seqeracompute) type SeqeraComputeSecurityKeysOutput within SecurityKeysOutput: %w", string(data), err)
		}

		u.SeqeraComputeSecurityKeysOutput = seqeraComputeSecurityKeysOutput
		u.Type = SecurityKeysOutputTypeSeqeracompute
		return nil
	case "codecommit":
		codeCommitSecurityKeysOutput := new(CodeCommitSecurityKeysOutput)
		if err := utils.UnmarshalJSON(data, &codeCommitSecurityKeysOutput, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Discriminator == codecommit) type CodeCommitSecurityKeysOutput within SecurityKeysOutput: %w", string(data), err)
		}

		u.CodeCommitSecurityKeysOutput = codeCommitSecurityKeysOutput
		u.Type = SecurityKeysOutputTypeCodecommit
		return nil
	case "gitlab":
		gitLabSecurityKeysOutput := new(GitLabSecurityKeysOutput)
		if err := utils.UnmarshalJSON(data, &gitLabSecurityKeysOutput, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Discriminator == gitlab) type GitLabSecurityKeysOutput within SecurityKeysOutput: %w", string(data), err)
		}

		u.GitLabSecurityKeysOutput = gitLabSecurityKeysOutput
		u.Type = SecurityKeysOutputTypeGitlab
		return nil
	case "aws":
		securityKeysAwsSecurityKeysOutput := new(SecurityKeysAwsSecurityKeysOutput)
		if err := utils.UnmarshalJSON(data, &securityKeysAwsSecurityKeysOutput, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Discriminator == aws) type SecurityKeysAwsSecurityKeysOutput within SecurityKeysOutput: %w", string(data), err)
		}

		u.SecurityKeysAwsSecurityKeysOutput = securityKeysAwsSecurityKeysOutput
		u.Type = SecurityKeysOutputTypeAws
		return nil
	case "azure":
		securityKeysAzureSecurityKeysOutput := new(SecurityKeysAzureSecurityKeysOutput)
		if err := utils.UnmarshalJSON(data, &securityKeysAzureSecurityKeysOutput, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Discriminator == azure) type SecurityKeysAzureSecurityKeysOutput within SecurityKeysOutput: %w", string(data), err)
		}

		u.SecurityKeysAzureSecurityKeysOutput = securityKeysAzureSecurityKeysOutput
		u.Type = SecurityKeysOutputTypeAzure
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for SecurityKeysOutput", string(data))
}

func (u SecurityKeysOutput) MarshalJSON() ([]byte, error) {
	if u.SecurityKeysAwsSecurityKeysOutput != nil {
		return utils.MarshalJSON(u.SecurityKeysAwsSecurityKeysOutput, "", true)
	}

	if u.SecurityKeysGoogleSecurityKeysOutput != nil {
		return utils.MarshalJSON(u.SecurityKeysGoogleSecurityKeysOutput, "", true)
	}

	if u.GitHubSecurityKeysOutput != nil {
		return utils.MarshalJSON(u.GitHubSecurityKeysOutput, "", true)
	}

	if u.GitLabSecurityKeysOutput != nil {
		return utils.MarshalJSON(u.GitLabSecurityKeysOutput, "", true)
	}

	if u.BitBucketSecurityKeysOutput != nil {
		return utils.MarshalJSON(u.BitBucketSecurityKeysOutput, "", true)
	}

	if u.GiteaSecurityKeysOutput != nil {
		return utils.MarshalJSON(u.GiteaSecurityKeysOutput, "", true)
	}

	if u.SSHSecurityKeysOutput != nil {
		return utils.MarshalJSON(u.SSHSecurityKeysOutput, "", true)
	}

	if u.K8sSecurityKeysOutput != nil {
		return utils.MarshalJSON(u.K8sSecurityKeysOutput, "", true)
	}

	if u.SecurityKeysAzureSecurityKeysOutput != nil {
		return utils.MarshalJSON(u.SecurityKeysAzureSecurityKeysOutput, "", true)
	}

	if u.AzureReposSecurityKeysOutput != nil {
		return utils.MarshalJSON(u.AzureReposSecurityKeysOutput, "", true)
	}

	if u.ContainerRegistryKeysOutput != nil {
		return utils.MarshalJSON(u.ContainerRegistryKeysOutput, "", true)
	}

	if u.AgentSecurityKeys != nil {
		return utils.MarshalJSON(u.AgentSecurityKeys, "", true)
	}

	if u.CodeCommitSecurityKeysOutput != nil {
		return utils.MarshalJSON(u.CodeCommitSecurityKeysOutput, "", true)
	}

	if u.AzureEntraKeysOutput != nil {
		return utils.MarshalJSON(u.AzureEntraKeysOutput, "", true)
	}

	if u.SeqeraComputeSecurityKeysOutput != nil {
		return utils.MarshalJSON(u.SeqeraComputeSecurityKeysOutput, "", true)
	}

	return nil, errors.New("could not marshal union type SecurityKeysOutput: all fields are null")
}

type SeqeraComputeSecurityKeys struct {
	Discriminator *string `json:"discriminator,omitempty"`
	AccessKey     *string `json:"accessKey,omitempty"`
	SecretKey     *string `json:"secretKey,omitempty"`
	AssumeRoleArn *string `json:"assumeRoleArn,omitempty"`
}

func (s SeqeraComputeSecurityKeys) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SeqeraComputeSecurityKeys) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (s *SeqeraComputeSecurityKeys) GetDiscriminator() *string {
	if s == nil {
		return nil
	}
	return s.Discriminator
}

func (s *SeqeraComputeSecurityKeys) GetAccessKey() *string {
	if s == nil {
		return nil
	}
	return s.AccessKey
}

func (s *SeqeraComputeSecurityKeys) GetSecretKey() *string {
	if s == nil {
		return nil
	}
	return s.SecretKey
}

func (s *SeqeraComputeSecurityKeys) GetAssumeRoleArn() *string {
	if s == nil {
		return nil
	}
	return s.AssumeRoleArn
}

type AzureEntraKeys struct {
	Discriminator *string `json:"discriminator,omitempty"`
	BatchName     *string `json:"batchName,omitempty"`
	StorageName   *string `json:"storageName,omitempty"`
	BatchKey      *string `json:"batchKey,omitempty"`
	StorageKey    *string `json:"storageKey,omitempty"`
	TenantID      *string `json:"tenantId,omitempty"`
	ClientID      *string `json:"clientId,omitempty"`
	ClientSecret  *string `json:"clientSecret,omitempty"`
}

func (a AzureEntraKeys) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AzureEntraKeys) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (a *AzureEntraKeys) GetDiscriminator() *string {
	if a == nil {
		return nil
	}
	return a.Discriminator
}

func (a *AzureEntraKeys) GetBatchName() *string {
	if a == nil {
		return nil
	}
	return a.BatchName
}

func (a *AzureEntraKeys) GetStorageName() *string {
	if a == nil {
		return nil
	}
	return a.StorageName
}

func (a *AzureEntraKeys) GetBatchKey() *string {
	if a == nil {
		return nil
	}
	return a.BatchKey
}

func (a *AzureEntraKeys) GetStorageKey() *string {
	if a == nil {
		return nil
	}
	return a.StorageKey
}

func (a *AzureEntraKeys) GetTenantID() *string {
	if a == nil {
		return nil
	}
	return a.TenantID
}

func (a *AzureEntraKeys) GetClientID() *string {
	if a == nil {
		return nil
	}
	return a.ClientID
}

func (a *AzureEntraKeys) GetClientSecret() *string {
	if a == nil {
		return nil
	}
	return a.ClientSecret
}

type CodeCommitSecurityKeys struct {
	Discriminator *string `json:"discriminator,omitempty"`
	Username      *string `json:"username,omitempty"`
	Password      *string `json:"password,omitempty"`
}

func (c CodeCommitSecurityKeys) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CodeCommitSecurityKeys) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (c *CodeCommitSecurityKeys) GetDiscriminator() *string {
	if c == nil {
		return nil
	}
	return c.Discriminator
}

func (c *CodeCommitSecurityKeys) GetUsername() *string {
	if c == nil {
		return nil
	}
	return c.Username
}

func (c *CodeCommitSecurityKeys) GetPassword() *string {
	if c == nil {
		return nil
	}
	return c.Password
}

type ContainerRegistryKeys struct {
	Discriminator *string `json:"discriminator,omitempty"`
	UserName      *string `json:"userName,omitempty"`
	Password      *string `json:"password,omitempty"`
	Registry      *string `json:"registry,omitempty"`
}

func (c ContainerRegistryKeys) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ContainerRegistryKeys) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (c *ContainerRegistryKeys) GetDiscriminator() *string {
	if c == nil {
		return nil
	}
	return c.Discriminator
}

func (c *ContainerRegistryKeys) GetUserName() *string {
	if c == nil {
		return nil
	}
	return c.UserName
}

func (c *ContainerRegistryKeys) GetPassword() *string {
	if c == nil {
		return nil
	}
	return c.Password
}

func (c *ContainerRegistryKeys) GetRegistry() *string {
	if c == nil {
		return nil
	}
	return c.Registry
}

type AzureReposSecurityKeys struct {
	Discriminator *string `json:"discriminator,omitempty"`
	Username      *string `json:"username,omitempty"`
	Password      *string `json:"password,omitempty"`
}

func (a AzureReposSecurityKeys) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AzureReposSecurityKeys) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (a *AzureReposSecurityKeys) GetDiscriminator() *string {
	if a == nil {
		return nil
	}
	return a.Discriminator
}

func (a *AzureReposSecurityKeys) GetUsername() *string {
	if a == nil {
		return nil
	}
	return a.Username
}

func (a *AzureReposSecurityKeys) GetPassword() *string {
	if a == nil {
		return nil
	}
	return a.Password
}

type SecurityKeysAzureSecurityKeys struct {
	Discriminator *string `json:"discriminator,omitempty"`
	BatchName     *string `json:"batchName,omitempty"`
	StorageName   *string `json:"storageName,omitempty"`
	BatchKey      *string `json:"batchKey,omitempty"`
	StorageKey    *string `json:"storageKey,omitempty"`
}

func (s SecurityKeysAzureSecurityKeys) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SecurityKeysAzureSecurityKeys) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (s *SecurityKeysAzureSecurityKeys) GetDiscriminator() *string {
	if s == nil {
		return nil
	}
	return s.Discriminator
}

func (s *SecurityKeysAzureSecurityKeys) GetBatchName() *string {
	if s == nil {
		return nil
	}
	return s.BatchName
}

func (s *SecurityKeysAzureSecurityKeys) GetStorageName() *string {
	if s == nil {
		return nil
	}
	return s.StorageName
}

func (s *SecurityKeysAzureSecurityKeys) GetBatchKey() *string {
	if s == nil {
		return nil
	}
	return s.BatchKey
}

func (s *SecurityKeysAzureSecurityKeys) GetStorageKey() *string {
	if s == nil {
		return nil
	}
	return s.StorageKey
}

type K8sSecurityKeys struct {
	Discriminator *string `json:"discriminator,omitempty"`
	Certificate   *string `json:"certificate,omitempty"`
	PrivateKey    *string `json:"privateKey,omitempty"`
	Token         *string `json:"token,omitempty"`
}

func (k K8sSecurityKeys) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(k, "", false)
}

func (k *K8sSecurityKeys) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &k, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (k *K8sSecurityKeys) GetDiscriminator() *string {
	if k == nil {
		return nil
	}
	return k.Discriminator
}

func (k *K8sSecurityKeys) GetCertificate() *string {
	if k == nil {
		return nil
	}
	return k.Certificate
}

func (k *K8sSecurityKeys) GetPrivateKey() *string {
	if k == nil {
		return nil
	}
	return k.PrivateKey
}

func (k *K8sSecurityKeys) GetToken() *string {
	if k == nil {
		return nil
	}
	return k.Token
}

type SSHSecurityKeys struct {
	Discriminator *string `json:"discriminator,omitempty"`
	PrivateKey    *string `json:"privateKey,omitempty"`
	Passphrase    *string `json:"passphrase,omitempty"`
}

func (s SSHSecurityKeys) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SSHSecurityKeys) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (s *SSHSecurityKeys) GetDiscriminator() *string {
	if s == nil {
		return nil
	}
	return s.Discriminator
}

func (s *SSHSecurityKeys) GetPrivateKey() *string {
	if s == nil {
		return nil
	}
	return s.PrivateKey
}

func (s *SSHSecurityKeys) GetPassphrase() *string {
	if s == nil {
		return nil
	}
	return s.Passphrase
}

type GiteaSecurityKeys struct {
	Discriminator *string `json:"discriminator,omitempty"`
	Username      *string `json:"username,omitempty"`
	Password      *string `json:"password,omitempty"`
}

func (g GiteaSecurityKeys) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GiteaSecurityKeys) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (g *GiteaSecurityKeys) GetDiscriminator() *string {
	if g == nil {
		return nil
	}
	return g.Discriminator
}

func (g *GiteaSecurityKeys) GetUsername() *string {
	if g == nil {
		return nil
	}
	return g.Username
}

func (g *GiteaSecurityKeys) GetPassword() *string {
	if g == nil {
		return nil
	}
	return g.Password
}

type BitBucketSecurityKeys struct {
	Discriminator *string `json:"discriminator,omitempty"`
	Username      *string `json:"username,omitempty"`
	Password      *string `json:"password,omitempty"`
}

func (b BitBucketSecurityKeys) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(b, "", false)
}

func (b *BitBucketSecurityKeys) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &b, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (b *BitBucketSecurityKeys) GetDiscriminator() *string {
	if b == nil {
		return nil
	}
	return b.Discriminator
}

func (b *BitBucketSecurityKeys) GetUsername() *string {
	if b == nil {
		return nil
	}
	return b.Username
}

func (b *BitBucketSecurityKeys) GetPassword() *string {
	if b == nil {
		return nil
	}
	return b.Password
}

type GitLabSecurityKeys struct {
	Discriminator *string `json:"discriminator,omitempty"`
	Username      *string `json:"username,omitempty"`
	Password      *string `json:"password,omitempty"`
	Token         *string `json:"token,omitempty"`
}

func (g GitLabSecurityKeys) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GitLabSecurityKeys) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (g *GitLabSecurityKeys) GetDiscriminator() *string {
	if g == nil {
		return nil
	}
	return g.Discriminator
}

func (g *GitLabSecurityKeys) GetUsername() *string {
	if g == nil {
		return nil
	}
	return g.Username
}

func (g *GitLabSecurityKeys) GetPassword() *string {
	if g == nil {
		return nil
	}
	return g.Password
}

func (g *GitLabSecurityKeys) GetToken() *string {
	if g == nil {
		return nil
	}
	return g.Token
}

type GitHubSecurityKeys struct {
	Discriminator *string `json:"discriminator,omitempty"`
	Username      *string `json:"username,omitempty"`
	Password      *string `json:"password,omitempty"`
}

func (g GitHubSecurityKeys) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GitHubSecurityKeys) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (g *GitHubSecurityKeys) GetDiscriminator() *string {
	if g == nil {
		return nil
	}
	return g.Discriminator
}

func (g *GitHubSecurityKeys) GetUsername() *string {
	if g == nil {
		return nil
	}
	return g.Username
}

func (g *GitHubSecurityKeys) GetPassword() *string {
	if g == nil {
		return nil
	}
	return g.Password
}

type SecurityKeysGoogleSecurityKeys struct {
	Discriminator *string `json:"discriminator,omitempty"`
	// Google Cloud service account key JSON (sensitive)
	Data *string `json:"data,omitempty"`
}

func (s SecurityKeysGoogleSecurityKeys) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SecurityKeysGoogleSecurityKeys) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (s *SecurityKeysGoogleSecurityKeys) GetDiscriminator() *string {
	if s == nil {
		return nil
	}
	return s.Discriminator
}

func (s *SecurityKeysGoogleSecurityKeys) GetData() *string {
	if s == nil {
		return nil
	}
	return s.Data
}

type SecurityKeysAwsSecurityKeys struct {
	Discriminator *string `json:"discriminator,omitempty"`
	AccessKey     *string `json:"accessKey,omitempty"`
	SecretKey     *string `json:"secretKey,omitempty"`
	AssumeRoleArn *string `json:"assumeRoleArn,omitempty"`
}

func (s SecurityKeysAwsSecurityKeys) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SecurityKeysAwsSecurityKeys) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (s *SecurityKeysAwsSecurityKeys) GetDiscriminator() *string {
	if s == nil {
		return nil
	}
	return s.Discriminator
}

func (s *SecurityKeysAwsSecurityKeys) GetAccessKey() *string {
	if s == nil {
		return nil
	}
	return s.AccessKey
}

func (s *SecurityKeysAwsSecurityKeys) GetSecretKey() *string {
	if s == nil {
		return nil
	}
	return s.SecretKey
}

func (s *SecurityKeysAwsSecurityKeys) GetAssumeRoleArn() *string {
	if s == nil {
		return nil
	}
	return s.AssumeRoleArn
}

type SecurityKeysType string

const (
	SecurityKeysTypeGithub        SecurityKeysType = "github"
	SecurityKeysTypeAzurerepos    SecurityKeysType = "azurerepos"
	SecurityKeysTypeAzureEntra    SecurityKeysType = "azure_entra"
	SecurityKeysTypeContainerReg  SecurityKeysType = "container-reg"
	SecurityKeysTypeTwAgent       SecurityKeysType = "tw-agent"
	SecurityKeysTypeK8s           SecurityKeysType = "k8s"
	SecurityKeysTypeSSH           SecurityKeysType = "ssh"
	SecurityKeysTypeGoogle        SecurityKeysType = "google"
	SecurityKeysTypeBitbucket     SecurityKeysType = "bitbucket"
	SecurityKeysTypeGitea         SecurityKeysType = "gitea"
	SecurityKeysTypeSeqeracompute SecurityKeysType = "seqeracompute"
	SecurityKeysTypeCodecommit    SecurityKeysType = "codecommit"
	SecurityKeysTypeGitlab        SecurityKeysType = "gitlab"
	SecurityKeysTypeAws           SecurityKeysType = "aws"
	SecurityKeysTypeAzure         SecurityKeysType = "azure"
)

type SecurityKeys struct {
	SecurityKeysAwsSecurityKeys    *SecurityKeysAwsSecurityKeys    `queryParam:"inline,name=SecurityKeys"`
	SecurityKeysGoogleSecurityKeys *SecurityKeysGoogleSecurityKeys `queryParam:"inline,name=SecurityKeys"`
	GitHubSecurityKeys             *GitHubSecurityKeys             `queryParam:"inline,name=SecurityKeys"`
	GitLabSecurityKeys             *GitLabSecurityKeys             `queryParam:"inline,name=SecurityKeys"`
	BitBucketSecurityKeys          *BitBucketSecurityKeys          `queryParam:"inline,name=SecurityKeys"`
	GiteaSecurityKeys              *GiteaSecurityKeys              `queryParam:"inline,name=SecurityKeys"`
	SSHSecurityKeys                *SSHSecurityKeys                `queryParam:"inline,name=SecurityKeys"`
	K8sSecurityKeys                *K8sSecurityKeys                `queryParam:"inline,name=SecurityKeys"`
	SecurityKeysAzureSecurityKeys  *SecurityKeysAzureSecurityKeys  `queryParam:"inline,name=SecurityKeys"`
	AzureReposSecurityKeys         *AzureReposSecurityKeys         `queryParam:"inline,name=SecurityKeys"`
	ContainerRegistryKeys          *ContainerRegistryKeys          `queryParam:"inline,name=SecurityKeys"`
	AgentSecurityKeys              *AgentSecurityKeys              `queryParam:"inline,name=SecurityKeys"`
	CodeCommitSecurityKeys         *CodeCommitSecurityKeys         `queryParam:"inline,name=SecurityKeys"`
	AzureEntraKeys                 *AzureEntraKeys                 `queryParam:"inline,name=SecurityKeys"`
	SeqeraComputeSecurityKeys      *SeqeraComputeSecurityKeys      `queryParam:"inline,name=SecurityKeys"`

	Type SecurityKeysType
}

func CreateSecurityKeysGithub(github GitHubSecurityKeys) SecurityKeys {
	typ := SecurityKeysTypeGithub

	typStr := string(typ)
	github.Discriminator = &typStr

	return SecurityKeys{
		GitHubSecurityKeys: &github,
		Type:               typ,
	}
}

func CreateSecurityKeysAzurerepos(azurerepos AzureReposSecurityKeys) SecurityKeys {
	typ := SecurityKeysTypeAzurerepos

	typStr := string(typ)
	azurerepos.Discriminator = &typStr

	return SecurityKeys{
		AzureReposSecurityKeys: &azurerepos,
		Type:                   typ,
	}
}

func CreateSecurityKeysAzureEntra(azureEntra AzureEntraKeys) SecurityKeys {
	typ := SecurityKeysTypeAzureEntra

	typStr := string(typ)
	azureEntra.Discriminator = &typStr

	return SecurityKeys{
		AzureEntraKeys: &azureEntra,
		Type:           typ,
	}
}

func CreateSecurityKeysContainerReg(containerReg ContainerRegistryKeys) SecurityKeys {
	typ := SecurityKeysTypeContainerReg

	typStr := string(typ)
	containerReg.Discriminator = &typStr

	return SecurityKeys{
		ContainerRegistryKeys: &containerReg,
		Type:                  typ,
	}
}

func CreateSecurityKeysTwAgent(twAgent AgentSecurityKeys) SecurityKeys {
	typ := SecurityKeysTypeTwAgent

	typStr := string(typ)
	twAgent.Discriminator = &typStr

	return SecurityKeys{
		AgentSecurityKeys: &twAgent,
		Type:              typ,
	}
}

func CreateSecurityKeysK8s(k8s K8sSecurityKeys) SecurityKeys {
	typ := SecurityKeysTypeK8s

	typStr := string(typ)
	k8s.Discriminator = &typStr

	return SecurityKeys{
		K8sSecurityKeys: &k8s,
		Type:            typ,
	}
}

func CreateSecurityKeysSSH(ssh SSHSecurityKeys) SecurityKeys {
	typ := SecurityKeysTypeSSH

	typStr := string(typ)
	ssh.Discriminator = &typStr

	return SecurityKeys{
		SSHSecurityKeys: &ssh,
		Type:            typ,
	}
}

func CreateSecurityKeysGoogle(google SecurityKeysGoogleSecurityKeys) SecurityKeys {
	typ := SecurityKeysTypeGoogle

	typStr := string(typ)
	google.Discriminator = &typStr

	return SecurityKeys{
		SecurityKeysGoogleSecurityKeys: &google,
		Type:                           typ,
	}
}

func CreateSecurityKeysBitbucket(bitbucket BitBucketSecurityKeys) SecurityKeys {
	typ := SecurityKeysTypeBitbucket

	typStr := string(typ)
	bitbucket.Discriminator = &typStr

	return SecurityKeys{
		BitBucketSecurityKeys: &bitbucket,
		Type:                  typ,
	}
}

func CreateSecurityKeysGitea(gitea GiteaSecurityKeys) SecurityKeys {
	typ := SecurityKeysTypeGitea

	typStr := string(typ)
	gitea.Discriminator = &typStr

	return SecurityKeys{
		GiteaSecurityKeys: &gitea,
		Type:              typ,
	}
}

func CreateSecurityKeysSeqeracompute(seqeracompute SeqeraComputeSecurityKeys) SecurityKeys {
	typ := SecurityKeysTypeSeqeracompute

	typStr := string(typ)
	seqeracompute.Discriminator = &typStr

	return SecurityKeys{
		SeqeraComputeSecurityKeys: &seqeracompute,
		Type:                      typ,
	}
}

func CreateSecurityKeysCodecommit(codecommit CodeCommitSecurityKeys) SecurityKeys {
	typ := SecurityKeysTypeCodecommit

	typStr := string(typ)
	codecommit.Discriminator = &typStr

	return SecurityKeys{
		CodeCommitSecurityKeys: &codecommit,
		Type:                   typ,
	}
}

func CreateSecurityKeysGitlab(gitlab GitLabSecurityKeys) SecurityKeys {
	typ := SecurityKeysTypeGitlab

	typStr := string(typ)
	gitlab.Discriminator = &typStr

	return SecurityKeys{
		GitLabSecurityKeys: &gitlab,
		Type:               typ,
	}
}

func CreateSecurityKeysAws(aws SecurityKeysAwsSecurityKeys) SecurityKeys {
	typ := SecurityKeysTypeAws

	typStr := string(typ)
	aws.Discriminator = &typStr

	return SecurityKeys{
		SecurityKeysAwsSecurityKeys: &aws,
		Type:                        typ,
	}
}

func CreateSecurityKeysAzure(azure SecurityKeysAzureSecurityKeys) SecurityKeys {
	typ := SecurityKeysTypeAzure

	typStr := string(typ)
	azure.Discriminator = &typStr

	return SecurityKeys{
		SecurityKeysAzureSecurityKeys: &azure,
		Type:                          typ,
	}
}

func (u *SecurityKeys) UnmarshalJSON(data []byte) error {

	type discriminator struct {
		Discriminator string `json:"discriminator"`
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.Discriminator {
	case "github":
		gitHubSecurityKeys := new(GitHubSecurityKeys)
		if err := utils.UnmarshalJSON(data, &gitHubSecurityKeys, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Discriminator == github) type GitHubSecurityKeys within SecurityKeys: %w", string(data), err)
		}

		u.GitHubSecurityKeys = gitHubSecurityKeys
		u.Type = SecurityKeysTypeGithub
		return nil
	case "azurerepos":
		azureReposSecurityKeys := new(AzureReposSecurityKeys)
		if err := utils.UnmarshalJSON(data, &azureReposSecurityKeys, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Discriminator == azurerepos) type AzureReposSecurityKeys within SecurityKeys: %w", string(data), err)
		}

		u.AzureReposSecurityKeys = azureReposSecurityKeys
		u.Type = SecurityKeysTypeAzurerepos
		return nil
	case "azure_entra":
		azureEntraKeys := new(AzureEntraKeys)
		if err := utils.UnmarshalJSON(data, &azureEntraKeys, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Discriminator == azure_entra) type AzureEntraKeys within SecurityKeys: %w", string(data), err)
		}

		u.AzureEntraKeys = azureEntraKeys
		u.Type = SecurityKeysTypeAzureEntra
		return nil
	case "container-reg":
		containerRegistryKeys := new(ContainerRegistryKeys)
		if err := utils.UnmarshalJSON(data, &containerRegistryKeys, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Discriminator == container-reg) type ContainerRegistryKeys within SecurityKeys: %w", string(data), err)
		}

		u.ContainerRegistryKeys = containerRegistryKeys
		u.Type = SecurityKeysTypeContainerReg
		return nil
	case "tw-agent":
		agentSecurityKeys := new(AgentSecurityKeys)
		if err := utils.UnmarshalJSON(data, &agentSecurityKeys, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Discriminator == tw-agent) type AgentSecurityKeys within SecurityKeys: %w", string(data), err)
		}

		u.AgentSecurityKeys = agentSecurityKeys
		u.Type = SecurityKeysTypeTwAgent
		return nil
	case "k8s":
		k8sSecurityKeys := new(K8sSecurityKeys)
		if err := utils.UnmarshalJSON(data, &k8sSecurityKeys, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Discriminator == k8s) type K8sSecurityKeys within SecurityKeys: %w", string(data), err)
		}

		u.K8sSecurityKeys = k8sSecurityKeys
		u.Type = SecurityKeysTypeK8s
		return nil
	case "ssh":
		sshSecurityKeys := new(SSHSecurityKeys)
		if err := utils.UnmarshalJSON(data, &sshSecurityKeys, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Discriminator == ssh) type SSHSecurityKeys within SecurityKeys: %w", string(data), err)
		}

		u.SSHSecurityKeys = sshSecurityKeys
		u.Type = SecurityKeysTypeSSH
		return nil
	case "google":
		securityKeysGoogleSecurityKeys := new(SecurityKeysGoogleSecurityKeys)
		if err := utils.UnmarshalJSON(data, &securityKeysGoogleSecurityKeys, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Discriminator == google) type SecurityKeysGoogleSecurityKeys within SecurityKeys: %w", string(data), err)
		}

		u.SecurityKeysGoogleSecurityKeys = securityKeysGoogleSecurityKeys
		u.Type = SecurityKeysTypeGoogle
		return nil
	case "bitbucket":
		bitBucketSecurityKeys := new(BitBucketSecurityKeys)
		if err := utils.UnmarshalJSON(data, &bitBucketSecurityKeys, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Discriminator == bitbucket) type BitBucketSecurityKeys within SecurityKeys: %w", string(data), err)
		}

		u.BitBucketSecurityKeys = bitBucketSecurityKeys
		u.Type = SecurityKeysTypeBitbucket
		return nil
	case "gitea":
		giteaSecurityKeys := new(GiteaSecurityKeys)
		if err := utils.UnmarshalJSON(data, &giteaSecurityKeys, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Discriminator == gitea) type GiteaSecurityKeys within SecurityKeys: %w", string(data), err)
		}

		u.GiteaSecurityKeys = giteaSecurityKeys
		u.Type = SecurityKeysTypeGitea
		return nil
	case "seqeracompute":
		seqeraComputeSecurityKeys := new(SeqeraComputeSecurityKeys)
		if err := utils.UnmarshalJSON(data, &seqeraComputeSecurityKeys, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Discriminator == seqeracompute) type SeqeraComputeSecurityKeys within SecurityKeys: %w", string(data), err)
		}

		u.SeqeraComputeSecurityKeys = seqeraComputeSecurityKeys
		u.Type = SecurityKeysTypeSeqeracompute
		return nil
	case "codecommit":
		codeCommitSecurityKeys := new(CodeCommitSecurityKeys)
		if err := utils.UnmarshalJSON(data, &codeCommitSecurityKeys, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Discriminator == codecommit) type CodeCommitSecurityKeys within SecurityKeys: %w", string(data), err)
		}

		u.CodeCommitSecurityKeys = codeCommitSecurityKeys
		u.Type = SecurityKeysTypeCodecommit
		return nil
	case "gitlab":
		gitLabSecurityKeys := new(GitLabSecurityKeys)
		if err := utils.UnmarshalJSON(data, &gitLabSecurityKeys, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Discriminator == gitlab) type GitLabSecurityKeys within SecurityKeys: %w", string(data), err)
		}

		u.GitLabSecurityKeys = gitLabSecurityKeys
		u.Type = SecurityKeysTypeGitlab
		return nil
	case "aws":
		securityKeysAwsSecurityKeys := new(SecurityKeysAwsSecurityKeys)
		if err := utils.UnmarshalJSON(data, &securityKeysAwsSecurityKeys, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Discriminator == aws) type SecurityKeysAwsSecurityKeys within SecurityKeys: %w", string(data), err)
		}

		u.SecurityKeysAwsSecurityKeys = securityKeysAwsSecurityKeys
		u.Type = SecurityKeysTypeAws
		return nil
	case "azure":
		securityKeysAzureSecurityKeys := new(SecurityKeysAzureSecurityKeys)
		if err := utils.UnmarshalJSON(data, &securityKeysAzureSecurityKeys, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Discriminator == azure) type SecurityKeysAzureSecurityKeys within SecurityKeys: %w", string(data), err)
		}

		u.SecurityKeysAzureSecurityKeys = securityKeysAzureSecurityKeys
		u.Type = SecurityKeysTypeAzure
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for SecurityKeys", string(data))
}

func (u SecurityKeys) MarshalJSON() ([]byte, error) {
	if u.SecurityKeysAwsSecurityKeys != nil {
		return utils.MarshalJSON(u.SecurityKeysAwsSecurityKeys, "", true)
	}

	if u.SecurityKeysGoogleSecurityKeys != nil {
		return utils.MarshalJSON(u.SecurityKeysGoogleSecurityKeys, "", true)
	}

	if u.GitHubSecurityKeys != nil {
		return utils.MarshalJSON(u.GitHubSecurityKeys, "", true)
	}

	if u.GitLabSecurityKeys != nil {
		return utils.MarshalJSON(u.GitLabSecurityKeys, "", true)
	}

	if u.BitBucketSecurityKeys != nil {
		return utils.MarshalJSON(u.BitBucketSecurityKeys, "", true)
	}

	if u.GiteaSecurityKeys != nil {
		return utils.MarshalJSON(u.GiteaSecurityKeys, "", true)
	}

	if u.SSHSecurityKeys != nil {
		return utils.MarshalJSON(u.SSHSecurityKeys, "", true)
	}

	if u.K8sSecurityKeys != nil {
		return utils.MarshalJSON(u.K8sSecurityKeys, "", true)
	}

	if u.SecurityKeysAzureSecurityKeys != nil {
		return utils.MarshalJSON(u.SecurityKeysAzureSecurityKeys, "", true)
	}

	if u.AzureReposSecurityKeys != nil {
		return utils.MarshalJSON(u.AzureReposSecurityKeys, "", true)
	}

	if u.ContainerRegistryKeys != nil {
		return utils.MarshalJSON(u.ContainerRegistryKeys, "", true)
	}

	if u.AgentSecurityKeys != nil {
		return utils.MarshalJSON(u.AgentSecurityKeys, "", true)
	}

	if u.CodeCommitSecurityKeys != nil {
		return utils.MarshalJSON(u.CodeCommitSecurityKeys, "", true)
	}

	if u.AzureEntraKeys != nil {
		return utils.MarshalJSON(u.AzureEntraKeys, "", true)
	}

	if u.SeqeraComputeSecurityKeys != nil {
		return utils.MarshalJSON(u.SeqeraComputeSecurityKeys, "", true)
	}

	return nil, errors.New("could not marshal union type SecurityKeys: all fields are null")
}
