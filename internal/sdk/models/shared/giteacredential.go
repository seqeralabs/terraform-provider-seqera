// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/seqeralabs/terraform-provider-seqera/internal/sdk/internal/utils"
	"time"
)

// GiteaCredentialProviderType - Cloud provider type (automatically set to "gitea")
type GiteaCredentialProviderType string

const (
	GiteaCredentialProviderTypeGitea GiteaCredentialProviderType = "gitea"
)

func (e GiteaCredentialProviderType) ToPointer() *GiteaCredentialProviderType {
	return &e
}
func (e *GiteaCredentialProviderType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gitea":
		*e = GiteaCredentialProviderType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GiteaCredentialProviderType: %v", v)
	}
}

type GiteaCredentialKeys struct {
	// Gitea account username (required)
	Username string `json:"username"`
	// Gitea account password (required, sensitive)
	Password string `json:"password"`
	// Repository base URL for Gitea server or to associate with specific repository (optional). Example: https://try.gitea.io/seqera/tower
	BaseURL *string `json:"baseUrl,omitempty"`
}

func (g *GiteaCredentialKeys) GetUsername() string {
	if g == nil {
		return ""
	}
	return g.Username
}

func (g *GiteaCredentialKeys) GetPassword() string {
	if g == nil {
		return ""
	}
	return g.Password
}

func (g *GiteaCredentialKeys) GetBaseURL() *string {
	if g == nil {
		return nil
	}
	return g.BaseURL
}

type GiteaCredential struct {
	// Unique identifier for the credential (max 22 characters)
	ID *string `json:"id,omitempty"`
	// Display name for the credential. Must be 2-99 characters using only letters, numbers, underscores, and hyphens. No spaces allowed.
	Name string `json:"name"`
	// Cloud provider type (automatically set to "gitea")
	ProviderType *GiteaCredentialProviderType `default:"gitea" json:"provider"`
	// Flag indicating if the credential has been soft-deleted
	Deleted *bool `json:"deleted,omitempty"`
	// Timestamp when the credential was last used
	LastUsed *time.Time `json:"lastUsed,omitempty"`
	// Timestamp when the credential was created
	DateCreated *time.Time `json:"dateCreated,omitempty"`
	// Timestamp when the credential was last updated
	LastUpdated *time.Time          `json:"lastUpdated,omitempty"`
	Keys        GiteaCredentialKeys `json:"keys"`
}

func (g GiteaCredential) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GiteaCredential) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, []string{"name", "keys"}); err != nil {
		return err
	}
	return nil
}

func (g *GiteaCredential) GetID() *string {
	if g == nil {
		return nil
	}
	return g.ID
}

func (g *GiteaCredential) GetName() string {
	if g == nil {
		return ""
	}
	return g.Name
}

func (g *GiteaCredential) GetProviderType() *GiteaCredentialProviderType {
	if g == nil {
		return nil
	}
	return g.ProviderType
}

func (g *GiteaCredential) GetDeleted() *bool {
	if g == nil {
		return nil
	}
	return g.Deleted
}

func (g *GiteaCredential) GetLastUsed() *time.Time {
	if g == nil {
		return nil
	}
	return g.LastUsed
}

func (g *GiteaCredential) GetDateCreated() *time.Time {
	if g == nil {
		return nil
	}
	return g.DateCreated
}

func (g *GiteaCredential) GetLastUpdated() *time.Time {
	if g == nil {
		return nil
	}
	return g.LastUpdated
}

func (g *GiteaCredential) GetKeys() GiteaCredentialKeys {
	if g == nil {
		return GiteaCredentialKeys{}
	}
	return g.Keys
}

type GiteaCredentialKeysOutput struct {
	// Gitea account username (required)
	Username string `json:"username"`
}

func (g *GiteaCredentialKeysOutput) GetUsername() string {
	if g == nil {
		return ""
	}
	return g.Username
}

type GiteaCredentialOutput struct {
	// Unique identifier for the credential (max 22 characters)
	ID *string `json:"id,omitempty"`
	// Display name for the credential. Must be 2-99 characters using only letters, numbers, underscores, and hyphens. No spaces allowed.
	Name string `json:"name"`
	// Cloud provider type (automatically set to "gitea")
	ProviderType *GiteaCredentialProviderType `default:"gitea" json:"provider"`
	// Flag indicating if the credential has been soft-deleted
	Deleted *bool `json:"deleted,omitempty"`
	// Timestamp when the credential was last used
	LastUsed *time.Time `json:"lastUsed,omitempty"`
	// Timestamp when the credential was created
	DateCreated *time.Time `json:"dateCreated,omitempty"`
	// Timestamp when the credential was last updated
	LastUpdated *time.Time                `json:"lastUpdated,omitempty"`
	Keys        GiteaCredentialKeysOutput `json:"keys"`
}

func (g GiteaCredentialOutput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GiteaCredentialOutput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, []string{"name", "keys"}); err != nil {
		return err
	}
	return nil
}

func (g *GiteaCredentialOutput) GetID() *string {
	if g == nil {
		return nil
	}
	return g.ID
}

func (g *GiteaCredentialOutput) GetName() string {
	if g == nil {
		return ""
	}
	return g.Name
}

func (g *GiteaCredentialOutput) GetProviderType() *GiteaCredentialProviderType {
	if g == nil {
		return nil
	}
	return g.ProviderType
}

func (g *GiteaCredentialOutput) GetDeleted() *bool {
	if g == nil {
		return nil
	}
	return g.Deleted
}

func (g *GiteaCredentialOutput) GetLastUsed() *time.Time {
	if g == nil {
		return nil
	}
	return g.LastUsed
}

func (g *GiteaCredentialOutput) GetDateCreated() *time.Time {
	if g == nil {
		return nil
	}
	return g.DateCreated
}

func (g *GiteaCredentialOutput) GetLastUpdated() *time.Time {
	if g == nil {
		return nil
	}
	return g.LastUpdated
}

func (g *GiteaCredentialOutput) GetKeys() GiteaCredentialKeysOutput {
	if g == nil {
		return GiteaCredentialKeysOutput{}
	}
	return g.Keys
}
