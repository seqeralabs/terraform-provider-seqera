// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/seqeralabs/terraform-provider-seqera/internal/sdk/internal/utils"
	"time"
)

// ContainerRegistryCredentialProviderType - Cloud provider type (automatically set to "container-reg")
type ContainerRegistryCredentialProviderType string

const (
	ContainerRegistryCredentialProviderTypeContainerReg ContainerRegistryCredentialProviderType = "container-reg"
)

func (e ContainerRegistryCredentialProviderType) ToPointer() *ContainerRegistryCredentialProviderType {
	return &e
}
func (e *ContainerRegistryCredentialProviderType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "container-reg":
		*e = ContainerRegistryCredentialProviderType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ContainerRegistryCredentialProviderType: %v", v)
	}
}

type ContainerRegistryCredentialKeys struct {
	// Username for container registry authentication (required)
	UserName string `json:"userName"`
	// Password or access token for container registry authentication (required, sensitive)
	Password string `json:"password"`
	// Container registry server URL (optional). Examples: docker.io, gcr.io, account.dkr.ecr.region.amazonaws.com
	Registry *string `json:"registry,omitempty"`
}

func (c *ContainerRegistryCredentialKeys) GetUserName() string {
	if c == nil {
		return ""
	}
	return c.UserName
}

func (c *ContainerRegistryCredentialKeys) GetPassword() string {
	if c == nil {
		return ""
	}
	return c.Password
}

func (c *ContainerRegistryCredentialKeys) GetRegistry() *string {
	if c == nil {
		return nil
	}
	return c.Registry
}

type ContainerRegistryCredential struct {
	// Unique identifier for the credential (max 22 characters)
	ID *string `json:"id,omitempty"`
	// Display name for the credential (max 100 characters)
	Name string `json:"name"`
	// Cloud provider type (automatically set to "container-reg")
	ProviderType *ContainerRegistryCredentialProviderType `default:"container-reg" json:"provider"`
	// Flag indicating if the credential has been soft-deleted
	Deleted *bool `json:"deleted,omitempty"`
	// Timestamp when the credential was last used
	LastUsed *time.Time `json:"lastUsed,omitempty"`
	// Timestamp when the credential was created
	DateCreated *time.Time `json:"dateCreated,omitempty"`
	// Timestamp when the credential was last updated
	LastUpdated *time.Time                      `json:"lastUpdated,omitempty"`
	Keys        ContainerRegistryCredentialKeys `json:"keys"`
}

func (c ContainerRegistryCredential) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ContainerRegistryCredential) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"name", "keys"}); err != nil {
		return err
	}
	return nil
}

func (c *ContainerRegistryCredential) GetID() *string {
	if c == nil {
		return nil
	}
	return c.ID
}

func (c *ContainerRegistryCredential) GetName() string {
	if c == nil {
		return ""
	}
	return c.Name
}

func (c *ContainerRegistryCredential) GetProviderType() *ContainerRegistryCredentialProviderType {
	if c == nil {
		return nil
	}
	return c.ProviderType
}

func (c *ContainerRegistryCredential) GetDeleted() *bool {
	if c == nil {
		return nil
	}
	return c.Deleted
}

func (c *ContainerRegistryCredential) GetLastUsed() *time.Time {
	if c == nil {
		return nil
	}
	return c.LastUsed
}

func (c *ContainerRegistryCredential) GetDateCreated() *time.Time {
	if c == nil {
		return nil
	}
	return c.DateCreated
}

func (c *ContainerRegistryCredential) GetLastUpdated() *time.Time {
	if c == nil {
		return nil
	}
	return c.LastUpdated
}

func (c *ContainerRegistryCredential) GetKeys() ContainerRegistryCredentialKeys {
	if c == nil {
		return ContainerRegistryCredentialKeys{}
	}
	return c.Keys
}

type ContainerRegistryCredentialKeysOutput struct {
	// Username for container registry authentication (required)
	UserName string `json:"userName"`
}

func (c *ContainerRegistryCredentialKeysOutput) GetUserName() string {
	if c == nil {
		return ""
	}
	return c.UserName
}

type ContainerRegistryCredentialOutput struct {
	// Unique identifier for the credential (max 22 characters)
	ID *string `json:"id,omitempty"`
	// Display name for the credential (max 100 characters)
	Name string `json:"name"`
	// Cloud provider type (automatically set to "container-reg")
	ProviderType *ContainerRegistryCredentialProviderType `default:"container-reg" json:"provider"`
	// Flag indicating if the credential has been soft-deleted
	Deleted *bool `json:"deleted,omitempty"`
	// Timestamp when the credential was last used
	LastUsed *time.Time `json:"lastUsed,omitempty"`
	// Timestamp when the credential was created
	DateCreated *time.Time `json:"dateCreated,omitempty"`
	// Timestamp when the credential was last updated
	LastUpdated *time.Time                            `json:"lastUpdated,omitempty"`
	Keys        ContainerRegistryCredentialKeysOutput `json:"keys"`
}

func (c ContainerRegistryCredentialOutput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ContainerRegistryCredentialOutput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"name", "keys"}); err != nil {
		return err
	}
	return nil
}

func (c *ContainerRegistryCredentialOutput) GetID() *string {
	if c == nil {
		return nil
	}
	return c.ID
}

func (c *ContainerRegistryCredentialOutput) GetName() string {
	if c == nil {
		return ""
	}
	return c.Name
}

func (c *ContainerRegistryCredentialOutput) GetProviderType() *ContainerRegistryCredentialProviderType {
	if c == nil {
		return nil
	}
	return c.ProviderType
}

func (c *ContainerRegistryCredentialOutput) GetDeleted() *bool {
	if c == nil {
		return nil
	}
	return c.Deleted
}

func (c *ContainerRegistryCredentialOutput) GetLastUsed() *time.Time {
	if c == nil {
		return nil
	}
	return c.LastUsed
}

func (c *ContainerRegistryCredentialOutput) GetDateCreated() *time.Time {
	if c == nil {
		return nil
	}
	return c.DateCreated
}

func (c *ContainerRegistryCredentialOutput) GetLastUpdated() *time.Time {
	if c == nil {
		return nil
	}
	return c.LastUpdated
}

func (c *ContainerRegistryCredentialOutput) GetKeys() ContainerRegistryCredentialKeysOutput {
	if c == nil {
		return ContainerRegistryCredentialKeysOutput{}
	}
	return c.Keys
}
