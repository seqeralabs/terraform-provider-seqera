// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	tfTypes "github.com/speakeasy/terraform-provider-seqera/internal/provider/types"
	"github.com/speakeasy/terraform-provider-seqera/internal/sdk"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &StudiosDataSource{}
var _ datasource.DataSourceWithConfigure = &StudiosDataSource{}

func NewStudiosDataSource() datasource.DataSource {
	return &StudiosDataSource{}
}

// StudiosDataSource is the data source implementation.
type StudiosDataSource struct {
	// Provider configured SDK client.
	client *sdk.Seqera
}

// StudiosDataSourceModel describes the data model.
type StudiosDataSourceModel struct {
	ActiveConnections      []tfTypes.ActiveConnection             `tfsdk:"active_connections"`
	BaseImage              types.String                           `tfsdk:"base_image"`
	ComputeEnv             *tfTypes.DataStudioComputeEnvDto       `tfsdk:"compute_env"`
	Configuration          *tfTypes.DataStudioConfiguration       `tfsdk:"configuration"`
	CustomImage            types.Bool                             `tfsdk:"custom_image"`
	DateCreated            types.String                           `tfsdk:"date_created"`
	Description            types.String                           `tfsdk:"description"`
	EffectiveLifespanHours types.Int32                            `tfsdk:"effective_lifespan_hours"`
	IsPrivate              types.Bool                             `tfsdk:"is_private"`
	Labels                 []tfTypes.LabelDbDto                   `tfsdk:"labels"`
	LastStarted            types.String                           `tfsdk:"last_started"`
	LastUpdated            types.String                           `tfsdk:"last_updated"`
	MountedDataLinks       []tfTypes.DataLinkDto                  `tfsdk:"mounted_data_links"`
	Name                   types.String                           `tfsdk:"name"`
	ParentCheckpoint       *tfTypes.DataStudioDtoParentCheckpoint `tfsdk:"parent_checkpoint"`
	Progress               []tfTypes.DataStudioProgressStep       `tfsdk:"progress"`
	SessionID              types.String                           `tfsdk:"session_id"`
	StatusInfo             *tfTypes.DataStudioStatusInfo          `tfsdk:"status_info"`
	StudioURL              types.String                           `tfsdk:"studio_url"`
	Template               *tfTypes.DataStudioTemplate            `tfsdk:"template"`
	User                   *tfTypes.StudioUser                    `tfsdk:"user"`
	WaveBuildURL           types.String                           `tfsdk:"wave_build_url"`
	WorkspaceID            types.Int64                            `queryParam:"style=form,explode=true,name=workspaceId" tfsdk:"workspace_id"`
}

// Metadata returns the data source type name.
func (r *StudiosDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_studios"
}

// Schema defines the schema for the data source.
func (r *StudiosDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "Studios DataSource",

		Attributes: map[string]schema.Attribute{
			"active_connections": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"avatar": schema.StringAttribute{
							Computed: true,
						},
						"email": schema.StringAttribute{
							Computed: true,
						},
						"id": schema.Int64Attribute{
							Computed: true,
						},
						"last_active": schema.StringAttribute{
							Computed: true,
						},
						"user_name": schema.StringAttribute{
							Computed: true,
						},
					},
				},
			},
			"base_image": schema.StringAttribute{
				Computed: true,
			},
			"compute_env": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"credentials_id": schema.StringAttribute{
						Computed: true,
					},
					"id": schema.StringAttribute{
						Computed: true,
					},
					"name": schema.StringAttribute{
						Computed: true,
					},
					"platform": schema.StringAttribute{
						Computed: true,
					},
					"region": schema.StringAttribute{
						Computed: true,
					},
					"work_dir": schema.StringAttribute{
						Computed: true,
					},
				},
			},
			"configuration": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"conda_environment": schema.StringAttribute{
						Computed: true,
					},
					"cpu": schema.Int32Attribute{
						Computed: true,
					},
					"gpu": schema.Int32Attribute{
						Computed: true,
					},
					"lifespan_hours": schema.Int32Attribute{
						Computed: true,
					},
					"memory": schema.Int32Attribute{
						Computed: true,
					},
					"mount_data": schema.ListAttribute{
						Computed:    true,
						ElementType: types.StringType,
					},
				},
			},
			"custom_image": schema.BoolAttribute{
				Computed: true,
			},
			"date_created": schema.StringAttribute{
				Computed: true,
			},
			"description": schema.StringAttribute{
				Computed:    true,
				Description: `Description of the Studio session's purpose`,
			},
			"effective_lifespan_hours": schema.Int32Attribute{
				Computed: true,
			},
			"is_private": schema.BoolAttribute{
				Computed: true,
			},
			"labels": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"date_created": schema.StringAttribute{
							Computed:    true,
							Description: `Timestamp when the label was created`,
						},
						"id": schema.Int64Attribute{
							Computed:    true,
							Description: `Unique numeric identifier for the label`,
						},
						"is_default": schema.BoolAttribute{
							Computed:    true,
							Description: `Flag indicating if this is a default system label`,
						},
						"name": schema.StringAttribute{
							Computed:    true,
							Description: `Name or key of the label`,
						},
						"resource": schema.BoolAttribute{
							Computed:    true,
							Description: `Flag indicating if this is a resource-level label`,
						},
						"value": schema.StringAttribute{
							Computed:    true,
							Description: `Value associated with the label`,
						},
					},
				},
			},
			"last_started": schema.StringAttribute{
				Computed: true,
			},
			"last_updated": schema.StringAttribute{
				Computed: true,
			},
			"mounted_data_links": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"credentials": schema.ListNestedAttribute{
							Computed: true,
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"id": schema.StringAttribute{
										Computed: true,
									},
									"name": schema.StringAttribute{
										Computed: true,
									},
									"provider_type": schema.StringAttribute{
										Computed: true,
									},
								},
							},
							Description: `Array of credentials required to access the data link`,
						},
						"data_link_id": schema.StringAttribute{
							Computed:    true,
							Description: `Unique identifier for the data link`,
						},
						"description": schema.StringAttribute{
							Computed:    true,
							Description: `Description of the data link's purpose and contents`,
						},
						"hidden": schema.BoolAttribute{
							Computed: true,
						},
						"message": schema.StringAttribute{
							Computed: true,
						},
						"name": schema.StringAttribute{
							Computed:    true,
							Description: `Display name for the data link connection`,
						},
						"provider_type": schema.StringAttribute{
							Computed: true,
						},
						"public_accessible": schema.BoolAttribute{
							Computed: true,
						},
						"region": schema.StringAttribute{
							Computed:    true,
							Description: `Geographic region where the data link is hosted`,
						},
						"resource_ref": schema.StringAttribute{
							Computed:    true,
							Description: `Reference identifier for the external resource`,
						},
						"status": schema.StringAttribute{
							Computed: true,
						},
						"type": schema.StringAttribute{
							Computed: true,
						},
					},
				},
			},
			"name": schema.StringAttribute{
				Computed:    true,
				Description: `Display name for the Studio session`,
			},
			"parent_checkpoint": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"checkpoint_id": schema.Int64Attribute{
						Computed: true,
					},
					"checkpoint_name": schema.StringAttribute{
						Computed: true,
					},
					"session_id": schema.StringAttribute{
						Computed: true,
					},
					"studio_name": schema.StringAttribute{
						Computed: true,
					},
				},
			},
			"progress": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"message": schema.StringAttribute{
							Computed: true,
						},
						"status": schema.StringAttribute{
							Computed: true,
						},
						"warnings": schema.ListAttribute{
							Computed:    true,
							ElementType: types.StringType,
						},
					},
				},
			},
			"session_id": schema.StringAttribute{
				Computed:    true,
				Description: `Studio session numeric identifier`,
			},
			"status_info": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"last_update": schema.StringAttribute{
						Computed: true,
					},
					"message": schema.StringAttribute{
						Computed: true,
					},
					"status": schema.StringAttribute{
						Computed: true,
					},
				},
			},
			"studio_url": schema.StringAttribute{
				Computed:    true,
				Description: `URL to access the running Studio instance`,
			},
			"template": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"icon": schema.StringAttribute{
						Computed: true,
					},
					"repository": schema.StringAttribute{
						Computed: true,
					},
					"status": schema.StringAttribute{
						Computed: true,
					},
					"tool": schema.StringAttribute{
						Computed: true,
					},
				},
			},
			"user": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"avatar": schema.StringAttribute{
						Computed: true,
					},
					"email": schema.StringAttribute{
						Computed: true,
					},
					"id": schema.Int64Attribute{
						Computed: true,
					},
					"user_name": schema.StringAttribute{
						Computed: true,
					},
				},
			},
			"wave_build_url": schema.StringAttribute{
				Computed: true,
			},
			"workspace_id": schema.Int64Attribute{
				Computed:    true,
				Optional:    true,
				Description: `Workspace numeric identifier`,
			},
		},
	}
}

func (r *StudiosDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.Seqera)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.Seqera, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *StudiosDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *StudiosDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsDescribeDataStudioRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Studios.DescribeDataStudio(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	switch res.StatusCode {
	case 200, 202:
		break
	default:
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.DataStudioDto != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedDataStudioDto(ctx, res.DataStudioDto)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
