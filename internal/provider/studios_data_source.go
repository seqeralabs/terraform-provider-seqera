// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	tfTypes "github.com/seqeralabs/terraform-provider-seqera/internal/provider/types"
	"github.com/seqeralabs/terraform-provider-seqera/internal/sdk"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &StudiosDataSource{}
var _ datasource.DataSourceWithConfigure = &StudiosDataSource{}

func NewStudiosDataSource() datasource.DataSource {
	return &StudiosDataSource{}
}

// StudiosDataSource is the data source implementation.
type StudiosDataSource struct {
	// Provider configured SDK client.
	client *sdk.Seqera
}

// StudiosDataSourceModel describes the data model.
type StudiosDataSourceModel struct {
	Configuration *tfTypes.DataStudioConfiguration `tfsdk:"configuration"`
	Description   types.String                     `tfsdk:"description"`
	IsPrivate     types.Bool                       `tfsdk:"is_private"`
	Name          types.String                     `tfsdk:"name"`
	SessionID     types.String                     `tfsdk:"session_id"`
	WorkspaceID   types.Int64                      `queryParam:"style=form,explode=true,name=workspaceId" tfsdk:"workspace_id"`
}

// Metadata returns the data source type name.
func (r *StudiosDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_studios"
}

// Schema defines the schema for the data source.
func (r *StudiosDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "Studios is a unified platform where you can host a combination of\ncontainer images and compute environments for interactive analysis using\nyour preferred tools, like JupyterLab, an R-IDE, Visual Studio Code IDEs,\nor Xpra remote desktops. Each Studio session is an individual interactive\nenvironment that encapsulates the live environment for dynamic data analysis.\n\nNote:\nOn Seqera Cloud, the free tier permits only one running Studio session at a time.\nTo run simultaneous sessions, contact Seqera for a Seqera Cloud Pro license.\n",

		Attributes: map[string]schema.Attribute{
			"configuration": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"conda_environment": schema.StringAttribute{
						Computed: true,
					},
					"cpu": schema.Int32Attribute{
						Computed:    true,
						Description: `Number of CPU cores to allocate. Set to 0 to use the compute environment configured defaults.`,
					},
					"environment": schema.MapAttribute{
						Computed:    true,
						ElementType: types.StringType,
						Description: `Studio-specific environment variables as key-value pairs. Variable names must contain only alphanumeric and underscore characters, and cannot begin with a number.`,
					},
					"gpu": schema.Int32Attribute{
						Computed:    true,
						Description: `Set to 0 to disable GPU or 1 to enable GPU.`,
					},
					"lifespan_hours": schema.Int32Attribute{
						Computed:    true,
						Description: `Maximum lifespan of the Studio session in hours`,
					},
					"memory": schema.Int32Attribute{
						Computed:    true,
						Description: `Memory allocation for the Studio session in megabytes (MB). Set to 0 to use the compute environment configured defaults.`,
					},
					"mount_data": schema.ListAttribute{
						Computed:    true,
						ElementType: types.StringType,
					},
				},
			},
			"description": schema.StringAttribute{
				Computed:    true,
				Description: `Description of the Studio session's purpose`,
			},
			"is_private": schema.BoolAttribute{
				Computed: true,
			},
			"name": schema.StringAttribute{
				Computed:    true,
				Description: `Display name for the Studio session`,
			},
			"session_id": schema.StringAttribute{
				Computed:    true,
				Description: `Studio session numeric identifier`,
			},
			"workspace_id": schema.Int64Attribute{
				Computed:    true,
				Optional:    true,
				Description: `Workspace numeric identifier`,
			},
		},
	}
}

func (r *StudiosDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.Seqera)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.Seqera, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *StudiosDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *StudiosDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsDescribeDataStudioRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Studios.DescribeDataStudio(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	switch res.StatusCode {
	case 200, 202:
		break
	default:
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.DataStudioDto != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedDataStudioDto(ctx, res.DataStudioDto)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
