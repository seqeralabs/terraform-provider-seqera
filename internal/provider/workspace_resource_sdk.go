// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/speakeasy/terraform-provider-seqera/internal/provider/typeconvert"
	"github.com/speakeasy/terraform-provider-seqera/internal/sdk/models/operations"
	"github.com/speakeasy/terraform-provider-seqera/internal/sdk/models/shared"
	"time"
)

func (r *WorkspaceResourceModel) ToSharedCreateWorkspaceRequest(ctx context.Context) (*shared.CreateWorkspaceRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var workspace *shared.Workspace
	if r.Workspace != nil {
		id := new(int64)
		if !r.Workspace.ID.IsUnknown() && !r.Workspace.ID.IsNull() {
			*id = r.Workspace.ID.ValueInt64()
		} else {
			id = nil
		}
		var name string
		name = r.Workspace.Name.ValueString()

		var fullName string
		fullName = r.Workspace.FullName.ValueString()

		description := new(string)
		if !r.Workspace.Description.IsUnknown() && !r.Workspace.Description.IsNull() {
			*description = r.Workspace.Description.ValueString()
		} else {
			description = nil
		}
		visibility := shared.Visibility(r.Workspace.Visibility.ValueString())
		dateCreated := new(time.Time)
		if !r.Workspace.DateCreated.IsUnknown() && !r.Workspace.DateCreated.IsNull() {
			*dateCreated, _ = time.Parse(time.RFC3339Nano, r.Workspace.DateCreated.ValueString())
		} else {
			dateCreated = nil
		}
		lastUpdated := new(time.Time)
		if !r.Workspace.LastUpdated.IsUnknown() && !r.Workspace.LastUpdated.IsNull() {
			*lastUpdated, _ = time.Parse(time.RFC3339Nano, r.Workspace.LastUpdated.ValueString())
		} else {
			lastUpdated = nil
		}
		workspace = &shared.Workspace{
			ID:          id,
			Name:        name,
			FullName:    fullName,
			Description: description,
			Visibility:  visibility,
			DateCreated: dateCreated,
			LastUpdated: lastUpdated,
		}
	}
	out := shared.CreateWorkspaceRequest{
		Workspace: workspace,
	}

	return &out, diags
}

func (r *WorkspaceResourceModel) ToOperationsCreateWorkspaceRequest(ctx context.Context) (*operations.CreateWorkspaceRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var orgID int64
	orgID = r.OrgID.ValueInt64()

	createWorkspaceRequest, createWorkspaceRequestDiags := r.ToSharedCreateWorkspaceRequest(ctx)
	diags.Append(createWorkspaceRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreateWorkspaceRequest{
		OrgID:                  orgID,
		CreateWorkspaceRequest: *createWorkspaceRequest,
	}

	return &out, diags
}

func (r *WorkspaceResourceModel) ToSharedUpdateWorkspaceRequest(ctx context.Context) (*shared.UpdateWorkspaceRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	name := new(string)
	if !r.Name.IsUnknown() && !r.Name.IsNull() {
		*name = r.Name.ValueString()
	} else {
		name = nil
	}
	fullName := new(string)
	if !r.FullName.IsUnknown() && !r.FullName.IsNull() {
		*fullName = r.FullName.ValueString()
	} else {
		fullName = nil
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	visibility := new(shared.Visibility)
	if !r.Visibility.IsUnknown() && !r.Visibility.IsNull() {
		*visibility = shared.Visibility(r.Visibility.ValueString())
	} else {
		visibility = nil
	}
	out := shared.UpdateWorkspaceRequest{
		Name:        name,
		FullName:    fullName,
		Description: description,
		Visibility:  visibility,
	}

	return &out, diags
}

func (r *WorkspaceResourceModel) ToOperationsUpdateWorkspaceRequest(ctx context.Context) (*operations.UpdateWorkspaceRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var orgID int64
	orgID = r.OrgID.ValueInt64()

	var id int64
	id = r.ID.ValueInt64()

	updateWorkspaceRequest, updateWorkspaceRequestDiags := r.ToSharedUpdateWorkspaceRequest(ctx)
	diags.Append(updateWorkspaceRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateWorkspaceRequest{
		OrgID:                  orgID,
		ID:                     id,
		UpdateWorkspaceRequest: *updateWorkspaceRequest,
	}

	return &out, diags
}

func (r *WorkspaceResourceModel) ToOperationsDescribeWorkspaceRequest(ctx context.Context) (*operations.DescribeWorkspaceRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var orgID int64
	orgID = r.OrgID.ValueInt64()

	var id int64
	id = r.ID.ValueInt64()

	out := operations.DescribeWorkspaceRequest{
		OrgID: orgID,
		ID:    id,
	}

	return &out, diags
}

func (r *WorkspaceResourceModel) ToOperationsDeleteWorkspaceRequest(ctx context.Context) (*operations.DeleteWorkspaceRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var orgID int64
	orgID = r.OrgID.ValueInt64()

	var id int64
	id = r.ID.ValueInt64()

	out := operations.DeleteWorkspaceRequest{
		OrgID: orgID,
		ID:    id,
	}

	return &out, diags
}

func (r *WorkspaceResourceModel) RefreshFromSharedWorkspace(ctx context.Context, resp *shared.Workspace) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.DateCreated = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.DateCreated))
		r.Description = types.StringPointerValue(resp.Description)
		r.FullName = types.StringValue(resp.FullName)
		r.ID = types.Int64PointerValue(resp.ID)
		r.LastUpdated = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.LastUpdated))
		r.Name = types.StringValue(resp.Name)
		r.Visibility = types.StringValue(string(resp.Visibility))
	}

	return diags
}
