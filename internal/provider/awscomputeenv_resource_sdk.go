// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/seqeralabs/terraform-provider-seqera/internal/provider/typeconvert"
	tfTypes "github.com/seqeralabs/terraform-provider-seqera/internal/provider/types"
	"github.com/seqeralabs/terraform-provider-seqera/internal/sdk/models/operations"
	"github.com/seqeralabs/terraform-provider-seqera/internal/sdk/models/shared"
	"time"
)

func (r *AWSComputeEnvResourceModel) RefreshFromSharedAWSComputeEnvComputeConfig(ctx context.Context, resp *shared.AWSComputeEnvComputeConfig) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.ComputeEnvID = types.StringPointerValue(resp.ComputeEnvID)
		r.Config.CliPath = types.StringPointerValue(resp.Config.CliPath)
		r.Config.ComputeJobRole = types.StringPointerValue(resp.Config.ComputeJobRole)
		r.Config.ComputeQueue = types.StringPointerValue(resp.Config.ComputeQueue)
		r.Config.DragenInstanceType = types.StringPointerValue(resp.Config.DragenInstanceType)
		r.Config.DragenQueue = types.StringPointerValue(resp.Config.DragenQueue)
		r.Config.EnableFusion = types.BoolPointerValue(resp.Config.EnableFusion)
		r.Config.EnableWave = types.BoolPointerValue(resp.Config.EnableWave)
		r.Config.Environment = []tfTypes.ConfigEnvVariable{}

		for _, environmentItem := range resp.Config.Environment {
			var environment tfTypes.ConfigEnvVariable

			environment.Compute = types.BoolPointerValue(environmentItem.Compute)
			environment.Head = types.BoolPointerValue(environmentItem.Head)
			environment.Name = types.StringPointerValue(environmentItem.Name)
			environment.Value = types.StringPointerValue(environmentItem.Value)

			r.Config.Environment = append(r.Config.Environment, environment)
		}
		r.Config.ExecutionRole = types.StringPointerValue(resp.Config.ExecutionRole)
		if resp.Config.Forge == nil {
			r.Config.Forge = nil
		} else {
			r.Config.Forge = &tfTypes.ForgeConfig{}
			if resp.Config.Forge.AllocStrategy != nil {
				r.Config.Forge.AllocStrategy = types.StringValue(string(*resp.Config.Forge.AllocStrategy))
			} else {
				r.Config.Forge.AllocStrategy = types.StringNull()
			}
			r.Config.Forge.AllowBuckets = make([]types.String, 0, len(resp.Config.Forge.AllowBuckets))
			for _, v := range resp.Config.Forge.AllowBuckets {
				r.Config.Forge.AllowBuckets = append(r.Config.Forge.AllowBuckets, types.StringValue(v))
			}
			r.Config.Forge.Arm64Enabled = types.BoolPointerValue(resp.Config.Forge.Arm64Enabled)
			r.Config.Forge.BidPercentage = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.Config.Forge.BidPercentage))
			r.Config.Forge.DisposeOnDeletion = types.BoolPointerValue(resp.Config.Forge.DisposeOnDeletion)
			r.Config.Forge.DragenAmiID = types.StringPointerValue(resp.Config.Forge.DragenAmiID)
			r.Config.Forge.DragenEnabled = types.BoolPointerValue(resp.Config.Forge.DragenEnabled)
			r.Config.Forge.DragenInstanceType = types.StringPointerValue(resp.Config.Forge.DragenInstanceType)
			r.Config.Forge.EbsAutoScale = types.BoolPointerValue(resp.Config.Forge.EbsAutoScale)
			r.Config.Forge.EbsBlockSize = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.Config.Forge.EbsBlockSize))
			r.Config.Forge.EbsBootSize = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.Config.Forge.EbsBootSize))
			r.Config.Forge.Ec2KeyPair = types.StringPointerValue(resp.Config.Forge.Ec2KeyPair)
			r.Config.Forge.EcsConfig = types.StringPointerValue(resp.Config.Forge.EcsConfig)
			r.Config.Forge.EfsCreate = types.BoolPointerValue(resp.Config.Forge.EfsCreate)
			r.Config.Forge.EfsID = types.StringPointerValue(resp.Config.Forge.EfsID)
			r.Config.Forge.EfsMount = types.StringPointerValue(resp.Config.Forge.EfsMount)
			r.Config.Forge.FargateHeadEnabled = types.BoolPointerValue(resp.Config.Forge.FargateHeadEnabled)
			r.Config.Forge.FsxMount = types.StringPointerValue(resp.Config.Forge.FsxMount)
			r.Config.Forge.FsxName = types.StringPointerValue(resp.Config.Forge.FsxName)
			r.Config.Forge.FsxSize = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.Config.Forge.FsxSize))
			r.Config.Forge.GpuEnabled = types.BoolPointerValue(resp.Config.Forge.GpuEnabled)
			r.Config.Forge.ImageID = types.StringPointerValue(resp.Config.Forge.ImageID)
			r.Config.Forge.InstanceTypes = make([]types.String, 0, len(resp.Config.Forge.InstanceTypes))
			for _, v := range resp.Config.Forge.InstanceTypes {
				r.Config.Forge.InstanceTypes = append(r.Config.Forge.InstanceTypes, types.StringValue(v))
			}
			r.Config.Forge.MaxCpus = types.Int32Value(int32(resp.Config.Forge.MaxCpus))
			r.Config.Forge.MinCpus = types.Int32Value(int32(resp.Config.Forge.MinCpus))
			r.Config.Forge.SecurityGroups = make([]types.String, 0, len(resp.Config.Forge.SecurityGroups))
			for _, v := range resp.Config.Forge.SecurityGroups {
				r.Config.Forge.SecurityGroups = append(r.Config.Forge.SecurityGroups, types.StringValue(v))
			}
			r.Config.Forge.Subnets = make([]types.String, 0, len(resp.Config.Forge.Subnets))
			for _, v := range resp.Config.Forge.Subnets {
				r.Config.Forge.Subnets = append(r.Config.Forge.Subnets, types.StringValue(v))
			}
			r.Config.Forge.Type = types.StringValue(string(resp.Config.Forge.Type))
			r.Config.Forge.VpcID = types.StringPointerValue(resp.Config.Forge.VpcID)
		}
		r.Config.FusionSnapshots = types.BoolPointerValue(resp.Config.FusionSnapshots)
		r.Config.HeadJobCpus = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.Config.HeadJobCpus))
		r.Config.HeadJobMemoryMb = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.Config.HeadJobMemoryMb))
		r.Config.HeadJobRole = types.StringPointerValue(resp.Config.HeadJobRole)
		r.Config.HeadQueue = types.StringPointerValue(resp.Config.HeadQueue)
		r.Config.LogGroup = types.StringPointerValue(resp.Config.LogGroup)
		r.Config.LustreID = types.StringPointerValue(resp.Config.LustreID)
		r.Config.NextflowConfig = types.StringPointerValue(resp.Config.NextflowConfig)
		r.Config.NvmeStorageEnabled = types.BoolPointerValue(resp.Config.NvmeStorageEnabled)
		r.Config.PostRunScript = types.StringPointerValue(resp.Config.PostRunScript)
		r.Config.PreRunScript = types.StringPointerValue(resp.Config.PreRunScript)
		r.Config.Region = types.StringValue(resp.Config.Region)
		r.Config.StorageType = types.StringPointerValue(resp.Config.StorageType)
		r.Config.Volumes = make([]types.String, 0, len(resp.Config.Volumes))
		for _, v := range resp.Config.Volumes {
			r.Config.Volumes = append(r.Config.Volumes, types.StringValue(v))
		}
		r.Config.WorkDir = types.StringPointerValue(resp.Config.WorkDir)
		r.CredentialsID = types.StringValue(resp.CredentialsID)
		r.DateCreated = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.DateCreated))
		r.Deleted = types.BoolPointerValue(resp.Deleted)
		r.Description = types.StringPointerValue(resp.Description)
		r.LastUpdated = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.LastUpdated))
		r.LastUsed = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.LastUsed))
		r.Name = types.StringValue(resp.Name)
		r.OrgID = types.Int64PointerValue(resp.OrgID)
		r.Platform = types.StringValue(string(resp.Platform))
		r.Status = types.StringPointerValue(resp.Status)
		r.WorkspaceID = types.Int64PointerValue(resp.WorkspaceID)
	}

	return diags
}

func (r *AWSComputeEnvResourceModel) RefreshFromSharedCreateAWSComputeEnvResponse(ctx context.Context, resp *shared.CreateAWSComputeEnvResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.ComputeEnvID = types.StringPointerValue(resp.ComputeEnvID)
	}

	return diags
}

func (r *AWSComputeEnvResourceModel) RefreshFromSharedDescribeAWSComputeEnvResponse(ctx context.Context, resp *shared.DescribeAWSComputeEnvResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		diags.Append(r.RefreshFromSharedAWSComputeEnvComputeConfig(ctx, resp.ComputeEnv)...)

		if diags.HasError() {
			return diags
		}

	}

	return diags
}

func (r *AWSComputeEnvResourceModel) ToOperationsCreateAWSComputeEnvRequest(ctx context.Context) (*operations.CreateAWSComputeEnvRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var workspaceID int64
	workspaceID = r.WorkspaceID.ValueInt64()

	createAWSComputeEnvRequest, createAWSComputeEnvRequestDiags := r.ToSharedCreateAWSComputeEnvRequest(ctx)
	diags.Append(createAWSComputeEnvRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreateAWSComputeEnvRequest{
		WorkspaceID:                workspaceID,
		CreateAWSComputeEnvRequest: *createAWSComputeEnvRequest,
	}

	return &out, diags
}

func (r *AWSComputeEnvResourceModel) ToOperationsDeleteAWSComputeEnvRequest(ctx context.Context) (*operations.DeleteAWSComputeEnvRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var computeEnvID string
	computeEnvID = r.ComputeEnvID.ValueString()

	workspaceID := new(int64)
	if !r.WorkspaceID.IsUnknown() && !r.WorkspaceID.IsNull() {
		*workspaceID = r.WorkspaceID.ValueInt64()
	} else {
		workspaceID = nil
	}
	out := operations.DeleteAWSComputeEnvRequest{
		ComputeEnvID: computeEnvID,
		WorkspaceID:  workspaceID,
	}

	return &out, diags
}

func (r *AWSComputeEnvResourceModel) ToOperationsDescribeAWSComputeEnvRequest(ctx context.Context) (*operations.DescribeAWSComputeEnvRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var computeEnvID string
	computeEnvID = r.ComputeEnvID.ValueString()

	var workspaceID int64
	workspaceID = r.WorkspaceID.ValueInt64()

	out := operations.DescribeAWSComputeEnvRequest{
		ComputeEnvID: computeEnvID,
		WorkspaceID:  workspaceID,
	}

	return &out, diags
}

func (r *AWSComputeEnvResourceModel) ToSharedAWSComputeEnvComputeConfigInput(ctx context.Context) (*shared.AWSComputeEnvComputeConfigInput, diag.Diagnostics) {
	var diags diag.Diagnostics

	var credentialsID string
	credentialsID = r.CredentialsID.ValueString()

	workspaceID := new(int64)
	if !r.WorkspaceID.IsUnknown() && !r.WorkspaceID.IsNull() {
		*workspaceID = r.WorkspaceID.ValueInt64()
	} else {
		workspaceID = nil
	}
	computeEnvID := new(string)
	if !r.ComputeEnvID.IsUnknown() && !r.ComputeEnvID.IsNull() {
		*computeEnvID = r.ComputeEnvID.ValueString()
	} else {
		computeEnvID = nil
	}
	var name string
	name = r.Name.ValueString()

	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	platform := shared.AWSComputeEnvComputeConfigPlatform(r.Platform.ValueString())
	status := new(string)
	if !r.Status.IsUnknown() && !r.Status.IsNull() {
		*status = r.Status.ValueString()
	} else {
		status = nil
	}
	dateCreated := new(time.Time)
	if !r.DateCreated.IsUnknown() && !r.DateCreated.IsNull() {
		*dateCreated, _ = time.Parse(time.RFC3339Nano, r.DateCreated.ValueString())
	} else {
		dateCreated = nil
	}
	lastUpdated := new(time.Time)
	if !r.LastUpdated.IsUnknown() && !r.LastUpdated.IsNull() {
		*lastUpdated, _ = time.Parse(time.RFC3339Nano, r.LastUpdated.ValueString())
	} else {
		lastUpdated = nil
	}
	lastUsed := new(time.Time)
	if !r.LastUsed.IsUnknown() && !r.LastUsed.IsNull() {
		*lastUsed, _ = time.Parse(time.RFC3339Nano, r.LastUsed.ValueString())
	} else {
		lastUsed = nil
	}
	deleted := new(bool)
	if !r.Deleted.IsUnknown() && !r.Deleted.IsNull() {
		*deleted = r.Deleted.ValueBool()
	} else {
		deleted = nil
	}
	storageType := new(string)
	if !r.Config.StorageType.IsUnknown() && !r.Config.StorageType.IsNull() {
		*storageType = r.Config.StorageType.ValueString()
	} else {
		storageType = nil
	}
	lustreID := new(string)
	if !r.Config.LustreID.IsUnknown() && !r.Config.LustreID.IsNull() {
		*lustreID = r.Config.LustreID.ValueString()
	} else {
		lustreID = nil
	}
	volumes := make([]string, 0, len(r.Config.Volumes))
	for _, volumesItem := range r.Config.Volumes {
		volumes = append(volumes, volumesItem.ValueString())
	}
	var region string
	region = r.Config.Region.ValueString()

	computeQueue := new(string)
	if !r.Config.ComputeQueue.IsUnknown() && !r.Config.ComputeQueue.IsNull() {
		*computeQueue = r.Config.ComputeQueue.ValueString()
	} else {
		computeQueue = nil
	}
	dragenQueue := new(string)
	if !r.Config.DragenQueue.IsUnknown() && !r.Config.DragenQueue.IsNull() {
		*dragenQueue = r.Config.DragenQueue.ValueString()
	} else {
		dragenQueue = nil
	}
	dragenInstanceType := new(string)
	if !r.Config.DragenInstanceType.IsUnknown() && !r.Config.DragenInstanceType.IsNull() {
		*dragenInstanceType = r.Config.DragenInstanceType.ValueString()
	} else {
		dragenInstanceType = nil
	}
	computeJobRole := new(string)
	if !r.Config.ComputeJobRole.IsUnknown() && !r.Config.ComputeJobRole.IsNull() {
		*computeJobRole = r.Config.ComputeJobRole.ValueString()
	} else {
		computeJobRole = nil
	}
	executionRole := new(string)
	if !r.Config.ExecutionRole.IsUnknown() && !r.Config.ExecutionRole.IsNull() {
		*executionRole = r.Config.ExecutionRole.ValueString()
	} else {
		executionRole = nil
	}
	headQueue := new(string)
	if !r.Config.HeadQueue.IsUnknown() && !r.Config.HeadQueue.IsNull() {
		*headQueue = r.Config.HeadQueue.ValueString()
	} else {
		headQueue = nil
	}
	headJobRole := new(string)
	if !r.Config.HeadJobRole.IsUnknown() && !r.Config.HeadJobRole.IsNull() {
		*headJobRole = r.Config.HeadJobRole.ValueString()
	} else {
		headJobRole = nil
	}
	cliPath := new(string)
	if !r.Config.CliPath.IsUnknown() && !r.Config.CliPath.IsNull() {
		*cliPath = r.Config.CliPath.ValueString()
	} else {
		cliPath = nil
	}
	workDir := new(string)
	if !r.Config.WorkDir.IsUnknown() && !r.Config.WorkDir.IsNull() {
		*workDir = r.Config.WorkDir.ValueString()
	} else {
		workDir = nil
	}
	preRunScript := new(string)
	if !r.Config.PreRunScript.IsUnknown() && !r.Config.PreRunScript.IsNull() {
		*preRunScript = r.Config.PreRunScript.ValueString()
	} else {
		preRunScript = nil
	}
	postRunScript := new(string)
	if !r.Config.PostRunScript.IsUnknown() && !r.Config.PostRunScript.IsNull() {
		*postRunScript = r.Config.PostRunScript.ValueString()
	} else {
		postRunScript = nil
	}
	headJobCpus := new(int)
	if !r.Config.HeadJobCpus.IsUnknown() && !r.Config.HeadJobCpus.IsNull() {
		*headJobCpus = int(r.Config.HeadJobCpus.ValueInt32())
	} else {
		headJobCpus = nil
	}
	headJobMemoryMb := new(int)
	if !r.Config.HeadJobMemoryMb.IsUnknown() && !r.Config.HeadJobMemoryMb.IsNull() {
		*headJobMemoryMb = int(r.Config.HeadJobMemoryMb.ValueInt32())
	} else {
		headJobMemoryMb = nil
	}
	environment := make([]shared.ConfigEnvVariable, 0, len(r.Config.Environment))
	for _, environmentItem := range r.Config.Environment {
		name1 := new(string)
		if !environmentItem.Name.IsUnknown() && !environmentItem.Name.IsNull() {
			*name1 = environmentItem.Name.ValueString()
		} else {
			name1 = nil
		}
		value := new(string)
		if !environmentItem.Value.IsUnknown() && !environmentItem.Value.IsNull() {
			*value = environmentItem.Value.ValueString()
		} else {
			value = nil
		}
		head := new(bool)
		if !environmentItem.Head.IsUnknown() && !environmentItem.Head.IsNull() {
			*head = environmentItem.Head.ValueBool()
		} else {
			head = nil
		}
		compute := new(bool)
		if !environmentItem.Compute.IsUnknown() && !environmentItem.Compute.IsNull() {
			*compute = environmentItem.Compute.ValueBool()
		} else {
			compute = nil
		}
		environment = append(environment, shared.ConfigEnvVariable{
			Name:    name1,
			Value:   value,
			Head:    head,
			Compute: compute,
		})
	}
	enableWave := new(bool)
	if !r.Config.EnableWave.IsUnknown() && !r.Config.EnableWave.IsNull() {
		*enableWave = r.Config.EnableWave.ValueBool()
	} else {
		enableWave = nil
	}
	enableFusion := new(bool)
	if !r.Config.EnableFusion.IsUnknown() && !r.Config.EnableFusion.IsNull() {
		*enableFusion = r.Config.EnableFusion.ValueBool()
	} else {
		enableFusion = nil
	}
	nvmeStorageEnabled := new(bool)
	if !r.Config.NvmeStorageEnabled.IsUnknown() && !r.Config.NvmeStorageEnabled.IsNull() {
		*nvmeStorageEnabled = r.Config.NvmeStorageEnabled.ValueBool()
	} else {
		nvmeStorageEnabled = nil
	}
	logGroup := new(string)
	if !r.Config.LogGroup.IsUnknown() && !r.Config.LogGroup.IsNull() {
		*logGroup = r.Config.LogGroup.ValueString()
	} else {
		logGroup = nil
	}
	nextflowConfig := new(string)
	if !r.Config.NextflowConfig.IsUnknown() && !r.Config.NextflowConfig.IsNull() {
		*nextflowConfig = r.Config.NextflowConfig.ValueString()
	} else {
		nextflowConfig = nil
	}
	fusionSnapshots := new(bool)
	if !r.Config.FusionSnapshots.IsUnknown() && !r.Config.FusionSnapshots.IsNull() {
		*fusionSnapshots = r.Config.FusionSnapshots.ValueBool()
	} else {
		fusionSnapshots = nil
	}
	var forge *shared.ForgeConfig
	if r.Config.Forge != nil {
		typeVar := shared.ForgeConfigType(r.Config.Forge.Type.ValueString())
		var minCpus int
		minCpus = int(r.Config.Forge.MinCpus.ValueInt32())

		var maxCpus int
		maxCpus = int(r.Config.Forge.MaxCpus.ValueInt32())

		gpuEnabled := new(bool)
		if !r.Config.Forge.GpuEnabled.IsUnknown() && !r.Config.Forge.GpuEnabled.IsNull() {
			*gpuEnabled = r.Config.Forge.GpuEnabled.ValueBool()
		} else {
			gpuEnabled = nil
		}
		ebsAutoScale := new(bool)
		if !r.Config.Forge.EbsAutoScale.IsUnknown() && !r.Config.Forge.EbsAutoScale.IsNull() {
			*ebsAutoScale = r.Config.Forge.EbsAutoScale.ValueBool()
		} else {
			ebsAutoScale = nil
		}
		instanceTypes := make([]string, 0, len(r.Config.Forge.InstanceTypes))
		for _, instanceTypesItem := range r.Config.Forge.InstanceTypes {
			instanceTypes = append(instanceTypes, instanceTypesItem.ValueString())
		}
		allocStrategy := new(shared.AllocStrategy)
		if !r.Config.Forge.AllocStrategy.IsUnknown() && !r.Config.Forge.AllocStrategy.IsNull() {
			*allocStrategy = shared.AllocStrategy(r.Config.Forge.AllocStrategy.ValueString())
		} else {
			allocStrategy = nil
		}
		imageID := new(string)
		if !r.Config.Forge.ImageID.IsUnknown() && !r.Config.Forge.ImageID.IsNull() {
			*imageID = r.Config.Forge.ImageID.ValueString()
		} else {
			imageID = nil
		}
		vpcID := new(string)
		if !r.Config.Forge.VpcID.IsUnknown() && !r.Config.Forge.VpcID.IsNull() {
			*vpcID = r.Config.Forge.VpcID.ValueString()
		} else {
			vpcID = nil
		}
		subnets := make([]string, 0, len(r.Config.Forge.Subnets))
		for _, subnetsItem := range r.Config.Forge.Subnets {
			subnets = append(subnets, subnetsItem.ValueString())
		}
		securityGroups := make([]string, 0, len(r.Config.Forge.SecurityGroups))
		for _, securityGroupsItem := range r.Config.Forge.SecurityGroups {
			securityGroups = append(securityGroups, securityGroupsItem.ValueString())
		}
		fsxMount := new(string)
		if !r.Config.Forge.FsxMount.IsUnknown() && !r.Config.Forge.FsxMount.IsNull() {
			*fsxMount = r.Config.Forge.FsxMount.ValueString()
		} else {
			fsxMount = nil
		}
		fsxName := new(string)
		if !r.Config.Forge.FsxName.IsUnknown() && !r.Config.Forge.FsxName.IsNull() {
			*fsxName = r.Config.Forge.FsxName.ValueString()
		} else {
			fsxName = nil
		}
		fsxSize := new(int)
		if !r.Config.Forge.FsxSize.IsUnknown() && !r.Config.Forge.FsxSize.IsNull() {
			*fsxSize = int(r.Config.Forge.FsxSize.ValueInt32())
		} else {
			fsxSize = nil
		}
		disposeOnDeletion := new(bool)
		if !r.Config.Forge.DisposeOnDeletion.IsUnknown() && !r.Config.Forge.DisposeOnDeletion.IsNull() {
			*disposeOnDeletion = r.Config.Forge.DisposeOnDeletion.ValueBool()
		} else {
			disposeOnDeletion = nil
		}
		ec2KeyPair := new(string)
		if !r.Config.Forge.Ec2KeyPair.IsUnknown() && !r.Config.Forge.Ec2KeyPair.IsNull() {
			*ec2KeyPair = r.Config.Forge.Ec2KeyPair.ValueString()
		} else {
			ec2KeyPair = nil
		}
		allowBuckets := make([]string, 0, len(r.Config.Forge.AllowBuckets))
		for _, allowBucketsItem := range r.Config.Forge.AllowBuckets {
			allowBuckets = append(allowBuckets, allowBucketsItem.ValueString())
		}
		ebsBlockSize := new(int)
		if !r.Config.Forge.EbsBlockSize.IsUnknown() && !r.Config.Forge.EbsBlockSize.IsNull() {
			*ebsBlockSize = int(r.Config.Forge.EbsBlockSize.ValueInt32())
		} else {
			ebsBlockSize = nil
		}
		bidPercentage := new(int)
		if !r.Config.Forge.BidPercentage.IsUnknown() && !r.Config.Forge.BidPercentage.IsNull() {
			*bidPercentage = int(r.Config.Forge.BidPercentage.ValueInt32())
		} else {
			bidPercentage = nil
		}
		efsCreate := new(bool)
		if !r.Config.Forge.EfsCreate.IsUnknown() && !r.Config.Forge.EfsCreate.IsNull() {
			*efsCreate = r.Config.Forge.EfsCreate.ValueBool()
		} else {
			efsCreate = nil
		}
		efsID := new(string)
		if !r.Config.Forge.EfsID.IsUnknown() && !r.Config.Forge.EfsID.IsNull() {
			*efsID = r.Config.Forge.EfsID.ValueString()
		} else {
			efsID = nil
		}
		efsMount := new(string)
		if !r.Config.Forge.EfsMount.IsUnknown() && !r.Config.Forge.EfsMount.IsNull() {
			*efsMount = r.Config.Forge.EfsMount.ValueString()
		} else {
			efsMount = nil
		}
		dragenEnabled := new(bool)
		if !r.Config.Forge.DragenEnabled.IsUnknown() && !r.Config.Forge.DragenEnabled.IsNull() {
			*dragenEnabled = r.Config.Forge.DragenEnabled.ValueBool()
		} else {
			dragenEnabled = nil
		}
		dragenAmiID := new(string)
		if !r.Config.Forge.DragenAmiID.IsUnknown() && !r.Config.Forge.DragenAmiID.IsNull() {
			*dragenAmiID = r.Config.Forge.DragenAmiID.ValueString()
		} else {
			dragenAmiID = nil
		}
		ebsBootSize := new(int)
		if !r.Config.Forge.EbsBootSize.IsUnknown() && !r.Config.Forge.EbsBootSize.IsNull() {
			*ebsBootSize = int(r.Config.Forge.EbsBootSize.ValueInt32())
		} else {
			ebsBootSize = nil
		}
		ecsConfig := new(string)
		if !r.Config.Forge.EcsConfig.IsUnknown() && !r.Config.Forge.EcsConfig.IsNull() {
			*ecsConfig = r.Config.Forge.EcsConfig.ValueString()
		} else {
			ecsConfig = nil
		}
		fargateHeadEnabled := new(bool)
		if !r.Config.Forge.FargateHeadEnabled.IsUnknown() && !r.Config.Forge.FargateHeadEnabled.IsNull() {
			*fargateHeadEnabled = r.Config.Forge.FargateHeadEnabled.ValueBool()
		} else {
			fargateHeadEnabled = nil
		}
		arm64Enabled := new(bool)
		if !r.Config.Forge.Arm64Enabled.IsUnknown() && !r.Config.Forge.Arm64Enabled.IsNull() {
			*arm64Enabled = r.Config.Forge.Arm64Enabled.ValueBool()
		} else {
			arm64Enabled = nil
		}
		dragenInstanceType1 := new(string)
		if !r.Config.Forge.DragenInstanceType.IsUnknown() && !r.Config.Forge.DragenInstanceType.IsNull() {
			*dragenInstanceType1 = r.Config.Forge.DragenInstanceType.ValueString()
		} else {
			dragenInstanceType1 = nil
		}
		forge = &shared.ForgeConfig{
			Type:               typeVar,
			MinCpus:            minCpus,
			MaxCpus:            maxCpus,
			GpuEnabled:         gpuEnabled,
			EbsAutoScale:       ebsAutoScale,
			InstanceTypes:      instanceTypes,
			AllocStrategy:      allocStrategy,
			ImageID:            imageID,
			VpcID:              vpcID,
			Subnets:            subnets,
			SecurityGroups:     securityGroups,
			FsxMount:           fsxMount,
			FsxName:            fsxName,
			FsxSize:            fsxSize,
			DisposeOnDeletion:  disposeOnDeletion,
			Ec2KeyPair:         ec2KeyPair,
			AllowBuckets:       allowBuckets,
			EbsBlockSize:       ebsBlockSize,
			BidPercentage:      bidPercentage,
			EfsCreate:          efsCreate,
			EfsID:              efsID,
			EfsMount:           efsMount,
			DragenEnabled:      dragenEnabled,
			DragenAmiID:        dragenAmiID,
			EbsBootSize:        ebsBootSize,
			EcsConfig:          ecsConfig,
			FargateHeadEnabled: fargateHeadEnabled,
			Arm64Enabled:       arm64Enabled,
			DragenInstanceType: dragenInstanceType1,
		}
	}
	config := shared.AwsBatchConfig{
		StorageType:        storageType,
		LustreID:           lustreID,
		Volumes:            volumes,
		Region:             region,
		ComputeQueue:       computeQueue,
		DragenQueue:        dragenQueue,
		DragenInstanceType: dragenInstanceType,
		ComputeJobRole:     computeJobRole,
		ExecutionRole:      executionRole,
		HeadQueue:          headQueue,
		HeadJobRole:        headJobRole,
		CliPath:            cliPath,
		WorkDir:            workDir,
		PreRunScript:       preRunScript,
		PostRunScript:      postRunScript,
		HeadJobCpus:        headJobCpus,
		HeadJobMemoryMb:    headJobMemoryMb,
		Environment:        environment,
		EnableWave:         enableWave,
		EnableFusion:       enableFusion,
		NvmeStorageEnabled: nvmeStorageEnabled,
		LogGroup:           logGroup,
		NextflowConfig:     nextflowConfig,
		FusionSnapshots:    fusionSnapshots,
		Forge:              forge,
	}
	out := shared.AWSComputeEnvComputeConfigInput{
		CredentialsID: credentialsID,
		WorkspaceID:   workspaceID,
		ComputeEnvID:  computeEnvID,
		Name:          name,
		Description:   description,
		Platform:      platform,
		Status:        status,
		DateCreated:   dateCreated,
		LastUpdated:   lastUpdated,
		LastUsed:      lastUsed,
		Deleted:       deleted,
		Config:        config,
	}

	return &out, diags
}

func (r *AWSComputeEnvResourceModel) ToSharedCreateAWSComputeEnvRequest(ctx context.Context) (*shared.CreateAWSComputeEnvRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	computeEnv, computeEnvDiags := r.ToSharedAWSComputeEnvComputeConfigInput(ctx)
	diags.Append(computeEnvDiags...)

	if diags.HasError() {
		return nil, diags
	}

	labelIds := make([]int64, 0, len(r.LabelIds))
	for _, labelIdsItem := range r.LabelIds {
		labelIds = append(labelIds, labelIdsItem.ValueInt64())
	}
	out := shared.CreateAWSComputeEnvRequest{
		ComputeEnv: computeEnv,
		LabelIds:   labelIds,
	}

	return &out, diags
}
