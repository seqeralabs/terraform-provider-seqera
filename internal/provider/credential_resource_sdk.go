// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/speakeasy/terraform-provider-seqera/internal/provider/typeconvert"
	tfTypes "github.com/speakeasy/terraform-provider-seqera/internal/provider/types"
	"github.com/speakeasy/terraform-provider-seqera/internal/sdk/models/operations"
	"github.com/speakeasy/terraform-provider-seqera/internal/sdk/models/shared"
)

func (r *CredentialResourceModel) RefreshFromSharedCreateCredentialsResponse(ctx context.Context, resp *shared.CreateCredentialsResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.CredentialsID = types.StringPointerValue(resp.CredentialsID)
	}

	return diags
}

func (r *CredentialResourceModel) RefreshFromSharedCredentialsOutput(ctx context.Context, resp *shared.CredentialsOutput) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.BaseURL = types.StringPointerValue(resp.BaseURL)
		r.Category = types.StringPointerValue(resp.Category)
		r.CredentialsID = types.StringPointerValue(resp.CredentialsID)
		r.DateCreated = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.DateCreated))
		r.Deleted = types.BoolPointerValue(resp.Deleted)
		r.Description = types.StringPointerValue(resp.Description)
		if resp.Keys.AgentSecurityKeys != nil {
			r.Keys.TwAgent = &tfTypes.AgentSecurityKeys{}
			r.Keys.TwAgent.ConnectionID = types.StringPointerValue(resp.Keys.AgentSecurityKeys.ConnectionID)
			r.Keys.TwAgent.Shared = types.BoolPointerValue(resp.Keys.AgentSecurityKeys.Shared)
			r.Keys.TwAgent.WorkDir = types.StringPointerValue(resp.Keys.AgentSecurityKeys.WorkDir)
		}
		if resp.Keys.AwsSecurityKeysOutput != nil {
			r.Keys.Aws = &tfTypes.AwsSecurityKeys{}
			awsPriorData := r.Keys.Aws
			r.Keys.Aws.AccessKey = types.StringPointerValue(resp.Keys.AwsSecurityKeysOutput.AccessKey)
			r.Keys.Aws.AssumeRoleArn = types.StringPointerValue(resp.Keys.AwsSecurityKeysOutput.AssumeRoleArn)
			r.Keys.Aws.SecretKey = awsPriorData.SecretKey
		}
		if resp.Keys.AzureEntraKeysOutput != nil {
			r.Keys.AzureEntra = &tfTypes.AzureEntraKeys{}
			azureEntraPriorData := r.Keys.AzureEntra
			r.Keys.AzureEntra.BatchKey = azureEntraPriorData.BatchKey
			r.Keys.AzureEntra.BatchName = types.StringPointerValue(resp.Keys.AzureEntraKeysOutput.BatchName)
			r.Keys.AzureEntra.ClientID = types.StringPointerValue(resp.Keys.AzureEntraKeysOutput.ClientID)
			r.Keys.AzureEntra.ClientSecret = azureEntraPriorData.ClientSecret
			r.Keys.AzureEntra.StorageKey = azureEntraPriorData.StorageKey
			r.Keys.AzureEntra.StorageName = types.StringPointerValue(resp.Keys.AzureEntraKeysOutput.StorageName)
			r.Keys.AzureEntra.TenantID = types.StringPointerValue(resp.Keys.AzureEntraKeysOutput.TenantID)
		}
		if resp.Keys.AzureReposSecurityKeysOutput != nil {
			r.Keys.Azurerepos = &tfTypes.AzureReposSecurityKeys{}
			azurereposPriorData := r.Keys.Azurerepos
			r.Keys.Azurerepos.Password = azurereposPriorData.Password
			r.Keys.Azurerepos.Username = types.StringPointerValue(resp.Keys.AzureReposSecurityKeysOutput.Username)
		}
		if resp.Keys.AzureSecurityKeysOutput != nil {
			r.Keys.Azure = &tfTypes.AzureSecurityKeys{}
			azurePriorData := r.Keys.Azure
			r.Keys.Azure.BatchKey = azurePriorData.BatchKey
			r.Keys.Azure.BatchName = types.StringPointerValue(resp.Keys.AzureSecurityKeysOutput.BatchName)
			r.Keys.Azure.StorageKey = azurePriorData.StorageKey
			r.Keys.Azure.StorageName = types.StringPointerValue(resp.Keys.AzureSecurityKeysOutput.StorageName)
		}
		if resp.Keys.BitBucketSecurityKeysOutput != nil {
			r.Keys.Bitbucket = &tfTypes.BitBucketSecurityKeys{}
			bitbucketPriorData := r.Keys.Bitbucket
			r.Keys.Bitbucket.Password = bitbucketPriorData.Password
			r.Keys.Bitbucket.Username = types.StringPointerValue(resp.Keys.BitBucketSecurityKeysOutput.Username)
		}
		if resp.Keys.CodeCommitSecurityKeysOutput != nil {
			r.Keys.Codecommit = &tfTypes.CodeCommitSecurityKeys{}
			codecommitPriorData := r.Keys.Codecommit
			r.Keys.Codecommit.Password = codecommitPriorData.Password
			r.Keys.Codecommit.Username = types.StringPointerValue(resp.Keys.CodeCommitSecurityKeysOutput.Username)
		}
		if resp.Keys.ContainerRegistryKeysOutput != nil {
			r.Keys.ContainerReg = &tfTypes.ContainerRegistryKeys{}
			containerRegPriorData := r.Keys.ContainerReg
			r.Keys.ContainerReg.Password = containerRegPriorData.Password
			r.Keys.ContainerReg.Registry = types.StringPointerValue(resp.Keys.ContainerRegistryKeysOutput.Registry)
			r.Keys.ContainerReg.UserName = types.StringPointerValue(resp.Keys.ContainerRegistryKeysOutput.UserName)
		}
		if resp.Keys.GiteaSecurityKeysOutput != nil {
			r.Keys.Gitea = &tfTypes.GiteaSecurityKeys{}
			giteaPriorData := r.Keys.Gitea
			r.Keys.Gitea.Password = giteaPriorData.Password
			r.Keys.Gitea.Username = types.StringPointerValue(resp.Keys.GiteaSecurityKeysOutput.Username)
		}
		if resp.Keys.GitHubSecurityKeysOutput != nil {
			r.Keys.Github = &tfTypes.GitHubSecurityKeys{}
			githubPriorData := r.Keys.Github
			r.Keys.Github.Password = githubPriorData.Password
			r.Keys.Github.Username = types.StringPointerValue(resp.Keys.GitHubSecurityKeysOutput.Username)
		}
		if resp.Keys.GitLabSecurityKeysOutput != nil {
			r.Keys.Gitlab = &tfTypes.GitLabSecurityKeys{}
			gitlabPriorData := r.Keys.Gitlab
			r.Keys.Gitlab.Password = gitlabPriorData.Password
			r.Keys.Gitlab.Token = gitlabPriorData.Token
			r.Keys.Gitlab.Username = types.StringPointerValue(resp.Keys.GitLabSecurityKeysOutput.Username)
		}
		if resp.Keys.GoogleSecurityKeysOutput != nil {
			r.Keys.Google = &tfTypes.GoogleSecurityKeys{}
			googlePriorData := r.Keys.Google
			r.Keys.Google.Data = googlePriorData.Data
		}
		if resp.Keys.K8sSecurityKeysOutput != nil {
			r.Keys.K8s = &tfTypes.K8sSecurityKeys{}
			k8sPriorData := r.Keys.K8s
			r.Keys.K8s.Certificate = types.StringPointerValue(resp.Keys.K8sSecurityKeysOutput.Certificate)
			r.Keys.K8s.PrivateKey = k8sPriorData.PrivateKey
			r.Keys.K8s.Token = k8sPriorData.Token
		}
		if resp.Keys.SeqeraComputeSecurityKeysOutput != nil {
			r.Keys.Seqeracompute = &tfTypes.SeqeraComputeSecurityKeys{}
			seqeracomputePriorData := r.Keys.Seqeracompute
			r.Keys.Seqeracompute.AccessKey = types.StringPointerValue(resp.Keys.SeqeraComputeSecurityKeysOutput.AccessKey)
			r.Keys.Seqeracompute.AssumeRoleArn = types.StringPointerValue(resp.Keys.SeqeraComputeSecurityKeysOutput.AssumeRoleArn)
			r.Keys.Seqeracompute.SecretKey = seqeracomputePriorData.SecretKey
		}
		if resp.Keys.SSHSecurityKeysOutput != nil {
			r.Keys.SSH = &tfTypes.SSHSecurityKeys{}
			sshPriorData := r.Keys.SSH
			r.Keys.SSH.Passphrase = sshPriorData.Passphrase
			r.Keys.SSH.PrivateKey = sshPriorData.PrivateKey
		}
		r.LastUpdated = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.LastUpdated))
		r.LastUsed = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.LastUsed))
		r.Name = types.StringValue(resp.Name)
		r.ProviderType = types.StringValue(string(resp.ProviderType))
	}

	return diags
}

func (r *CredentialResourceModel) ToOperationsCreateCredentialsRequest(ctx context.Context) (*operations.CreateCredentialsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var workspaceID int64
	workspaceID = r.WorkspaceID.ValueInt64()

	createCredentialsRequest, createCredentialsRequestDiags := r.ToSharedCreateCredentialsRequest(ctx)
	diags.Append(createCredentialsRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreateCredentialsRequest{
		WorkspaceID:              workspaceID,
		CreateCredentialsRequest: *createCredentialsRequest,
	}

	return &out, diags
}

func (r *CredentialResourceModel) ToOperationsDeleteCredentialsRequest(ctx context.Context) (*operations.DeleteCredentialsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var credentialsID string
	credentialsID = r.CredentialsID.ValueString()

	workspaceID := new(int64)
	if !r.WorkspaceID.IsUnknown() && !r.WorkspaceID.IsNull() {
		*workspaceID = r.WorkspaceID.ValueInt64()
	} else {
		workspaceID = nil
	}
	checked := new(bool)
	if !r.Checked.IsUnknown() && !r.Checked.IsNull() {
		*checked = r.Checked.ValueBool()
	} else {
		checked = nil
	}
	out := operations.DeleteCredentialsRequest{
		CredentialsID: credentialsID,
		WorkspaceID:   workspaceID,
		Checked:       checked,
	}

	return &out, diags
}

func (r *CredentialResourceModel) ToOperationsDescribeCredentialsRequest(ctx context.Context) (*operations.DescribeCredentialsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var credentialsID string
	credentialsID = r.CredentialsID.ValueString()

	workspaceID := new(int64)
	if !r.WorkspaceID.IsUnknown() && !r.WorkspaceID.IsNull() {
		*workspaceID = r.WorkspaceID.ValueInt64()
	} else {
		workspaceID = nil
	}
	out := operations.DescribeCredentialsRequest{
		CredentialsID: credentialsID,
		WorkspaceID:   workspaceID,
	}

	return &out, diags
}

func (r *CredentialResourceModel) ToOperationsUpdateCredentialsRequest(ctx context.Context) (*operations.UpdateCredentialsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var credentialsID string
	credentialsID = r.CredentialsID.ValueString()

	workspaceID := new(int64)
	if !r.WorkspaceID.IsUnknown() && !r.WorkspaceID.IsNull() {
		*workspaceID = r.WorkspaceID.ValueInt64()
	} else {
		workspaceID = nil
	}
	updateCredentialsRequest, updateCredentialsRequestDiags := r.ToSharedUpdateCredentialsRequest(ctx)
	diags.Append(updateCredentialsRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateCredentialsRequest{
		CredentialsID:            credentialsID,
		WorkspaceID:              workspaceID,
		UpdateCredentialsRequest: *updateCredentialsRequest,
	}

	return &out, diags
}

func (r *CredentialResourceModel) ToSharedCreateCredentialsRequest(ctx context.Context) (*shared.CreateCredentialsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	credentials, credentialsDiags := r.ToSharedCredentialsInput(ctx)
	diags.Append(credentialsDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := shared.CreateCredentialsRequest{
		Credentials: credentials,
	}

	return &out, diags
}

func (r *CredentialResourceModel) ToSharedCredentialsInput(ctx context.Context) (*shared.CredentialsInput, diag.Diagnostics) {
	var diags diag.Diagnostics

	credentialsID := new(string)
	if !r.CredentialsID.IsUnknown() && !r.CredentialsID.IsNull() {
		*credentialsID = r.CredentialsID.ValueString()
	} else {
		credentialsID = nil
	}
	var name string
	name = r.Name.ValueString()

	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	providerType := shared.CredentialsProviderType(r.ProviderType.ValueString())
	baseURL := new(string)
	if !r.BaseURL.IsUnknown() && !r.BaseURL.IsNull() {
		*baseURL = r.BaseURL.ValueString()
	} else {
		baseURL = nil
	}
	category := new(string)
	if !r.Category.IsUnknown() && !r.Category.IsNull() {
		*category = r.Category.ValueString()
	} else {
		category = nil
	}
	var keys shared.SecurityKeys
	var awsSecurityKeys *shared.AwsSecurityKeys
	if r.Keys.Aws != nil {
		accessKey := new(string)
		if !r.Keys.Aws.AccessKey.IsUnknown() && !r.Keys.Aws.AccessKey.IsNull() {
			*accessKey = r.Keys.Aws.AccessKey.ValueString()
		} else {
			accessKey = nil
		}
		secretKey := new(string)
		if !r.Keys.Aws.SecretKey.IsUnknown() && !r.Keys.Aws.SecretKey.IsNull() {
			*secretKey = r.Keys.Aws.SecretKey.ValueString()
		} else {
			secretKey = nil
		}
		assumeRoleArn := new(string)
		if !r.Keys.Aws.AssumeRoleArn.IsUnknown() && !r.Keys.Aws.AssumeRoleArn.IsNull() {
			*assumeRoleArn = r.Keys.Aws.AssumeRoleArn.ValueString()
		} else {
			assumeRoleArn = nil
		}
		awsSecurityKeys = &shared.AwsSecurityKeys{
			AccessKey:     accessKey,
			SecretKey:     secretKey,
			AssumeRoleArn: assumeRoleArn,
		}
	}
	if awsSecurityKeys != nil {
		keys = shared.SecurityKeys{
			AwsSecurityKeys: awsSecurityKeys,
		}
	}
	var googleSecurityKeys *shared.GoogleSecurityKeys
	if r.Keys.Google != nil {
		data := new(string)
		if !r.Keys.Google.Data.IsUnknown() && !r.Keys.Google.Data.IsNull() {
			*data = r.Keys.Google.Data.ValueString()
		} else {
			data = nil
		}
		googleSecurityKeys = &shared.GoogleSecurityKeys{
			Data: data,
		}
	}
	if googleSecurityKeys != nil {
		keys = shared.SecurityKeys{
			GoogleSecurityKeys: googleSecurityKeys,
		}
	}
	var gitHubSecurityKeys *shared.GitHubSecurityKeys
	if r.Keys.Github != nil {
		username := new(string)
		if !r.Keys.Github.Username.IsUnknown() && !r.Keys.Github.Username.IsNull() {
			*username = r.Keys.Github.Username.ValueString()
		} else {
			username = nil
		}
		password := new(string)
		if !r.Keys.Github.Password.IsUnknown() && !r.Keys.Github.Password.IsNull() {
			*password = r.Keys.Github.Password.ValueString()
		} else {
			password = nil
		}
		gitHubSecurityKeys = &shared.GitHubSecurityKeys{
			Username: username,
			Password: password,
		}
	}
	if gitHubSecurityKeys != nil {
		keys = shared.SecurityKeys{
			GitHubSecurityKeys: gitHubSecurityKeys,
		}
	}
	var gitLabSecurityKeys *shared.GitLabSecurityKeys
	if r.Keys.Gitlab != nil {
		username1 := new(string)
		if !r.Keys.Gitlab.Username.IsUnknown() && !r.Keys.Gitlab.Username.IsNull() {
			*username1 = r.Keys.Gitlab.Username.ValueString()
		} else {
			username1 = nil
		}
		password1 := new(string)
		if !r.Keys.Gitlab.Password.IsUnknown() && !r.Keys.Gitlab.Password.IsNull() {
			*password1 = r.Keys.Gitlab.Password.ValueString()
		} else {
			password1 = nil
		}
		token := new(string)
		if !r.Keys.Gitlab.Token.IsUnknown() && !r.Keys.Gitlab.Token.IsNull() {
			*token = r.Keys.Gitlab.Token.ValueString()
		} else {
			token = nil
		}
		gitLabSecurityKeys = &shared.GitLabSecurityKeys{
			Username: username1,
			Password: password1,
			Token:    token,
		}
	}
	if gitLabSecurityKeys != nil {
		keys = shared.SecurityKeys{
			GitLabSecurityKeys: gitLabSecurityKeys,
		}
	}
	var bitBucketSecurityKeys *shared.BitBucketSecurityKeys
	if r.Keys.Bitbucket != nil {
		username2 := new(string)
		if !r.Keys.Bitbucket.Username.IsUnknown() && !r.Keys.Bitbucket.Username.IsNull() {
			*username2 = r.Keys.Bitbucket.Username.ValueString()
		} else {
			username2 = nil
		}
		password2 := new(string)
		if !r.Keys.Bitbucket.Password.IsUnknown() && !r.Keys.Bitbucket.Password.IsNull() {
			*password2 = r.Keys.Bitbucket.Password.ValueString()
		} else {
			password2 = nil
		}
		bitBucketSecurityKeys = &shared.BitBucketSecurityKeys{
			Username: username2,
			Password: password2,
		}
	}
	if bitBucketSecurityKeys != nil {
		keys = shared.SecurityKeys{
			BitBucketSecurityKeys: bitBucketSecurityKeys,
		}
	}
	var giteaSecurityKeys *shared.GiteaSecurityKeys
	if r.Keys.Gitea != nil {
		username3 := new(string)
		if !r.Keys.Gitea.Username.IsUnknown() && !r.Keys.Gitea.Username.IsNull() {
			*username3 = r.Keys.Gitea.Username.ValueString()
		} else {
			username3 = nil
		}
		password3 := new(string)
		if !r.Keys.Gitea.Password.IsUnknown() && !r.Keys.Gitea.Password.IsNull() {
			*password3 = r.Keys.Gitea.Password.ValueString()
		} else {
			password3 = nil
		}
		giteaSecurityKeys = &shared.GiteaSecurityKeys{
			Username: username3,
			Password: password3,
		}
	}
	if giteaSecurityKeys != nil {
		keys = shared.SecurityKeys{
			GiteaSecurityKeys: giteaSecurityKeys,
		}
	}
	var sshSecurityKeys *shared.SSHSecurityKeys
	if r.Keys.SSH != nil {
		privateKey := new(string)
		if !r.Keys.SSH.PrivateKey.IsUnknown() && !r.Keys.SSH.PrivateKey.IsNull() {
			*privateKey = r.Keys.SSH.PrivateKey.ValueString()
		} else {
			privateKey = nil
		}
		passphrase := new(string)
		if !r.Keys.SSH.Passphrase.IsUnknown() && !r.Keys.SSH.Passphrase.IsNull() {
			*passphrase = r.Keys.SSH.Passphrase.ValueString()
		} else {
			passphrase = nil
		}
		sshSecurityKeys = &shared.SSHSecurityKeys{
			PrivateKey: privateKey,
			Passphrase: passphrase,
		}
	}
	if sshSecurityKeys != nil {
		keys = shared.SecurityKeys{
			SSHSecurityKeys: sshSecurityKeys,
		}
	}
	var k8sSecurityKeys *shared.K8sSecurityKeys
	if r.Keys.K8s != nil {
		certificate := new(string)
		if !r.Keys.K8s.Certificate.IsUnknown() && !r.Keys.K8s.Certificate.IsNull() {
			*certificate = r.Keys.K8s.Certificate.ValueString()
		} else {
			certificate = nil
		}
		privateKey1 := new(string)
		if !r.Keys.K8s.PrivateKey.IsUnknown() && !r.Keys.K8s.PrivateKey.IsNull() {
			*privateKey1 = r.Keys.K8s.PrivateKey.ValueString()
		} else {
			privateKey1 = nil
		}
		token1 := new(string)
		if !r.Keys.K8s.Token.IsUnknown() && !r.Keys.K8s.Token.IsNull() {
			*token1 = r.Keys.K8s.Token.ValueString()
		} else {
			token1 = nil
		}
		k8sSecurityKeys = &shared.K8sSecurityKeys{
			Certificate: certificate,
			PrivateKey:  privateKey1,
			Token:       token1,
		}
	}
	if k8sSecurityKeys != nil {
		keys = shared.SecurityKeys{
			K8sSecurityKeys: k8sSecurityKeys,
		}
	}
	var azureSecurityKeys *shared.AzureSecurityKeys
	if r.Keys.Azure != nil {
		batchName := new(string)
		if !r.Keys.Azure.BatchName.IsUnknown() && !r.Keys.Azure.BatchName.IsNull() {
			*batchName = r.Keys.Azure.BatchName.ValueString()
		} else {
			batchName = nil
		}
		storageName := new(string)
		if !r.Keys.Azure.StorageName.IsUnknown() && !r.Keys.Azure.StorageName.IsNull() {
			*storageName = r.Keys.Azure.StorageName.ValueString()
		} else {
			storageName = nil
		}
		batchKey := new(string)
		if !r.Keys.Azure.BatchKey.IsUnknown() && !r.Keys.Azure.BatchKey.IsNull() {
			*batchKey = r.Keys.Azure.BatchKey.ValueString()
		} else {
			batchKey = nil
		}
		storageKey := new(string)
		if !r.Keys.Azure.StorageKey.IsUnknown() && !r.Keys.Azure.StorageKey.IsNull() {
			*storageKey = r.Keys.Azure.StorageKey.ValueString()
		} else {
			storageKey = nil
		}
		azureSecurityKeys = &shared.AzureSecurityKeys{
			BatchName:   batchName,
			StorageName: storageName,
			BatchKey:    batchKey,
			StorageKey:  storageKey,
		}
	}
	if azureSecurityKeys != nil {
		keys = shared.SecurityKeys{
			AzureSecurityKeys: azureSecurityKeys,
		}
	}
	var azureReposSecurityKeys *shared.AzureReposSecurityKeys
	if r.Keys.Azurerepos != nil {
		username4 := new(string)
		if !r.Keys.Azurerepos.Username.IsUnknown() && !r.Keys.Azurerepos.Username.IsNull() {
			*username4 = r.Keys.Azurerepos.Username.ValueString()
		} else {
			username4 = nil
		}
		password4 := new(string)
		if !r.Keys.Azurerepos.Password.IsUnknown() && !r.Keys.Azurerepos.Password.IsNull() {
			*password4 = r.Keys.Azurerepos.Password.ValueString()
		} else {
			password4 = nil
		}
		azureReposSecurityKeys = &shared.AzureReposSecurityKeys{
			Username: username4,
			Password: password4,
		}
	}
	if azureReposSecurityKeys != nil {
		keys = shared.SecurityKeys{
			AzureReposSecurityKeys: azureReposSecurityKeys,
		}
	}
	var containerRegistryKeys *shared.ContainerRegistryKeys
	if r.Keys.ContainerReg != nil {
		userName := new(string)
		if !r.Keys.ContainerReg.UserName.IsUnknown() && !r.Keys.ContainerReg.UserName.IsNull() {
			*userName = r.Keys.ContainerReg.UserName.ValueString()
		} else {
			userName = nil
		}
		password5 := new(string)
		if !r.Keys.ContainerReg.Password.IsUnknown() && !r.Keys.ContainerReg.Password.IsNull() {
			*password5 = r.Keys.ContainerReg.Password.ValueString()
		} else {
			password5 = nil
		}
		registry := new(string)
		if !r.Keys.ContainerReg.Registry.IsUnknown() && !r.Keys.ContainerReg.Registry.IsNull() {
			*registry = r.Keys.ContainerReg.Registry.ValueString()
		} else {
			registry = nil
		}
		containerRegistryKeys = &shared.ContainerRegistryKeys{
			UserName: userName,
			Password: password5,
			Registry: registry,
		}
	}
	if containerRegistryKeys != nil {
		keys = shared.SecurityKeys{
			ContainerRegistryKeys: containerRegistryKeys,
		}
	}
	var agentSecurityKeys *shared.AgentSecurityKeys
	if r.Keys.TwAgent != nil {
		connectionID := new(string)
		if !r.Keys.TwAgent.ConnectionID.IsUnknown() && !r.Keys.TwAgent.ConnectionID.IsNull() {
			*connectionID = r.Keys.TwAgent.ConnectionID.ValueString()
		} else {
			connectionID = nil
		}
		workDir := new(string)
		if !r.Keys.TwAgent.WorkDir.IsUnknown() && !r.Keys.TwAgent.WorkDir.IsNull() {
			*workDir = r.Keys.TwAgent.WorkDir.ValueString()
		} else {
			workDir = nil
		}
		sharedVar := new(bool)
		if !r.Keys.TwAgent.Shared.IsUnknown() && !r.Keys.TwAgent.Shared.IsNull() {
			*sharedVar = r.Keys.TwAgent.Shared.ValueBool()
		} else {
			sharedVar = nil
		}
		agentSecurityKeys = &shared.AgentSecurityKeys{
			ConnectionID: connectionID,
			WorkDir:      workDir,
			Shared:       sharedVar,
		}
	}
	if agentSecurityKeys != nil {
		keys = shared.SecurityKeys{
			AgentSecurityKeys: agentSecurityKeys,
		}
	}
	var codeCommitSecurityKeys *shared.CodeCommitSecurityKeys
	if r.Keys.Codecommit != nil {
		username5 := new(string)
		if !r.Keys.Codecommit.Username.IsUnknown() && !r.Keys.Codecommit.Username.IsNull() {
			*username5 = r.Keys.Codecommit.Username.ValueString()
		} else {
			username5 = nil
		}
		password6 := new(string)
		if !r.Keys.Codecommit.Password.IsUnknown() && !r.Keys.Codecommit.Password.IsNull() {
			*password6 = r.Keys.Codecommit.Password.ValueString()
		} else {
			password6 = nil
		}
		codeCommitSecurityKeys = &shared.CodeCommitSecurityKeys{
			Username: username5,
			Password: password6,
		}
	}
	if codeCommitSecurityKeys != nil {
		keys = shared.SecurityKeys{
			CodeCommitSecurityKeys: codeCommitSecurityKeys,
		}
	}
	var azureEntraKeys *shared.AzureEntraKeys
	if r.Keys.AzureEntra != nil {
		batchName1 := new(string)
		if !r.Keys.AzureEntra.BatchName.IsUnknown() && !r.Keys.AzureEntra.BatchName.IsNull() {
			*batchName1 = r.Keys.AzureEntra.BatchName.ValueString()
		} else {
			batchName1 = nil
		}
		storageName1 := new(string)
		if !r.Keys.AzureEntra.StorageName.IsUnknown() && !r.Keys.AzureEntra.StorageName.IsNull() {
			*storageName1 = r.Keys.AzureEntra.StorageName.ValueString()
		} else {
			storageName1 = nil
		}
		batchKey1 := new(string)
		if !r.Keys.AzureEntra.BatchKey.IsUnknown() && !r.Keys.AzureEntra.BatchKey.IsNull() {
			*batchKey1 = r.Keys.AzureEntra.BatchKey.ValueString()
		} else {
			batchKey1 = nil
		}
		storageKey1 := new(string)
		if !r.Keys.AzureEntra.StorageKey.IsUnknown() && !r.Keys.AzureEntra.StorageKey.IsNull() {
			*storageKey1 = r.Keys.AzureEntra.StorageKey.ValueString()
		} else {
			storageKey1 = nil
		}
		tenantID := new(string)
		if !r.Keys.AzureEntra.TenantID.IsUnknown() && !r.Keys.AzureEntra.TenantID.IsNull() {
			*tenantID = r.Keys.AzureEntra.TenantID.ValueString()
		} else {
			tenantID = nil
		}
		clientID := new(string)
		if !r.Keys.AzureEntra.ClientID.IsUnknown() && !r.Keys.AzureEntra.ClientID.IsNull() {
			*clientID = r.Keys.AzureEntra.ClientID.ValueString()
		} else {
			clientID = nil
		}
		clientSecret := new(string)
		if !r.Keys.AzureEntra.ClientSecret.IsUnknown() && !r.Keys.AzureEntra.ClientSecret.IsNull() {
			*clientSecret = r.Keys.AzureEntra.ClientSecret.ValueString()
		} else {
			clientSecret = nil
		}
		azureEntraKeys = &shared.AzureEntraKeys{
			BatchName:    batchName1,
			StorageName:  storageName1,
			BatchKey:     batchKey1,
			StorageKey:   storageKey1,
			TenantID:     tenantID,
			ClientID:     clientID,
			ClientSecret: clientSecret,
		}
	}
	if azureEntraKeys != nil {
		keys = shared.SecurityKeys{
			AzureEntraKeys: azureEntraKeys,
		}
	}
	var seqeraComputeSecurityKeys *shared.SeqeraComputeSecurityKeys
	if r.Keys.Seqeracompute != nil {
		accessKey1 := new(string)
		if !r.Keys.Seqeracompute.AccessKey.IsUnknown() && !r.Keys.Seqeracompute.AccessKey.IsNull() {
			*accessKey1 = r.Keys.Seqeracompute.AccessKey.ValueString()
		} else {
			accessKey1 = nil
		}
		secretKey1 := new(string)
		if !r.Keys.Seqeracompute.SecretKey.IsUnknown() && !r.Keys.Seqeracompute.SecretKey.IsNull() {
			*secretKey1 = r.Keys.Seqeracompute.SecretKey.ValueString()
		} else {
			secretKey1 = nil
		}
		assumeRoleArn1 := new(string)
		if !r.Keys.Seqeracompute.AssumeRoleArn.IsUnknown() && !r.Keys.Seqeracompute.AssumeRoleArn.IsNull() {
			*assumeRoleArn1 = r.Keys.Seqeracompute.AssumeRoleArn.ValueString()
		} else {
			assumeRoleArn1 = nil
		}
		seqeraComputeSecurityKeys = &shared.SeqeraComputeSecurityKeys{
			AccessKey:     accessKey1,
			SecretKey:     secretKey1,
			AssumeRoleArn: assumeRoleArn1,
		}
	}
	if seqeraComputeSecurityKeys != nil {
		keys = shared.SecurityKeys{
			SeqeraComputeSecurityKeys: seqeraComputeSecurityKeys,
		}
	}
	out := shared.CredentialsInput{
		CredentialsID: credentialsID,
		Name:          name,
		Description:   description,
		ProviderType:  providerType,
		BaseURL:       baseURL,
		Category:      category,
		Keys:          keys,
	}

	return &out, diags
}

func (r *CredentialResourceModel) ToSharedUpdateCredentialsRequest(ctx context.Context) (*shared.UpdateCredentialsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	credentials, credentialsDiags := r.ToSharedCredentialsInput(ctx)
	diags.Append(credentialsDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := shared.UpdateCredentialsRequest{
		Credentials: credentials,
	}

	return &out, diags
}
