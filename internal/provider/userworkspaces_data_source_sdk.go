// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/speakeasy/terraform-provider-seqera/internal/provider/types"
	"github.com/speakeasy/terraform-provider-seqera/internal/sdk/models/operations"
	"github.com/speakeasy/terraform-provider-seqera/internal/sdk/models/shared"
)

func (r *UserWorkspacesDataSourceModel) RefreshFromSharedListWorkspacesAndOrgResponse(ctx context.Context, resp *shared.ListWorkspacesAndOrgResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.OrgsAndWorkspaces = []tfTypes.OrgAndWorkspaceDto{}

		for _, orgsAndWorkspacesItem := range resp.OrgsAndWorkspaces {
			var orgsAndWorkspaces tfTypes.OrgAndWorkspaceDto

			orgsAndWorkspaces.OrgID = types.Int64PointerValue(orgsAndWorkspacesItem.OrgID)
			orgsAndWorkspaces.OrgLogoURL = types.StringPointerValue(orgsAndWorkspacesItem.OrgLogoURL)
			orgsAndWorkspaces.OrgName = types.StringPointerValue(orgsAndWorkspacesItem.OrgName)
			if orgsAndWorkspacesItem.OrgType != nil {
				orgsAndWorkspaces.OrgType = types.StringValue(string(*orgsAndWorkspacesItem.OrgType))
			} else {
				orgsAndWorkspaces.OrgType = types.StringNull()
			}
			orgsAndWorkspaces.Roles = make([]types.String, 0, len(orgsAndWorkspacesItem.Roles))
			for _, v := range orgsAndWorkspacesItem.Roles {
				orgsAndWorkspaces.Roles = append(orgsAndWorkspaces.Roles, types.StringValue(v))
			}
			if orgsAndWorkspacesItem.Visibility != nil {
				orgsAndWorkspaces.Visibility = types.StringValue(string(*orgsAndWorkspacesItem.Visibility))
			} else {
				orgsAndWorkspaces.Visibility = types.StringNull()
			}
			orgsAndWorkspaces.WorkspaceFullName = types.StringPointerValue(orgsAndWorkspacesItem.WorkspaceFullName)
			orgsAndWorkspaces.WorkspaceID = types.Int64PointerValue(orgsAndWorkspacesItem.WorkspaceID)
			orgsAndWorkspaces.WorkspaceName = types.StringPointerValue(orgsAndWorkspacesItem.WorkspaceName)

			r.OrgsAndWorkspaces = append(r.OrgsAndWorkspaces, orgsAndWorkspaces)
		}
	}

	return diags
}

func (r *UserWorkspacesDataSourceModel) ToOperationsListWorkspacesUserRequest(ctx context.Context) (*operations.ListWorkspacesUserRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var userID int64
	userID = r.UserID.ValueInt64()

	out := operations.ListWorkspacesUserRequest{
		UserID: userID,
	}

	return &out, diags
}
