// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/speakeasy/terraform-provider-seqera/internal/provider/typeconvert"
	tfTypes "github.com/speakeasy/terraform-provider-seqera/internal/provider/types"
	"github.com/speakeasy/terraform-provider-seqera/internal/sdk/models/operations"
	"github.com/speakeasy/terraform-provider-seqera/internal/sdk/models/shared"
)

func (r *TokensResourceModel) RefreshFromSharedAccessToken(ctx context.Context, resp *shared.AccessToken) diag.Diagnostics {
	var diags diag.Diagnostics

	r.BasicAuth = types.StringPointerValue(resp.BasicAuth)
	r.DateCreated = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.DateCreated))
	r.ID = types.Int64PointerValue(resp.ID)
	r.LastUsed = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.LastUsed))
	r.Name = types.StringValue(resp.Name)

	return diags
}

func (r *TokensResourceModel) RefreshFromSharedCreateAccessTokenResponse(ctx context.Context, resp *shared.CreateAccessTokenResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.AccessKey = types.StringPointerValue(resp.AccessKey)
		if resp.Token == nil {
			r.Token = nil
		} else {
			r.Token = &tfTypes.AccessToken{}
			r.Token.BasicAuth = types.StringPointerValue(resp.Token.BasicAuth)
			r.Token.DateCreated = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.Token.DateCreated))
			r.Token.ID = types.Int64PointerValue(resp.Token.ID)
			r.Token.LastUsed = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.Token.LastUsed))
			r.Token.Name = types.StringValue(resp.Token.Name)
		}
	}

	return diags
}

func (r *TokensResourceModel) ToOperationsDeleteTokenRequest(ctx context.Context) (*operations.DeleteTokenRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var tokenID int64
	tokenID = r.TokenID.ValueInt64()

	out := operations.DeleteTokenRequest{
		TokenID: tokenID,
	}

	return &out, diags
}

func (r *TokensResourceModel) ToSharedCreateAccessTokenRequest(ctx context.Context) (*shared.CreateAccessTokenRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	name := new(string)
	if !r.Name.IsUnknown() && !r.Name.IsNull() {
		*name = r.Name.ValueString()
	} else {
		name = nil
	}
	out := shared.CreateAccessTokenRequest{
		Name: name,
	}

	return &out, diags
}
