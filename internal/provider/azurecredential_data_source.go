// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	tfTypes "github.com/seqeralabs/terraform-provider-seqera/internal/provider/types"
	"github.com/seqeralabs/terraform-provider-seqera/internal/sdk"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &AzureCredentialDataSource{}
var _ datasource.DataSourceWithConfigure = &AzureCredentialDataSource{}

func NewAzureCredentialDataSource() datasource.DataSource {
	return &AzureCredentialDataSource{}
}

// AzureCredentialDataSource is the data source implementation.
type AzureCredentialDataSource struct {
	// Provider configured SDK client.
	client *sdk.Seqera
}

// AzureCredentialDataSourceModel describes the data model.
type AzureCredentialDataSourceModel struct {
	BaseURL       types.String               `tfsdk:"base_url"`
	Category      types.String               `tfsdk:"category"`
	CredentialsID types.String               `tfsdk:"credentials_id"`
	DateCreated   types.String               `tfsdk:"date_created"`
	Deleted       types.Bool                 `tfsdk:"deleted"`
	Description   types.String               `tfsdk:"description"`
	Keys          tfTypes.AzureSecurityKeys1 `tfsdk:"keys"`
	LastUpdated   types.String               `tfsdk:"last_updated"`
	LastUsed      types.String               `tfsdk:"last_used"`
	Name          types.String               `tfsdk:"name"`
	ProviderType  types.String               `tfsdk:"provider_type"`
	WorkspaceID   types.Int64                `queryParam:"style=form,explode=true,name=workspaceId" tfsdk:"workspace_id"`
}

// Metadata returns the data source type name.
func (r *AzureCredentialDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_azure_credential"
}

// Schema defines the schema for the data source.
func (r *AzureCredentialDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "Manage Azure credentials in Seqera platform using this resource.\n\nAzure credentials store authentication information for accessing Azure services\nwithin the Seqera Platform workflows.\n",

		Attributes: map[string]schema.Attribute{
			"base_url": schema.StringAttribute{
				Computed:    true,
				Description: `Base URL for the service`,
			},
			"category": schema.StringAttribute{
				Computed:    true,
				Description: `Category of the credential`,
			},
			"credentials_id": schema.StringAttribute{
				Required:    true,
				Description: `Credentials string identifier`,
			},
			"date_created": schema.StringAttribute{
				Computed:    true,
				Description: `Timestamp when the credential was created`,
			},
			"deleted": schema.BoolAttribute{
				Computed:    true,
				Description: `Flag indicating if the credential has been soft-deleted`,
			},
			"description": schema.StringAttribute{
				Computed:    true,
				Description: `Optional description explaining the purpose of the credential`,
			},
			"keys": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"batch_name": schema.StringAttribute{
						Computed: true,
					},
					"storage_name": schema.StringAttribute{
						Computed: true,
					},
				},
			},
			"last_updated": schema.StringAttribute{
				Computed:    true,
				Description: `Timestamp when the credential was last updated`,
			},
			"last_used": schema.StringAttribute{
				Computed:    true,
				Description: `Timestamp when the credential was last used`,
			},
			"name": schema.StringAttribute{
				Computed:    true,
				Description: `Display name for the credential (max 100 characters)`,
			},
			"provider_type": schema.StringAttribute{
				Computed:    true,
				Description: `Cloud provider type (azure)`,
			},
			"workspace_id": schema.Int64Attribute{
				Optional:    true,
				Description: `Workspace numeric identifier`,
			},
		},
	}
}

func (r *AzureCredentialDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.Seqera)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.Seqera, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *AzureCredentialDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *AzureCredentialDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsDescribeAzureCredentialsRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Credentials.DescribeAzureCredentials(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.DescribeAzureCredentialsResponse != nil && res.DescribeAzureCredentialsResponse.Credentials != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedAzureCredentialOutput(ctx, res.DescribeAzureCredentialsResponse.Credentials)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
