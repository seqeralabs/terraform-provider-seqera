// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/seqeralabs/terraform-provider-seqera/internal/sdk/models/operations"
	"github.com/seqeralabs/terraform-provider-seqera/internal/sdk/models/shared"
)

func (r *GitHubCredentialResourceModel) RefreshFromSharedCreateGitHubCredentialsResponse(ctx context.Context, resp *shared.CreateGitHubCredentialsResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.CredentialsID = types.StringPointerValue(resp.CredentialsID)
	}

	return diags
}

func (r *GitHubCredentialResourceModel) RefreshFromSharedDescribeGitHubCredentialsResponse(ctx context.Context, resp *shared.DescribeGitHubCredentialsResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		diags.Append(r.RefreshFromSharedGitHubCredentialOutput(ctx, resp.Credentials)...)

		if diags.HasError() {
			return diags
		}

	}

	return diags
}

func (r *GitHubCredentialResourceModel) RefreshFromSharedGitHubCredentialOutput(ctx context.Context, resp *shared.GitHubCredentialOutput) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.CredentialsID = types.StringPointerValue(resp.CredentialsID)
		r.Name = types.StringValue(resp.Name)
		if resp.ProviderType != nil {
			r.ProviderType = types.StringValue(string(*resp.ProviderType))
		} else {
			r.ProviderType = types.StringNull()
		}
	}

	return diags
}

func (r *GitHubCredentialResourceModel) ToOperationsCreateGitHubCredentialsRequest(ctx context.Context) (*operations.CreateGitHubCredentialsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	workspaceID := new(int64)
	if !r.WorkspaceID.IsUnknown() && !r.WorkspaceID.IsNull() {
		*workspaceID = r.WorkspaceID.ValueInt64()
	} else {
		workspaceID = nil
	}
	createGitHubCredentialsRequest, createGitHubCredentialsRequestDiags := r.ToSharedCreateGitHubCredentialsRequest(ctx)
	diags.Append(createGitHubCredentialsRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreateGitHubCredentialsRequest{
		WorkspaceID:                    workspaceID,
		CreateGitHubCredentialsRequest: *createGitHubCredentialsRequest,
	}

	return &out, diags
}

func (r *GitHubCredentialResourceModel) ToOperationsDeleteGitHubCredentialsRequest(ctx context.Context) (*operations.DeleteGitHubCredentialsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var credentialsID string
	credentialsID = r.CredentialsID.ValueString()

	workspaceID := new(int64)
	if !r.WorkspaceID.IsUnknown() && !r.WorkspaceID.IsNull() {
		*workspaceID = r.WorkspaceID.ValueInt64()
	} else {
		workspaceID = nil
	}
	out := operations.DeleteGitHubCredentialsRequest{
		CredentialsID: credentialsID,
		WorkspaceID:   workspaceID,
	}

	return &out, diags
}

func (r *GitHubCredentialResourceModel) ToOperationsDescribeGitHubCredentialsRequest(ctx context.Context) (*operations.DescribeGitHubCredentialsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var credentialsID string
	credentialsID = r.CredentialsID.ValueString()

	workspaceID := new(int64)
	if !r.WorkspaceID.IsUnknown() && !r.WorkspaceID.IsNull() {
		*workspaceID = r.WorkspaceID.ValueInt64()
	} else {
		workspaceID = nil
	}
	out := operations.DescribeGitHubCredentialsRequest{
		CredentialsID: credentialsID,
		WorkspaceID:   workspaceID,
	}

	return &out, diags
}

func (r *GitHubCredentialResourceModel) ToOperationsUpdateGitHubCredentialsRequest(ctx context.Context) (*operations.UpdateGitHubCredentialsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var credentialsID string
	credentialsID = r.CredentialsID.ValueString()

	workspaceID := new(int64)
	if !r.WorkspaceID.IsUnknown() && !r.WorkspaceID.IsNull() {
		*workspaceID = r.WorkspaceID.ValueInt64()
	} else {
		workspaceID = nil
	}
	updateGitHubCredentialsRequest, updateGitHubCredentialsRequestDiags := r.ToSharedUpdateGitHubCredentialsRequest(ctx)
	diags.Append(updateGitHubCredentialsRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateGitHubCredentialsRequest{
		CredentialsID:                  credentialsID,
		WorkspaceID:                    workspaceID,
		UpdateGitHubCredentialsRequest: *updateGitHubCredentialsRequest,
	}

	return &out, diags
}

func (r *GitHubCredentialResourceModel) ToSharedCreateGitHubCredentialsRequest(ctx context.Context) (*shared.CreateGitHubCredentialsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	credentials, credentialsDiags := r.ToSharedGitHubCredential(ctx)
	diags.Append(credentialsDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := shared.CreateGitHubCredentialsRequest{
		Credentials: credentials,
	}

	return &out, diags
}

func (r *GitHubCredentialResourceModel) ToSharedGitHubCredential(ctx context.Context) (*shared.GitHubCredential, diag.Diagnostics) {
	var diags diag.Diagnostics

	credentialsID := new(string)
	if !r.CredentialsID.IsUnknown() && !r.CredentialsID.IsNull() {
		*credentialsID = r.CredentialsID.ValueString()
	} else {
		credentialsID = nil
	}
	var name string
	name = r.Name.ValueString()

	providerType := new(shared.GitHubCredentialProviderType)
	if !r.ProviderType.IsUnknown() && !r.ProviderType.IsNull() {
		*providerType = shared.GitHubCredentialProviderType(r.ProviderType.ValueString())
	} else {
		providerType = nil
	}
	keys := shared.GitHubCredentialKeys{}
	out := shared.GitHubCredential{
		CredentialsID: credentialsID,
		Name:          name,
		ProviderType:  providerType,
		Keys:          keys,
	}

	return &out, diags
}

func (r *GitHubCredentialResourceModel) ToSharedGitHubCredentialKeys(ctx context.Context) (*shared.GitHubCredentialKeys, diag.Diagnostics) {
	var diags diag.Diagnostics

	var accessToken string
	accessToken = r.AccessToken.ValueString()

	baseURL := new(string)
	if !r.BaseURL.IsUnknown() && !r.BaseURL.IsNull() {
		*baseURL = r.BaseURL.ValueString()
	} else {
		baseURL = nil
	}
	out := shared.GitHubCredentialKeys{
		AccessToken: accessToken,
		BaseURL:     baseURL,
	}

	return &out, diags
}

func (r *GitHubCredentialResourceModel) ToSharedUpdateGitHubCredentialsRequest(ctx context.Context) (*shared.UpdateGitHubCredentialsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	credentials, credentialsDiags := r.ToSharedGitHubCredential(ctx)
	diags.Append(credentialsDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := shared.UpdateGitHubCredentialsRequest{
		Credentials: credentials,
	}

	return &out, diags
}
