// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/seqeralabs/terraform-provider-seqera/internal/sdk/models/operations"
	"github.com/seqeralabs/terraform-provider-seqera/internal/sdk/models/shared"
)

func (r *GithubCredentialResourceModel) RefreshFromSharedCreateGithubCredentialsResponse(ctx context.Context, resp *shared.CreateGithubCredentialsResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.CredentialsID = types.StringPointerValue(resp.CredentialsID)
	}

	return diags
}

func (r *GithubCredentialResourceModel) RefreshFromSharedDescribeGithubCredentialsResponse(ctx context.Context, resp *shared.DescribeGithubCredentialsResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		diags.Append(r.RefreshFromSharedGithubCredentialOutput(ctx, resp.Credentials)...)

		if diags.HasError() {
			return diags
		}

	}

	return diags
}

func (r *GithubCredentialResourceModel) RefreshFromSharedGithubCredentialOutput(ctx context.Context, resp *shared.GithubCredentialOutput) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.CredentialsID = types.StringPointerValue(resp.CredentialsID)
		r.Name = types.StringValue(resp.Name)
		if resp.ProviderType != nil {
			r.ProviderType = types.StringValue(string(*resp.ProviderType))
		} else {
			r.ProviderType = types.StringNull()
		}
	}

	return diags
}

func (r *GithubCredentialResourceModel) ToOperationsCreateGithubCredentialsRequest(ctx context.Context) (*operations.CreateGithubCredentialsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	workspaceID := new(int64)
	if !r.WorkspaceID.IsUnknown() && !r.WorkspaceID.IsNull() {
		*workspaceID = r.WorkspaceID.ValueInt64()
	} else {
		workspaceID = nil
	}
	createGithubCredentialsRequest, createGithubCredentialsRequestDiags := r.ToSharedCreateGithubCredentialsRequest(ctx)
	diags.Append(createGithubCredentialsRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreateGithubCredentialsRequest{
		WorkspaceID:                    workspaceID,
		CreateGithubCredentialsRequest: *createGithubCredentialsRequest,
	}

	return &out, diags
}

func (r *GithubCredentialResourceModel) ToOperationsDeleteGithubCredentialsRequest(ctx context.Context) (*operations.DeleteGithubCredentialsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var credentialsID string
	credentialsID = r.CredentialsID.ValueString()

	workspaceID := new(int64)
	if !r.WorkspaceID.IsUnknown() && !r.WorkspaceID.IsNull() {
		*workspaceID = r.WorkspaceID.ValueInt64()
	} else {
		workspaceID = nil
	}
	out := operations.DeleteGithubCredentialsRequest{
		CredentialsID: credentialsID,
		WorkspaceID:   workspaceID,
	}

	return &out, diags
}

func (r *GithubCredentialResourceModel) ToOperationsDescribeGithubCredentialsRequest(ctx context.Context) (*operations.DescribeGithubCredentialsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var credentialsID string
	credentialsID = r.CredentialsID.ValueString()

	workspaceID := new(int64)
	if !r.WorkspaceID.IsUnknown() && !r.WorkspaceID.IsNull() {
		*workspaceID = r.WorkspaceID.ValueInt64()
	} else {
		workspaceID = nil
	}
	out := operations.DescribeGithubCredentialsRequest{
		CredentialsID: credentialsID,
		WorkspaceID:   workspaceID,
	}

	return &out, diags
}

func (r *GithubCredentialResourceModel) ToOperationsUpdateGithubCredentialsRequest(ctx context.Context) (*operations.UpdateGithubCredentialsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var credentialsID string
	credentialsID = r.CredentialsID.ValueString()

	workspaceID := new(int64)
	if !r.WorkspaceID.IsUnknown() && !r.WorkspaceID.IsNull() {
		*workspaceID = r.WorkspaceID.ValueInt64()
	} else {
		workspaceID = nil
	}
	updateGithubCredentialsRequest, updateGithubCredentialsRequestDiags := r.ToSharedUpdateGithubCredentialsRequest(ctx)
	diags.Append(updateGithubCredentialsRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateGithubCredentialsRequest{
		CredentialsID:                  credentialsID,
		WorkspaceID:                    workspaceID,
		UpdateGithubCredentialsRequest: *updateGithubCredentialsRequest,
	}

	return &out, diags
}

func (r *GithubCredentialResourceModel) ToSharedCreateGithubCredentialsRequest(ctx context.Context) (*shared.CreateGithubCredentialsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	credentials, credentialsDiags := r.ToSharedGithubCredential(ctx)
	diags.Append(credentialsDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := shared.CreateGithubCredentialsRequest{
		Credentials: credentials,
	}

	return &out, diags
}

func (r *GithubCredentialResourceModel) ToSharedGithubCredential(ctx context.Context) (*shared.GithubCredential, diag.Diagnostics) {
	var diags diag.Diagnostics

	credentialsID := new(string)
	if !r.CredentialsID.IsUnknown() && !r.CredentialsID.IsNull() {
		*credentialsID = r.CredentialsID.ValueString()
	} else {
		credentialsID = nil
	}
	var name string
	name = r.Name.ValueString()

	providerType := new(shared.GithubCredentialProviderType)
	if !r.ProviderType.IsUnknown() && !r.ProviderType.IsNull() {
		*providerType = shared.GithubCredentialProviderType(r.ProviderType.ValueString())
	} else {
		providerType = nil
	}
	keys := shared.GithubCredentialKeys{}
	out := shared.GithubCredential{
		CredentialsID: credentialsID,
		Name:          name,
		ProviderType:  providerType,
		Keys:          keys,
	}

	return &out, diags
}

func (r *GithubCredentialResourceModel) ToSharedGithubCredentialKeys(ctx context.Context) (*shared.GithubCredentialKeys, diag.Diagnostics) {
	var diags diag.Diagnostics

	var accessToken string
	accessToken = r.AccessToken.ValueString()

	baseURL := new(string)
	if !r.BaseURL.IsUnknown() && !r.BaseURL.IsNull() {
		*baseURL = r.BaseURL.ValueString()
	} else {
		baseURL = nil
	}
	out := shared.GithubCredentialKeys{
		AccessToken: accessToken,
		BaseURL:     baseURL,
	}

	return &out, diags
}

func (r *GithubCredentialResourceModel) ToSharedUpdateGithubCredentialsRequest(ctx context.Context) (*shared.UpdateGithubCredentialsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	credentials, credentialsDiags := r.ToSharedGithubCredential(ctx)
	diags.Append(credentialsDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := shared.UpdateGithubCredentialsRequest{
		Credentials: credentials,
	}

	return &out, diags
}
