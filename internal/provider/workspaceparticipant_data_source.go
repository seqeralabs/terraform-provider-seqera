// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/seqeralabs/terraform-provider-seqera/internal/sdk"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &WorkspaceParticipantDataSource{}
var _ datasource.DataSourceWithConfigure = &WorkspaceParticipantDataSource{}

func NewWorkspaceParticipantDataSource() datasource.DataSource {
	return &WorkspaceParticipantDataSource{}
}

// WorkspaceParticipantDataSource is the data source implementation.
type WorkspaceParticipantDataSource struct {
	// Provider configured SDK client.
	client *sdk.Seqera
}

// WorkspaceParticipantDataSourceModel describes the data model.
type WorkspaceParticipantDataSourceModel struct {
	Email           types.String `tfsdk:"email"`
	Max             types.Int32  `queryParam:"style=form,explode=true,name=max" tfsdk:"max"`
	MemberID        types.Int64  `tfsdk:"member_id"`
	Offset          types.Int32  `queryParam:"style=form,explode=true,name=offset" tfsdk:"offset"`
	OrgID           types.Int64  `tfsdk:"org_id"`
	ParticipantID   types.Int64  `tfsdk:"participant_id"`
	ParticipantType types.String `tfsdk:"participant_type"`
	Role            types.String `tfsdk:"role"`
	Search          types.String `queryParam:"style=form,explode=true,name=search" tfsdk:"search"`
	TeamID          types.Int64  `tfsdk:"team_id"`
	TotalSize       types.Int64  `tfsdk:"total_size"`
	UserName        types.String `tfsdk:"user_name"`
	UserNameOrEmail types.String `tfsdk:"user_name_or_email"`
	WorkspaceID     types.Int64  `tfsdk:"workspace_id"`
}

// Metadata returns the data source type name.
func (r *WorkspaceParticipantDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_workspace_participant"
}

// Schema defines the schema for the data source.
func (r *WorkspaceParticipantDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "Manage workspace participant access in Seqera Platform.\n\nWorkspace participants are users or teams who have been granted access to a\nspecific workspace within an organization. Participants can have granular\nroles (owner, admin, maintain, launch, connect, view) that determine their\npermissions within the workspace.\n\nParticipants can be added by username/email, or by referencing an existing\norganization member ID or team ID. This enables flexible access control at\nthe workspace level.\n",

		Attributes: map[string]schema.Attribute{
			"email": schema.StringAttribute{
				Computed:    true,
				Description: `Participant email address`,
			},
			"max": schema.Int32Attribute{
				Optional:    true,
				Description: `Pagination max results`,
			},
			"member_id": schema.Int64Attribute{
				Computed:    true,
				Description: `Organization member numeric identifier (use this OR userNameOrEmail)`,
			},
			"offset": schema.Int32Attribute{
				Optional:    true,
				Description: `Pagination offset`,
			},
			"org_id": schema.Int64Attribute{
				Computed:    true,
				Description: `Organization numeric identifier`,
			},
			"participant_id": schema.Int64Attribute{
				Computed:    true,
				Description: `Workspace participant numeric identifier`,
			},
			"participant_type": schema.StringAttribute{
				Computed:    true,
				Description: `Type of participant (MEMBER or TEAM)`,
			},
			"role": schema.StringAttribute{
				Computed: true,
			},
			"search": schema.StringAttribute{
				Optional:    true,
				Description: `Filter search parameter`,
			},
			"team_id": schema.Int64Attribute{
				Computed:    true,
				Description: `Team numeric identifier (for adding entire teams)`,
			},
			"total_size": schema.Int64Attribute{
				Computed: true,
			},
			"user_name": schema.StringAttribute{
				Computed:    true,
				Description: `Participant username`,
			},
			"user_name_or_email": schema.StringAttribute{
				Computed:    true,
				Description: `Username or email address (use this OR memberId)`,
			},
			"workspace_id": schema.Int64Attribute{
				Required:    true,
				Description: `Workspace numeric identifier`,
			},
		},
	}
}

func (r *WorkspaceParticipantDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.Seqera)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.Seqera, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *WorkspaceParticipantDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *WorkspaceParticipantDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsListWorkspaceParticipantsRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Workspaces.ListWorkspaceParticipants(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.ListWorkspaceParticipantsResponse != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedListWorkspaceParticipantsResponse(ctx, res.ListWorkspaceParticipantsResponse)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
