// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/seqeralabs/terraform-provider-seqera/internal/sdk/models/operations"
	"github.com/seqeralabs/terraform-provider-seqera/internal/sdk/models/shared"
)

func (r *BitBucketCredentialResourceModel) RefreshFromSharedBitBucketCredentialKeysOutput(ctx context.Context, resp *shared.BitBucketCredentialKeysOutput) diag.Diagnostics {
	var diags diag.Diagnostics

	r.Username = types.StringValue(resp.Username)

	return diags
}

func (r *BitBucketCredentialResourceModel) RefreshFromSharedBitBucketCredentialOutput(ctx context.Context, resp *shared.BitBucketCredentialOutput) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.CredentialsID = types.StringPointerValue(resp.CredentialsID)
		diags.Append(r.RefreshFromSharedBitBucketCredentialKeysOutput(ctx, &resp.Keys)...)

		if diags.HasError() {
			return diags
		}

		r.Name = types.StringValue(resp.Name)
		if resp.ProviderType != nil {
			r.ProviderType = types.StringValue(string(*resp.ProviderType))
		} else {
			r.ProviderType = types.StringNull()
		}
	}

	return diags
}

func (r *BitBucketCredentialResourceModel) RefreshFromSharedCreateBitBucketCredentialsResponse(ctx context.Context, resp *shared.CreateBitBucketCredentialsResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.CredentialsID = types.StringPointerValue(resp.CredentialsID)
	}

	return diags
}

func (r *BitBucketCredentialResourceModel) RefreshFromSharedDescribeBitBucketCredentialsResponse(ctx context.Context, resp *shared.DescribeBitBucketCredentialsResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		diags.Append(r.RefreshFromSharedBitBucketCredentialOutput(ctx, resp.Credentials)...)

		if diags.HasError() {
			return diags
		}

	}

	return diags
}

func (r *BitBucketCredentialResourceModel) ToOperationsCreateBitBucketCredentialsRequest(ctx context.Context) (*operations.CreateBitBucketCredentialsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	workspaceID := new(int64)
	if !r.WorkspaceID.IsUnknown() && !r.WorkspaceID.IsNull() {
		*workspaceID = r.WorkspaceID.ValueInt64()
	} else {
		workspaceID = nil
	}
	createBitBucketCredentialsRequest, createBitBucketCredentialsRequestDiags := r.ToSharedCreateBitBucketCredentialsRequest(ctx)
	diags.Append(createBitBucketCredentialsRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreateBitBucketCredentialsRequest{
		WorkspaceID:                       workspaceID,
		CreateBitBucketCredentialsRequest: *createBitBucketCredentialsRequest,
	}

	return &out, diags
}

func (r *BitBucketCredentialResourceModel) ToOperationsDeleteBitBucketCredentialsRequest(ctx context.Context) (*operations.DeleteBitBucketCredentialsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var credentialsID string
	credentialsID = r.CredentialsID.ValueString()

	workspaceID := new(int64)
	if !r.WorkspaceID.IsUnknown() && !r.WorkspaceID.IsNull() {
		*workspaceID = r.WorkspaceID.ValueInt64()
	} else {
		workspaceID = nil
	}
	out := operations.DeleteBitBucketCredentialsRequest{
		CredentialsID: credentialsID,
		WorkspaceID:   workspaceID,
	}

	return &out, diags
}

func (r *BitBucketCredentialResourceModel) ToOperationsDescribeBitBucketCredentialsRequest(ctx context.Context) (*operations.DescribeBitBucketCredentialsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var credentialsID string
	credentialsID = r.CredentialsID.ValueString()

	workspaceID := new(int64)
	if !r.WorkspaceID.IsUnknown() && !r.WorkspaceID.IsNull() {
		*workspaceID = r.WorkspaceID.ValueInt64()
	} else {
		workspaceID = nil
	}
	out := operations.DescribeBitBucketCredentialsRequest{
		CredentialsID: credentialsID,
		WorkspaceID:   workspaceID,
	}

	return &out, diags
}

func (r *BitBucketCredentialResourceModel) ToOperationsUpdateBitBucketCredentialsRequest(ctx context.Context) (*operations.UpdateBitBucketCredentialsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var credentialsID string
	credentialsID = r.CredentialsID.ValueString()

	workspaceID := new(int64)
	if !r.WorkspaceID.IsUnknown() && !r.WorkspaceID.IsNull() {
		*workspaceID = r.WorkspaceID.ValueInt64()
	} else {
		workspaceID = nil
	}
	updateBitBucketCredentialsRequest, updateBitBucketCredentialsRequestDiags := r.ToSharedUpdateBitBucketCredentialsRequest(ctx)
	diags.Append(updateBitBucketCredentialsRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateBitBucketCredentialsRequest{
		CredentialsID:                     credentialsID,
		WorkspaceID:                       workspaceID,
		UpdateBitBucketCredentialsRequest: *updateBitBucketCredentialsRequest,
	}

	return &out, diags
}

func (r *BitBucketCredentialResourceModel) ToSharedBitBucketCredential(ctx context.Context) (*shared.BitBucketCredential, diag.Diagnostics) {
	var diags diag.Diagnostics

	credentialsID := new(string)
	if !r.CredentialsID.IsUnknown() && !r.CredentialsID.IsNull() {
		*credentialsID = r.CredentialsID.ValueString()
	} else {
		credentialsID = nil
	}
	var name string
	name = r.Name.ValueString()

	providerType := new(shared.BitBucketCredentialProviderType)
	if !r.ProviderType.IsUnknown() && !r.ProviderType.IsNull() {
		*providerType = shared.BitBucketCredentialProviderType(r.ProviderType.ValueString())
	} else {
		providerType = nil
	}
	keys, keysDiags := r.ToSharedBitBucketCredentialKeys(ctx)
	diags.Append(keysDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := shared.BitBucketCredential{
		CredentialsID: credentialsID,
		Name:          name,
		ProviderType:  providerType,
		Keys:          *keys,
	}

	return &out, diags
}

func (r *BitBucketCredentialResourceModel) ToSharedBitBucketCredentialKeys(ctx context.Context) (*shared.BitBucketCredentialKeys, diag.Diagnostics) {
	var diags diag.Diagnostics

	var username string
	username = r.Username.ValueString()

	var token string
	token = r.Token.ValueString()

	baseURL := new(string)
	if !r.BaseURL.IsUnknown() && !r.BaseURL.IsNull() {
		*baseURL = r.BaseURL.ValueString()
	} else {
		baseURL = nil
	}
	out := shared.BitBucketCredentialKeys{
		Username: username,
		Token:    token,
		BaseURL:  baseURL,
	}

	return &out, diags
}

func (r *BitBucketCredentialResourceModel) ToSharedCreateBitBucketCredentialsRequest(ctx context.Context) (*shared.CreateBitBucketCredentialsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	credentials, credentialsDiags := r.ToSharedBitBucketCredential(ctx)
	diags.Append(credentialsDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := shared.CreateBitBucketCredentialsRequest{
		Credentials: credentials,
	}

	return &out, diags
}

func (r *BitBucketCredentialResourceModel) ToSharedUpdateBitBucketCredentialsRequest(ctx context.Context) (*shared.UpdateBitBucketCredentialsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	credentials, credentialsDiags := r.ToSharedBitBucketCredential(ctx)
	diags.Append(credentialsDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := shared.UpdateBitBucketCredentialsRequest{
		Credentials: credentials,
	}

	return &out, diags
}
