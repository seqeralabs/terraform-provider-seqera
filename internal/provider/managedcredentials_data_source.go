// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/seqeralabs/terraform-provider-seqera/internal/sdk"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &ManagedCredentialsDataSource{}
var _ datasource.DataSourceWithConfigure = &ManagedCredentialsDataSource{}

func NewManagedCredentialsDataSource() datasource.DataSource {
	return &ManagedCredentialsDataSource{}
}

// ManagedCredentialsDataSource is the data source implementation.
type ManagedCredentialsDataSource struct {
	// Provider configured SDK client.
	client *sdk.Seqera
}

// ManagedCredentialsDataSourceModel describes the data model.
type ManagedCredentialsDataSourceModel struct {
	CredentialProvider   types.String `tfsdk:"credential_provider"`
	ManagedCredentialsID types.Int64  `tfsdk:"managed_credentials_id"`
	ManagedIdentityID    types.Int64  `tfsdk:"managed_identity_id"`
	Max                  types.Int32  `queryParam:"style=form,explode=true,name=max" tfsdk:"max"`
	Offset               types.Int32  `queryParam:"style=form,explode=true,name=offset" tfsdk:"offset"`
	OrgID                types.Int64  `queryParam:"style=form,explode=true,name=orgId" tfsdk:"org_id"`
	Search               types.String `queryParam:"style=form,explode=true,name=search" tfsdk:"search"`
	TotalSize            types.Int64  `tfsdk:"total_size"`
	UserID               types.Int64  `queryParam:"style=form,explode=true,name=userId" tfsdk:"user_id"`
	UserName             types.String `tfsdk:"user_name"`
}

// Metadata returns the data source type name.
func (r *ManagedCredentialsDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_managed_credentials"
}

// Schema defines the schema for the data source.
func (r *ManagedCredentialsDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "Manage individual user SSH credentials for HPC Managed Identities.\n\nManaged Credentials are user-specific SSH credentials that link to a\nparent Managed Identity. Each credential contains a Linux username and\nSSH private key, enabling individual user authentication to HPC systems\nwhile maintaining separate user identity in system logs.\n\nThis allows workspace users to access HPC environments with their own\ncredentials rather than shared SSH keys, ensuring proper activity tracking,\nfair resource allocation through HPC queue policies, and appropriate\naccess control based on individual Linux user permissions.\n\nNote: All users must belong to the same Linux group with access to the\nHPC work directory for proper file sharing and permissions.\n",

		Attributes: map[string]schema.Attribute{
			"credential_provider": schema.StringAttribute{
				Computed:    true,
				Description: `Credential provider type (currently only SSH)`,
			},
			"managed_credentials_id": schema.Int64Attribute{
				Computed:    true,
				Description: `Managed Credentials numeric identifier`,
			},
			"managed_identity_id": schema.Int64Attribute{
				Required:    true,
				Description: `Parent Managed Identity numeric identifier`,
			},
			"max": schema.Int32Attribute{
				Optional:    true,
				Description: `Pagination max results`,
			},
			"offset": schema.Int32Attribute{
				Optional:    true,
				Description: `Pagination offset`,
			},
			"org_id": schema.Int64Attribute{
				Required:    true,
				Description: `Organization numeric identifier`,
			},
			"search": schema.StringAttribute{
				Optional:    true,
				Description: `Optional filtering on Managed Credentials for the given Managed Identity:                                              Allows free text search on ` + "`" + `userName` + "`" + ` or ` + "`" + `firstName + lastName` + "`" + `.                                              Accepts keywords: ` + "`" + `is:missing` + "`" + ` or ` + "`" + `is:added` + "`" + ` to filter on credentials status.                                              If not provided (or both provided), all are returned.`,
			},
			"total_size": schema.Int64Attribute{
				Computed: true,
			},
			"user_id": schema.Int64Attribute{
				Computed:    true,
				Optional:    true,
				Description: `User numeric identifier to filter records by`,
			},
			"user_name": schema.StringAttribute{
				Computed:    true,
				Description: `Username for SSH authentication`,
			},
		},
	}
}

func (r *ManagedCredentialsDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.Seqera)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.Seqera, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *ManagedCredentialsDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *ManagedCredentialsDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsListManagedCredentialsRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Identities.ListManagedCredentials(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.ListGridManagedCredentialsResponse != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedListGridManagedCredentialsResponse(ctx, res.ListGridManagedCredentialsResponse)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
