// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/boolplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int32planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/listplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	tfTypes "github.com/speakeasy/terraform-provider-seqera/internal/provider/types"
	"github.com/speakeasy/terraform-provider-seqera/internal/sdk"
	"github.com/speakeasy/terraform-provider-seqera/internal/validators"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &DataStudiosResource{}
var _ resource.ResourceWithImportState = &DataStudiosResource{}

func NewDataStudiosResource() resource.Resource {
	return &DataStudiosResource{}
}

// DataStudiosResource defines the resource implementation.
type DataStudiosResource struct {
	client *sdk.Seqera
}

// DataStudiosResourceModel describes the resource data model.
type DataStudiosResourceModel struct {
	AutoStart           types.Bool              `queryParam:"style=form,explode=true,name=autoStart" tfsdk:"auto_start"`
	ComputeEnvID        types.String            `tfsdk:"compute_env_id"`
	CondaEnvironment    types.String            `tfsdk:"conda_environment"`
	CPU                 types.Int32             `tfsdk:"cpu"`
	DataStudioToolURL   types.String            `tfsdk:"data_studio_tool_url"`
	Description         types.String            `tfsdk:"description"`
	Gpu                 types.Int32             `tfsdk:"gpu"`
	InitialCheckpointID types.Int64             `tfsdk:"initial_checkpoint_id"`
	IsPrivate           types.Bool              `tfsdk:"is_private"`
	LabelIds            []types.Int64           `tfsdk:"label_ids"`
	LifespanHours       types.Int32             `tfsdk:"lifespan_hours"`
	Memory              types.Int32             `tfsdk:"memory"`
	MountData           []types.String          `tfsdk:"mount_data"`
	Name                types.String            `tfsdk:"name"`
	SessionID           types.String            `tfsdk:"session_id"`
	Spot                types.Bool              `tfsdk:"spot"`
	Studio              *tfTypes.DataStudioDto  `tfsdk:"studio"`
	Studios             []tfTypes.DataStudioDto `tfsdk:"studios"`
	TotalSize           types.Int64             `tfsdk:"total_size"`
	WorkspaceID         types.Int64             `queryParam:"style=form,explode=true,name=workspaceId" tfsdk:"workspace_id"`
}

func (r *DataStudiosResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_data_studios"
}

func (r *DataStudiosResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "DataStudios Resource",
		Attributes: map[string]schema.Attribute{
			"auto_start": schema.BoolAttribute{
				Optional: true,
				PlanModifiers: []planmodifier.Bool{
					boolplanmodifier.RequiresReplaceIfConfigured(),
				},
				Description: `Optionally disable the Studio's automatic launch when it is created. Requires replacement if changed.`,
			},
			"compute_env_id": schema.StringAttribute{
				Required: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
				},
				Description: `Requires replacement if changed.`,
				Validators: []validator.String{
					stringvalidator.UTF8LengthAtLeast(1),
				},
			},
			"conda_environment": schema.StringAttribute{
				Optional: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
				},
				Description: `Requires replacement if changed.`,
				Validators: []validator.String{
					stringvalidator.UTF8LengthAtMost(2048),
				},
			},
			"cpu": schema.Int32Attribute{
				Optional: true,
				PlanModifiers: []planmodifier.Int32{
					int32planmodifier.RequiresReplaceIfConfigured(),
				},
				Description: `Requires replacement if changed.`,
			},
			"data_studio_tool_url": schema.StringAttribute{
				Required: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
				},
				Description: `Requires replacement if changed.`,
				Validators: []validator.String{
					stringvalidator.UTF8LengthAtLeast(1),
				},
			},
			"description": schema.StringAttribute{
				Optional: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
				},
				Description: `Requires replacement if changed.`,
				Validators: []validator.String{
					stringvalidator.UTF8LengthAtMost(2048),
				},
			},
			"gpu": schema.Int32Attribute{
				Optional: true,
				PlanModifiers: []planmodifier.Int32{
					int32planmodifier.RequiresReplaceIfConfigured(),
				},
				Description: `Requires replacement if changed.`,
			},
			"initial_checkpoint_id": schema.Int64Attribute{
				Optional: true,
				PlanModifiers: []planmodifier.Int64{
					int64planmodifier.RequiresReplaceIfConfigured(),
				},
				Description: `Requires replacement if changed.`,
			},
			"is_private": schema.BoolAttribute{
				Optional: true,
				PlanModifiers: []planmodifier.Bool{
					boolplanmodifier.RequiresReplaceIfConfigured(),
				},
				Description: `Requires replacement if changed.`,
			},
			"label_ids": schema.ListAttribute{
				Optional: true,
				PlanModifiers: []planmodifier.List{
					listplanmodifier.RequiresReplaceIfConfigured(),
				},
				ElementType: types.Int64Type,
				Description: `Requires replacement if changed.`,
			},
			"lifespan_hours": schema.Int32Attribute{
				Optional: true,
				PlanModifiers: []planmodifier.Int32{
					int32planmodifier.RequiresReplaceIfConfigured(),
				},
				Description: `Requires replacement if changed.`,
			},
			"memory": schema.Int32Attribute{
				Optional: true,
				PlanModifiers: []planmodifier.Int32{
					int32planmodifier.RequiresReplaceIfConfigured(),
				},
				Description: `Requires replacement if changed.`,
			},
			"mount_data": schema.ListAttribute{
				Optional: true,
				PlanModifiers: []planmodifier.List{
					listplanmodifier.RequiresReplaceIfConfigured(),
				},
				ElementType: types.StringType,
				Description: `Requires replacement if changed.`,
			},
			"name": schema.StringAttribute{
				Required: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
				},
				Description: `Requires replacement if changed.`,
				Validators: []validator.String{
					stringvalidator.UTF8LengthBetween(1, 80),
				},
			},
			"session_id": schema.StringAttribute{
				Required:    true,
				Description: `Studio session numeric identifier`,
			},
			"spot": schema.BoolAttribute{
				Optional: true,
				PlanModifiers: []planmodifier.Bool{
					boolplanmodifier.RequiresReplaceIfConfigured(),
				},
				Description: `Requires replacement if changed.`,
			},
			"studio": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"active_connections": schema.ListNestedAttribute{
						Computed: true,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"avatar": schema.StringAttribute{
									Computed: true,
								},
								"email": schema.StringAttribute{
									Computed: true,
								},
								"id": schema.Int64Attribute{
									Computed: true,
								},
								"last_active": schema.StringAttribute{
									Computed: true,
									Validators: []validator.String{
										validators.IsRFC3339(),
									},
								},
								"user_name": schema.StringAttribute{
									Computed: true,
								},
							},
						},
					},
					"base_image": schema.StringAttribute{
						Computed: true,
					},
					"compute_env": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"credentials_id": schema.StringAttribute{
								Computed: true,
							},
							"id": schema.StringAttribute{
								Computed: true,
							},
							"name": schema.StringAttribute{
								Computed: true,
							},
							"platform": schema.StringAttribute{
								Computed: true,
							},
							"region": schema.StringAttribute{
								Computed: true,
							},
							"work_dir": schema.StringAttribute{
								Computed: true,
							},
						},
					},
					"configuration": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"conda_environment": schema.StringAttribute{
								Computed: true,
								Validators: []validator.String{
									stringvalidator.UTF8LengthAtMost(2048),
								},
							},
							"cpu": schema.Int32Attribute{
								Computed: true,
							},
							"gpu": schema.Int32Attribute{
								Computed: true,
							},
							"lifespan_hours": schema.Int32Attribute{
								Computed: true,
							},
							"memory": schema.Int32Attribute{
								Computed: true,
							},
							"mount_data": schema.ListAttribute{
								Computed:    true,
								ElementType: types.StringType,
							},
						},
					},
					"custom_image": schema.BoolAttribute{
						Computed: true,
					},
					"date_created": schema.StringAttribute{
						Computed: true,
						Validators: []validator.String{
							validators.IsRFC3339(),
						},
					},
					"description": schema.StringAttribute{
						Computed: true,
					},
					"effective_lifespan_hours": schema.Int32Attribute{
						Computed: true,
					},
					"is_private": schema.BoolAttribute{
						Computed: true,
					},
					"labels": schema.ListNestedAttribute{
						Computed: true,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"date_created": schema.StringAttribute{
									Computed: true,
									Validators: []validator.String{
										validators.IsRFC3339(),
									},
								},
								"id": schema.Int64Attribute{
									Computed: true,
								},
								"is_default": schema.BoolAttribute{
									Computed: true,
								},
								"name": schema.StringAttribute{
									Computed: true,
								},
								"resource": schema.BoolAttribute{
									Computed: true,
								},
								"value": schema.StringAttribute{
									Computed: true,
								},
							},
						},
					},
					"last_started": schema.StringAttribute{
						Computed: true,
						Validators: []validator.String{
							validators.IsRFC3339(),
						},
					},
					"last_updated": schema.StringAttribute{
						Computed: true,
						Validators: []validator.String{
							validators.IsRFC3339(),
						},
					},
					"mounted_data_links": schema.ListNestedAttribute{
						Computed: true,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"credentials": schema.ListNestedAttribute{
									Computed: true,
									NestedObject: schema.NestedAttributeObject{
										Attributes: map[string]schema.Attribute{
											"id": schema.StringAttribute{
												Computed: true,
											},
											"name": schema.StringAttribute{
												Computed: true,
											},
											"provider_type": schema.StringAttribute{
												Computed:    true,
												Description: `must be one of ["aws", "google", "azure", "azure_entra", "seqeracompute"]`,
												Validators: []validator.String{
													stringvalidator.OneOf(
														"aws",
														"google",
														"azure",
														"azure_entra",
														"seqeracompute",
													),
												},
											},
										},
									},
								},
								"data_link_id": schema.StringAttribute{
									Computed: true,
								},
								"description": schema.StringAttribute{
									Computed: true,
								},
								"hidden": schema.BoolAttribute{
									Computed: true,
								},
								"message": schema.StringAttribute{
									Computed: true,
								},
								"name": schema.StringAttribute{
									Computed: true,
								},
								"provider_type": schema.StringAttribute{
									Computed:    true,
									Description: `must be one of ["aws", "google", "azure", "azure_entra", "seqeracompute"]`,
									Validators: []validator.String{
										stringvalidator.OneOf(
											"aws",
											"google",
											"azure",
											"azure_entra",
											"seqeracompute",
										),
									},
								},
								"public_accessible": schema.BoolAttribute{
									Computed: true,
								},
								"region": schema.StringAttribute{
									Computed: true,
								},
								"resource_ref": schema.StringAttribute{
									Computed: true,
								},
								"status": schema.StringAttribute{
									Computed:    true,
									Description: `must be one of ["VALID", "INVALID"]`,
									Validators: []validator.String{
										stringvalidator.OneOf(
											"VALID",
											"INVALID",
										),
									},
								},
								"type": schema.StringAttribute{
									Computed:    true,
									Description: `must be "bucket"`,
									Validators: []validator.String{
										stringvalidator.OneOf("bucket"),
									},
								},
							},
						},
					},
					"name": schema.StringAttribute{
						Computed: true,
					},
					"parent_checkpoint": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"checkpoint_id": schema.Int64Attribute{
								Computed: true,
							},
							"checkpoint_name": schema.StringAttribute{
								Computed: true,
							},
							"session_id": schema.StringAttribute{
								Computed: true,
							},
							"studio_name": schema.StringAttribute{
								Computed: true,
							},
						},
					},
					"progress": schema.ListNestedAttribute{
						Computed: true,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"message": schema.StringAttribute{
									Computed: true,
								},
								"status": schema.StringAttribute{
									Computed:    true,
									Description: `must be one of ["pending", "in-progress", "succeeded", "errored"]`,
									Validators: []validator.String{
										stringvalidator.OneOf(
											"pending",
											"in-progress",
											"succeeded",
											"errored",
										),
									},
								},
								"warnings": schema.ListAttribute{
									Computed:    true,
									ElementType: types.StringType,
								},
							},
						},
					},
					"session_id": schema.StringAttribute{
						Computed: true,
					},
					"status_info": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"last_update": schema.StringAttribute{
								Computed: true,
								Validators: []validator.String{
									validators.IsRFC3339(),
								},
							},
							"message": schema.StringAttribute{
								Computed: true,
							},
							"status": schema.StringAttribute{
								Computed:    true,
								Description: `must be one of ["starting", "running", "stopping", "stopped", "errored", "building", "buildFailed"]`,
								Validators: []validator.String{
									stringvalidator.OneOf(
										"starting",
										"running",
										"stopping",
										"stopped",
										"errored",
										"building",
										"buildFailed",
									),
								},
							},
						},
					},
					"studio_url": schema.StringAttribute{
						Computed: true,
					},
					"template": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"icon": schema.StringAttribute{
								Computed: true,
							},
							"repository": schema.StringAttribute{
								Computed: true,
							},
							"status": schema.StringAttribute{
								Computed:    true,
								Description: `must be one of ["recommended", "deprecated", "experimental", "unsupported"]`,
								Validators: []validator.String{
									stringvalidator.OneOf(
										"recommended",
										"deprecated",
										"experimental",
										"unsupported",
									),
								},
							},
							"tool": schema.StringAttribute{
								Computed: true,
							},
						},
					},
					"user": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"avatar": schema.StringAttribute{
								Computed: true,
							},
							"email": schema.StringAttribute{
								Computed: true,
							},
							"id": schema.Int64Attribute{
								Computed: true,
							},
							"user_name": schema.StringAttribute{
								Computed: true,
							},
						},
					},
					"wave_build_url": schema.StringAttribute{
						Computed: true,
					},
					"workspace_id": schema.Int64Attribute{
						Computed: true,
					},
				},
			},
			"studios": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"active_connections": schema.ListNestedAttribute{
							Computed: true,
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"avatar": schema.StringAttribute{
										Computed: true,
									},
									"email": schema.StringAttribute{
										Computed: true,
									},
									"id": schema.Int64Attribute{
										Computed: true,
									},
									"last_active": schema.StringAttribute{
										Computed: true,
										Validators: []validator.String{
											validators.IsRFC3339(),
										},
									},
									"user_name": schema.StringAttribute{
										Computed: true,
									},
								},
							},
						},
						"base_image": schema.StringAttribute{
							Computed: true,
						},
						"compute_env": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"credentials_id": schema.StringAttribute{
									Computed: true,
								},
								"id": schema.StringAttribute{
									Computed: true,
								},
								"name": schema.StringAttribute{
									Computed: true,
								},
								"platform": schema.StringAttribute{
									Computed: true,
								},
								"region": schema.StringAttribute{
									Computed: true,
								},
								"work_dir": schema.StringAttribute{
									Computed: true,
								},
							},
						},
						"configuration": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"conda_environment": schema.StringAttribute{
									Computed: true,
									Validators: []validator.String{
										stringvalidator.UTF8LengthAtMost(2048),
									},
								},
								"cpu": schema.Int32Attribute{
									Computed: true,
								},
								"gpu": schema.Int32Attribute{
									Computed: true,
								},
								"lifespan_hours": schema.Int32Attribute{
									Computed: true,
								},
								"memory": schema.Int32Attribute{
									Computed: true,
								},
								"mount_data": schema.ListAttribute{
									Computed:    true,
									ElementType: types.StringType,
								},
							},
						},
						"custom_image": schema.BoolAttribute{
							Computed: true,
						},
						"date_created": schema.StringAttribute{
							Computed: true,
							Validators: []validator.String{
								validators.IsRFC3339(),
							},
						},
						"description": schema.StringAttribute{
							Computed: true,
						},
						"effective_lifespan_hours": schema.Int32Attribute{
							Computed: true,
						},
						"is_private": schema.BoolAttribute{
							Computed: true,
						},
						"labels": schema.ListNestedAttribute{
							Computed: true,
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"date_created": schema.StringAttribute{
										Computed: true,
										Validators: []validator.String{
											validators.IsRFC3339(),
										},
									},
									"id": schema.Int64Attribute{
										Computed: true,
									},
									"is_default": schema.BoolAttribute{
										Computed: true,
									},
									"name": schema.StringAttribute{
										Computed: true,
									},
									"resource": schema.BoolAttribute{
										Computed: true,
									},
									"value": schema.StringAttribute{
										Computed: true,
									},
								},
							},
						},
						"last_started": schema.StringAttribute{
							Computed: true,
							Validators: []validator.String{
								validators.IsRFC3339(),
							},
						},
						"last_updated": schema.StringAttribute{
							Computed: true,
							Validators: []validator.String{
								validators.IsRFC3339(),
							},
						},
						"mounted_data_links": schema.ListNestedAttribute{
							Computed: true,
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"credentials": schema.ListNestedAttribute{
										Computed: true,
										NestedObject: schema.NestedAttributeObject{
											Attributes: map[string]schema.Attribute{
												"id": schema.StringAttribute{
													Computed: true,
												},
												"name": schema.StringAttribute{
													Computed: true,
												},
												"provider_type": schema.StringAttribute{
													Computed:    true,
													Description: `must be one of ["aws", "google", "azure", "azure_entra", "seqeracompute"]`,
													Validators: []validator.String{
														stringvalidator.OneOf(
															"aws",
															"google",
															"azure",
															"azure_entra",
															"seqeracompute",
														),
													},
												},
											},
										},
									},
									"data_link_id": schema.StringAttribute{
										Computed: true,
									},
									"description": schema.StringAttribute{
										Computed: true,
									},
									"hidden": schema.BoolAttribute{
										Computed: true,
									},
									"message": schema.StringAttribute{
										Computed: true,
									},
									"name": schema.StringAttribute{
										Computed: true,
									},
									"provider_type": schema.StringAttribute{
										Computed:    true,
										Description: `must be one of ["aws", "google", "azure", "azure_entra", "seqeracompute"]`,
										Validators: []validator.String{
											stringvalidator.OneOf(
												"aws",
												"google",
												"azure",
												"azure_entra",
												"seqeracompute",
											),
										},
									},
									"public_accessible": schema.BoolAttribute{
										Computed: true,
									},
									"region": schema.StringAttribute{
										Computed: true,
									},
									"resource_ref": schema.StringAttribute{
										Computed: true,
									},
									"status": schema.StringAttribute{
										Computed:    true,
										Description: `must be one of ["VALID", "INVALID"]`,
										Validators: []validator.String{
											stringvalidator.OneOf(
												"VALID",
												"INVALID",
											),
										},
									},
									"type": schema.StringAttribute{
										Computed:    true,
										Description: `must be "bucket"`,
										Validators: []validator.String{
											stringvalidator.OneOf("bucket"),
										},
									},
								},
							},
						},
						"name": schema.StringAttribute{
							Computed: true,
						},
						"parent_checkpoint": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"checkpoint_id": schema.Int64Attribute{
									Computed: true,
								},
								"checkpoint_name": schema.StringAttribute{
									Computed: true,
								},
								"session_id": schema.StringAttribute{
									Computed: true,
								},
								"studio_name": schema.StringAttribute{
									Computed: true,
								},
							},
						},
						"progress": schema.ListNestedAttribute{
							Computed: true,
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"message": schema.StringAttribute{
										Computed: true,
									},
									"status": schema.StringAttribute{
										Computed:    true,
										Description: `must be one of ["pending", "in-progress", "succeeded", "errored"]`,
										Validators: []validator.String{
											stringvalidator.OneOf(
												"pending",
												"in-progress",
												"succeeded",
												"errored",
											),
										},
									},
									"warnings": schema.ListAttribute{
										Computed:    true,
										ElementType: types.StringType,
									},
								},
							},
						},
						"session_id": schema.StringAttribute{
							Computed: true,
						},
						"status_info": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"last_update": schema.StringAttribute{
									Computed: true,
									Validators: []validator.String{
										validators.IsRFC3339(),
									},
								},
								"message": schema.StringAttribute{
									Computed: true,
								},
								"status": schema.StringAttribute{
									Computed:    true,
									Description: `must be one of ["starting", "running", "stopping", "stopped", "errored", "building", "buildFailed"]`,
									Validators: []validator.String{
										stringvalidator.OneOf(
											"starting",
											"running",
											"stopping",
											"stopped",
											"errored",
											"building",
											"buildFailed",
										),
									},
								},
							},
						},
						"studio_url": schema.StringAttribute{
							Computed: true,
						},
						"template": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"icon": schema.StringAttribute{
									Computed: true,
								},
								"repository": schema.StringAttribute{
									Computed: true,
								},
								"status": schema.StringAttribute{
									Computed:    true,
									Description: `must be one of ["recommended", "deprecated", "experimental", "unsupported"]`,
									Validators: []validator.String{
										stringvalidator.OneOf(
											"recommended",
											"deprecated",
											"experimental",
											"unsupported",
										),
									},
								},
								"tool": schema.StringAttribute{
									Computed: true,
								},
							},
						},
						"user": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"avatar": schema.StringAttribute{
									Computed: true,
								},
								"email": schema.StringAttribute{
									Computed: true,
								},
								"id": schema.Int64Attribute{
									Computed: true,
								},
								"user_name": schema.StringAttribute{
									Computed: true,
								},
							},
						},
						"wave_build_url": schema.StringAttribute{
							Computed: true,
						},
						"workspace_id": schema.Int64Attribute{
							Computed: true,
						},
					},
				},
			},
			"total_size": schema.Int64Attribute{
				Computed: true,
			},
			"workspace_id": schema.Int64Attribute{
				Optional: true,
				PlanModifiers: []planmodifier.Int64{
					int64planmodifier.RequiresReplaceIfConfigured(),
				},
				Description: `Workspace numeric identifier. Requires replacement if changed.`,
			},
		},
	}
}

func (r *DataStudiosResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.Seqera)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *sdk.Seqera, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *DataStudiosResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *DataStudiosResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(plan.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsCreateDataStudioRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Studios.CreateDataStudio(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	switch res.StatusCode {
	case 200, 201:
		break
	default:
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.DataStudioCreateResponse != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedDataStudioCreateResponse(ctx, res.DataStudioCreateResponse)...)

	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(refreshPlan(ctx, plan, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *DataStudiosResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *DataStudiosResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsListDataStudiosRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Studios.ListDataStudios(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode == 404 {
		resp.State.RemoveResource(ctx)
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.DataStudioListResponse != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedDataStudioListResponse(ctx, res.DataStudioListResponse)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *DataStudiosResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *DataStudiosResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	merge(ctx, req, resp, &data)
	if resp.Diagnostics.HasError() {
		return
	}

	// Not Implemented; all attributes marked as RequiresReplace

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *DataStudiosResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *DataStudiosResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsDeleteDataStudioRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Studios.DeleteDataStudio(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 204 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}

}

func (r *DataStudiosResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resp.Diagnostics.AddError("Not Implemented", "No available import state operation is available for resource data_studios. Reason: no ID fields found")
}
