// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	tfTypes "github.com/seqeralabs/terraform-provider-seqera/internal/provider/types"
	"github.com/seqeralabs/terraform-provider-seqera/internal/sdk"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &ComputeEnvDataSource{}
var _ datasource.DataSourceWithConfigure = &ComputeEnvDataSource{}

func NewComputeEnvDataSource() datasource.DataSource {
	return &ComputeEnvDataSource{}
}

// ComputeEnvDataSource is the data source implementation.
type ComputeEnvDataSource struct {
	// Provider configured SDK client.
	client *sdk.Seqera
}

// ComputeEnvDataSourceModel describes the data model.
type ComputeEnvDataSourceModel struct {
	Attributes   []types.String                 `queryParam:"style=form,explode=true,name=attributes" tfsdk:"attributes"`
	ComputeEnv   *tfTypes.ComputeEnvResponseDto `tfsdk:"compute_env"`
	ComputeEnvID types.String                   `tfsdk:"compute_env_id"`
	WorkspaceID  types.Int64                    `queryParam:"style=form,explode=true,name=workspaceId" tfsdk:"workspace_id"`
}

// Metadata returns the data source type name.
func (r *ComputeEnvDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_compute_env"
}

// Schema defines the schema for the data source.
func (r *ComputeEnvDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "Seqera Platform compute environments define the execution platform where a pipeline will run.\nCompute environments enable users to launch pipelines on a growing number of cloud and\non-premises platforms. Each compute environment must be configured to enable Seqera to submit tasks.\n\nCompute environments define the computational resources and configuration needed\nto run Nextflow workflows, including cloud provider settings, resource limits,\nand execution parameters.\n",

		Attributes: map[string]schema.Attribute{
			"attributes": schema.ListAttribute{
				Optional:    true,
				ElementType: types.StringType,
				Description: `Additional attribute values to include in the response (` + "`" + `labels` + "`" + `). Returns an empty value (` + "`" + `labels: null` + "`" + `) if omitted.`,
			},
			"compute_env": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"compute_env_id": schema.StringAttribute{
						Computed: true,
					},
					"config": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"altair_platform": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"compute_queue": schema.StringAttribute{
										Computed: true,
									},
									"environment": schema.ListNestedAttribute{
										Computed: true,
										NestedObject: schema.NestedAttributeObject{
											Attributes: map[string]schema.Attribute{
												"compute": schema.BoolAttribute{
													Computed: true,
												},
												"head": schema.BoolAttribute{
													Computed: true,
												},
												"name": schema.StringAttribute{
													Computed: true,
												},
												"value": schema.StringAttribute{
													Computed: true,
												},
											},
										},
										Description: `Array of environment variables for the compute environment`,
									},
									"head_job_options": schema.StringAttribute{
										Computed: true,
									},
									"head_queue": schema.StringAttribute{
										Computed: true,
									},
									"host_name": schema.StringAttribute{
										Computed: true,
									},
									"launch_dir": schema.StringAttribute{
										Computed: true,
									},
									"max_queue_size": schema.Int32Attribute{
										Computed: true,
									},
									"nextflow_config": schema.StringAttribute{
										Computed:    true,
										Description: `Nextflow configuration settings and parameters`,
									},
									"port": schema.Int32Attribute{
										Computed: true,
									},
									"post_run_script": schema.StringAttribute{
										Computed:    true,
										Description: `Shell script to execute after workflow completes`,
									},
									"pre_run_script": schema.StringAttribute{
										Computed:    true,
										Description: `Shell script to execute before workflow starts`,
									},
									"propagate_head_job_options": schema.BoolAttribute{
										Computed: true,
									},
									"user_name": schema.StringAttribute{
										Computed: true,
									},
									"work_dir": schema.StringAttribute{
										Computed:    true,
										Description: `Working directory path for workflow execution`,
									},
								},
							},
							"aws_batch": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"cli_path": schema.StringAttribute{
										Computed:    true,
										Description: `Path to AWS CLI on compute instances. AWS CLI must be available at this path.`,
									},
									"compute_job_role": schema.StringAttribute{
										Computed: true,
										MarkdownDescription: `IAM role ARN for compute jobs. Jobs assume this role during execution.` + "\n" +
											`Must have permissions for S3, CloudWatch, etc.` + "\n" +
											`Format: arn:aws:iam::account-id:role/role-name`,
									},
									"compute_queue": schema.StringAttribute{
										Computed:    true,
										Description: `Name of the AWS Batch compute queue`,
									},
									"dragen_instance_type": schema.StringAttribute{
										Computed: true,
									},
									"dragen_queue": schema.StringAttribute{
										Computed: true,
									},
									"enable_fusion": schema.BoolAttribute{
										Computed: true,
									},
									"enable_wave": schema.BoolAttribute{
										Computed: true,
										MarkdownDescription: `Enable Wave containers for this compute environment. Wave provides container provisioning` + "\n" +
											`and augmentation capabilities for Nextflow workflows.` + "\n" +
											`` + "\n" +
											`When enable_wave is true, enable_fusion must be explicitly set to either true or false.` + "\n" +
											`Note: If Fusion2 is enabled, Wave must also be enabled.`,
									},
									"environment": schema.ListNestedAttribute{
										Computed: true,
										NestedObject: schema.NestedAttributeObject{
											Attributes: map[string]schema.Attribute{
												"compute": schema.BoolAttribute{
													Computed: true,
												},
												"head": schema.BoolAttribute{
													Computed: true,
												},
												"name": schema.StringAttribute{
													Computed: true,
												},
												"value": schema.StringAttribute{
													Computed: true,
												},
											},
										},
										Description: `Array of environment variables for the compute environment`,
									},
									"execution_role": schema.StringAttribute{
										Computed: true,
										MarkdownDescription: `IAM role ARN for Batch execution (pulling container images, writing logs).` + "\n" +
											`Must have permissions for ECR and CloudWatch Logs.` + "\n" +
											`Format: arn:aws:iam::account-id:role/role-name`,
									},
									"forge": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"alloc_strategy": schema.StringAttribute{
												Computed: true,
												MarkdownDescription: `Strategy for allocating compute resources:` + "\n" +
													`- BEST_FIT: Selects instance type that best fits job requirements` + "\n" +
													`- BEST_FIT_PROGRESSIVE: Similar to BEST_FIT but widens search progressively` + "\n" +
													`- SPOT_CAPACITY_OPTIMIZED: For Spot instances, selects from pools with optimal capacity` + "\n" +
													`- SPOT_PRICE_CAPACITY_OPTIMIZED: Optimizes for both price and capacity` + "\n" +
													`Note: SPOT_CAPACITY_OPTIMIZED only valid when type is SPOT`,
											},
											"allow_buckets": schema.ListAttribute{
												Computed:    true,
												ElementType: types.StringType,
											},
											"arm64_enabled": schema.BoolAttribute{
												Computed: true,
											},
											"bid_percentage": schema.Int32Attribute{
												Computed: true,
												MarkdownDescription: `The maximum percentage that a Spot Instance price can be when compared with the On-Demand price` + "\n" +
													`for that instance type before instances are launched. For example, if your maximum percentage is 20%,` + "\n" +
													`then the Spot price must be less than 20% of the current On-Demand price for that Amazon EC2 instance.` + "\n" +
													`You always pay the lowest (market) price and never more than your maximum percentage. If you leave this` + "\n" +
													`field empty, the default value is 100% of the On-Demand price. For most use cases, we recommend leaving` + "\n" +
													`this field empty.` + "\n" +
													`` + "\n" +
													`Must be a whole number between 0 and 100 (inclusive).`,
											},
											"dispose_on_deletion": schema.BoolAttribute{
												Computed: true,
												MarkdownDescription: `When set to true for AWS Batch forge environments, automatically deletes AWS resources` + "\n" +
													`created during compute environment setup when the Terraform resource is destroyed.` + "\n" +
													`` + "\n" +
													`The following AWS resources will be deleted:` + "\n" +
													`1. AWS Batch Compute Environments - The Batch compute environment itself` + "\n" +
													`2. AWS Batch Job Queues - Associated job queues (head queue, compute queue, dragen queue)` + "\n" +
													`3. EC2 Launch Templates - Launch templates for the compute instances` + "\n" +
													`4. IAM Roles - Execution roles, head job roles, and other service roles` + "\n" +
													`5. IAM Instance Profiles - Instance profiles attached to compute instances` + "\n" +
													`6. FSx File Systems - FSx for Lustre file systems (if created during forge)` + "\n" +
													`7. EFS File Systems - Elastic File Systems (if created during forge)` + "\n" +
													`` + "\n" +
													`Note: The AWS credentials associated with this compute environment must have appropriate` + "\n" +
													`permissions to delete these resources.` + "\n" +
													`` + "\n" +
													`Important: Deleting a workspace with active compute environments will bypass this cleanup` + "\n" +
													`and require manual removal of AWS resources. We recommend deleting compute environments` + "\n" +
													`before deleting workspaces.`,
											},
											"dragen_ami_id": schema.StringAttribute{
												Computed: true,
											},
											"dragen_enabled": schema.BoolAttribute{
												Computed: true,
											},
											"dragen_instance_type": schema.StringAttribute{
												Computed: true,
											},
											"ebs_auto_scale": schema.BoolAttribute{
												Computed: true,
												MarkdownDescription: `Enable automatic EBS volume expansion.` + "\n" +
													`When enabled, EBS volumes automatically expand as needed.`,
											},
											"ebs_block_size": schema.Int32Attribute{
												Computed:    true,
												Description: `Size of EBS root volume in GB (minimum 8 GB, maximum 16 TB).`,
											},
											"ebs_boot_size": schema.Int32Attribute{
												Computed: true,
											},
											"ec2_key_pair": schema.StringAttribute{
												Computed: true,
												MarkdownDescription: `EC2 key pair name for SSH access to compute instances.` + "\n" +
													`Key pair must exist in the specified region.`,
											},
											"ecs_config": schema.StringAttribute{
												Computed: true,
											},
											"efs_create": schema.BoolAttribute{
												Computed:    true,
												Description: `Automatically create an EFS file system`,
											},
											"efs_id": schema.StringAttribute{
												Computed: true,
												MarkdownDescription: `EFS file system ID to mount.` + "\n" +
													`Format: fs- followed by hexadecimal characters.` + "\n" +
													`EFS must be in the same VPC and region.`,
											},
											"efs_mount": schema.StringAttribute{
												Computed:    true,
												Description: `Path where EFS will be mounted in the container.`,
											},
											"fargate_head_enabled": schema.BoolAttribute{
												Computed: true,
												MarkdownDescription: `Use Fargate for head job instead of EC2.` + "\n" +
													`Reduces costs by running head job on serverless compute.` + "\n" +
													`Only applicable when using EC2 for worker jobs.`,
											},
											"fsx_mount": schema.StringAttribute{
												Computed:    true,
												Description: `Path where FSx will be mounted in the container.`,
											},
											"fsx_name": schema.StringAttribute{
												Computed:    true,
												Description: `FSx for Lustre file system name.`,
											},
											"fsx_size": schema.Int32Attribute{
												Computed:    true,
												Description: `Size of FSx file system in GB.`,
											},
											"gpu_enabled": schema.BoolAttribute{
												Computed: true,
												MarkdownDescription: `Enable GPU support for compute instances.` + "\n" +
													`When enabled, GPU-capable instance types will be selected.`,
											},
											"image_id": schema.StringAttribute{
												Computed: true,
											},
											"instance_types": schema.ListAttribute{
												Computed:    true,
												ElementType: types.StringType,
												MarkdownDescription: `List of EC2 instance types to use.` + "\n" +
													`Examples: ["m5.xlarge", "m5.2xlarge"], ["c5.2xlarge"], ["p3.2xlarge"]` + "\n" +
													`Default: ["optimal"] - AWS Batch selects appropriate instances`,
											},
											"max_cpus": schema.Int32Attribute{
												Computed: true,
												MarkdownDescription: `Maximum number of CPUs available in the compute environment.` + "\n" +
													`Subject to AWS service quotas.`,
											},
											"min_cpus": schema.Int32Attribute{
												Computed: true,
												MarkdownDescription: `Minimum number of CPUs to maintain in the compute environment.` + "\n" +
													`Setting to 0 allows environment to scale to zero when idle.`,
											},
											"security_groups": schema.ListAttribute{
												Computed:    true,
												ElementType: types.StringType,
												MarkdownDescription: `List of security group IDs to attach to compute instances.` + "\n" +
													`Security groups must allow necessary network access.`,
											},
											"subnets": schema.ListAttribute{
												Computed:    true,
												ElementType: types.StringType,
												MarkdownDescription: `List of subnet IDs for compute instances.` + "\n" +
													`Subnets must be in the specified VPC. Use multiple subnets for high availability.` + "\n" +
													`Must have sufficient IP addresses.`,
											},
											"type": schema.StringAttribute{
												Computed: true,
												MarkdownDescription: `Type of compute instances to provision:` + "\n" +
													`- SPOT: Use EC2 Spot instances (cost-effective, can be interrupted)` + "\n" +
													`- EC2: Use On-Demand EC2 instances (reliable, higher cost)` + "\n" +
													`- FARGATE: Use AWS Fargate serverless compute`,
											},
											"vpc_id": schema.StringAttribute{
												Computed: true,
												MarkdownDescription: `VPC ID where compute environment will be deployed.` + "\n" +
													`Format: vpc- followed by hexadecimal characters`,
											},
										},
									},
									"fusion_snapshots": schema.BoolAttribute{
										Computed: true,
									},
									"head_job_cpus": schema.Int32Attribute{
										Computed:    true,
										Description: `Number of CPUs allocated for the head job (default: 1)`,
									},
									"head_job_memory_mb": schema.Int32Attribute{
										Computed:    true,
										Description: `Memory allocation for the head job in MB (default: 1024)`,
									},
									"head_job_role": schema.StringAttribute{
										Computed: true,
										MarkdownDescription: `IAM role ARN for the head job.` + "\n" +
											`Format: arn:aws:iam::account-id:role/role-name`,
									},
									"head_queue": schema.StringAttribute{
										Computed:    true,
										Description: `Name of the head job queue`,
									},
									"log_group": schema.StringAttribute{
										Computed: true,
									},
									"lustre_id": schema.StringAttribute{
										Computed:           true,
										DeprecationMessage: `This will be removed in a future release, please migrate away from it as soon as possible`,
									},
									"nextflow_config": schema.StringAttribute{
										Computed:    true,
										Description: `Nextflow configuration settings and parameters`,
									},
									"nvme_storage_enabled": schema.BoolAttribute{
										Computed: true,
										MarkdownDescription: `Enable NVMe instance storage for high-performance I/O.` + "\n" +
											`When enabled, NVMe storage volumes are automatically mounted and configured.`,
									},
									"post_run_script": schema.StringAttribute{
										Computed:    true,
										Description: `Shell script to execute after workflow completes`,
									},
									"pre_run_script": schema.StringAttribute{
										Computed:    true,
										Description: `Shell script to execute before workflow starts`,
									},
									"region": schema.StringAttribute{
										Computed: true,
										MarkdownDescription: `AWS region where the Batch compute environment will be created.` + "\n" +
											`Examples: us-east-1, eu-west-1, ap-southeast-2`,
									},
									"storage_type": schema.StringAttribute{
										Computed:           true,
										DeprecationMessage: `This will be removed in a future release, please migrate away from it as soon as possible`,
									},
									"volumes": schema.ListAttribute{
										Computed:    true,
										ElementType: types.StringType,
									},
									"work_dir": schema.StringAttribute{
										Computed:    true,
										Description: `Working directory path for workflow execution`,
									},
								},
							},
							"aws_cloud": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"allow_buckets": schema.ListAttribute{
										Computed:    true,
										ElementType: types.StringType,
									},
									"arm64_enabled": schema.BoolAttribute{
										Computed: true,
									},
									"ebs_boot_size": schema.Int32Attribute{
										Computed: true,
									},
									"ec2_key_pair": schema.StringAttribute{
										Computed: true,
									},
									"enable_fusion": schema.BoolAttribute{
										Computed: true,
									},
									"enable_wave": schema.BoolAttribute{
										Computed: true,
									},
									"environment": schema.ListNestedAttribute{
										Computed: true,
										NestedObject: schema.NestedAttributeObject{
											Attributes: map[string]schema.Attribute{
												"compute": schema.BoolAttribute{
													Computed: true,
												},
												"head": schema.BoolAttribute{
													Computed: true,
												},
												"name": schema.StringAttribute{
													Computed: true,
												},
												"value": schema.StringAttribute{
													Computed: true,
												},
											},
										},
										Description: `Array of environment variables for the compute environment`,
									},
									"gpu_enabled": schema.BoolAttribute{
										Computed: true,
									},
									"image_id": schema.StringAttribute{
										Computed: true,
									},
									"instance_profile_arn": schema.StringAttribute{
										Computed: true,
									},
									"instance_type": schema.StringAttribute{
										Computed: true,
									},
									"log_group": schema.StringAttribute{
										Computed: true,
									},
									"nextflow_config": schema.StringAttribute{
										Computed:    true,
										Description: `Nextflow configuration settings and parameters`,
									},
									"post_run_script": schema.StringAttribute{
										Computed:    true,
										Description: `Shell script to execute after workflow completes`,
									},
									"pre_run_script": schema.StringAttribute{
										Computed:    true,
										Description: `Shell script to execute before workflow starts`,
									},
									"region": schema.StringAttribute{
										Computed: true,
									},
									"security_groups": schema.ListAttribute{
										Computed:    true,
										ElementType: types.StringType,
									},
									"subnet_id": schema.StringAttribute{
										Computed: true,
									},
									"work_dir": schema.StringAttribute{
										Computed:    true,
										Description: `Working directory path for workflow execution`,
									},
								},
							},
							"azure_batch": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"auto_pool_mode": schema.BoolAttribute{
										Computed:           true,
										DeprecationMessage: `This will be removed in a future release, please migrate away from it as soon as possible`,
									},
									"delete_jobs_on_completion": schema.StringAttribute{
										Computed: true,
									},
									"delete_pools_on_completion": schema.BoolAttribute{
										Computed: true,
									},
									"enable_fusion": schema.BoolAttribute{
										Computed: true,
									},
									"enable_wave": schema.BoolAttribute{
										Computed: true,
									},
									"environment": schema.ListNestedAttribute{
										Computed: true,
										NestedObject: schema.NestedAttributeObject{
											Attributes: map[string]schema.Attribute{
												"compute": schema.BoolAttribute{
													Computed: true,
												},
												"head": schema.BoolAttribute{
													Computed: true,
												},
												"name": schema.StringAttribute{
													Computed: true,
												},
												"value": schema.StringAttribute{
													Computed: true,
												},
											},
										},
										Description: `Array of environment variables for the compute environment`,
									},
									"forge": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"auto_scale": schema.BoolAttribute{
												Computed: true,
											},
											"container_reg_ids": schema.ListAttribute{
												Computed:    true,
												ElementType: types.StringType,
											},
											"dispose_on_deletion": schema.BoolAttribute{
												Computed: true,
											},
											"vm_count": schema.Int32Attribute{
												Computed: true,
											},
											"vm_type": schema.StringAttribute{
												Computed: true,
											},
										},
									},
									"head_pool": schema.StringAttribute{
										Computed: true,
									},
									"managed_identity_client_id": schema.StringAttribute{
										Computed: true,
									},
									"nextflow_config": schema.StringAttribute{
										Computed:    true,
										Description: `Nextflow configuration settings and parameters`,
									},
									"post_run_script": schema.StringAttribute{
										Computed:    true,
										Description: `Shell script to execute after workflow completes`,
									},
									"pre_run_script": schema.StringAttribute{
										Computed:    true,
										Description: `Shell script to execute before workflow starts`,
									},
									"region": schema.StringAttribute{
										Computed: true,
									},
									"token_duration": schema.StringAttribute{
										Computed: true,
									},
									"work_dir": schema.StringAttribute{
										Computed:    true,
										Description: `Working directory path for workflow execution`,
									},
								},
							},
							"eks_platform": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"cluster_name": schema.StringAttribute{
										Computed:    true,
										Description: `The AWS EKS cluster name`,
									},
									"compute_service_account": schema.StringAttribute{
										Computed: true,
									},
									"enable_fusion": schema.BoolAttribute{
										Computed: true,
									},
									"enable_wave": schema.BoolAttribute{
										Computed: true,
									},
									"environment": schema.ListNestedAttribute{
										Computed: true,
										NestedObject: schema.NestedAttributeObject{
											Attributes: map[string]schema.Attribute{
												"compute": schema.BoolAttribute{
													Computed: true,
												},
												"head": schema.BoolAttribute{
													Computed: true,
												},
												"name": schema.StringAttribute{
													Computed: true,
												},
												"value": schema.StringAttribute{
													Computed: true,
												},
											},
										},
										Description: `Array of environment variables for the compute environment`,
									},
									"head_job_cpus": schema.Int32Attribute{
										Computed: true,
									},
									"head_job_memory_mb": schema.Int32Attribute{
										Computed: true,
									},
									"head_pod_spec": schema.StringAttribute{
										Computed: true,
									},
									"head_service_account": schema.StringAttribute{
										Computed: true,
									},
									"namespace": schema.StringAttribute{
										Computed: true,
									},
									"nextflow_config": schema.StringAttribute{
										Computed:    true,
										Description: `Nextflow configuration settings and parameters`,
									},
									"pod_cleanup": schema.StringAttribute{
										Computed: true,
									},
									"post_run_script": schema.StringAttribute{
										Computed:    true,
										Description: `Shell script to execute after workflow completes`,
									},
									"pre_run_script": schema.StringAttribute{
										Computed:    true,
										Description: `Shell script to execute before workflow starts`,
									},
									"region": schema.StringAttribute{
										Computed:    true,
										Description: `AWS region`,
									},
									"server": schema.StringAttribute{
										Computed: true,
									},
									"service_pod_spec": schema.StringAttribute{
										Computed: true,
									},
									"ssl_cert": schema.StringAttribute{
										Computed: true,
									},
									"storage_claim_name": schema.StringAttribute{
										Computed: true,
									},
									"storage_mount_path": schema.StringAttribute{
										Computed: true,
									},
									"work_dir": schema.StringAttribute{
										Computed:    true,
										Description: `Working directory path for workflow execution`,
									},
								},
							},
							"gke_platform": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"cluster_name": schema.StringAttribute{
										Computed:    true,
										Description: `The GKE cluster name`,
									},
									"compute_service_account": schema.StringAttribute{
										Computed: true,
									},
									"enable_fusion": schema.BoolAttribute{
										Computed: true,
									},
									"enable_wave": schema.BoolAttribute{
										Computed: true,
									},
									"environment": schema.ListNestedAttribute{
										Computed: true,
										NestedObject: schema.NestedAttributeObject{
											Attributes: map[string]schema.Attribute{
												"compute": schema.BoolAttribute{
													Computed: true,
												},
												"head": schema.BoolAttribute{
													Computed: true,
												},
												"name": schema.StringAttribute{
													Computed: true,
												},
												"value": schema.StringAttribute{
													Computed: true,
												},
											},
										},
										Description: `Array of environment variables for the compute environment`,
									},
									"head_job_cpus": schema.Int32Attribute{
										Computed: true,
									},
									"head_job_memory_mb": schema.Int32Attribute{
										Computed: true,
									},
									"head_pod_spec": schema.StringAttribute{
										Computed: true,
									},
									"head_service_account": schema.StringAttribute{
										Computed: true,
									},
									"namespace": schema.StringAttribute{
										Computed: true,
									},
									"nextflow_config": schema.StringAttribute{
										Computed:    true,
										Description: `Nextflow configuration settings and parameters`,
									},
									"pod_cleanup": schema.StringAttribute{
										Computed: true,
									},
									"post_run_script": schema.StringAttribute{
										Computed:    true,
										Description: `Shell script to execute after workflow completes`,
									},
									"pre_run_script": schema.StringAttribute{
										Computed:    true,
										Description: `Shell script to execute before workflow starts`,
									},
									"region": schema.StringAttribute{
										Computed:    true,
										Description: `The GKE cluster region - or - zone`,
									},
									"server": schema.StringAttribute{
										Computed: true,
									},
									"service_pod_spec": schema.StringAttribute{
										Computed: true,
									},
									"ssl_cert": schema.StringAttribute{
										Computed: true,
									},
									"storage_claim_name": schema.StringAttribute{
										Computed: true,
									},
									"storage_mount_path": schema.StringAttribute{
										Computed: true,
									},
									"work_dir": schema.StringAttribute{
										Computed:    true,
										Description: `Working directory path for workflow execution`,
									},
								},
							},
							"google_batch": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"boot_disk_size_gb": schema.Int32Attribute{
										Computed: true,
									},
									"compute_jobs_instance_template": schema.StringAttribute{
										Computed: true,
									},
									"copy_image": schema.StringAttribute{
										Computed: true,
									},
									"cpu_platform": schema.StringAttribute{
										Computed: true,
									},
									"debug_mode": schema.Int32Attribute{
										Computed: true,
									},
									"enable_fusion": schema.BoolAttribute{
										Computed: true,
									},
									"enable_wave": schema.BoolAttribute{
										Computed: true,
									},
									"environment": schema.ListNestedAttribute{
										Computed: true,
										NestedObject: schema.NestedAttributeObject{
											Attributes: map[string]schema.Attribute{
												"compute": schema.BoolAttribute{
													Computed: true,
												},
												"head": schema.BoolAttribute{
													Computed: true,
												},
												"name": schema.StringAttribute{
													Computed: true,
												},
												"value": schema.StringAttribute{
													Computed: true,
												},
											},
										},
										Description: `Array of environment variables for the compute environment`,
									},
									"head_job_cpus": schema.Int32Attribute{
										Computed: true,
									},
									"head_job_instance_template": schema.StringAttribute{
										Computed: true,
									},
									"head_job_memory_mb": schema.Int32Attribute{
										Computed: true,
									},
									"labels": schema.MapAttribute{
										Computed:    true,
										ElementType: types.StringType,
									},
									"location": schema.StringAttribute{
										Computed: true,
									},
									"machine_type": schema.StringAttribute{
										Computed: true,
									},
									"network": schema.StringAttribute{
										Computed: true,
									},
									"nextflow_config": schema.StringAttribute{
										Computed:    true,
										Description: `Nextflow configuration settings and parameters`,
									},
									"nfs_mount": schema.StringAttribute{
										Computed: true,
									},
									"nfs_target": schema.StringAttribute{
										Computed: true,
									},
									"post_run_script": schema.StringAttribute{
										Computed:    true,
										Description: `Shell script to execute after workflow completes`,
									},
									"pre_run_script": schema.StringAttribute{
										Computed:    true,
										Description: `Shell script to execute before workflow starts`,
									},
									"project_id": schema.StringAttribute{
										Computed: true,
									},
									"service_account": schema.StringAttribute{
										Computed: true,
									},
									"spot": schema.BoolAttribute{
										Computed: true,
									},
									"ssh_daemon": schema.BoolAttribute{
										Computed: true,
									},
									"ssh_image": schema.StringAttribute{
										Computed: true,
									},
									"subnetwork": schema.StringAttribute{
										Computed: true,
									},
									"use_private_address": schema.BoolAttribute{
										Computed: true,
									},
									"work_dir": schema.StringAttribute{
										Computed:    true,
										Description: `Working directory path for workflow execution`,
									},
								},
							},
							"google_lifesciences": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"boot_disk_size_gb": schema.Int32Attribute{
										Computed: true,
									},
									"copy_image": schema.StringAttribute{
										Computed: true,
									},
									"debug_mode": schema.Int32Attribute{
										Computed: true,
									},
									"environment": schema.ListNestedAttribute{
										Computed: true,
										NestedObject: schema.NestedAttributeObject{
											Attributes: map[string]schema.Attribute{
												"compute": schema.BoolAttribute{
													Computed: true,
												},
												"head": schema.BoolAttribute{
													Computed: true,
												},
												"name": schema.StringAttribute{
													Computed: true,
												},
												"value": schema.StringAttribute{
													Computed: true,
												},
											},
										},
										Description: `Array of environment variables for the compute environment`,
									},
									"head_job_cpus": schema.Int32Attribute{
										Computed: true,
									},
									"head_job_memory_mb": schema.Int32Attribute{
										Computed: true,
									},
									"labels": schema.MapAttribute{
										Computed:    true,
										ElementType: types.StringType,
									},
									"location": schema.StringAttribute{
										Computed: true,
									},
									"nextflow_config": schema.StringAttribute{
										Computed:    true,
										Description: `Nextflow configuration settings and parameters`,
									},
									"nfs_mount": schema.StringAttribute{
										Computed: true,
									},
									"nfs_target": schema.StringAttribute{
										Computed: true,
									},
									"post_run_script": schema.StringAttribute{
										Computed:    true,
										Description: `Shell script to execute after workflow completes`,
									},
									"pre_run_script": schema.StringAttribute{
										Computed:    true,
										Description: `Shell script to execute before workflow starts`,
									},
									"preemptible": schema.BoolAttribute{
										Computed: true,
									},
									"project_id": schema.StringAttribute{
										Computed: true,
									},
									"region": schema.StringAttribute{
										Computed: true,
									},
									"ssh_daemon": schema.BoolAttribute{
										Computed: true,
									},
									"ssh_image": schema.StringAttribute{
										Computed: true,
									},
									"use_private_address": schema.BoolAttribute{
										Computed: true,
									},
									"work_dir": schema.StringAttribute{
										Computed:    true,
										Description: `Working directory path for workflow execution`,
									},
									"zones": schema.ListAttribute{
										Computed:    true,
										ElementType: types.StringType,
									},
								},
							},
							"k8s_platform": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"compute_service_account": schema.StringAttribute{
										Computed: true,
									},
									"environment": schema.ListNestedAttribute{
										Computed: true,
										NestedObject: schema.NestedAttributeObject{
											Attributes: map[string]schema.Attribute{
												"compute": schema.BoolAttribute{
													Computed: true,
												},
												"head": schema.BoolAttribute{
													Computed: true,
												},
												"name": schema.StringAttribute{
													Computed: true,
												},
												"value": schema.StringAttribute{
													Computed: true,
												},
											},
										},
										Description: `Array of environment variables for the compute environment`,
									},
									"head_job_cpus": schema.Int32Attribute{
										Computed: true,
									},
									"head_job_memory_mb": schema.Int32Attribute{
										Computed: true,
									},
									"head_pod_spec": schema.StringAttribute{
										Computed: true,
									},
									"head_service_account": schema.StringAttribute{
										Computed: true,
									},
									"namespace": schema.StringAttribute{
										Computed: true,
									},
									"nextflow_config": schema.StringAttribute{
										Computed:    true,
										Description: `Nextflow configuration settings and parameters`,
									},
									"pod_cleanup": schema.StringAttribute{
										Computed: true,
									},
									"post_run_script": schema.StringAttribute{
										Computed:    true,
										Description: `Shell script to execute after workflow completes`,
									},
									"pre_run_script": schema.StringAttribute{
										Computed:    true,
										Description: `Shell script to execute before workflow starts`,
									},
									"server": schema.StringAttribute{
										Computed: true,
									},
									"service_pod_spec": schema.StringAttribute{
										Computed: true,
									},
									"ssl_cert": schema.StringAttribute{
										Computed: true,
									},
									"storage_claim_name": schema.StringAttribute{
										Computed: true,
									},
									"storage_mount_path": schema.StringAttribute{
										Computed: true,
									},
									"work_dir": schema.StringAttribute{
										Computed:    true,
										Description: `Working directory path for workflow execution`,
									},
								},
							},
							"lsf_platform": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"compute_queue": schema.StringAttribute{
										Computed: true,
									},
									"environment": schema.ListNestedAttribute{
										Computed: true,
										NestedObject: schema.NestedAttributeObject{
											Attributes: map[string]schema.Attribute{
												"compute": schema.BoolAttribute{
													Computed: true,
												},
												"head": schema.BoolAttribute{
													Computed: true,
												},
												"name": schema.StringAttribute{
													Computed: true,
												},
												"value": schema.StringAttribute{
													Computed: true,
												},
											},
										},
										Description: `Array of environment variables for the compute environment`,
									},
									"head_job_options": schema.StringAttribute{
										Computed: true,
									},
									"head_queue": schema.StringAttribute{
										Computed: true,
									},
									"host_name": schema.StringAttribute{
										Computed: true,
									},
									"launch_dir": schema.StringAttribute{
										Computed: true,
									},
									"max_queue_size": schema.Int32Attribute{
										Computed: true,
									},
									"nextflow_config": schema.StringAttribute{
										Computed:    true,
										Description: `Nextflow configuration settings and parameters`,
									},
									"per_job_mem_limit": schema.BoolAttribute{
										Computed: true,
									},
									"per_task_reserve": schema.BoolAttribute{
										Computed: true,
									},
									"port": schema.Int32Attribute{
										Computed: true,
									},
									"post_run_script": schema.StringAttribute{
										Computed:    true,
										Description: `Shell script to execute after workflow completes`,
									},
									"pre_run_script": schema.StringAttribute{
										Computed:    true,
										Description: `Shell script to execute before workflow starts`,
									},
									"propagate_head_job_options": schema.BoolAttribute{
										Computed: true,
									},
									"unit_for_limits": schema.StringAttribute{
										Computed: true,
									},
									"user_name": schema.StringAttribute{
										Computed: true,
									},
									"work_dir": schema.StringAttribute{
										Computed:    true,
										Description: `Working directory path for workflow execution`,
									},
								},
							},
							"moab_platform": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"compute_queue": schema.StringAttribute{
										Computed: true,
									},
									"environment": schema.ListNestedAttribute{
										Computed: true,
										NestedObject: schema.NestedAttributeObject{
											Attributes: map[string]schema.Attribute{
												"compute": schema.BoolAttribute{
													Computed: true,
												},
												"head": schema.BoolAttribute{
													Computed: true,
												},
												"name": schema.StringAttribute{
													Computed: true,
												},
												"value": schema.StringAttribute{
													Computed: true,
												},
											},
										},
										Description: `Array of environment variables for the compute environment`,
									},
									"head_job_options": schema.StringAttribute{
										Computed: true,
									},
									"head_queue": schema.StringAttribute{
										Computed: true,
									},
									"host_name": schema.StringAttribute{
										Computed: true,
									},
									"launch_dir": schema.StringAttribute{
										Computed: true,
									},
									"max_queue_size": schema.Int32Attribute{
										Computed: true,
									},
									"nextflow_config": schema.StringAttribute{
										Computed:    true,
										Description: `Nextflow configuration settings and parameters`,
									},
									"port": schema.Int32Attribute{
										Computed: true,
									},
									"post_run_script": schema.StringAttribute{
										Computed:    true,
										Description: `Shell script to execute after workflow completes`,
									},
									"pre_run_script": schema.StringAttribute{
										Computed:    true,
										Description: `Shell script to execute before workflow starts`,
									},
									"propagate_head_job_options": schema.BoolAttribute{
										Computed: true,
									},
									"user_name": schema.StringAttribute{
										Computed: true,
									},
									"work_dir": schema.StringAttribute{
										Computed:    true,
										Description: `Working directory path for workflow execution`,
									},
								},
							},
							"seqeracompute_platform": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"cli_path": schema.StringAttribute{
										Computed:    true,
										Description: `Path to AWS CLI on compute instances. AWS CLI must be available at this path.`,
									},
									"compute_job_role": schema.StringAttribute{
										Computed: true,
										MarkdownDescription: `IAM role ARN for compute jobs. Jobs assume this role during execution.` + "\n" +
											`Must have permissions for S3, CloudWatch, etc.` + "\n" +
											`Format: arn:aws:iam::account-id:role/role-name`,
									},
									"compute_queue": schema.StringAttribute{
										Computed:    true,
										Description: `Name of the AWS Batch compute queue`,
									},
									"dragen_instance_type": schema.StringAttribute{
										Computed: true,
									},
									"dragen_queue": schema.StringAttribute{
										Computed: true,
									},
									"enable_fusion": schema.BoolAttribute{
										Computed: true,
									},
									"enable_wave": schema.BoolAttribute{
										Computed: true,
										MarkdownDescription: `Enable Wave containers for this compute environment. Wave provides container provisioning` + "\n" +
											`and augmentation capabilities for Nextflow workflows.` + "\n" +
											`` + "\n" +
											`When enable_wave is true, enable_fusion must be explicitly set to either true or false.` + "\n" +
											`Note: If Fusion2 is enabled, Wave must also be enabled.`,
									},
									"environment": schema.ListNestedAttribute{
										Computed: true,
										NestedObject: schema.NestedAttributeObject{
											Attributes: map[string]schema.Attribute{
												"compute": schema.BoolAttribute{
													Computed: true,
												},
												"head": schema.BoolAttribute{
													Computed: true,
												},
												"name": schema.StringAttribute{
													Computed: true,
												},
												"value": schema.StringAttribute{
													Computed: true,
												},
											},
										},
										Description: `Array of environment variables for the compute environment`,
									},
									"execution_role": schema.StringAttribute{
										Computed: true,
										MarkdownDescription: `IAM role ARN for Batch execution (pulling container images, writing logs).` + "\n" +
											`Must have permissions for ECR and CloudWatch Logs.` + "\n" +
											`Format: arn:aws:iam::account-id:role/role-name`,
									},
									"forge": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"alloc_strategy": schema.StringAttribute{
												Computed: true,
												MarkdownDescription: `Strategy for allocating compute resources:` + "\n" +
													`- BEST_FIT: Selects instance type that best fits job requirements` + "\n" +
													`- BEST_FIT_PROGRESSIVE: Similar to BEST_FIT but widens search progressively` + "\n" +
													`- SPOT_CAPACITY_OPTIMIZED: For Spot instances, selects from pools with optimal capacity` + "\n" +
													`- SPOT_PRICE_CAPACITY_OPTIMIZED: Optimizes for both price and capacity` + "\n" +
													`Note: SPOT_CAPACITY_OPTIMIZED only valid when type is SPOT`,
											},
											"allow_buckets": schema.ListAttribute{
												Computed:    true,
												ElementType: types.StringType,
											},
											"arm64_enabled": schema.BoolAttribute{
												Computed: true,
											},
											"bid_percentage": schema.Int32Attribute{
												Computed: true,
												MarkdownDescription: `The maximum percentage that a Spot Instance price can be when compared with the On-Demand price` + "\n" +
													`for that instance type before instances are launched. For example, if your maximum percentage is 20%,` + "\n" +
													`then the Spot price must be less than 20% of the current On-Demand price for that Amazon EC2 instance.` + "\n" +
													`You always pay the lowest (market) price and never more than your maximum percentage. If you leave this` + "\n" +
													`field empty, the default value is 100% of the On-Demand price. For most use cases, we recommend leaving` + "\n" +
													`this field empty.` + "\n" +
													`` + "\n" +
													`Must be a whole number between 0 and 100 (inclusive).`,
											},
											"dispose_on_deletion": schema.BoolAttribute{
												Computed: true,
												MarkdownDescription: `When set to true for AWS Batch forge environments, automatically deletes AWS resources` + "\n" +
													`created during compute environment setup when the Terraform resource is destroyed.` + "\n" +
													`` + "\n" +
													`The following AWS resources will be deleted:` + "\n" +
													`1. AWS Batch Compute Environments - The Batch compute environment itself` + "\n" +
													`2. AWS Batch Job Queues - Associated job queues (head queue, compute queue, dragen queue)` + "\n" +
													`3. EC2 Launch Templates - Launch templates for the compute instances` + "\n" +
													`4. IAM Roles - Execution roles, head job roles, and other service roles` + "\n" +
													`5. IAM Instance Profiles - Instance profiles attached to compute instances` + "\n" +
													`6. FSx File Systems - FSx for Lustre file systems (if created during forge)` + "\n" +
													`7. EFS File Systems - Elastic File Systems (if created during forge)` + "\n" +
													`` + "\n" +
													`Note: The AWS credentials associated with this compute environment must have appropriate` + "\n" +
													`permissions to delete these resources.` + "\n" +
													`` + "\n" +
													`Important: Deleting a workspace with active compute environments will bypass this cleanup` + "\n" +
													`and require manual removal of AWS resources. We recommend deleting compute environments` + "\n" +
													`before deleting workspaces.`,
											},
											"dragen_ami_id": schema.StringAttribute{
												Computed: true,
											},
											"dragen_enabled": schema.BoolAttribute{
												Computed: true,
											},
											"dragen_instance_type": schema.StringAttribute{
												Computed: true,
											},
											"ebs_auto_scale": schema.BoolAttribute{
												Computed: true,
												MarkdownDescription: `Enable automatic EBS volume expansion.` + "\n" +
													`When enabled, EBS volumes automatically expand as needed.`,
											},
											"ebs_block_size": schema.Int32Attribute{
												Computed:    true,
												Description: `Size of EBS root volume in GB (minimum 8 GB, maximum 16 TB).`,
											},
											"ebs_boot_size": schema.Int32Attribute{
												Computed: true,
											},
											"ec2_key_pair": schema.StringAttribute{
												Computed: true,
												MarkdownDescription: `EC2 key pair name for SSH access to compute instances.` + "\n" +
													`Key pair must exist in the specified region.`,
											},
											"ecs_config": schema.StringAttribute{
												Computed: true,
											},
											"efs_create": schema.BoolAttribute{
												Computed:    true,
												Description: `Automatically create an EFS file system`,
											},
											"efs_id": schema.StringAttribute{
												Computed: true,
												MarkdownDescription: `EFS file system ID to mount.` + "\n" +
													`Format: fs- followed by hexadecimal characters.` + "\n" +
													`EFS must be in the same VPC and region.`,
											},
											"efs_mount": schema.StringAttribute{
												Computed:    true,
												Description: `Path where EFS will be mounted in the container.`,
											},
											"fargate_head_enabled": schema.BoolAttribute{
												Computed: true,
												MarkdownDescription: `Use Fargate for head job instead of EC2.` + "\n" +
													`Reduces costs by running head job on serverless compute.` + "\n" +
													`Only applicable when using EC2 for worker jobs.`,
											},
											"fsx_mount": schema.StringAttribute{
												Computed:    true,
												Description: `Path where FSx will be mounted in the container.`,
											},
											"fsx_name": schema.StringAttribute{
												Computed:    true,
												Description: `FSx for Lustre file system name.`,
											},
											"fsx_size": schema.Int32Attribute{
												Computed:    true,
												Description: `Size of FSx file system in GB.`,
											},
											"gpu_enabled": schema.BoolAttribute{
												Computed: true,
												MarkdownDescription: `Enable GPU support for compute instances.` + "\n" +
													`When enabled, GPU-capable instance types will be selected.`,
											},
											"image_id": schema.StringAttribute{
												Computed: true,
											},
											"instance_types": schema.ListAttribute{
												Computed:    true,
												ElementType: types.StringType,
												MarkdownDescription: `List of EC2 instance types to use.` + "\n" +
													`Examples: ["m5.xlarge", "m5.2xlarge"], ["c5.2xlarge"], ["p3.2xlarge"]` + "\n" +
													`Default: ["optimal"] - AWS Batch selects appropriate instances`,
											},
											"max_cpus": schema.Int32Attribute{
												Computed: true,
												MarkdownDescription: `Maximum number of CPUs available in the compute environment.` + "\n" +
													`Subject to AWS service quotas.`,
											},
											"min_cpus": schema.Int32Attribute{
												Computed: true,
												MarkdownDescription: `Minimum number of CPUs to maintain in the compute environment.` + "\n" +
													`Setting to 0 allows environment to scale to zero when idle.`,
											},
											"security_groups": schema.ListAttribute{
												Computed:    true,
												ElementType: types.StringType,
												MarkdownDescription: `List of security group IDs to attach to compute instances.` + "\n" +
													`Security groups must allow necessary network access.`,
											},
											"subnets": schema.ListAttribute{
												Computed:    true,
												ElementType: types.StringType,
												MarkdownDescription: `List of subnet IDs for compute instances.` + "\n" +
													`Subnets must be in the specified VPC. Use multiple subnets for high availability.` + "\n" +
													`Must have sufficient IP addresses.`,
											},
											"type": schema.StringAttribute{
												Computed: true,
												MarkdownDescription: `Type of compute instances to provision:` + "\n" +
													`- SPOT: Use EC2 Spot instances (cost-effective, can be interrupted)` + "\n" +
													`- EC2: Use On-Demand EC2 instances (reliable, higher cost)` + "\n" +
													`- FARGATE: Use AWS Fargate serverless compute`,
											},
											"vpc_id": schema.StringAttribute{
												Computed: true,
												MarkdownDescription: `VPC ID where compute environment will be deployed.` + "\n" +
													`Format: vpc- followed by hexadecimal characters`,
											},
										},
									},
									"fusion_snapshots": schema.BoolAttribute{
										Computed: true,
									},
									"head_job_cpus": schema.Int32Attribute{
										Computed:    true,
										Description: `Number of CPUs allocated for the head job (default: 1)`,
									},
									"head_job_memory_mb": schema.Int32Attribute{
										Computed:    true,
										Description: `Memory allocation for the head job in MB (default: 1024)`,
									},
									"head_job_role": schema.StringAttribute{
										Computed: true,
										MarkdownDescription: `IAM role ARN for the head job.` + "\n" +
											`Format: arn:aws:iam::account-id:role/role-name`,
									},
									"head_queue": schema.StringAttribute{
										Computed:    true,
										Description: `Name of the head job queue`,
									},
									"log_group": schema.StringAttribute{
										Computed: true,
									},
									"lustre_id": schema.StringAttribute{
										Computed:           true,
										DeprecationMessage: `This will be removed in a future release, please migrate away from it as soon as possible`,
									},
									"nextflow_config": schema.StringAttribute{
										Computed:    true,
										Description: `Nextflow configuration settings and parameters`,
									},
									"nvme_storage_enabled": schema.BoolAttribute{
										Computed: true,
										MarkdownDescription: `Enable NVMe instance storage for high-performance I/O.` + "\n" +
											`When enabled, NVMe storage volumes are automatically mounted and configured.`,
									},
									"post_run_script": schema.StringAttribute{
										Computed:    true,
										Description: `Shell script to execute after workflow completes`,
									},
									"pre_run_script": schema.StringAttribute{
										Computed:    true,
										Description: `Shell script to execute before workflow starts`,
									},
									"region": schema.StringAttribute{
										Computed: true,
										MarkdownDescription: `AWS region where the Batch compute environment will be created.` + "\n" +
											`Examples: us-east-1, eu-west-1, ap-southeast-2`,
									},
									"storage_type": schema.StringAttribute{
										Computed:           true,
										DeprecationMessage: `This will be removed in a future release, please migrate away from it as soon as possible`,
									},
									"volumes": schema.ListAttribute{
										Computed:    true,
										ElementType: types.StringType,
									},
									"work_dir": schema.StringAttribute{
										Computed:    true,
										Description: `Working directory path for workflow execution`,
									},
								},
							},
							"slurm_platform": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"compute_queue": schema.StringAttribute{
										Computed: true,
									},
									"environment": schema.ListNestedAttribute{
										Computed: true,
										NestedObject: schema.NestedAttributeObject{
											Attributes: map[string]schema.Attribute{
												"compute": schema.BoolAttribute{
													Computed: true,
												},
												"head": schema.BoolAttribute{
													Computed: true,
												},
												"name": schema.StringAttribute{
													Computed: true,
												},
												"value": schema.StringAttribute{
													Computed: true,
												},
											},
										},
										Description: `Array of environment variables for the compute environment`,
									},
									"head_job_options": schema.StringAttribute{
										Computed: true,
									},
									"head_queue": schema.StringAttribute{
										Computed: true,
									},
									"host_name": schema.StringAttribute{
										Computed: true,
									},
									"launch_dir": schema.StringAttribute{
										Computed: true,
									},
									"max_queue_size": schema.Int32Attribute{
										Computed: true,
									},
									"nextflow_config": schema.StringAttribute{
										Computed:    true,
										Description: `Nextflow configuration settings and parameters`,
									},
									"port": schema.Int32Attribute{
										Computed: true,
									},
									"post_run_script": schema.StringAttribute{
										Computed:    true,
										Description: `Shell script to execute after workflow completes`,
									},
									"pre_run_script": schema.StringAttribute{
										Computed:    true,
										Description: `Shell script to execute before workflow starts`,
									},
									"propagate_head_job_options": schema.BoolAttribute{
										Computed: true,
									},
									"user_name": schema.StringAttribute{
										Computed: true,
									},
									"work_dir": schema.StringAttribute{
										Computed:    true,
										Description: `Working directory path for workflow execution`,
									},
								},
							},
							"uge_platform": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"compute_queue": schema.StringAttribute{
										Computed: true,
									},
									"environment": schema.ListNestedAttribute{
										Computed: true,
										NestedObject: schema.NestedAttributeObject{
											Attributes: map[string]schema.Attribute{
												"compute": schema.BoolAttribute{
													Computed: true,
												},
												"head": schema.BoolAttribute{
													Computed: true,
												},
												"name": schema.StringAttribute{
													Computed: true,
												},
												"value": schema.StringAttribute{
													Computed: true,
												},
											},
										},
										Description: `Array of environment variables for the compute environment`,
									},
									"head_job_options": schema.StringAttribute{
										Computed: true,
									},
									"head_queue": schema.StringAttribute{
										Computed: true,
									},
									"host_name": schema.StringAttribute{
										Computed: true,
									},
									"launch_dir": schema.StringAttribute{
										Computed: true,
									},
									"max_queue_size": schema.Int32Attribute{
										Computed: true,
									},
									"nextflow_config": schema.StringAttribute{
										Computed:    true,
										Description: `Nextflow configuration settings and parameters`,
									},
									"port": schema.Int32Attribute{
										Computed: true,
									},
									"post_run_script": schema.StringAttribute{
										Computed:    true,
										Description: `Shell script to execute after workflow completes`,
									},
									"pre_run_script": schema.StringAttribute{
										Computed:    true,
										Description: `Shell script to execute before workflow starts`,
									},
									"propagate_head_job_options": schema.BoolAttribute{
										Computed: true,
									},
									"user_name": schema.StringAttribute{
										Computed: true,
									},
									"work_dir": schema.StringAttribute{
										Computed:    true,
										Description: `Working directory path for workflow execution`,
									},
								},
							},
						},
						MarkdownDescription: `Configuration settings for compute environments including work directories,` + "\n" +
							`pre/post run scripts, and environment-specific parameters.`,
					},
					"credentials_id": schema.StringAttribute{
						Computed: true,
					},
					"date_created": schema.StringAttribute{
						Computed: true,
					},
					"deleted": schema.BoolAttribute{
						Computed: true,
					},
					"description": schema.StringAttribute{
						Computed: true,
					},
					"labels": schema.ListNestedAttribute{
						Computed: true,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"date_created": schema.StringAttribute{
									Computed:    true,
									Description: `Timestamp when the label was created`,
								},
								"id": schema.Int64Attribute{
									Computed:    true,
									Description: `Unique numeric identifier for the label`,
								},
								"is_default": schema.BoolAttribute{
									Computed:    true,
									Description: `Flag indicating if this is a default system label`,
								},
								"name": schema.StringAttribute{
									Computed:    true,
									Description: `Name or key of the label`,
								},
								"resource": schema.BoolAttribute{
									Computed:    true,
									Description: `Flag indicating if this is a resource-level label`,
								},
								"value": schema.StringAttribute{
									Computed:    true,
									Description: `Value associated with the label`,
								},
							},
						},
					},
					"last_updated": schema.StringAttribute{
						Computed: true,
					},
					"last_used": schema.StringAttribute{
						Computed: true,
					},
					"managed_identity_id": schema.StringAttribute{
						Computed: true,
					},
					"message": schema.StringAttribute{
						Computed: true,
					},
					"name": schema.StringAttribute{
						Computed: true,
					},
					"org_id": schema.Int64Attribute{
						Computed: true,
					},
					"platform": schema.StringAttribute{
						Computed: true,
					},
					"primary": schema.BoolAttribute{
						Computed: true,
					},
					"status": schema.StringAttribute{
						Computed: true,
					},
					"workspace_id": schema.Int64Attribute{
						Computed: true,
					},
				},
			},
			"compute_env_id": schema.StringAttribute{
				Required:    true,
				Description: `Compute environment string identifier`,
			},
			"workspace_id": schema.Int64Attribute{
				Required:    true,
				Description: `Workspace numeric identifier`,
			},
		},
	}
}

func (r *ComputeEnvDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.Seqera)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.Seqera, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *ComputeEnvDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *ComputeEnvDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsDescribeComputeEnvRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.ComputeEnvs.DescribeComputeEnv(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.DescribeComputeEnvResponse != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedDescribeComputeEnvResponse(ctx, res.DescribeComputeEnvResponse)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
