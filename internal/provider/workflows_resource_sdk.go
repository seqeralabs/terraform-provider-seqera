// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"encoding/json"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/speakeasy/terraform-provider-seqera/internal/provider/typeconvert"
	tfTypes "github.com/speakeasy/terraform-provider-seqera/internal/provider/types"
	"github.com/speakeasy/terraform-provider-seqera/internal/sdk/models/operations"
	"github.com/speakeasy/terraform-provider-seqera/internal/sdk/models/shared"
	"time"
)

func (r *WorkflowsResourceModel) RefreshFromSharedDescribeWorkflowResponse(ctx context.Context, resp *shared.DescribeWorkflowResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		if resp.JobInfo == nil {
			r.JobInfo = nil
		} else {
			r.JobInfo = &tfTypes.JobInfoDto{}
			r.JobInfo.ID = types.Int64PointerValue(resp.JobInfo.ID)
			r.JobInfo.OperationID = types.StringPointerValue(resp.JobInfo.OperationID)
			r.JobInfo.Message = types.StringPointerValue(resp.JobInfo.Message)
			r.JobInfo.Status = types.StringPointerValue(resp.JobInfo.Status)
			r.JobInfo.ExitCode = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.JobInfo.ExitCode))
		}
		r.Labels = []tfTypes.LabelDbDto{}

		for _, labelsItem := range resp.Labels {
			var labels tfTypes.LabelDbDto

			labels.ID = types.Int64PointerValue(labelsItem.ID)
			labels.Name = types.StringPointerValue(labelsItem.Name)
			labels.Value = types.StringPointerValue(labelsItem.Value)
			labels.Resource = types.BoolPointerValue(labelsItem.Resource)
			labels.IsDefault = types.BoolPointerValue(labelsItem.IsDefault)
			labels.DateCreated = types.StringPointerValue(typeconvert.TimePointerToStringPointer(labelsItem.DateCreated))

			r.Labels = append(r.Labels, labels)
		}
		r.Messages = make([]types.String, 0, len(resp.Messages))
		for _, v := range resp.Messages {
			r.Messages = append(r.Messages, types.StringValue(v))
		}
		r.Optimized = types.BoolPointerValue(resp.Optimized)
		r.OrgID = types.Int64PointerValue(resp.OrgID)
		r.OrgName = types.StringPointerValue(resp.OrgName)
		if resp.Platform == nil {
			r.Platform = nil
		} else {
			r.Platform = &tfTypes.ComputePlatformDto{}
			r.Platform.ID = types.StringPointerValue(resp.Platform.ID)
			r.Platform.Name = types.StringPointerValue(resp.Platform.Name)
		}
		if resp.Progress == nil {
			r.Progress = nil
		} else {
			r.Progress = &tfTypes.ProgressData{}
			if resp.Progress.WorkflowProgress == nil {
				r.Progress.WorkflowProgress = nil
			} else {
				r.Progress.WorkflowProgress = &tfTypes.WorkflowLoad{}
				r.Progress.WorkflowProgress.Pending = types.Int64Value(resp.Progress.WorkflowProgress.Pending)
				r.Progress.WorkflowProgress.Submitted = types.Int64Value(resp.Progress.WorkflowProgress.Submitted)
				r.Progress.WorkflowProgress.Running = types.Int64Value(resp.Progress.WorkflowProgress.Running)
				r.Progress.WorkflowProgress.Succeeded = types.Int64Value(resp.Progress.WorkflowProgress.Succeeded)
				r.Progress.WorkflowProgress.Failed = types.Int64Value(resp.Progress.WorkflowProgress.Failed)
				r.Progress.WorkflowProgress.Cached = types.Int64Value(resp.Progress.WorkflowProgress.Cached)
				r.Progress.WorkflowProgress.Aborted = types.Int64Value(resp.Progress.WorkflowProgress.Aborted)
				r.Progress.WorkflowProgress.MemoryEfficiency = types.Float32PointerValue(resp.Progress.WorkflowProgress.MemoryEfficiency)
				r.Progress.WorkflowProgress.CPUEfficiency = types.Float32PointerValue(resp.Progress.WorkflowProgress.CPUEfficiency)
				r.Progress.WorkflowProgress.DateCreated = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.Progress.WorkflowProgress.DateCreated))
				r.Progress.WorkflowProgress.LastUpdated = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.Progress.WorkflowProgress.LastUpdated))
				r.Progress.WorkflowProgress.Executors = make([]types.String, 0, len(resp.Progress.WorkflowProgress.Executors))
				for _, v := range resp.Progress.WorkflowProgress.Executors {
					r.Progress.WorkflowProgress.Executors = append(r.Progress.WorkflowProgress.Executors, types.StringValue(v))
				}
				r.Progress.WorkflowProgress.Cpus = types.Int64Value(resp.Progress.WorkflowProgress.Cpus)
				r.Progress.WorkflowProgress.CPUTime = types.Int64Value(resp.Progress.WorkflowProgress.CPUTime)
				r.Progress.WorkflowProgress.CPULoad = types.Int64Value(resp.Progress.WorkflowProgress.CPULoad)
				r.Progress.WorkflowProgress.MemoryRss = types.Int64Value(resp.Progress.WorkflowProgress.MemoryRss)
				r.Progress.WorkflowProgress.MemoryReq = types.Int64Value(resp.Progress.WorkflowProgress.MemoryReq)
				r.Progress.WorkflowProgress.ReadBytes = types.Int64Value(resp.Progress.WorkflowProgress.ReadBytes)
				r.Progress.WorkflowProgress.WriteBytes = types.Int64Value(resp.Progress.WorkflowProgress.WriteBytes)
				r.Progress.WorkflowProgress.VolCtxSwitch = types.Int64Value(resp.Progress.WorkflowProgress.VolCtxSwitch)
				r.Progress.WorkflowProgress.InvCtxSwitch = types.Int64Value(resp.Progress.WorkflowProgress.InvCtxSwitch)
				r.Progress.WorkflowProgress.LoadTasks = types.Int64Value(resp.Progress.WorkflowProgress.LoadTasks)
				r.Progress.WorkflowProgress.LoadCpus = types.Int64Value(resp.Progress.WorkflowProgress.LoadCpus)
				r.Progress.WorkflowProgress.LoadMemory = types.Int64Value(resp.Progress.WorkflowProgress.LoadMemory)
				r.Progress.WorkflowProgress.PeakCpus = types.Int64Value(resp.Progress.WorkflowProgress.PeakCpus)
				r.Progress.WorkflowProgress.PeakTasks = types.Int64Value(resp.Progress.WorkflowProgress.PeakTasks)
				r.Progress.WorkflowProgress.PeakMemory = types.Int64Value(resp.Progress.WorkflowProgress.PeakMemory)
				r.Progress.WorkflowProgress.Cost = types.Float64PointerValue(resp.Progress.WorkflowProgress.Cost)
			}
			r.Progress.ProcessesProgress = []tfTypes.ProcessLoad{}

			for _, processesProgressItem := range resp.Progress.ProcessesProgress {
				var processesProgress tfTypes.ProcessLoad

				processesProgress.Pending = types.Int64Value(processesProgressItem.Pending)
				processesProgress.Submitted = types.Int64Value(processesProgressItem.Submitted)
				processesProgress.Running = types.Int64Value(processesProgressItem.Running)
				processesProgress.Succeeded = types.Int64Value(processesProgressItem.Succeeded)
				processesProgress.Failed = types.Int64Value(processesProgressItem.Failed)
				processesProgress.Cached = types.Int64Value(processesProgressItem.Cached)
				processesProgress.Aborted = types.Int64Value(processesProgressItem.Aborted)
				processesProgress.MemoryEfficiency = types.Float32PointerValue(processesProgressItem.MemoryEfficiency)
				processesProgress.CPUEfficiency = types.Float32PointerValue(processesProgressItem.CPUEfficiency)
				processesProgress.DateCreated = types.StringPointerValue(typeconvert.TimePointerToStringPointer(processesProgressItem.DateCreated))
				processesProgress.LastUpdated = types.StringPointerValue(typeconvert.TimePointerToStringPointer(processesProgressItem.LastUpdated))
				processesProgress.Process = types.StringValue(processesProgressItem.Process)
				processesProgress.Cpus = types.Int64Value(processesProgressItem.Cpus)
				processesProgress.CPUTime = types.Int64Value(processesProgressItem.CPUTime)
				processesProgress.CPULoad = types.Int64Value(processesProgressItem.CPULoad)
				processesProgress.MemoryRss = types.Int64Value(processesProgressItem.MemoryRss)
				processesProgress.MemoryReq = types.Int64Value(processesProgressItem.MemoryReq)
				processesProgress.ReadBytes = types.Int64Value(processesProgressItem.ReadBytes)
				processesProgress.WriteBytes = types.Int64Value(processesProgressItem.WriteBytes)
				processesProgress.VolCtxSwitch = types.Int64Value(processesProgressItem.VolCtxSwitch)
				processesProgress.InvCtxSwitch = types.Int64Value(processesProgressItem.InvCtxSwitch)
				processesProgress.LoadTasks = types.Int64Value(processesProgressItem.LoadTasks)
				processesProgress.LoadCpus = types.Int64Value(processesProgressItem.LoadCpus)
				processesProgress.LoadMemory = types.Int64Value(processesProgressItem.LoadMemory)
				processesProgress.PeakCpus = types.Int64Value(processesProgressItem.PeakCpus)
				processesProgress.PeakTasks = types.Int64Value(processesProgressItem.PeakTasks)
				processesProgress.PeakMemory = types.Int64Value(processesProgressItem.PeakMemory)

				r.Progress.ProcessesProgress = append(r.Progress.ProcessesProgress, processesProgress)
			}
			r.Progress.TotalProcesses = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.Progress.TotalProcesses))
		}
		if resp.Workflow == nil {
			r.Workflow = nil
		} else {
			r.Workflow = &tfTypes.Workflow{}
			r.Workflow.RequiresAttention = types.BoolPointerValue(resp.Workflow.RequiresAttention)
			if resp.Workflow.Status != nil {
				r.Workflow.Status = types.StringValue(string(*resp.Workflow.Status))
			} else {
				r.Workflow.Status = types.StringNull()
			}
			r.Workflow.OwnerID = types.Int64PointerValue(resp.Workflow.OwnerID)
			r.Workflow.Repository = types.StringPointerValue(resp.Workflow.Repository)
			r.Workflow.ID = types.StringPointerValue(resp.Workflow.ID)
			r.Workflow.Submit = types.StringValue(typeconvert.TimeToString(resp.Workflow.Submit))
			r.Workflow.Start = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.Workflow.Start))
			r.Workflow.Complete = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.Workflow.Complete))
			r.Workflow.DateCreated = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.Workflow.DateCreated))
			r.Workflow.LastUpdated = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.Workflow.LastUpdated))
			r.Workflow.RunName = types.StringValue(resp.Workflow.RunName)
			r.Workflow.SessionID = types.StringValue(resp.Workflow.SessionID)
			r.Workflow.Profile = types.StringPointerValue(resp.Workflow.Profile)
			r.Workflow.WorkDir = types.StringValue(resp.Workflow.WorkDir)
			r.Workflow.CommitID = types.StringPointerValue(resp.Workflow.CommitID)
			r.Workflow.UserName = types.StringValue(resp.Workflow.UserName)
			r.Workflow.ScriptID = types.StringPointerValue(resp.Workflow.ScriptID)
			r.Workflow.Revision = types.StringPointerValue(resp.Workflow.Revision)
			r.Workflow.CommandLine = types.StringValue(resp.Workflow.CommandLine)
			r.Workflow.ProjectName = types.StringValue(resp.Workflow.ProjectName)
			r.Workflow.ScriptName = types.StringPointerValue(resp.Workflow.ScriptName)
			r.Workflow.LaunchID = types.StringPointerValue(resp.Workflow.LaunchID)
			r.Workflow.ConfigFiles = make([]types.String, 0, len(resp.Workflow.ConfigFiles))
			for _, v := range resp.Workflow.ConfigFiles {
				r.Workflow.ConfigFiles = append(r.Workflow.ConfigFiles, types.StringValue(v))
			}
			if len(resp.Workflow.Params) > 0 {
				r.Workflow.Params = make(map[string]types.String, len(resp.Workflow.Params))
				for key, value := range resp.Workflow.Params {
					result, _ := json.Marshal(value)
					r.Workflow.Params[key] = types.StringValue(string(result))
				}
			}
			r.Workflow.ConfigText = types.StringPointerValue(resp.Workflow.ConfigText)
			if resp.Workflow.Manifest == nil {
				r.Workflow.Manifest = nil
			} else {
				r.Workflow.Manifest = &tfTypes.WfManifest{}
				r.Workflow.Manifest.NextflowVersion = types.StringPointerValue(resp.Workflow.Manifest.NextflowVersion)
				r.Workflow.Manifest.DefaultBranch = types.StringPointerValue(resp.Workflow.Manifest.DefaultBranch)
				r.Workflow.Manifest.Version = types.StringPointerValue(resp.Workflow.Manifest.Version)
				r.Workflow.Manifest.HomePage = types.StringPointerValue(resp.Workflow.Manifest.HomePage)
				r.Workflow.Manifest.Gitmodules = types.StringPointerValue(resp.Workflow.Manifest.Gitmodules)
				r.Workflow.Manifest.Description = types.StringPointerValue(resp.Workflow.Manifest.Description)
				r.Workflow.Manifest.Name = types.StringPointerValue(resp.Workflow.Manifest.Name)
				r.Workflow.Manifest.MainScript = types.StringPointerValue(resp.Workflow.Manifest.MainScript)
				r.Workflow.Manifest.Author = types.StringPointerValue(resp.Workflow.Manifest.Author)
				r.Workflow.Manifest.Icon = types.StringPointerValue(resp.Workflow.Manifest.Icon)
			}
			if resp.Workflow.Nextflow == nil {
				r.Workflow.Nextflow = nil
			} else {
				r.Workflow.Nextflow = &tfTypes.WfNextflow{}
				r.Workflow.Nextflow.Version = types.StringPointerValue(resp.Workflow.Nextflow.Version)
				r.Workflow.Nextflow.Build = types.StringPointerValue(resp.Workflow.Nextflow.Build)
				r.Workflow.Nextflow.Timestamp = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.Workflow.Nextflow.Timestamp))
			}
			if resp.Workflow.Stats == nil {
				r.Workflow.Stats = nil
			} else {
				r.Workflow.Stats = &tfTypes.WfStats{}
				r.Workflow.Stats.ComputeTimeFmt = types.StringPointerValue(resp.Workflow.Stats.ComputeTimeFmt)
				r.Workflow.Stats.CachedCount = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.Workflow.Stats.CachedCount))
				r.Workflow.Stats.FailedCount = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.Workflow.Stats.FailedCount))
				r.Workflow.Stats.IgnoredCount = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.Workflow.Stats.IgnoredCount))
				r.Workflow.Stats.SucceedCount = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.Workflow.Stats.SucceedCount))
				r.Workflow.Stats.CachedCountFmt = types.StringPointerValue(resp.Workflow.Stats.CachedCountFmt)
				r.Workflow.Stats.SucceedCountFmt = types.StringPointerValue(resp.Workflow.Stats.SucceedCountFmt)
				r.Workflow.Stats.FailedCountFmt = types.StringPointerValue(resp.Workflow.Stats.FailedCountFmt)
				r.Workflow.Stats.IgnoredCountFmt = types.StringPointerValue(resp.Workflow.Stats.IgnoredCountFmt)
				r.Workflow.Stats.CachedPct = types.Float32PointerValue(resp.Workflow.Stats.CachedPct)
				r.Workflow.Stats.FailedPct = types.Float32PointerValue(resp.Workflow.Stats.FailedPct)
				r.Workflow.Stats.SucceedPct = types.Float32PointerValue(resp.Workflow.Stats.SucceedPct)
				r.Workflow.Stats.IgnoredPct = types.Float32PointerValue(resp.Workflow.Stats.IgnoredPct)
				r.Workflow.Stats.CachedDuration = types.Int64PointerValue(resp.Workflow.Stats.CachedDuration)
				r.Workflow.Stats.FailedDuration = types.Int64PointerValue(resp.Workflow.Stats.FailedDuration)
				r.Workflow.Stats.SucceedDuration = types.Int64PointerValue(resp.Workflow.Stats.SucceedDuration)
			}
			r.Workflow.ErrorMessage = types.StringPointerValue(resp.Workflow.ErrorMessage)
			r.Workflow.ErrorReport = types.StringPointerValue(resp.Workflow.ErrorReport)
			r.Workflow.Deleted = types.BoolPointerValue(resp.Workflow.Deleted)
			r.Workflow.ProjectDir = types.StringPointerValue(resp.Workflow.ProjectDir)
			r.Workflow.HomeDir = types.StringPointerValue(resp.Workflow.HomeDir)
			r.Workflow.Container = types.StringPointerValue(resp.Workflow.Container)
			r.Workflow.ContainerEngine = types.StringPointerValue(resp.Workflow.ContainerEngine)
			r.Workflow.ScriptFile = types.StringPointerValue(resp.Workflow.ScriptFile)
			r.Workflow.LaunchDir = types.StringPointerValue(resp.Workflow.LaunchDir)
			r.Workflow.Duration = types.Int64PointerValue(resp.Workflow.Duration)
			r.Workflow.ExitStatus = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.Workflow.ExitStatus))
			r.Workflow.Resume = types.BoolPointerValue(resp.Workflow.Resume)
			r.Workflow.Success = types.BoolPointerValue(resp.Workflow.Success)
			r.Workflow.LogFile = types.StringPointerValue(resp.Workflow.LogFile)
			r.Workflow.OutFile = types.StringPointerValue(resp.Workflow.OutFile)
			r.Workflow.OperationID = types.StringPointerValue(resp.Workflow.OperationID)
		}
		r.WorkspaceID = types.Int64PointerValue(resp.WorkspaceID)
		r.WorkspaceName = types.StringPointerValue(resp.WorkspaceName)
	}

	return diags
}

func (r *WorkflowsResourceModel) RefreshFromSharedSubmitWorkflowLaunchResponse(ctx context.Context, resp *shared.SubmitWorkflowLaunchResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.WorkflowID = types.StringPointerValue(resp.WorkflowID)
	}

	return diags
}

func (r *WorkflowsResourceModel) ToOperationsCreateWorkflowLaunchRequest(ctx context.Context) (*operations.CreateWorkflowLaunchRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var workspaceID int64
	workspaceID = r.WorkspaceID.ValueInt64()

	sourceWorkspaceID := new(int64)
	if !r.SourceWorkspaceID.IsUnknown() && !r.SourceWorkspaceID.IsNull() {
		*sourceWorkspaceID = r.SourceWorkspaceID.ValueInt64()
	} else {
		sourceWorkspaceID = nil
	}
	submitWorkflowLaunchRequest, submitWorkflowLaunchRequestDiags := r.ToSharedSubmitWorkflowLaunchRequest(ctx)
	diags.Append(submitWorkflowLaunchRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreateWorkflowLaunchRequest{
		WorkspaceID:                 workspaceID,
		SourceWorkspaceID:           sourceWorkspaceID,
		SubmitWorkflowLaunchRequest: *submitWorkflowLaunchRequest,
	}

	return &out, diags
}

func (r *WorkflowsResourceModel) ToOperationsDescribeWorkflowRequest(ctx context.Context) (*operations.DescribeWorkflowRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var workflowID string
	workflowID = r.WorkflowID.ValueString()

	workspaceID := new(int64)
	if !r.WorkspaceID.IsUnknown() && !r.WorkspaceID.IsNull() {
		*workspaceID = r.WorkspaceID.ValueInt64()
	} else {
		workspaceID = nil
	}
	out := operations.DescribeWorkflowRequest{
		WorkflowID:  workflowID,
		WorkspaceID: workspaceID,
	}

	return &out, diags
}

func (r *WorkflowsResourceModel) ToSharedSubmitWorkflowLaunchRequest(ctx context.Context) (*shared.SubmitWorkflowLaunchRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	launch, launchDiags := r.ToSharedWorkflowLaunchRequest(ctx)
	diags.Append(launchDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := shared.SubmitWorkflowLaunchRequest{
		Launch: *launch,
	}

	return &out, diags
}

func (r *WorkflowsResourceModel) ToSharedWorkflowLaunchRequest(ctx context.Context) (*shared.WorkflowLaunchRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var computeEnvID string
	computeEnvID = r.ComputeEnvID.ValueString()

	runName := new(string)
	if !r.RunName.IsUnknown() && !r.RunName.IsNull() {
		*runName = r.RunName.ValueString()
	} else {
		runName = nil
	}
	var pipeline string
	pipeline = r.Pipeline.ValueString()

	var workDir string
	workDir = r.WorkDir.ValueString()

	revision := new(string)
	if !r.Revision.IsUnknown() && !r.Revision.IsNull() {
		*revision = r.Revision.ValueString()
	} else {
		revision = nil
	}
	sessionID := new(string)
	if !r.SessionID.IsUnknown() && !r.SessionID.IsNull() {
		*sessionID = r.SessionID.ValueString()
	} else {
		sessionID = nil
	}
	configProfiles := make([]string, 0, len(r.ConfigProfiles))
	for _, configProfilesItem := range r.ConfigProfiles {
		configProfiles = append(configProfiles, configProfilesItem.ValueString())
	}
	userSecrets := make([]string, 0, len(r.UserSecrets))
	for _, userSecretsItem := range r.UserSecrets {
		userSecrets = append(userSecrets, userSecretsItem.ValueString())
	}
	workspaceSecrets := make([]string, 0, len(r.WorkspaceSecrets))
	for _, workspaceSecretsItem := range r.WorkspaceSecrets {
		workspaceSecrets = append(workspaceSecrets, workspaceSecretsItem.ValueString())
	}
	configText := new(string)
	if !r.ConfigText.IsUnknown() && !r.ConfigText.IsNull() {
		*configText = r.ConfigText.ValueString()
	} else {
		configText = nil
	}
	towerConfig := new(string)
	if !r.TowerConfig.IsUnknown() && !r.TowerConfig.IsNull() {
		*towerConfig = r.TowerConfig.ValueString()
	} else {
		towerConfig = nil
	}
	paramsText := new(string)
	if !r.ParamsText.IsUnknown() && !r.ParamsText.IsNull() {
		*paramsText = r.ParamsText.ValueString()
	} else {
		paramsText = nil
	}
	preRunScript := new(string)
	if !r.PreRunScript.IsUnknown() && !r.PreRunScript.IsNull() {
		*preRunScript = r.PreRunScript.ValueString()
	} else {
		preRunScript = nil
	}
	postRunScript := new(string)
	if !r.PostRunScript.IsUnknown() && !r.PostRunScript.IsNull() {
		*postRunScript = r.PostRunScript.ValueString()
	} else {
		postRunScript = nil
	}
	mainScript := new(string)
	if !r.MainScript.IsUnknown() && !r.MainScript.IsNull() {
		*mainScript = r.MainScript.ValueString()
	} else {
		mainScript = nil
	}
	entryName := new(string)
	if !r.EntryName.IsUnknown() && !r.EntryName.IsNull() {
		*entryName = r.EntryName.ValueString()
	} else {
		entryName = nil
	}
	schemaName := new(string)
	if !r.SchemaName.IsUnknown() && !r.SchemaName.IsNull() {
		*schemaName = r.SchemaName.ValueString()
	} else {
		schemaName = nil
	}
	resume := new(bool)
	if !r.Resume.IsUnknown() && !r.Resume.IsNull() {
		*resume = r.Resume.ValueBool()
	} else {
		resume = nil
	}
	pullLatest := new(bool)
	if !r.PullLatest.IsUnknown() && !r.PullLatest.IsNull() {
		*pullLatest = r.PullLatest.ValueBool()
	} else {
		pullLatest = nil
	}
	stubRun := new(bool)
	if !r.StubRun.IsUnknown() && !r.StubRun.IsNull() {
		*stubRun = r.StubRun.ValueBool()
	} else {
		stubRun = nil
	}
	optimizationID := new(string)
	if !r.OptimizationID.IsUnknown() && !r.OptimizationID.IsNull() {
		*optimizationID = r.OptimizationID.ValueString()
	} else {
		optimizationID = nil
	}
	optimizationTargets := new(string)
	if !r.OptimizationTargets.IsUnknown() && !r.OptimizationTargets.IsNull() {
		*optimizationTargets = r.OptimizationTargets.ValueString()
	} else {
		optimizationTargets = nil
	}
	labelIds := make([]int64, 0, len(r.LabelIds))
	for _, labelIdsItem := range r.LabelIds {
		labelIds = append(labelIds, labelIdsItem.ValueInt64())
	}
	headJobCpus := new(int)
	if !r.HeadJobCpus.IsUnknown() && !r.HeadJobCpus.IsNull() {
		*headJobCpus = int(r.HeadJobCpus.ValueInt32())
	} else {
		headJobCpus = nil
	}
	headJobMemoryMb := new(int)
	if !r.HeadJobMemoryMb.IsUnknown() && !r.HeadJobMemoryMb.IsNull() {
		*headJobMemoryMb = int(r.HeadJobMemoryMb.ValueInt32())
	} else {
		headJobMemoryMb = nil
	}
	launchContainer := new(string)
	if !r.LaunchContainer.IsUnknown() && !r.LaunchContainer.IsNull() {
		*launchContainer = r.LaunchContainer.ValueString()
	} else {
		launchContainer = nil
	}
	dateCreated := new(time.Time)
	if !r.DateCreated.IsUnknown() && !r.DateCreated.IsNull() {
		*dateCreated, _ = time.Parse(time.RFC3339Nano, r.DateCreated.ValueString())
	} else {
		dateCreated = nil
	}
	out := shared.WorkflowLaunchRequest{
		ComputeEnvID:        computeEnvID,
		RunName:             runName,
		Pipeline:            pipeline,
		WorkDir:             workDir,
		Revision:            revision,
		SessionID:           sessionID,
		ConfigProfiles:      configProfiles,
		UserSecrets:         userSecrets,
		WorkspaceSecrets:    workspaceSecrets,
		ConfigText:          configText,
		TowerConfig:         towerConfig,
		ParamsText:          paramsText,
		PreRunScript:        preRunScript,
		PostRunScript:       postRunScript,
		MainScript:          mainScript,
		EntryName:           entryName,
		SchemaName:          schemaName,
		Resume:              resume,
		PullLatest:          pullLatest,
		StubRun:             stubRun,
		OptimizationID:      optimizationID,
		OptimizationTargets: optimizationTargets,
		LabelIds:            labelIds,
		HeadJobCpus:         headJobCpus,
		HeadJobMemoryMb:     headJobMemoryMb,
		LaunchContainer:     launchContainer,
		DateCreated:         dateCreated,
	}

	return &out, diags
}
