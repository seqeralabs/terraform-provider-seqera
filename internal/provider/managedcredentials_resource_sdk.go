// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/seqeralabs/terraform-provider-seqera/internal/sdk/models/operations"
	"github.com/seqeralabs/terraform-provider-seqera/internal/sdk/models/shared"
)

func (r *ManagedCredentialsResourceModel) RefreshFromSharedCreateGridManagedCredentialsResponse(ctx context.Context, resp *shared.CreateGridManagedCredentialsResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.ManagedCredentialsID = types.Int64PointerValue(resp.ManagedCredentialsID)
	}

	return diags
}

func (r *ManagedCredentialsResourceModel) RefreshFromSharedGridManagedCredentials(ctx context.Context, resp *shared.GridManagedCredentials) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp.CredentialProvider != nil {
		r.CredentialProvider = types.StringValue(string(*resp.CredentialProvider))
	} else {
		r.CredentialProvider = types.StringNull()
	}
	r.ManagedCredentialsID = types.Int64PointerValue(resp.ManagedCredentialsID)
	r.ManagedIdentityID = types.Int64Value(resp.ManagedIdentityID)
	r.OrgID = types.Int64PointerValue(resp.OrgID)
	r.UserID = types.Int64PointerValue(resp.UserID)
	r.UserName = types.StringPointerValue(resp.UserName)

	return diags
}

func (r *ManagedCredentialsResourceModel) RefreshFromSharedListGridManagedCredentialsResponse(ctx context.Context, resp *shared.ListGridManagedCredentialsResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		if len(resp.ManagedCredentials) == 0 {
			diags.AddError("Unexpected response from API", "Missing response body array data.")
			return diags
		}

		diags.Append(r.RefreshFromSharedGridManagedCredentials(ctx, &resp.ManagedCredentials[0])...)

		if diags.HasError() {
			return diags
		}

		r.TotalSize = types.Int64PointerValue(resp.TotalSize)
	}

	return diags
}

func (r *ManagedCredentialsResourceModel) ToOperationsCreateManagedCredentialsRequest(ctx context.Context) (*operations.CreateManagedCredentialsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var managedIdentityID int64
	managedIdentityID = r.ManagedIdentityID.ValueInt64()

	var orgID int64
	orgID = r.OrgID.ValueInt64()

	userID := new(int64)
	if !r.UserID.IsUnknown() && !r.UserID.IsNull() {
		*userID = r.UserID.ValueInt64()
	} else {
		userID = nil
	}
	createGridManagedCredentialsRequest, createGridManagedCredentialsRequestDiags := r.ToSharedCreateGridManagedCredentialsRequest(ctx)
	diags.Append(createGridManagedCredentialsRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreateManagedCredentialsRequest{
		ManagedIdentityID:                   managedIdentityID,
		OrgID:                               orgID,
		UserID:                              userID,
		CreateGridManagedCredentialsRequest: *createGridManagedCredentialsRequest,
	}

	return &out, diags
}

func (r *ManagedCredentialsResourceModel) ToOperationsDeleteManagedCredentialsRequest(ctx context.Context) (*operations.DeleteManagedCredentialsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var managedIdentityID int64
	managedIdentityID = r.ManagedIdentityID.ValueInt64()

	managedCredentialsID := new(int64)
	if !r.ManagedCredentialsID.IsUnknown() && !r.ManagedCredentialsID.IsNull() {
		*managedCredentialsID = r.ManagedCredentialsID.ValueInt64()
	} else {
		managedCredentialsID = nil
	}
	orgID := new(int64)
	if !r.OrgID.IsUnknown() && !r.OrgID.IsNull() {
		*orgID = r.OrgID.ValueInt64()
	} else {
		orgID = nil
	}
	checked := new(bool)
	if !r.Checked.IsUnknown() && !r.Checked.IsNull() {
		*checked = r.Checked.ValueBool()
	} else {
		checked = nil
	}
	out := operations.DeleteManagedCredentialsRequest{
		ManagedIdentityID:    managedIdentityID,
		ManagedCredentialsID: managedCredentialsID,
		OrgID:                orgID,
		Checked:              checked,
	}

	return &out, diags
}

func (r *ManagedCredentialsResourceModel) ToOperationsListManagedCredentialsRequest(ctx context.Context) (*operations.ListManagedCredentialsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var managedIdentityID int64
	managedIdentityID = r.ManagedIdentityID.ValueInt64()

	var orgID int64
	orgID = r.OrgID.ValueInt64()

	userID := new(int64)
	if !r.UserID.IsUnknown() && !r.UserID.IsNull() {
		*userID = r.UserID.ValueInt64()
	} else {
		userID = nil
	}
	out := operations.ListManagedCredentialsRequest{
		ManagedIdentityID: managedIdentityID,
		OrgID:             orgID,
		UserID:            userID,
	}

	return &out, diags
}

func (r *ManagedCredentialsResourceModel) ToOperationsUpdateManagedCredentialsRequest(ctx context.Context) (*operations.UpdateManagedCredentialsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var managedIdentityID int64
	managedIdentityID = r.ManagedIdentityID.ValueInt64()

	var managedCredentialsID int64
	managedCredentialsID = r.ManagedCredentialsID.ValueInt64()

	orgID := new(int64)
	if !r.OrgID.IsUnknown() && !r.OrgID.IsNull() {
		*orgID = r.OrgID.ValueInt64()
	} else {
		orgID = nil
	}
	updateGridManagedCredentialsRequest, updateGridManagedCredentialsRequestDiags := r.ToSharedUpdateGridManagedCredentialsRequest(ctx)
	diags.Append(updateGridManagedCredentialsRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateManagedCredentialsRequest{
		ManagedIdentityID:                   managedIdentityID,
		ManagedCredentialsID:                managedCredentialsID,
		OrgID:                               orgID,
		UpdateGridManagedCredentialsRequest: *updateGridManagedCredentialsRequest,
	}

	return &out, diags
}

func (r *ManagedCredentialsResourceModel) ToSharedCreateGridManagedCredentialsRequest(ctx context.Context) (*shared.CreateGridManagedCredentialsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	managedCredentials, managedCredentialsDiags := r.ToSharedGridManagedCredentials(ctx)
	diags.Append(managedCredentialsDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := shared.CreateGridManagedCredentialsRequest{
		ManagedCredentials: *managedCredentials,
	}

	return &out, diags
}

func (r *ManagedCredentialsResourceModel) ToSharedGridManagedCredentials(ctx context.Context) (*shared.GridManagedCredentials, diag.Diagnostics) {
	var diags diag.Diagnostics

	managedCredentialsID := new(int64)
	if !r.ManagedCredentialsID.IsUnknown() && !r.ManagedCredentialsID.IsNull() {
		*managedCredentialsID = r.ManagedCredentialsID.ValueInt64()
	} else {
		managedCredentialsID = nil
	}
	var managedIdentityID int64
	managedIdentityID = r.ManagedIdentityID.ValueInt64()

	userID := new(int64)
	if !r.UserID.IsUnknown() && !r.UserID.IsNull() {
		*userID = r.UserID.ValueInt64()
	} else {
		userID = nil
	}
	userName := new(string)
	if !r.UserName.IsUnknown() && !r.UserName.IsNull() {
		*userName = r.UserName.ValueString()
	} else {
		userName = nil
	}
	credentialProvider := new(shared.CredentialProvider)
	if !r.CredentialProvider.IsUnknown() && !r.CredentialProvider.IsNull() {
		*credentialProvider = shared.CredentialProvider(r.CredentialProvider.ValueString())
	} else {
		credentialProvider = nil
	}
	orgID := new(int64)
	if !r.OrgID.IsUnknown() && !r.OrgID.IsNull() {
		*orgID = r.OrgID.ValueInt64()
	} else {
		orgID = nil
	}
	out := shared.GridManagedCredentials{
		ManagedCredentialsID: managedCredentialsID,
		ManagedIdentityID:    managedIdentityID,
		UserID:               userID,
		UserName:             userName,
		CredentialProvider:   credentialProvider,
		OrgID:                orgID,
	}

	return &out, diags
}

func (r *ManagedCredentialsResourceModel) ToSharedUpdateGridManagedCredentialsRequest(ctx context.Context) (*shared.UpdateGridManagedCredentialsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	managedCredentials, managedCredentialsDiags := r.ToSharedGridManagedCredentials(ctx)
	diags.Append(managedCredentialsDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := shared.UpdateGridManagedCredentialsRequest{
		ManagedCredentials: *managedCredentials,
	}

	return &out, diags
}
