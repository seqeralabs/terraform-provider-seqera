// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	tfTypes "github.com/speakeasy/terraform-provider-seqera/internal/provider/types"
	"github.com/speakeasy/terraform-provider-seqera/internal/sdk"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &CredentialsDataSource{}
var _ datasource.DataSourceWithConfigure = &CredentialsDataSource{}

func NewCredentialsDataSource() datasource.DataSource {
	return &CredentialsDataSource{}
}

// CredentialsDataSource is the data source implementation.
type CredentialsDataSource struct {
	// Provider configured SDK client.
	client *sdk.Seqera
}

// CredentialsDataSourceModel describes the data model.
type CredentialsDataSourceModel struct {
	Credentials []tfTypes.Credentials `tfsdk:"credentials"`
	PlatformID  types.String          `queryParam:"style=form,explode=true,name=platformId" tfsdk:"platform_id"`
	WorkspaceID types.Int64           `queryParam:"style=form,explode=true,name=workspaceId" tfsdk:"workspace_id"`
}

// Metadata returns the data source type name.
func (r *CredentialsDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_credentials"
}

// Schema defines the schema for the data source.
func (r *CredentialsDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "Credentials DataSource",

		Attributes: map[string]schema.Attribute{
			"credentials": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"base_url": schema.StringAttribute{
							Computed: true,
						},
						"category": schema.StringAttribute{
							Computed: true,
						},
						"credentials_id": schema.StringAttribute{
							Computed:    true,
							Description: `Unique identifier for the credential (max 22 characters)`,
						},
						"date_created": schema.StringAttribute{
							Computed:    true,
							Description: `Timestamp when the credential was created`,
						},
						"deleted": schema.BoolAttribute{
							Computed:    true,
							Description: `Flag indicating if the credential has been soft-deleted`,
						},
						"description": schema.StringAttribute{
							Computed:    true,
							Description: `Optional description explaining the purpose of the credential`,
						},
						"keys": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"aws": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"access_key": schema.StringAttribute{
											Computed: true,
										},
										"assume_role_arn": schema.StringAttribute{
											Computed: true,
										},
										"discriminator": schema.StringAttribute{
											Computed: true,
										},
									},
								},
								"azure": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"batch_name": schema.StringAttribute{
											Computed: true,
										},
										"discriminator": schema.StringAttribute{
											Computed: true,
										},
										"storage_name": schema.StringAttribute{
											Computed: true,
										},
									},
								},
								"azure_entra": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"batch_name": schema.StringAttribute{
											Computed: true,
										},
										"client_id": schema.StringAttribute{
											Computed: true,
										},
										"discriminator": schema.StringAttribute{
											Computed: true,
										},
										"storage_name": schema.StringAttribute{
											Computed: true,
										},
										"tenant_id": schema.StringAttribute{
											Computed: true,
										},
									},
								},
								"azurerepos": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"discriminator": schema.StringAttribute{
											Computed: true,
										},
										"username": schema.StringAttribute{
											Computed: true,
										},
									},
								},
								"bitbucket": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"discriminator": schema.StringAttribute{
											Computed: true,
										},
										"username": schema.StringAttribute{
											Computed: true,
										},
									},
								},
								"codecommit": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"discriminator": schema.StringAttribute{
											Computed: true,
										},
										"username": schema.StringAttribute{
											Computed: true,
										},
									},
								},
								"container_reg": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"discriminator": schema.StringAttribute{
											Computed: true,
										},
										"registry": schema.StringAttribute{
											Computed: true,
										},
										"user_name": schema.StringAttribute{
											Computed: true,
										},
									},
								},
								"gitea": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"discriminator": schema.StringAttribute{
											Computed: true,
										},
										"username": schema.StringAttribute{
											Computed: true,
										},
									},
								},
								"github": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"discriminator": schema.StringAttribute{
											Computed: true,
										},
										"username": schema.StringAttribute{
											Computed: true,
										},
									},
								},
								"gitlab": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"discriminator": schema.StringAttribute{
											Computed: true,
										},
										"username": schema.StringAttribute{
											Computed: true,
										},
									},
								},
								"google": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"discriminator": schema.StringAttribute{
											Computed: true,
										},
									},
								},
								"k8s": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"certificate": schema.StringAttribute{
											Computed: true,
										},
										"discriminator": schema.StringAttribute{
											Computed: true,
										},
									},
								},
								"seqeracompute": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"access_key": schema.StringAttribute{
											Computed: true,
										},
										"assume_role_arn": schema.StringAttribute{
											Computed: true,
										},
										"discriminator": schema.StringAttribute{
											Computed: true,
										},
									},
								},
								"ssh": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"discriminator": schema.StringAttribute{
											Computed: true,
										},
									},
								},
								"tw_agent": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"connection_id": schema.StringAttribute{
											Computed: true,
										},
										"discriminator": schema.StringAttribute{
											Computed: true,
										},
										"shared": schema.BoolAttribute{
											Computed: true,
										},
										"work_dir": schema.StringAttribute{
											Computed: true,
										},
									},
								},
							},
						},
						"last_updated": schema.StringAttribute{
							Computed: true,
						},
						"last_used": schema.StringAttribute{
							Computed:    true,
							Description: `Timestamp when the credential was last used`,
						},
						"name": schema.StringAttribute{
							Computed:    true,
							Description: `Display name for the credential (max 100 characters)`,
						},
						"provider_type": schema.StringAttribute{
							Computed:    true,
							Description: `Cloud or service provider type (e.g., aws, azure, gcp)`,
						},
					},
				},
			},
			"platform_id": schema.StringAttribute{
				Optional:    true,
				Description: `Platform string identifier`,
			},
			"workspace_id": schema.Int64Attribute{
				Optional:    true,
				Description: `Workspace numeric identifier`,
			},
		},
	}
}

func (r *CredentialsDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.Seqera)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.Seqera, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *CredentialsDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *CredentialsDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsListCredentialsRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Credentials.ListCredentials(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.ListCredentialsResponse != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedListCredentialsResponse(ctx, res.ListCredentialsResponse)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
