// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/seqeralabs/terraform-provider-seqera/internal/provider/typeconvert"
	tfTypes "github.com/seqeralabs/terraform-provider-seqera/internal/provider/types"
	"github.com/seqeralabs/terraform-provider-seqera/internal/sdk/models/operations"
	"github.com/seqeralabs/terraform-provider-seqera/internal/sdk/models/shared"
)

func (r *AWSBatchComputeEnvResourceModel) RefreshFromSharedAWSBatchComputeEnv(ctx context.Context, resp *shared.AWSBatchComputeEnv) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.ComputeEnvID = types.StringPointerValue(resp.ComputeEnvID)
		if resp.Config == nil {
			r.Config = nil
		} else {
			r.Config = &tfTypes.Config{}
			r.Config.CliPath = types.StringPointerValue(resp.Config.CliPath)
			r.Config.ComputeJobRole = types.StringPointerValue(resp.Config.ComputeJobRole)
			r.Config.ComputeQueue = types.StringPointerValue(resp.Config.ComputeQueue)
			r.Config.EnableFusion = types.BoolPointerValue(resp.Config.EnableFusion)
			r.Config.EnableWave = types.BoolPointerValue(resp.Config.EnableWave)
			r.Config.ExecutionRole = types.StringPointerValue(resp.Config.ExecutionRole)
			if resp.Config.Forge == nil {
				r.Config.Forge = nil
			} else {
				r.Config.Forge = &tfTypes.Forge{}
				if resp.Config.Forge.AllocationStrategy != nil {
					r.Config.Forge.AllocationStrategy = types.StringValue(string(*resp.Config.Forge.AllocationStrategy))
				} else {
					r.Config.Forge.AllocationStrategy = types.StringNull()
				}
				r.Config.Forge.BidPercentage = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.Config.Forge.BidPercentage))
				r.Config.Forge.DisposeOnDeletion = types.BoolPointerValue(resp.Config.Forge.DisposeOnDeletion)
				r.Config.Forge.EbsAutoScale = types.BoolPointerValue(resp.Config.Forge.EbsAutoScale)
				r.Config.Forge.EbsBlockSize = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.Config.Forge.EbsBlockSize))
				r.Config.Forge.Ec2KeyPair = types.StringPointerValue(resp.Config.Forge.Ec2KeyPair)
				r.Config.Forge.EfsCreate = types.BoolPointerValue(resp.Config.Forge.EfsCreate)
				r.Config.Forge.EfsID = types.StringPointerValue(resp.Config.Forge.EfsID)
				r.Config.Forge.EfsMount = types.StringPointerValue(resp.Config.Forge.EfsMount)
				r.Config.Forge.FargateHeadEnabled = types.BoolPointerValue(resp.Config.Forge.FargateHeadEnabled)
				if resp.Config.Forge.ForgeType != nil {
					r.Config.Forge.ForgeType = types.StringValue(string(*resp.Config.Forge.ForgeType))
				} else {
					r.Config.Forge.ForgeType = types.StringNull()
				}
				r.Config.Forge.FsxMount = types.StringPointerValue(resp.Config.Forge.FsxMount)
				r.Config.Forge.FsxName = types.StringPointerValue(resp.Config.Forge.FsxName)
				r.Config.Forge.FsxSize = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.Config.Forge.FsxSize))
				r.Config.Forge.GpuEnabled = types.BoolPointerValue(resp.Config.Forge.GpuEnabled)
				r.Config.Forge.InstanceTypes = make([]types.String, 0, len(resp.Config.Forge.InstanceTypes))
				for _, v := range resp.Config.Forge.InstanceTypes {
					r.Config.Forge.InstanceTypes = append(r.Config.Forge.InstanceTypes, types.StringValue(v))
				}
				r.Config.Forge.MaxCpus = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.Config.Forge.MaxCpus))
				r.Config.Forge.MinCpus = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.Config.Forge.MinCpus))
				r.Config.Forge.SecurityGroups = make([]types.String, 0, len(resp.Config.Forge.SecurityGroups))
				for _, v := range resp.Config.Forge.SecurityGroups {
					r.Config.Forge.SecurityGroups = append(r.Config.Forge.SecurityGroups, types.StringValue(v))
				}
				r.Config.Forge.Subnets = make([]types.String, 0, len(resp.Config.Forge.Subnets))
				for _, v := range resp.Config.Forge.Subnets {
					r.Config.Forge.Subnets = append(r.Config.Forge.Subnets, types.StringValue(v))
				}
				r.Config.Forge.VpcID = types.StringPointerValue(resp.Config.Forge.VpcID)
			}
			r.Config.HeadJobCpus = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.Config.HeadJobCpus))
			r.Config.HeadJobMemoryMb = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.Config.HeadJobMemoryMb))
			r.Config.HeadJobRole = types.StringPointerValue(resp.Config.HeadJobRole)
			r.Config.HeadQueue = types.StringPointerValue(resp.Config.HeadQueue)
			r.Config.PostRunScript = types.StringPointerValue(resp.Config.PostRunScript)
			r.Config.PreRunScript = types.StringPointerValue(resp.Config.PreRunScript)
		}
		r.CredentialsID = types.StringValue(resp.CredentialsID)
		r.Description = types.StringPointerValue(resp.Description)
		r.Message = types.StringPointerValue(resp.Message)
		r.Name = types.StringValue(resp.Name)
		r.Region = types.StringValue(resp.Region)
		r.Status = types.StringPointerValue(resp.Status)
		r.WorkDirectory = types.StringValue(resp.WorkDirectory)
		r.WorkspaceID = types.Int64PointerValue(resp.WorkspaceID)
	}

	return diags
}

func (r *AWSBatchComputeEnvResourceModel) RefreshFromSharedCreateAWSBatchComputeEnvResponse(ctx context.Context, resp *shared.CreateAWSBatchComputeEnvResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.ComputeEnvID = types.StringPointerValue(resp.ComputeEnvID)
	}

	return diags
}

func (r *AWSBatchComputeEnvResourceModel) RefreshFromSharedDescribeAWSBatchComputeEnvResponse(ctx context.Context, resp *shared.DescribeAWSBatchComputeEnvResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		diags.Append(r.RefreshFromSharedAWSBatchComputeEnv(ctx, resp.ComputeEnv)...)

		if diags.HasError() {
			return diags
		}

	}

	return diags
}

func (r *AWSBatchComputeEnvResourceModel) ToOperationsCreateAWSBatchComputeEnvRequest(ctx context.Context) (*operations.CreateAWSBatchComputeEnvRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var workspaceID int64
	workspaceID = r.WorkspaceID.ValueInt64()

	createAWSBatchComputeEnvRequest, createAWSBatchComputeEnvRequestDiags := r.ToSharedCreateAWSBatchComputeEnvRequest(ctx)
	diags.Append(createAWSBatchComputeEnvRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreateAWSBatchComputeEnvRequest{
		WorkspaceID:                     workspaceID,
		CreateAWSBatchComputeEnvRequest: *createAWSBatchComputeEnvRequest,
	}

	return &out, diags
}

func (r *AWSBatchComputeEnvResourceModel) ToOperationsDeleteAWSBatchComputeEnvRequest(ctx context.Context) (*operations.DeleteAWSBatchComputeEnvRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var computeEnvID string
	computeEnvID = r.ComputeEnvID.ValueString()

	workspaceID := new(int64)
	if !r.WorkspaceID.IsUnknown() && !r.WorkspaceID.IsNull() {
		*workspaceID = r.WorkspaceID.ValueInt64()
	} else {
		workspaceID = nil
	}
	out := operations.DeleteAWSBatchComputeEnvRequest{
		ComputeEnvID: computeEnvID,
		WorkspaceID:  workspaceID,
	}

	return &out, diags
}

func (r *AWSBatchComputeEnvResourceModel) ToOperationsDescribeAWSBatchComputeEnvRequest(ctx context.Context) (*operations.DescribeAWSBatchComputeEnvRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var computeEnvID string
	computeEnvID = r.ComputeEnvID.ValueString()

	var workspaceID int64
	workspaceID = r.WorkspaceID.ValueInt64()

	out := operations.DescribeAWSBatchComputeEnvRequest{
		ComputeEnvID: computeEnvID,
		WorkspaceID:  workspaceID,
	}

	return &out, diags
}

func (r *AWSBatchComputeEnvResourceModel) ToOperationsUpdateAWSBatchComputeEnvRequest(ctx context.Context) (*operations.UpdateAWSBatchComputeEnvRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var computeEnvID string
	computeEnvID = r.ComputeEnvID.ValueString()

	workspaceID := new(int64)
	if !r.WorkspaceID.IsUnknown() && !r.WorkspaceID.IsNull() {
		*workspaceID = r.WorkspaceID.ValueInt64()
	} else {
		workspaceID = nil
	}
	updateAWSBatchComputeEnvRequest, updateAWSBatchComputeEnvRequestDiags := r.ToSharedUpdateAWSBatchComputeEnvRequest(ctx)
	diags.Append(updateAWSBatchComputeEnvRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateAWSBatchComputeEnvRequest{
		ComputeEnvID:                    computeEnvID,
		WorkspaceID:                     workspaceID,
		UpdateAWSBatchComputeEnvRequest: *updateAWSBatchComputeEnvRequest,
	}

	return &out, diags
}

func (r *AWSBatchComputeEnvResourceModel) ToSharedAWSBatchComputeEnv(ctx context.Context) (*shared.AWSBatchComputeEnv, diag.Diagnostics) {
	var diags diag.Diagnostics

	computeEnvID := new(string)
	if !r.ComputeEnvID.IsUnknown() && !r.ComputeEnvID.IsNull() {
		*computeEnvID = r.ComputeEnvID.ValueString()
	} else {
		computeEnvID = nil
	}
	status := new(string)
	if !r.Status.IsUnknown() && !r.Status.IsNull() {
		*status = r.Status.ValueString()
	} else {
		status = nil
	}
	message := new(string)
	if !r.Message.IsUnknown() && !r.Message.IsNull() {
		*message = r.Message.ValueString()
	} else {
		message = nil
	}
	var name string
	name = r.Name.ValueString()

	var credentialsID string
	credentialsID = r.CredentialsID.ValueString()

	var region string
	region = r.Region.ValueString()

	var workDirectory string
	workDirectory = r.WorkDirectory.ValueString()

	workspaceID := new(int64)
	if !r.WorkspaceID.IsUnknown() && !r.WorkspaceID.IsNull() {
		*workspaceID = r.WorkspaceID.ValueInt64()
	} else {
		workspaceID = nil
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	var config *shared.Config
	if r.Config != nil {
		computeQueue := new(string)
		if !r.Config.ComputeQueue.IsUnknown() && !r.Config.ComputeQueue.IsNull() {
			*computeQueue = r.Config.ComputeQueue.ValueString()
		} else {
			computeQueue = nil
		}
		headQueue := new(string)
		if !r.Config.HeadQueue.IsUnknown() && !r.Config.HeadQueue.IsNull() {
			*headQueue = r.Config.HeadQueue.ValueString()
		} else {
			headQueue = nil
		}
		preRunScript := new(string)
		if !r.Config.PreRunScript.IsUnknown() && !r.Config.PreRunScript.IsNull() {
			*preRunScript = r.Config.PreRunScript.ValueString()
		} else {
			preRunScript = nil
		}
		postRunScript := new(string)
		if !r.Config.PostRunScript.IsUnknown() && !r.Config.PostRunScript.IsNull() {
			*postRunScript = r.Config.PostRunScript.ValueString()
		} else {
			postRunScript = nil
		}
		cliPath := new(string)
		if !r.Config.CliPath.IsUnknown() && !r.Config.CliPath.IsNull() {
			*cliPath = r.Config.CliPath.ValueString()
		} else {
			cliPath = nil
		}
		executionRole := new(string)
		if !r.Config.ExecutionRole.IsUnknown() && !r.Config.ExecutionRole.IsNull() {
			*executionRole = r.Config.ExecutionRole.ValueString()
		} else {
			executionRole = nil
		}
		computeJobRole := new(string)
		if !r.Config.ComputeJobRole.IsUnknown() && !r.Config.ComputeJobRole.IsNull() {
			*computeJobRole = r.Config.ComputeJobRole.ValueString()
		} else {
			computeJobRole = nil
		}
		headJobRole := new(string)
		if !r.Config.HeadJobRole.IsUnknown() && !r.Config.HeadJobRole.IsNull() {
			*headJobRole = r.Config.HeadJobRole.ValueString()
		} else {
			headJobRole = nil
		}
		headJobCpus := new(int)
		if !r.Config.HeadJobCpus.IsUnknown() && !r.Config.HeadJobCpus.IsNull() {
			*headJobCpus = int(r.Config.HeadJobCpus.ValueInt32())
		} else {
			headJobCpus = nil
		}
		headJobMemoryMb := new(int)
		if !r.Config.HeadJobMemoryMb.IsUnknown() && !r.Config.HeadJobMemoryMb.IsNull() {
			*headJobMemoryMb = int(r.Config.HeadJobMemoryMb.ValueInt32())
		} else {
			headJobMemoryMb = nil
		}
		enableFusion := new(bool)
		if !r.Config.EnableFusion.IsUnknown() && !r.Config.EnableFusion.IsNull() {
			*enableFusion = r.Config.EnableFusion.ValueBool()
		} else {
			enableFusion = nil
		}
		enableWave := new(bool)
		if !r.Config.EnableWave.IsUnknown() && !r.Config.EnableWave.IsNull() {
			*enableWave = r.Config.EnableWave.ValueBool()
		} else {
			enableWave = nil
		}
		var forge *shared.Forge
		if r.Config.Forge != nil {
			forgeType := new(shared.ForgeType)
			if !r.Config.Forge.ForgeType.IsUnknown() && !r.Config.Forge.ForgeType.IsNull() {
				*forgeType = shared.ForgeType(r.Config.Forge.ForgeType.ValueString())
			} else {
				forgeType = nil
			}
			minCpus := new(int)
			if !r.Config.Forge.MinCpus.IsUnknown() && !r.Config.Forge.MinCpus.IsNull() {
				*minCpus = int(r.Config.Forge.MinCpus.ValueInt32())
			} else {
				minCpus = nil
			}
			maxCpus := new(int)
			if !r.Config.Forge.MaxCpus.IsUnknown() && !r.Config.Forge.MaxCpus.IsNull() {
				*maxCpus = int(r.Config.Forge.MaxCpus.ValueInt32())
			} else {
				maxCpus = nil
			}
			gpuEnabled := new(bool)
			if !r.Config.Forge.GpuEnabled.IsUnknown() && !r.Config.Forge.GpuEnabled.IsNull() {
				*gpuEnabled = r.Config.Forge.GpuEnabled.ValueBool()
			} else {
				gpuEnabled = nil
			}
			instanceTypes := make([]string, 0, len(r.Config.Forge.InstanceTypes))
			for _, instanceTypesItem := range r.Config.Forge.InstanceTypes {
				instanceTypes = append(instanceTypes, instanceTypesItem.ValueString())
			}
			allocationStrategy := new(shared.AllocationStrategy)
			if !r.Config.Forge.AllocationStrategy.IsUnknown() && !r.Config.Forge.AllocationStrategy.IsNull() {
				*allocationStrategy = shared.AllocationStrategy(r.Config.Forge.AllocationStrategy.ValueString())
			} else {
				allocationStrategy = nil
			}
			bidPercentage := new(int)
			if !r.Config.Forge.BidPercentage.IsUnknown() && !r.Config.Forge.BidPercentage.IsNull() {
				*bidPercentage = int(r.Config.Forge.BidPercentage.ValueInt32())
			} else {
				bidPercentage = nil
			}
			ebsAutoScale := new(bool)
			if !r.Config.Forge.EbsAutoScale.IsUnknown() && !r.Config.Forge.EbsAutoScale.IsNull() {
				*ebsAutoScale = r.Config.Forge.EbsAutoScale.ValueBool()
			} else {
				ebsAutoScale = nil
			}
			ebsBlockSize := new(int)
			if !r.Config.Forge.EbsBlockSize.IsUnknown() && !r.Config.Forge.EbsBlockSize.IsNull() {
				*ebsBlockSize = int(r.Config.Forge.EbsBlockSize.ValueInt32())
			} else {
				ebsBlockSize = nil
			}
			vpcID := new(string)
			if !r.Config.Forge.VpcID.IsUnknown() && !r.Config.Forge.VpcID.IsNull() {
				*vpcID = r.Config.Forge.VpcID.ValueString()
			} else {
				vpcID = nil
			}
			subnets := make([]string, 0, len(r.Config.Forge.Subnets))
			for _, subnetsItem := range r.Config.Forge.Subnets {
				subnets = append(subnets, subnetsItem.ValueString())
			}
			securityGroups := make([]string, 0, len(r.Config.Forge.SecurityGroups))
			for _, securityGroupsItem := range r.Config.Forge.SecurityGroups {
				securityGroups = append(securityGroups, securityGroupsItem.ValueString())
			}
			ec2KeyPair := new(string)
			if !r.Config.Forge.Ec2KeyPair.IsUnknown() && !r.Config.Forge.Ec2KeyPair.IsNull() {
				*ec2KeyPair = r.Config.Forge.Ec2KeyPair.ValueString()
			} else {
				ec2KeyPair = nil
			}
			disposeOnDeletion := new(bool)
			if !r.Config.Forge.DisposeOnDeletion.IsUnknown() && !r.Config.Forge.DisposeOnDeletion.IsNull() {
				*disposeOnDeletion = r.Config.Forge.DisposeOnDeletion.ValueBool()
			} else {
				disposeOnDeletion = nil
			}
			fargateHeadEnabled := new(bool)
			if !r.Config.Forge.FargateHeadEnabled.IsUnknown() && !r.Config.Forge.FargateHeadEnabled.IsNull() {
				*fargateHeadEnabled = r.Config.Forge.FargateHeadEnabled.ValueBool()
			} else {
				fargateHeadEnabled = nil
			}
			efsCreate := new(bool)
			if !r.Config.Forge.EfsCreate.IsUnknown() && !r.Config.Forge.EfsCreate.IsNull() {
				*efsCreate = r.Config.Forge.EfsCreate.ValueBool()
			} else {
				efsCreate = nil
			}
			efsID := new(string)
			if !r.Config.Forge.EfsID.IsUnknown() && !r.Config.Forge.EfsID.IsNull() {
				*efsID = r.Config.Forge.EfsID.ValueString()
			} else {
				efsID = nil
			}
			efsMount := new(string)
			if !r.Config.Forge.EfsMount.IsUnknown() && !r.Config.Forge.EfsMount.IsNull() {
				*efsMount = r.Config.Forge.EfsMount.ValueString()
			} else {
				efsMount = nil
			}
			fsxName := new(string)
			if !r.Config.Forge.FsxName.IsUnknown() && !r.Config.Forge.FsxName.IsNull() {
				*fsxName = r.Config.Forge.FsxName.ValueString()
			} else {
				fsxName = nil
			}
			fsxMount := new(string)
			if !r.Config.Forge.FsxMount.IsUnknown() && !r.Config.Forge.FsxMount.IsNull() {
				*fsxMount = r.Config.Forge.FsxMount.ValueString()
			} else {
				fsxMount = nil
			}
			fsxSize := new(int)
			if !r.Config.Forge.FsxSize.IsUnknown() && !r.Config.Forge.FsxSize.IsNull() {
				*fsxSize = int(r.Config.Forge.FsxSize.ValueInt32())
			} else {
				fsxSize = nil
			}
			forge = &shared.Forge{
				ForgeType:          forgeType,
				MinCpus:            minCpus,
				MaxCpus:            maxCpus,
				GpuEnabled:         gpuEnabled,
				InstanceTypes:      instanceTypes,
				AllocationStrategy: allocationStrategy,
				BidPercentage:      bidPercentage,
				EbsAutoScale:       ebsAutoScale,
				EbsBlockSize:       ebsBlockSize,
				VpcID:              vpcID,
				Subnets:            subnets,
				SecurityGroups:     securityGroups,
				Ec2KeyPair:         ec2KeyPair,
				DisposeOnDeletion:  disposeOnDeletion,
				FargateHeadEnabled: fargateHeadEnabled,
				EfsCreate:          efsCreate,
				EfsID:              efsID,
				EfsMount:           efsMount,
				FsxName:            fsxName,
				FsxMount:           fsxMount,
				FsxSize:            fsxSize,
			}
		}
		config = &shared.Config{
			ComputeQueue:    computeQueue,
			HeadQueue:       headQueue,
			PreRunScript:    preRunScript,
			PostRunScript:   postRunScript,
			CliPath:         cliPath,
			ExecutionRole:   executionRole,
			ComputeJobRole:  computeJobRole,
			HeadJobRole:     headJobRole,
			HeadJobCpus:     headJobCpus,
			HeadJobMemoryMb: headJobMemoryMb,
			EnableFusion:    enableFusion,
			EnableWave:      enableWave,
			Forge:           forge,
		}
	}
	out := shared.AWSBatchComputeEnv{
		ComputeEnvID:  computeEnvID,
		Status:        status,
		Message:       message,
		Name:          name,
		CredentialsID: credentialsID,
		Region:        region,
		WorkDirectory: workDirectory,
		WorkspaceID:   workspaceID,
		Description:   description,
		Config:        config,
	}

	return &out, diags
}

func (r *AWSBatchComputeEnvResourceModel) ToSharedCreateAWSBatchComputeEnvRequest(ctx context.Context) (*shared.CreateAWSBatchComputeEnvRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	computeEnv, computeEnvDiags := r.ToSharedAWSBatchComputeEnv(ctx)
	diags.Append(computeEnvDiags...)

	if diags.HasError() {
		return nil, diags
	}

	labelIds := make([]int64, 0, len(r.LabelIds))
	for _, labelIdsItem := range r.LabelIds {
		labelIds = append(labelIds, labelIdsItem.ValueInt64())
	}
	out := shared.CreateAWSBatchComputeEnvRequest{
		ComputeEnv: computeEnv,
		LabelIds:   labelIds,
	}

	return &out, diags
}

func (r *AWSBatchComputeEnvResourceModel) ToSharedUpdateAWSBatchComputeEnvRequest(ctx context.Context) (*shared.UpdateAWSBatchComputeEnvRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	computeEnv, computeEnvDiags := r.ToSharedAWSBatchComputeEnv(ctx)
	diags.Append(computeEnvDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := shared.UpdateAWSBatchComputeEnvRequest{
		ComputeEnv: computeEnv,
	}

	return &out, diags
}
