// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/seqeralabs/terraform-provider-seqera/internal/sdk/models/operations"
	"github.com/seqeralabs/terraform-provider-seqera/internal/sdk/models/shared"
)

func (r *WorkspaceParticipantResourceModel) RefreshFromSharedAddWorkspaceParticipantResponse(ctx context.Context, resp *shared.AddWorkspaceParticipantResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		diags.Append(r.RefreshFromSharedWorkspaceParticipant(ctx, resp.Participant)...)

		if diags.HasError() {
			return diags
		}

	}

	return diags
}

func (r *WorkspaceParticipantResourceModel) RefreshFromSharedListWorkspaceParticipantsResponse(ctx context.Context, resp *shared.ListWorkspaceParticipantsResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		if len(resp.Participants) == 0 {
			diags.AddError("Unexpected response from API", "Missing response body array data.")
			return diags
		}

		diags.Append(r.RefreshFromSharedWorkspaceParticipant(ctx, &resp.Participants[0])...)

		if diags.HasError() {
			return diags
		}

		r.TotalSize = types.Int64PointerValue(resp.TotalSize)
	}

	return diags
}

func (r *WorkspaceParticipantResourceModel) RefreshFromSharedWorkspaceParticipant(ctx context.Context, resp *shared.WorkspaceParticipant) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Email = types.StringPointerValue(resp.Email)
		r.MemberID = types.Int64PointerValue(resp.MemberID)
		r.OrgID = types.Int64Value(resp.OrgID)
		r.ParticipantID = types.Int64PointerValue(resp.ParticipantID)
		r.ParticipantType = types.StringPointerValue(resp.ParticipantType)
		if resp.Role != nil {
			r.Role = types.StringValue(string(*resp.Role))
		} else {
			r.Role = types.StringNull()
		}
		r.TeamID = types.Int64PointerValue(resp.TeamID)
		r.UserName = types.StringPointerValue(resp.UserName)
		r.UserNameOrEmail = types.StringPointerValue(resp.UserNameOrEmail)
		r.WorkspaceID = types.Int64Value(resp.WorkspaceID)
	}

	return diags
}

func (r *WorkspaceParticipantResourceModel) ToOperationsCreateWorkspaceParticipantRequest(ctx context.Context) (*operations.CreateWorkspaceParticipantRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var orgID int64
	orgID = r.OrgID.ValueInt64()

	var workspaceID int64
	workspaceID = r.WorkspaceID.ValueInt64()

	addWorkspaceParticipantRequest, addWorkspaceParticipantRequestDiags := r.ToSharedAddWorkspaceParticipantRequest(ctx)
	diags.Append(addWorkspaceParticipantRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreateWorkspaceParticipantRequest{
		OrgID:                          orgID,
		WorkspaceID:                    workspaceID,
		AddWorkspaceParticipantRequest: *addWorkspaceParticipantRequest,
	}

	return &out, diags
}

func (r *WorkspaceParticipantResourceModel) ToOperationsDeleteWorkspaceParticipantRequest(ctx context.Context) (*operations.DeleteWorkspaceParticipantRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var orgID int64
	orgID = r.OrgID.ValueInt64()

	var workspaceID int64
	workspaceID = r.WorkspaceID.ValueInt64()

	var participantID int64
	participantID = r.ParticipantID.ValueInt64()

	out := operations.DeleteWorkspaceParticipantRequest{
		OrgID:         orgID,
		WorkspaceID:   workspaceID,
		ParticipantID: participantID,
	}

	return &out, diags
}

func (r *WorkspaceParticipantResourceModel) ToOperationsListWorkspaceParticipantsRequest(ctx context.Context) (*operations.ListWorkspaceParticipantsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var orgID int64
	orgID = r.OrgID.ValueInt64()

	var workspaceID int64
	workspaceID = r.WorkspaceID.ValueInt64()

	out := operations.ListWorkspaceParticipantsRequest{
		OrgID:       orgID,
		WorkspaceID: workspaceID,
	}

	return &out, diags
}

func (r *WorkspaceParticipantResourceModel) ToOperationsUpdateWorkspaceParticipantRoleRequest(ctx context.Context) (*operations.UpdateWorkspaceParticipantRoleRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var orgID int64
	orgID = r.OrgID.ValueInt64()

	var workspaceID int64
	workspaceID = r.WorkspaceID.ValueInt64()

	var participantID int64
	participantID = r.ParticipantID.ValueInt64()

	updateWorkspaceParticipantRoleRequest, updateWorkspaceParticipantRoleRequestDiags := r.ToSharedUpdateWorkspaceParticipantRoleRequest(ctx)
	diags.Append(updateWorkspaceParticipantRoleRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateWorkspaceParticipantRoleRequest{
		OrgID:                                 orgID,
		WorkspaceID:                           workspaceID,
		ParticipantID:                         participantID,
		UpdateWorkspaceParticipantRoleRequest: *updateWorkspaceParticipantRoleRequest,
	}

	return &out, diags
}

func (r *WorkspaceParticipantResourceModel) ToSharedAddWorkspaceParticipantRequest(ctx context.Context) (*shared.AddWorkspaceParticipantRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	participant, participantDiags := r.ToSharedWorkspaceParticipant(ctx)
	diags.Append(participantDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := shared.AddWorkspaceParticipantRequest{
		Participant: *participant,
	}

	return &out, diags
}

func (r *WorkspaceParticipantResourceModel) ToSharedUpdateWorkspaceParticipantRoleRequest(ctx context.Context) (*shared.UpdateWorkspaceParticipantRoleRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	role := shared.WspRole(r.Role.ValueString())
	out := shared.UpdateWorkspaceParticipantRoleRequest{
		Role: role,
	}

	return &out, diags
}

func (r *WorkspaceParticipantResourceModel) ToSharedWorkspaceParticipant(ctx context.Context) (*shared.WorkspaceParticipant, diag.Diagnostics) {
	var diags diag.Diagnostics

	participantID := new(int64)
	if !r.ParticipantID.IsUnknown() && !r.ParticipantID.IsNull() {
		*participantID = r.ParticipantID.ValueInt64()
	} else {
		participantID = nil
	}
	var orgID int64
	orgID = r.OrgID.ValueInt64()

	var workspaceID int64
	workspaceID = r.WorkspaceID.ValueInt64()

	memberID := new(int64)
	if !r.MemberID.IsUnknown() && !r.MemberID.IsNull() {
		*memberID = r.MemberID.ValueInt64()
	} else {
		memberID = nil
	}
	teamID := new(int64)
	if !r.TeamID.IsUnknown() && !r.TeamID.IsNull() {
		*teamID = r.TeamID.ValueInt64()
	} else {
		teamID = nil
	}
	userNameOrEmail := new(string)
	if !r.UserNameOrEmail.IsUnknown() && !r.UserNameOrEmail.IsNull() {
		*userNameOrEmail = r.UserNameOrEmail.ValueString()
	} else {
		userNameOrEmail = nil
	}
	role := new(shared.WspRole)
	if !r.Role.IsUnknown() && !r.Role.IsNull() {
		*role = shared.WspRole(r.Role.ValueString())
	} else {
		role = nil
	}
	userName := new(string)
	if !r.UserName.IsUnknown() && !r.UserName.IsNull() {
		*userName = r.UserName.ValueString()
	} else {
		userName = nil
	}
	email := new(string)
	if !r.Email.IsUnknown() && !r.Email.IsNull() {
		*email = r.Email.ValueString()
	} else {
		email = nil
	}
	participantType := new(string)
	if !r.ParticipantType.IsUnknown() && !r.ParticipantType.IsNull() {
		*participantType = r.ParticipantType.ValueString()
	} else {
		participantType = nil
	}
	out := shared.WorkspaceParticipant{
		ParticipantID:   participantID,
		OrgID:           orgID,
		WorkspaceID:     workspaceID,
		MemberID:        memberID,
		TeamID:          teamID,
		UserNameOrEmail: userNameOrEmail,
		Role:            role,
		UserName:        userName,
		Email:           email,
		ParticipantType: participantType,
	}

	return &out, diags
}
