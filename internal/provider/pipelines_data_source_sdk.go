// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/speakeasy/terraform-provider-seqera/internal/provider/typeconvert"
	tfTypes "github.com/speakeasy/terraform-provider-seqera/internal/provider/types"
	"github.com/speakeasy/terraform-provider-seqera/internal/sdk/models/operations"
	"github.com/speakeasy/terraform-provider-seqera/internal/sdk/models/shared"
)

func (r *PipelinesDataSourceModel) RefreshFromSharedListPipelinesResponse(ctx context.Context, resp *shared.ListPipelinesResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Pipelines = []tfTypes.PipelineDbDto{}
		if len(r.Pipelines) > len(resp.Pipelines) {
			r.Pipelines = r.Pipelines[:len(resp.Pipelines)]
		}
		for pipelinesCount, pipelinesItem := range resp.Pipelines {
			var pipelines tfTypes.PipelineDbDto
			if pipelinesItem.ComputeEnv == nil {
				pipelines.ComputeEnv = nil
			} else {
				pipelines.ComputeEnv = &tfTypes.ComputeEnvDbDto{}
				pipelines.ComputeEnv.ID = types.StringPointerValue(pipelinesItem.ComputeEnv.ID)
				pipelines.ComputeEnv.Name = types.StringPointerValue(pipelinesItem.ComputeEnv.Name)
				pipelines.ComputeEnv.Platform = types.StringPointerValue(pipelinesItem.ComputeEnv.Platform)
				pipelines.ComputeEnv.Region = types.StringPointerValue(pipelinesItem.ComputeEnv.Region)
			}
			pipelines.Deleted = types.BoolPointerValue(pipelinesItem.Deleted)
			pipelines.Description = types.StringPointerValue(pipelinesItem.Description)
			pipelines.Icon = types.StringPointerValue(pipelinesItem.Icon)
			pipelines.Labels = []tfTypes.LabelDbDto{}
			for labelsCount, labelsItem := range pipelinesItem.Labels {
				var labels tfTypes.LabelDbDto
				labels.DateCreated = types.StringPointerValue(typeconvert.TimePointerToStringPointer(labelsItem.DateCreated))
				labels.ID = types.Int64PointerValue(labelsItem.ID)
				labels.IsDefault = types.BoolPointerValue(labelsItem.IsDefault)
				labels.Name = types.StringPointerValue(labelsItem.Name)
				labels.Resource = types.BoolPointerValue(labelsItem.Resource)
				labels.Value = types.StringPointerValue(labelsItem.Value)
				if labelsCount+1 > len(pipelines.Labels) {
					pipelines.Labels = append(pipelines.Labels, labels)
				} else {
					pipelines.Labels[labelsCount].DateCreated = labels.DateCreated
					pipelines.Labels[labelsCount].ID = labels.ID
					pipelines.Labels[labelsCount].IsDefault = labels.IsDefault
					pipelines.Labels[labelsCount].Name = labels.Name
					pipelines.Labels[labelsCount].Resource = labels.Resource
					pipelines.Labels[labelsCount].Value = labels.Value
				}
			}
			pipelines.LastUpdated = types.StringPointerValue(typeconvert.TimePointerToStringPointer(pipelinesItem.LastUpdated))
			pipelines.Name = types.StringPointerValue(pipelinesItem.Name)
			pipelines.OptimizationID = types.StringPointerValue(pipelinesItem.OptimizationID)
			if pipelinesItem.OptimizationStatus != nil {
				pipelines.OptimizationStatus = types.StringValue(string(*pipelinesItem.OptimizationStatus))
			} else {
				pipelines.OptimizationStatus = types.StringNull()
			}
			pipelines.OptimizationTargets = types.StringPointerValue(pipelinesItem.OptimizationTargets)
			pipelines.OrgID = types.Int64PointerValue(pipelinesItem.OrgID)
			pipelines.OrgName = types.StringPointerValue(pipelinesItem.OrgName)
			pipelines.PipelineID = types.Int64PointerValue(pipelinesItem.PipelineID)
			pipelines.Repository = types.StringPointerValue(pipelinesItem.Repository)
			pipelines.UserFirstName = types.StringPointerValue(pipelinesItem.UserFirstName)
			pipelines.UserID = types.Int64PointerValue(pipelinesItem.UserID)
			pipelines.UserLastName = types.StringPointerValue(pipelinesItem.UserLastName)
			pipelines.UserName = types.StringPointerValue(pipelinesItem.UserName)
			pipelines.Visibility = types.StringPointerValue(pipelinesItem.Visibility)
			pipelines.WorkspaceID = types.Int64PointerValue(pipelinesItem.WorkspaceID)
			pipelines.WorkspaceName = types.StringPointerValue(pipelinesItem.WorkspaceName)
			if pipelinesCount+1 > len(r.Pipelines) {
				r.Pipelines = append(r.Pipelines, pipelines)
			} else {
				r.Pipelines[pipelinesCount].ComputeEnv = pipelines.ComputeEnv
				r.Pipelines[pipelinesCount].Deleted = pipelines.Deleted
				r.Pipelines[pipelinesCount].Description = pipelines.Description
				r.Pipelines[pipelinesCount].Icon = pipelines.Icon
				r.Pipelines[pipelinesCount].Labels = pipelines.Labels
				r.Pipelines[pipelinesCount].LastUpdated = pipelines.LastUpdated
				r.Pipelines[pipelinesCount].Name = pipelines.Name
				r.Pipelines[pipelinesCount].OptimizationID = pipelines.OptimizationID
				r.Pipelines[pipelinesCount].OptimizationStatus = pipelines.OptimizationStatus
				r.Pipelines[pipelinesCount].OptimizationTargets = pipelines.OptimizationTargets
				r.Pipelines[pipelinesCount].OrgID = pipelines.OrgID
				r.Pipelines[pipelinesCount].OrgName = pipelines.OrgName
				r.Pipelines[pipelinesCount].PipelineID = pipelines.PipelineID
				r.Pipelines[pipelinesCount].Repository = pipelines.Repository
				r.Pipelines[pipelinesCount].UserFirstName = pipelines.UserFirstName
				r.Pipelines[pipelinesCount].UserID = pipelines.UserID
				r.Pipelines[pipelinesCount].UserLastName = pipelines.UserLastName
				r.Pipelines[pipelinesCount].UserName = pipelines.UserName
				r.Pipelines[pipelinesCount].Visibility = pipelines.Visibility
				r.Pipelines[pipelinesCount].WorkspaceID = pipelines.WorkspaceID
				r.Pipelines[pipelinesCount].WorkspaceName = pipelines.WorkspaceName
			}
		}
		r.TotalSize = types.Int64PointerValue(resp.TotalSize)
	}

	return diags
}

func (r *PipelinesDataSourceModel) ToOperationsListPipelinesRequest(ctx context.Context) (*operations.ListPipelinesRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := make([]shared.PipelineQueryAttribute, 0, len(r.Attributes))
	for _, attributesItem := range r.Attributes {
		attributes = append(attributes, shared.PipelineQueryAttribute(attributesItem.ValueString()))
	}
	workspaceID := new(int64)
	if !r.WorkspaceID.IsUnknown() && !r.WorkspaceID.IsNull() {
		*workspaceID = r.WorkspaceID.ValueInt64()
	} else {
		workspaceID = nil
	}
	max := new(int)
	if !r.Max.IsUnknown() && !r.Max.IsNull() {
		*max = int(r.Max.ValueInt32())
	} else {
		max = nil
	}
	offset := new(int)
	if !r.Offset.IsUnknown() && !r.Offset.IsNull() {
		*offset = int(r.Offset.ValueInt32())
	} else {
		offset = nil
	}
	search := new(string)
	if !r.Search.IsUnknown() && !r.Search.IsNull() {
		*search = r.Search.ValueString()
	} else {
		search = nil
	}
	visibility := new(string)
	if !r.Visibility.IsUnknown() && !r.Visibility.IsNull() {
		*visibility = r.Visibility.ValueString()
	} else {
		visibility = nil
	}
	out := operations.ListPipelinesRequest{
		Attributes:  attributes,
		WorkspaceID: workspaceID,
		Max:         max,
		Offset:      offset,
		Search:      search,
		Visibility:  visibility,
	}

	return &out, diags
}
