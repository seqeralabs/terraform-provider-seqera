// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/speakeasy/terraform-provider-seqera/internal/provider/typeconvert"
	tfTypes "github.com/speakeasy/terraform-provider-seqera/internal/provider/types"
	"github.com/speakeasy/terraform-provider-seqera/internal/sdk/models/operations"
	"github.com/speakeasy/terraform-provider-seqera/internal/sdk/models/shared"
)

func (r *ComputeEnvsDataSourceModel) ToOperationsListComputeEnvsRequest(ctx context.Context) (*operations.ListComputeEnvsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	status := new(string)
	if !r.Status.IsUnknown() && !r.Status.IsNull() {
		*status = r.Status.ValueString()
	} else {
		status = nil
	}
	workspaceID := new(int64)
	if !r.WorkspaceID.IsUnknown() && !r.WorkspaceID.IsNull() {
		*workspaceID = r.WorkspaceID.ValueInt64()
	} else {
		workspaceID = nil
	}
	out := operations.ListComputeEnvsRequest{
		Status:      status,
		WorkspaceID: workspaceID,
	}

	return &out, diags
}

func (r *ComputeEnvsDataSourceModel) RefreshFromSharedListComputeEnvsResponse(ctx context.Context, resp *shared.ListComputeEnvsResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.ComputeEnvs = []tfTypes.ListComputeEnvsResponseEntry{}
		if len(r.ComputeEnvs) > len(resp.ComputeEnvs) {
			r.ComputeEnvs = r.ComputeEnvs[:len(resp.ComputeEnvs)]
		}
		for computeEnvsCount, computeEnvsItem := range resp.ComputeEnvs {
			var computeEnvs tfTypes.ListComputeEnvsResponseEntry
			computeEnvs.CredentialsID = types.StringPointerValue(computeEnvsItem.CredentialsID)
			computeEnvs.ID = types.StringPointerValue(computeEnvsItem.ID)
			computeEnvs.LastUsed = types.StringPointerValue(typeconvert.TimePointerToStringPointer(computeEnvsItem.LastUsed))
			computeEnvs.Message = types.StringPointerValue(computeEnvsItem.Message)
			computeEnvs.Name = types.StringPointerValue(computeEnvsItem.Name)
			computeEnvs.Platform = types.StringPointerValue(computeEnvsItem.Platform)
			computeEnvs.Primary = types.BoolPointerValue(computeEnvsItem.Primary)
			computeEnvs.Region = types.StringPointerValue(computeEnvsItem.Region)
			if computeEnvsItem.Status != nil {
				computeEnvs.Status = types.StringValue(string(*computeEnvsItem.Status))
			} else {
				computeEnvs.Status = types.StringNull()
			}
			computeEnvs.Visibility = types.StringPointerValue(computeEnvsItem.Visibility)
			computeEnvs.WorkDir = types.StringPointerValue(computeEnvsItem.WorkDir)
			computeEnvs.WorkspaceName = types.StringPointerValue(computeEnvsItem.WorkspaceName)
			if computeEnvsCount+1 > len(r.ComputeEnvs) {
				r.ComputeEnvs = append(r.ComputeEnvs, computeEnvs)
			} else {
				r.ComputeEnvs[computeEnvsCount].CredentialsID = computeEnvs.CredentialsID
				r.ComputeEnvs[computeEnvsCount].ID = computeEnvs.ID
				r.ComputeEnvs[computeEnvsCount].LastUsed = computeEnvs.LastUsed
				r.ComputeEnvs[computeEnvsCount].Message = computeEnvs.Message
				r.ComputeEnvs[computeEnvsCount].Name = computeEnvs.Name
				r.ComputeEnvs[computeEnvsCount].Platform = computeEnvs.Platform
				r.ComputeEnvs[computeEnvsCount].Primary = computeEnvs.Primary
				r.ComputeEnvs[computeEnvsCount].Region = computeEnvs.Region
				r.ComputeEnvs[computeEnvsCount].Status = computeEnvs.Status
				r.ComputeEnvs[computeEnvsCount].Visibility = computeEnvs.Visibility
				r.ComputeEnvs[computeEnvsCount].WorkDir = computeEnvs.WorkDir
				r.ComputeEnvs[computeEnvsCount].WorkspaceName = computeEnvs.WorkspaceName
			}
		}
	}

	return diags
}
