// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	tfTypes "github.com/seqeralabs/terraform-provider-seqera/internal/provider/types"
	"github.com/seqeralabs/terraform-provider-seqera/internal/sdk"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &WorkflowsDataSource{}
var _ datasource.DataSourceWithConfigure = &WorkflowsDataSource{}

func NewWorkflowsDataSource() datasource.DataSource {
	return &WorkflowsDataSource{}
}

// WorkflowsDataSource is the data source implementation.
type WorkflowsDataSource struct {
	// Provider configured SDK client.
	client *sdk.Seqera
}

// WorkflowsDataSourceModel describes the data model.
type WorkflowsDataSourceModel struct {
	Attributes    []types.String              `queryParam:"style=form,explode=false,name=attributes" tfsdk:"attributes"`
	JobInfo       *tfTypes.JobInfoDto         `tfsdk:"job_info"`
	Labels        []tfTypes.LabelDbDto        `tfsdk:"labels"`
	Messages      []types.String              `tfsdk:"messages"`
	Optimized     types.Bool                  `tfsdk:"optimized"`
	OrgID         types.Int64                 `tfsdk:"org_id"`
	OrgName       types.String                `tfsdk:"org_name"`
	Platform      *tfTypes.ComputePlatformDto `tfsdk:"platform"`
	Progress      *tfTypes.ProgressData       `tfsdk:"progress"`
	Workflow      *tfTypes.Workflow           `tfsdk:"workflow"`
	WorkflowID    types.String                `tfsdk:"workflow_id"`
	WorkspaceID   types.Int64                 `queryParam:"style=form,explode=true,name=workspaceId" tfsdk:"workspace_id"`
	WorkspaceName types.String                `tfsdk:"workspace_name"`
}

// Metadata returns the data source type name.
func (r *WorkflowsDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_workflows"
}

// Schema defines the schema for the data source.
func (r *WorkflowsDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "Manage workflow executions and pipeline runs.\n\nWorkflows represent individual executions of Nextflow pipelines,\ncontaining execution status, parameters, results, and monitoring\ninformation for computational workflows.\n",

		Attributes: map[string]schema.Attribute{
			"attributes": schema.ListAttribute{
				Optional:    true,
				ElementType: types.StringType,
				Description: `Comma-separated list of attributes to retrieve. Returns an empty value for each attribute not specified.`,
			},
			"job_info": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"exit_code": schema.Int32Attribute{
						Computed: true,
					},
					"id": schema.Int64Attribute{
						Computed: true,
					},
					"message": schema.StringAttribute{
						Computed: true,
					},
					"operation_id": schema.StringAttribute{
						Computed: true,
					},
					"status": schema.StringAttribute{
						Computed: true,
					},
				},
			},
			"labels": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"date_created": schema.StringAttribute{
							Computed:    true,
							Description: `Timestamp when the label was created`,
						},
						"id": schema.Int64Attribute{
							Computed:    true,
							Description: `Unique numeric identifier for the label`,
						},
						"is_default": schema.BoolAttribute{
							Computed:    true,
							Description: `Flag indicating if this is a default system label`,
						},
						"name": schema.StringAttribute{
							Computed:    true,
							Description: `Name or key of the label`,
						},
						"resource": schema.BoolAttribute{
							Computed:    true,
							Description: `Flag indicating if this is a resource-level label`,
						},
						"value": schema.StringAttribute{
							Computed:    true,
							Description: `Value associated with the label`,
						},
					},
				},
			},
			"messages": schema.ListAttribute{
				Computed:    true,
				ElementType: types.StringType,
			},
			"optimized": schema.BoolAttribute{
				Computed: true,
			},
			"org_id": schema.Int64Attribute{
				Computed: true,
			},
			"org_name": schema.StringAttribute{
				Computed: true,
			},
			"platform": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"id": schema.StringAttribute{
						Computed: true,
					},
					"name": schema.StringAttribute{
						Computed: true,
					},
				},
			},
			"progress": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"processes_progress": schema.ListNestedAttribute{
						Computed: true,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"aborted": schema.Int64Attribute{
									Computed: true,
								},
								"cached": schema.Int64Attribute{
									Computed: true,
								},
								"cpu_efficiency": schema.Float32Attribute{
									Computed: true,
								},
								"cpu_load": schema.Int64Attribute{
									Computed:           true,
									DeprecationMessage: `This will be removed in a future release, please migrate away from it as soon as possible`,
								},
								"cpu_time": schema.Int64Attribute{
									Computed:           true,
									DeprecationMessage: `This will be removed in a future release, please migrate away from it as soon as possible`,
								},
								"cpus": schema.Int64Attribute{
									Computed:           true,
									DeprecationMessage: `This will be removed in a future release, please migrate away from it as soon as possible`,
								},
								"date_created": schema.StringAttribute{
									Computed: true,
								},
								"failed": schema.Int64Attribute{
									Computed: true,
								},
								"inv_ctx_switch": schema.Int64Attribute{
									Computed:           true,
									DeprecationMessage: `This will be removed in a future release, please migrate away from it as soon as possible`,
								},
								"last_updated": schema.StringAttribute{
									Computed: true,
								},
								"load_cpus": schema.Int64Attribute{
									Computed: true,
								},
								"load_memory": schema.Int64Attribute{
									Computed: true,
								},
								"load_tasks": schema.Int64Attribute{
									Computed:           true,
									DeprecationMessage: `This will be removed in a future release, please migrate away from it as soon as possible`,
								},
								"memory_efficiency": schema.Float32Attribute{
									Computed: true,
								},
								"memory_req": schema.Int64Attribute{
									Computed:           true,
									DeprecationMessage: `This will be removed in a future release, please migrate away from it as soon as possible`,
								},
								"memory_rss": schema.Int64Attribute{
									Computed:           true,
									DeprecationMessage: `This will be removed in a future release, please migrate away from it as soon as possible`,
								},
								"peak_cpus": schema.Int64Attribute{
									Computed: true,
								},
								"peak_memory": schema.Int64Attribute{
									Computed: true,
								},
								"peak_tasks": schema.Int64Attribute{
									Computed: true,
								},
								"pending": schema.Int64Attribute{
									Computed: true,
								},
								"process": schema.StringAttribute{
									Computed: true,
								},
								"read_bytes": schema.Int64Attribute{
									Computed:           true,
									DeprecationMessage: `This will be removed in a future release, please migrate away from it as soon as possible`,
								},
								"running": schema.Int64Attribute{
									Computed: true,
								},
								"submitted": schema.Int64Attribute{
									Computed: true,
								},
								"succeeded": schema.Int64Attribute{
									Computed: true,
								},
								"vol_ctx_switch": schema.Int64Attribute{
									Computed:           true,
									DeprecationMessage: `This will be removed in a future release, please migrate away from it as soon as possible`,
								},
								"write_bytes": schema.Int64Attribute{
									Computed:           true,
									DeprecationMessage: `This will be removed in a future release, please migrate away from it as soon as possible`,
								},
							},
						},
					},
					"total_processes": schema.Int32Attribute{
						Computed: true,
					},
					"workflow_progress": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"aborted": schema.Int64Attribute{
								Computed: true,
							},
							"cached": schema.Int64Attribute{
								Computed: true,
							},
							"cost": schema.Float64Attribute{
								Computed: true,
							},
							"cpu_efficiency": schema.Float32Attribute{
								Computed: true,
							},
							"cpu_load": schema.Int64Attribute{
								Computed: true,
							},
							"cpu_time": schema.Int64Attribute{
								Computed: true,
							},
							"cpus": schema.Int64Attribute{
								Computed: true,
							},
							"date_created": schema.StringAttribute{
								Computed: true,
							},
							"executors": schema.ListAttribute{
								Computed:    true,
								ElementType: types.StringType,
							},
							"failed": schema.Int64Attribute{
								Computed: true,
							},
							"inv_ctx_switch": schema.Int64Attribute{
								Computed: true,
							},
							"last_updated": schema.StringAttribute{
								Computed: true,
							},
							"load_cpus": schema.Int64Attribute{
								Computed: true,
							},
							"load_memory": schema.Int64Attribute{
								Computed: true,
							},
							"load_tasks": schema.Int64Attribute{
								Computed: true,
							},
							"memory_efficiency": schema.Float32Attribute{
								Computed: true,
							},
							"memory_req": schema.Int64Attribute{
								Computed: true,
							},
							"memory_rss": schema.Int64Attribute{
								Computed: true,
							},
							"peak_cpus": schema.Int64Attribute{
								Computed: true,
							},
							"peak_memory": schema.Int64Attribute{
								Computed: true,
							},
							"peak_tasks": schema.Int64Attribute{
								Computed: true,
							},
							"pending": schema.Int64Attribute{
								Computed: true,
							},
							"read_bytes": schema.Int64Attribute{
								Computed: true,
							},
							"running": schema.Int64Attribute{
								Computed: true,
							},
							"submitted": schema.Int64Attribute{
								Computed: true,
							},
							"succeeded": schema.Int64Attribute{
								Computed: true,
							},
							"vol_ctx_switch": schema.Int64Attribute{
								Computed: true,
							},
							"write_bytes": schema.Int64Attribute{
								Computed: true,
							},
						},
					},
				},
			},
			"workflow": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"command_line": schema.StringAttribute{
						Computed: true,
					},
					"commit_id": schema.StringAttribute{
						Computed: true,
					},
					"complete": schema.StringAttribute{
						Computed: true,
					},
					"config_files": schema.ListAttribute{
						Computed:    true,
						ElementType: types.StringType,
					},
					"config_text": schema.StringAttribute{
						Computed: true,
					},
					"container": schema.StringAttribute{
						Computed: true,
					},
					"container_engine": schema.StringAttribute{
						Computed: true,
					},
					"date_created": schema.StringAttribute{
						Computed: true,
					},
					"deleted": schema.BoolAttribute{
						Computed: true,
					},
					"duration": schema.Int64Attribute{
						Computed: true,
					},
					"error_message": schema.StringAttribute{
						Computed: true,
					},
					"error_report": schema.StringAttribute{
						Computed: true,
					},
					"exit_status": schema.Int32Attribute{
						Computed: true,
					},
					"home_dir": schema.StringAttribute{
						Computed: true,
					},
					"id": schema.StringAttribute{
						Computed: true,
					},
					"last_updated": schema.StringAttribute{
						Computed: true,
					},
					"launch_dir": schema.StringAttribute{
						Computed: true,
					},
					"launch_id": schema.StringAttribute{
						Computed: true,
					},
					"log_file": schema.StringAttribute{
						Computed: true,
					},
					"manifest": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"author": schema.StringAttribute{
								Computed: true,
							},
							"default_branch": schema.StringAttribute{
								Computed: true,
							},
							"description": schema.StringAttribute{
								Computed: true,
							},
							"gitmodules": schema.StringAttribute{
								Computed: true,
							},
							"home_page": schema.StringAttribute{
								Computed: true,
							},
							"icon": schema.StringAttribute{
								Computed: true,
							},
							"main_script": schema.StringAttribute{
								Computed: true,
							},
							"name": schema.StringAttribute{
								Computed: true,
							},
							"nextflow_version": schema.StringAttribute{
								Computed: true,
							},
							"version": schema.StringAttribute{
								Computed: true,
							},
						},
					},
					"nextflow": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"build": schema.StringAttribute{
								Computed: true,
							},
							"timestamp": schema.StringAttribute{
								Computed: true,
							},
							"version": schema.StringAttribute{
								Computed: true,
							},
						},
					},
					"operation_id": schema.StringAttribute{
						Computed: true,
					},
					"out_file": schema.StringAttribute{
						Computed: true,
					},
					"owner_id": schema.Int64Attribute{
						Computed: true,
					},
					"params": schema.MapAttribute{
						Computed:    true,
						ElementType: types.StringType,
					},
					"profile": schema.StringAttribute{
						Computed: true,
					},
					"project_dir": schema.StringAttribute{
						Computed: true,
					},
					"project_name": schema.StringAttribute{
						Computed: true,
					},
					"repository": schema.StringAttribute{
						Computed: true,
					},
					"requires_attention": schema.BoolAttribute{
						Computed: true,
					},
					"resume": schema.BoolAttribute{
						Computed: true,
					},
					"revision": schema.StringAttribute{
						Computed: true,
					},
					"run_name": schema.StringAttribute{
						Computed: true,
					},
					"script_file": schema.StringAttribute{
						Computed: true,
					},
					"script_id": schema.StringAttribute{
						Computed: true,
					},
					"script_name": schema.StringAttribute{
						Computed: true,
					},
					"session_id": schema.StringAttribute{
						Computed: true,
					},
					"start": schema.StringAttribute{
						Computed: true,
					},
					"stats": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"cached_count": schema.Int32Attribute{
								Computed: true,
							},
							"cached_count_fmt": schema.StringAttribute{
								Computed: true,
							},
							"cached_duration": schema.Int64Attribute{
								Computed: true,
							},
							"cached_pct": schema.Float32Attribute{
								Computed: true,
							},
							"compute_time_fmt": schema.StringAttribute{
								Computed: true,
							},
							"failed_count": schema.Int32Attribute{
								Computed: true,
							},
							"failed_count_fmt": schema.StringAttribute{
								Computed: true,
							},
							"failed_duration": schema.Int64Attribute{
								Computed: true,
							},
							"failed_pct": schema.Float32Attribute{
								Computed: true,
							},
							"ignored_count": schema.Int32Attribute{
								Computed: true,
							},
							"ignored_count_fmt": schema.StringAttribute{
								Computed: true,
							},
							"ignored_pct": schema.Float32Attribute{
								Computed: true,
							},
							"succeed_count": schema.Int32Attribute{
								Computed: true,
							},
							"succeed_count_fmt": schema.StringAttribute{
								Computed: true,
							},
							"succeed_duration": schema.Int64Attribute{
								Computed: true,
							},
							"succeed_pct": schema.Float32Attribute{
								Computed: true,
							},
						},
					},
					"status": schema.StringAttribute{
						Computed: true,
					},
					"submit": schema.StringAttribute{
						Computed: true,
					},
					"success": schema.BoolAttribute{
						Computed: true,
					},
					"user_name": schema.StringAttribute{
						Computed: true,
					},
					"work_dir": schema.StringAttribute{
						Computed: true,
					},
				},
			},
			"workflow_id": schema.StringAttribute{
				Required:    true,
				Description: `Workflow string identifier`,
			},
			"workspace_id": schema.Int64Attribute{
				Computed:    true,
				Optional:    true,
				Description: `Workspace numeric identifier`,
			},
			"workspace_name": schema.StringAttribute{
				Computed: true,
			},
		},
	}
}

func (r *WorkflowsDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.Seqera)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.Seqera, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *WorkflowsDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *WorkflowsDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsDescribeWorkflowRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Workflows.DescribeWorkflow(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.DescribeWorkflowResponse != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedDescribeWorkflowResponse(ctx, res.DescribeWorkflowResponse)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
