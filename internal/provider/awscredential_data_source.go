// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/seqeralabs/terraform-provider-seqera/internal/sdk"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &AWSCredentialDataSource{}
var _ datasource.DataSourceWithConfigure = &AWSCredentialDataSource{}

func NewAWSCredentialDataSource() datasource.DataSource {
	return &AWSCredentialDataSource{}
}

// AWSCredentialDataSource is the data source implementation.
type AWSCredentialDataSource struct {
	// Provider configured SDK client.
	client *sdk.Seqera
}

// AWSCredentialDataSourceModel describes the data model.
type AWSCredentialDataSourceModel struct {
	AccessKey     types.String `tfsdk:"access_key"`
	CredentialsID types.String `tfsdk:"credentials_id"`
	Name          types.String `tfsdk:"name"`
	ProviderType  types.String `tfsdk:"provider_type"`
	WorkspaceID   types.Int64  `queryParam:"style=form,explode=true,name=workspaceId" tfsdk:"workspace_id"`
}

// Metadata returns the data source type name.
func (r *AWSCredentialDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_aws_credential"
}

// Schema defines the schema for the data source.
func (r *AWSCredentialDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "Manage AWS credentials in Seqera platform using this resource.\n\nAWS credentials store authentication information for accessing AWS services\nwithin the Seqera Platform workflows.\n",

		Attributes: map[string]schema.Attribute{
			"access_key": schema.StringAttribute{
				Computed:    true,
				Description: `AWS access key ID (required). Must start with AKIA (standard) or ASIA (temporary).`,
			},
			"credentials_id": schema.StringAttribute{
				Computed:    true,
				Description: `Credentials string identifier`,
			},
			"name": schema.StringAttribute{
				Computed:    true,
				Description: `Display name for the credential (max 100 characters)`,
			},
			"provider_type": schema.StringAttribute{
				Computed:    true,
				Description: `Cloud provider type (automatically set to "aws")`,
			},
			"workspace_id": schema.Int64Attribute{
				Optional:    true,
				Description: `Workspace numeric identifier`,
			},
		},
	}
}

func (r *AWSCredentialDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.Seqera)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.Seqera, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *AWSCredentialDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *AWSCredentialDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsDescribeAWSCredentialsRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Credentials.DescribeAWSCredentials(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.DescribeAWSCredentialsResponse != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedDescribeAWSCredentialsResponse(ctx, res.DescribeAWSCredentialsResponse)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
