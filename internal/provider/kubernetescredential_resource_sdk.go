// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/seqeralabs/terraform-provider-seqera/internal/sdk/models/operations"
	"github.com/seqeralabs/terraform-provider-seqera/internal/sdk/models/shared"
)

func (r *KubernetesCredentialResourceModel) RefreshFromSharedCreateKubernetesCredentialsResponse(ctx context.Context, resp *shared.CreateKubernetesCredentialsResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.CredentialsID = types.StringPointerValue(resp.CredentialsID)
	}

	return diags
}

func (r *KubernetesCredentialResourceModel) RefreshFromSharedDescribeKubernetesCredentialsResponse(ctx context.Context, resp *shared.DescribeKubernetesCredentialsResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		diags.Append(r.RefreshFromSharedKubernetesCredentialOutput(ctx, resp.Credentials)...)

		if diags.HasError() {
			return diags
		}

	}

	return diags
}

func (r *KubernetesCredentialResourceModel) RefreshFromSharedKubernetesCredentialOutput(ctx context.Context, resp *shared.KubernetesCredentialOutput) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.ID = types.StringPointerValue(resp.ID)
		r.Name = types.StringValue(resp.Name)
		if resp.ProviderType != nil {
			r.ProviderType = types.StringValue(string(*resp.ProviderType))
		} else {
			r.ProviderType = types.StringNull()
		}
	}

	return diags
}

func (r *KubernetesCredentialResourceModel) ToOperationsCreateKubernetesCredentialsRequest(ctx context.Context) (*operations.CreateKubernetesCredentialsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	workspaceID := new(int64)
	if !r.WorkspaceID.IsUnknown() && !r.WorkspaceID.IsNull() {
		*workspaceID = r.WorkspaceID.ValueInt64()
	} else {
		workspaceID = nil
	}
	createKubernetesCredentialsRequest, createKubernetesCredentialsRequestDiags := r.ToSharedCreateKubernetesCredentialsRequest(ctx)
	diags.Append(createKubernetesCredentialsRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreateKubernetesCredentialsRequest{
		WorkspaceID:                        workspaceID,
		CreateKubernetesCredentialsRequest: *createKubernetesCredentialsRequest,
	}

	return &out, diags
}

func (r *KubernetesCredentialResourceModel) ToOperationsDeleteKubernetesCredentialsRequest(ctx context.Context) (*operations.DeleteKubernetesCredentialsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var credentialsID string
	credentialsID = r.CredentialsID.ValueString()

	workspaceID := new(int64)
	if !r.WorkspaceID.IsUnknown() && !r.WorkspaceID.IsNull() {
		*workspaceID = r.WorkspaceID.ValueInt64()
	} else {
		workspaceID = nil
	}
	out := operations.DeleteKubernetesCredentialsRequest{
		CredentialsID: credentialsID,
		WorkspaceID:   workspaceID,
	}

	return &out, diags
}

func (r *KubernetesCredentialResourceModel) ToOperationsDescribeKubernetesCredentialsRequest(ctx context.Context) (*operations.DescribeKubernetesCredentialsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var credentialsID string
	credentialsID = r.CredentialsID.ValueString()

	workspaceID := new(int64)
	if !r.WorkspaceID.IsUnknown() && !r.WorkspaceID.IsNull() {
		*workspaceID = r.WorkspaceID.ValueInt64()
	} else {
		workspaceID = nil
	}
	out := operations.DescribeKubernetesCredentialsRequest{
		CredentialsID: credentialsID,
		WorkspaceID:   workspaceID,
	}

	return &out, diags
}

func (r *KubernetesCredentialResourceModel) ToOperationsUpdateKubernetesCredentialsRequest(ctx context.Context) (*operations.UpdateKubernetesCredentialsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var credentialsID string
	credentialsID = r.CredentialsID.ValueString()

	workspaceID := new(int64)
	if !r.WorkspaceID.IsUnknown() && !r.WorkspaceID.IsNull() {
		*workspaceID = r.WorkspaceID.ValueInt64()
	} else {
		workspaceID = nil
	}
	updateKubernetesCredentialsRequest, updateKubernetesCredentialsRequestDiags := r.ToSharedUpdateKubernetesCredentialsRequest(ctx)
	diags.Append(updateKubernetesCredentialsRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateKubernetesCredentialsRequest{
		CredentialsID:                      credentialsID,
		WorkspaceID:                        workspaceID,
		UpdateKubernetesCredentialsRequest: *updateKubernetesCredentialsRequest,
	}

	return &out, diags
}

func (r *KubernetesCredentialResourceModel) ToSharedCreateKubernetesCredentialsRequest(ctx context.Context) (*shared.CreateKubernetesCredentialsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	credentials, credentialsDiags := r.ToSharedKubernetesCredential(ctx)
	diags.Append(credentialsDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := shared.CreateKubernetesCredentialsRequest{
		Credentials: credentials,
	}

	return &out, diags
}

func (r *KubernetesCredentialResourceModel) ToSharedKubernetesCredential(ctx context.Context) (*shared.KubernetesCredential, diag.Diagnostics) {
	var diags diag.Diagnostics

	id := new(string)
	if !r.ID.IsUnknown() && !r.ID.IsNull() {
		*id = r.ID.ValueString()
	} else {
		id = nil
	}
	var name string
	name = r.Name.ValueString()

	providerType := new(shared.KubernetesCredentialProviderType)
	if !r.ProviderType.IsUnknown() && !r.ProviderType.IsNull() {
		*providerType = shared.KubernetesCredentialProviderType(r.ProviderType.ValueString())
	} else {
		providerType = nil
	}
	keys := shared.KubernetesCredentialKeys{}
	out := shared.KubernetesCredential{
		ID:           id,
		Name:         name,
		ProviderType: providerType,
		Keys:         keys,
	}

	return &out, diags
}

func (r *KubernetesCredentialResourceModel) ToSharedKubernetesCredentialKeys(ctx context.Context) (*shared.KubernetesCredentialKeys, diag.Diagnostics) {
	var diags diag.Diagnostics

	token := new(string)
	if !r.Token.IsUnknown() && !r.Token.IsNull() {
		*token = r.Token.ValueString()
	} else {
		token = nil
	}
	clientCertificate := new(string)
	if !r.ClientCertificate.IsUnknown() && !r.ClientCertificate.IsNull() {
		*clientCertificate = r.ClientCertificate.ValueString()
	} else {
		clientCertificate = nil
	}
	privateKey := new(string)
	if !r.PrivateKey.IsUnknown() && !r.PrivateKey.IsNull() {
		*privateKey = r.PrivateKey.ValueString()
	} else {
		privateKey = nil
	}
	out := shared.KubernetesCredentialKeys{
		Token:             token,
		ClientCertificate: clientCertificate,
		PrivateKey:        privateKey,
	}

	return &out, diags
}

func (r *KubernetesCredentialResourceModel) ToSharedUpdateKubernetesCredentialsRequest(ctx context.Context) (*shared.UpdateKubernetesCredentialsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	credentials, credentialsDiags := r.ToSharedKubernetesCredential(ctx)
	diags.Append(credentialsDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := shared.UpdateKubernetesCredentialsRequest{
		Credentials: credentials,
	}

	return &out, diags
}
