// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/seqeralabs/terraform-provider-seqera/internal/sdk/models/operations"
	"github.com/seqeralabs/terraform-provider-seqera/internal/sdk/models/shared"
)

func (r *OrganizationMemberResourceModel) RefreshFromSharedAddOrganizationMemberResponse(ctx context.Context, resp *shared.AddOrganizationMemberResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		diags.Append(r.RefreshFromSharedOrganizationMember(ctx, resp.Member)...)

		if diags.HasError() {
			return diags
		}

	}

	return diags
}

func (r *OrganizationMemberResourceModel) RefreshFromSharedListOrganizationMembersResponse(ctx context.Context, resp *shared.ListOrganizationMembersResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		if len(resp.Members) == 0 {
			diags.AddError("Unexpected response from API", "Missing response body array data.")
			return diags
		}

		diags.Append(r.RefreshFromSharedOrganizationMember(ctx, &resp.Members[0])...)

		if diags.HasError() {
			return diags
		}

		r.TotalSize = types.Int64PointerValue(resp.TotalSize)
	}

	return diags
}

func (r *OrganizationMemberResourceModel) RefreshFromSharedOrganizationMember(ctx context.Context, resp *shared.OrganizationMember) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Email = types.StringPointerValue(resp.Email)
		r.MemberID = types.Int64PointerValue(resp.MemberID)
		r.OrgID = types.Int64Value(resp.OrgID)
		if resp.Role != nil {
			r.Role = types.StringValue(string(*resp.Role))
		} else {
			r.Role = types.StringNull()
		}
		r.User = types.StringValue(resp.User)
		r.UserName = types.StringPointerValue(resp.UserName)
	}

	return diags
}

func (r *OrganizationMemberResourceModel) ToOperationsCreateOrganizationMemberRequest(ctx context.Context) (*operations.CreateOrganizationMemberRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var orgID int64
	orgID = r.OrgID.ValueInt64()

	addOrganizationMemberRequest, addOrganizationMemberRequestDiags := r.ToSharedAddOrganizationMemberRequest(ctx)
	diags.Append(addOrganizationMemberRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreateOrganizationMemberRequest{
		OrgID:                        orgID,
		AddOrganizationMemberRequest: *addOrganizationMemberRequest,
	}

	return &out, diags
}

func (r *OrganizationMemberResourceModel) ToOperationsDeleteOrganizationMemberRequest(ctx context.Context) (*operations.DeleteOrganizationMemberRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var orgID int64
	orgID = r.OrgID.ValueInt64()

	var memberID int64
	memberID = r.MemberID.ValueInt64()

	out := operations.DeleteOrganizationMemberRequest{
		OrgID:    orgID,
		MemberID: memberID,
	}

	return &out, diags
}

func (r *OrganizationMemberResourceModel) ToOperationsListOrganizationMembersRequest(ctx context.Context) (*operations.ListOrganizationMembersRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var orgID int64
	orgID = r.OrgID.ValueInt64()

	out := operations.ListOrganizationMembersRequest{
		OrgID: orgID,
	}

	return &out, diags
}

func (r *OrganizationMemberResourceModel) ToOperationsUpdateOrganizationMemberRoleRequest(ctx context.Context) (*operations.UpdateOrganizationMemberRoleRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var orgID int64
	orgID = r.OrgID.ValueInt64()

	var memberID int64
	memberID = r.MemberID.ValueInt64()

	updateOrganizationMemberRoleRequest, updateOrganizationMemberRoleRequestDiags := r.ToSharedUpdateOrganizationMemberRoleRequest(ctx)
	diags.Append(updateOrganizationMemberRoleRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateOrganizationMemberRoleRequest{
		OrgID:                               orgID,
		MemberID:                            memberID,
		UpdateOrganizationMemberRoleRequest: *updateOrganizationMemberRoleRequest,
	}

	return &out, diags
}

func (r *OrganizationMemberResourceModel) ToSharedAddOrganizationMemberRequest(ctx context.Context) (*shared.AddOrganizationMemberRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	member, memberDiags := r.ToSharedOrganizationMember(ctx)
	diags.Append(memberDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := shared.AddOrganizationMemberRequest{
		Member: *member,
	}

	return &out, diags
}

func (r *OrganizationMemberResourceModel) ToSharedOrganizationMember(ctx context.Context) (*shared.OrganizationMember, diag.Diagnostics) {
	var diags diag.Diagnostics

	memberID := new(int64)
	if !r.MemberID.IsUnknown() && !r.MemberID.IsNull() {
		*memberID = r.MemberID.ValueInt64()
	} else {
		memberID = nil
	}
	var orgID int64
	orgID = r.OrgID.ValueInt64()

	var user string
	user = r.User.ValueString()

	role := new(shared.OrgRole)
	if !r.Role.IsUnknown() && !r.Role.IsNull() {
		*role = shared.OrgRole(r.Role.ValueString())
	} else {
		role = nil
	}
	userName := new(string)
	if !r.UserName.IsUnknown() && !r.UserName.IsNull() {
		*userName = r.UserName.ValueString()
	} else {
		userName = nil
	}
	email := new(string)
	if !r.Email.IsUnknown() && !r.Email.IsNull() {
		*email = r.Email.ValueString()
	} else {
		email = nil
	}
	out := shared.OrganizationMember{
		MemberID: memberID,
		OrgID:    orgID,
		User:     user,
		Role:     role,
		UserName: userName,
		Email:    email,
	}

	return &out, diags
}

func (r *OrganizationMemberResourceModel) ToSharedUpdateOrganizationMemberRoleRequest(ctx context.Context) (*shared.UpdateOrganizationMemberRoleRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	role := shared.OrgRole(r.Role.ValueString())
	out := shared.UpdateOrganizationMemberRoleRequest{
		Role: role,
	}

	return &out, diags
}
