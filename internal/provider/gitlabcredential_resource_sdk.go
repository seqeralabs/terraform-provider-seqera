// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/seqeralabs/terraform-provider-seqera/internal/sdk/models/operations"
	"github.com/seqeralabs/terraform-provider-seqera/internal/sdk/models/shared"
)

func (r *GitlabCredentialResourceModel) RefreshFromSharedCreateGitlabCredentialsResponse(ctx context.Context, resp *shared.CreateGitlabCredentialsResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.CredentialsID = types.StringPointerValue(resp.CredentialsID)
	}

	return diags
}

func (r *GitlabCredentialResourceModel) RefreshFromSharedDescribeGitlabCredentialsResponse(ctx context.Context, resp *shared.DescribeGitlabCredentialsResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		diags.Append(r.RefreshFromSharedGitlabCredentialOutput(ctx, resp.Credentials)...)

		if diags.HasError() {
			return diags
		}

	}

	return diags
}

func (r *GitlabCredentialResourceModel) RefreshFromSharedGitlabCredentialKeysOutput(ctx context.Context, resp *shared.GitlabCredentialKeysOutput) diag.Diagnostics {
	var diags diag.Diagnostics

	r.Username = types.StringValue(resp.Username)

	return diags
}

func (r *GitlabCredentialResourceModel) RefreshFromSharedGitlabCredentialOutput(ctx context.Context, resp *shared.GitlabCredentialOutput) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.ID = types.StringPointerValue(resp.ID)
		diags.Append(r.RefreshFromSharedGitlabCredentialKeysOutput(ctx, &resp.Keys)...)

		if diags.HasError() {
			return diags
		}

		r.Name = types.StringValue(resp.Name)
		if resp.ProviderType != nil {
			r.ProviderType = types.StringValue(string(*resp.ProviderType))
		} else {
			r.ProviderType = types.StringNull()
		}
	}

	return diags
}

func (r *GitlabCredentialResourceModel) ToOperationsCreateGitlabCredentialsRequest(ctx context.Context) (*operations.CreateGitlabCredentialsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	workspaceID := new(int64)
	if !r.WorkspaceID.IsUnknown() && !r.WorkspaceID.IsNull() {
		*workspaceID = r.WorkspaceID.ValueInt64()
	} else {
		workspaceID = nil
	}
	createGitlabCredentialsRequest, createGitlabCredentialsRequestDiags := r.ToSharedCreateGitlabCredentialsRequest(ctx)
	diags.Append(createGitlabCredentialsRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreateGitlabCredentialsRequest{
		WorkspaceID:                    workspaceID,
		CreateGitlabCredentialsRequest: *createGitlabCredentialsRequest,
	}

	return &out, diags
}

func (r *GitlabCredentialResourceModel) ToOperationsDeleteGitlabCredentialsRequest(ctx context.Context) (*operations.DeleteGitlabCredentialsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var credentialsID string
	credentialsID = r.CredentialsID.ValueString()

	workspaceID := new(int64)
	if !r.WorkspaceID.IsUnknown() && !r.WorkspaceID.IsNull() {
		*workspaceID = r.WorkspaceID.ValueInt64()
	} else {
		workspaceID = nil
	}
	out := operations.DeleteGitlabCredentialsRequest{
		CredentialsID: credentialsID,
		WorkspaceID:   workspaceID,
	}

	return &out, diags
}

func (r *GitlabCredentialResourceModel) ToOperationsDescribeGitlabCredentialsRequest(ctx context.Context) (*operations.DescribeGitlabCredentialsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var credentialsID string
	credentialsID = r.CredentialsID.ValueString()

	workspaceID := new(int64)
	if !r.WorkspaceID.IsUnknown() && !r.WorkspaceID.IsNull() {
		*workspaceID = r.WorkspaceID.ValueInt64()
	} else {
		workspaceID = nil
	}
	out := operations.DescribeGitlabCredentialsRequest{
		CredentialsID: credentialsID,
		WorkspaceID:   workspaceID,
	}

	return &out, diags
}

func (r *GitlabCredentialResourceModel) ToOperationsUpdateGitlabCredentialsRequest(ctx context.Context) (*operations.UpdateGitlabCredentialsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var credentialsID string
	credentialsID = r.CredentialsID.ValueString()

	workspaceID := new(int64)
	if !r.WorkspaceID.IsUnknown() && !r.WorkspaceID.IsNull() {
		*workspaceID = r.WorkspaceID.ValueInt64()
	} else {
		workspaceID = nil
	}
	updateGitlabCredentialsRequest, updateGitlabCredentialsRequestDiags := r.ToSharedUpdateGitlabCredentialsRequest(ctx)
	diags.Append(updateGitlabCredentialsRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateGitlabCredentialsRequest{
		CredentialsID:                  credentialsID,
		WorkspaceID:                    workspaceID,
		UpdateGitlabCredentialsRequest: *updateGitlabCredentialsRequest,
	}

	return &out, diags
}

func (r *GitlabCredentialResourceModel) ToSharedCreateGitlabCredentialsRequest(ctx context.Context) (*shared.CreateGitlabCredentialsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	credentials, credentialsDiags := r.ToSharedGitlabCredential(ctx)
	diags.Append(credentialsDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := shared.CreateGitlabCredentialsRequest{
		Credentials: credentials,
	}

	return &out, diags
}

func (r *GitlabCredentialResourceModel) ToSharedGitlabCredential(ctx context.Context) (*shared.GitlabCredential, diag.Diagnostics) {
	var diags diag.Diagnostics

	id := new(string)
	if !r.ID.IsUnknown() && !r.ID.IsNull() {
		*id = r.ID.ValueString()
	} else {
		id = nil
	}
	var name string
	name = r.Name.ValueString()

	providerType := new(shared.GitlabCredentialProviderType)
	if !r.ProviderType.IsUnknown() && !r.ProviderType.IsNull() {
		*providerType = shared.GitlabCredentialProviderType(r.ProviderType.ValueString())
	} else {
		providerType = nil
	}
	keys, keysDiags := r.ToSharedGitlabCredentialKeys(ctx)
	diags.Append(keysDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := shared.GitlabCredential{
		ID:           id,
		Name:         name,
		ProviderType: providerType,
		Keys:         *keys,
	}

	return &out, diags
}

func (r *GitlabCredentialResourceModel) ToSharedGitlabCredentialKeys(ctx context.Context) (*shared.GitlabCredentialKeys, diag.Diagnostics) {
	var diags diag.Diagnostics

	var username string
	username = r.Username.ValueString()

	var token string
	token = r.Token.ValueString()

	baseURL := new(string)
	if !r.BaseURL.IsUnknown() && !r.BaseURL.IsNull() {
		*baseURL = r.BaseURL.ValueString()
	} else {
		baseURL = nil
	}
	out := shared.GitlabCredentialKeys{
		Username: username,
		Token:    token,
		BaseURL:  baseURL,
	}

	return &out, diags
}

func (r *GitlabCredentialResourceModel) ToSharedUpdateGitlabCredentialsRequest(ctx context.Context) (*shared.UpdateGitlabCredentialsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	credentials, credentialsDiags := r.ToSharedGitlabCredential(ctx)
	diags.Append(credentialsDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := shared.UpdateGitlabCredentialsRequest{
		Credentials: credentials,
	}

	return &out, diags
}
