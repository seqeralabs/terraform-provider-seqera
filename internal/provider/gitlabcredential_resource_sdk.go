// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/seqeralabs/terraform-provider-seqera/internal/sdk/models/operations"
	"github.com/seqeralabs/terraform-provider-seqera/internal/sdk/models/shared"
)

func (r *GitLabCredentialResourceModel) RefreshFromSharedCreateGitLabCredentialsResponse(ctx context.Context, resp *shared.CreateGitLabCredentialsResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.CredentialsID = types.StringPointerValue(resp.CredentialsID)
	}

	return diags
}

func (r *GitLabCredentialResourceModel) RefreshFromSharedDescribeGitLabCredentialsResponse(ctx context.Context, resp *shared.DescribeGitLabCredentialsResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		diags.Append(r.RefreshFromSharedGitLabCredentialOutput(ctx, resp.Credentials)...)

		if diags.HasError() {
			return diags
		}

	}

	return diags
}

func (r *GitLabCredentialResourceModel) RefreshFromSharedGitLabCredentialOutput(ctx context.Context, resp *shared.GitLabCredentialOutput) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.CredentialsID = types.StringPointerValue(resp.CredentialsID)
		r.Name = types.StringValue(resp.Name)
		if resp.ProviderType != nil {
			r.ProviderType = types.StringValue(string(*resp.ProviderType))
		} else {
			r.ProviderType = types.StringNull()
		}
	}

	return diags
}

func (r *GitLabCredentialResourceModel) ToOperationsCreateGitLabCredentialsRequest(ctx context.Context) (*operations.CreateGitLabCredentialsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	workspaceID := new(int64)
	if !r.WorkspaceID.IsUnknown() && !r.WorkspaceID.IsNull() {
		*workspaceID = r.WorkspaceID.ValueInt64()
	} else {
		workspaceID = nil
	}
	createGitLabCredentialsRequest, createGitLabCredentialsRequestDiags := r.ToSharedCreateGitLabCredentialsRequest(ctx)
	diags.Append(createGitLabCredentialsRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreateGitLabCredentialsRequest{
		WorkspaceID:                    workspaceID,
		CreateGitLabCredentialsRequest: *createGitLabCredentialsRequest,
	}

	return &out, diags
}

func (r *GitLabCredentialResourceModel) ToOperationsDeleteGitLabCredentialsRequest(ctx context.Context) (*operations.DeleteGitLabCredentialsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var credentialsID string
	credentialsID = r.CredentialsID.ValueString()

	workspaceID := new(int64)
	if !r.WorkspaceID.IsUnknown() && !r.WorkspaceID.IsNull() {
		*workspaceID = r.WorkspaceID.ValueInt64()
	} else {
		workspaceID = nil
	}
	out := operations.DeleteGitLabCredentialsRequest{
		CredentialsID: credentialsID,
		WorkspaceID:   workspaceID,
	}

	return &out, diags
}

func (r *GitLabCredentialResourceModel) ToOperationsDescribeGitLabCredentialsRequest(ctx context.Context) (*operations.DescribeGitLabCredentialsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var credentialsID string
	credentialsID = r.CredentialsID.ValueString()

	workspaceID := new(int64)
	if !r.WorkspaceID.IsUnknown() && !r.WorkspaceID.IsNull() {
		*workspaceID = r.WorkspaceID.ValueInt64()
	} else {
		workspaceID = nil
	}
	out := operations.DescribeGitLabCredentialsRequest{
		CredentialsID: credentialsID,
		WorkspaceID:   workspaceID,
	}

	return &out, diags
}

func (r *GitLabCredentialResourceModel) ToOperationsUpdateGitLabCredentialsRequest(ctx context.Context) (*operations.UpdateGitLabCredentialsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var credentialsID string
	credentialsID = r.CredentialsID.ValueString()

	workspaceID := new(int64)
	if !r.WorkspaceID.IsUnknown() && !r.WorkspaceID.IsNull() {
		*workspaceID = r.WorkspaceID.ValueInt64()
	} else {
		workspaceID = nil
	}
	updateGitLabCredentialsRequest, updateGitLabCredentialsRequestDiags := r.ToSharedUpdateGitLabCredentialsRequest(ctx)
	diags.Append(updateGitLabCredentialsRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateGitLabCredentialsRequest{
		CredentialsID:                  credentialsID,
		WorkspaceID:                    workspaceID,
		UpdateGitLabCredentialsRequest: *updateGitLabCredentialsRequest,
	}

	return &out, diags
}

func (r *GitLabCredentialResourceModel) ToSharedCreateGitLabCredentialsRequest(ctx context.Context) (*shared.CreateGitLabCredentialsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	credentials, credentialsDiags := r.ToSharedGitLabCredential(ctx)
	diags.Append(credentialsDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := shared.CreateGitLabCredentialsRequest{
		Credentials: credentials,
	}

	return &out, diags
}

func (r *GitLabCredentialResourceModel) ToSharedGitLabCredential(ctx context.Context) (*shared.GitLabCredential, diag.Diagnostics) {
	var diags diag.Diagnostics

	credentialsID := new(string)
	if !r.CredentialsID.IsUnknown() && !r.CredentialsID.IsNull() {
		*credentialsID = r.CredentialsID.ValueString()
	} else {
		credentialsID = nil
	}
	var name string
	name = r.Name.ValueString()

	providerType := new(shared.GitLabCredentialProviderType)
	if !r.ProviderType.IsUnknown() && !r.ProviderType.IsNull() {
		*providerType = shared.GitLabCredentialProviderType(r.ProviderType.ValueString())
	} else {
		providerType = nil
	}
	keys := shared.GitLabCredentialKeys{}
	out := shared.GitLabCredential{
		CredentialsID: credentialsID,
		Name:          name,
		ProviderType:  providerType,
		Keys:          keys,
	}

	return &out, diags
}

func (r *GitLabCredentialResourceModel) ToSharedGitLabCredentialKeys(ctx context.Context) (*shared.GitLabCredentialKeys, diag.Diagnostics) {
	var diags diag.Diagnostics

	var token string
	token = r.Token.ValueString()

	baseURL := new(string)
	if !r.BaseURL.IsUnknown() && !r.BaseURL.IsNull() {
		*baseURL = r.BaseURL.ValueString()
	} else {
		baseURL = nil
	}
	out := shared.GitLabCredentialKeys{
		Token:   token,
		BaseURL: baseURL,
	}

	return &out, diags
}

func (r *GitLabCredentialResourceModel) ToSharedUpdateGitLabCredentialsRequest(ctx context.Context) (*shared.UpdateGitLabCredentialsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	credentials, credentialsDiags := r.ToSharedGitLabCredential(ctx)
	diags.Append(credentialsDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := shared.UpdateGitLabCredentialsRequest{
		Credentials: credentials,
	}

	return &out, diags
}
