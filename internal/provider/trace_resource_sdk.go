// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/speakeasy/terraform-provider-seqera/internal/sdk/models/operations"
	"github.com/speakeasy/terraform-provider-seqera/internal/sdk/models/shared"
)

func (r *TraceResourceModel) ToSharedTraceCreateRequest(ctx context.Context) (*shared.TraceCreateRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	launchID := new(string)
	if !r.LaunchID.IsUnknown() && !r.LaunchID.IsNull() {
		*launchID = r.LaunchID.ValueString()
	} else {
		launchID = nil
	}
	sessionID := new(string)
	if !r.SessionID.IsUnknown() && !r.SessionID.IsNull() {
		*sessionID = r.SessionID.ValueString()
	} else {
		sessionID = nil
	}
	runName := new(string)
	if !r.RunName.IsUnknown() && !r.RunName.IsNull() {
		*runName = r.RunName.ValueString()
	} else {
		runName = nil
	}
	projectName := new(string)
	if !r.ProjectName.IsUnknown() && !r.ProjectName.IsNull() {
		*projectName = r.ProjectName.ValueString()
	} else {
		projectName = nil
	}
	repository := new(string)
	if !r.Repository.IsUnknown() && !r.Repository.IsNull() {
		*repository = r.Repository.ValueString()
	} else {
		repository = nil
	}
	workflowID := new(string)
	if !r.WorkflowID.IsUnknown() && !r.WorkflowID.IsNull() {
		*workflowID = r.WorkflowID.ValueString()
	} else {
		workflowID = nil
	}
	out := shared.TraceCreateRequest{
		LaunchID:    launchID,
		SessionID:   sessionID,
		RunName:     runName,
		ProjectName: projectName,
		Repository:  repository,
		WorkflowID:  workflowID,
	}

	return &out, diags
}

func (r *TraceResourceModel) ToOperationsCreateTraceRequest(ctx context.Context) (*operations.CreateTraceRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	workspaceID := new(int64)
	if !r.WorkspaceID.IsUnknown() && !r.WorkspaceID.IsNull() {
		*workspaceID = r.WorkspaceID.ValueInt64()
	} else {
		workspaceID = nil
	}
	traceCreateRequest, traceCreateRequestDiags := r.ToSharedTraceCreateRequest(ctx)
	diags.Append(traceCreateRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreateTraceRequest{
		WorkspaceID:        workspaceID,
		TraceCreateRequest: *traceCreateRequest,
	}

	return &out, diags
}

func (r *TraceResourceModel) RefreshFromSharedTraceCreateResponse(ctx context.Context, resp *shared.TraceCreateResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Message = types.StringPointerValue(resp.Message)
		r.WorkflowID = types.StringPointerValue(resp.WorkflowID)
	}

	return diags
}
