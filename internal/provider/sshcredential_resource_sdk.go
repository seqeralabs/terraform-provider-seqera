// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/seqeralabs/terraform-provider-seqera/internal/sdk/models/operations"
	"github.com/seqeralabs/terraform-provider-seqera/internal/sdk/models/shared"
)

func (r *SSHCredentialResourceModel) RefreshFromSharedCreateSSHCredentialsResponse(ctx context.Context, resp *shared.CreateSSHCredentialsResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.CredentialsID = types.StringPointerValue(resp.CredentialsID)
	}

	return diags
}

func (r *SSHCredentialResourceModel) RefreshFromSharedDescribeSSHCredentialsResponse(ctx context.Context, resp *shared.DescribeSSHCredentialsResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		diags.Append(r.RefreshFromSharedSSHCredentialOutput(ctx, resp.Credentials)...)

		if diags.HasError() {
			return diags
		}

	}

	return diags
}

func (r *SSHCredentialResourceModel) RefreshFromSharedSSHCredentialOutput(ctx context.Context, resp *shared.SSHCredentialOutput) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.CredentialsID = types.StringPointerValue(resp.CredentialsID)
		r.Name = types.StringValue(resp.Name)
		if resp.ProviderType != nil {
			r.ProviderType = types.StringValue(string(*resp.ProviderType))
		} else {
			r.ProviderType = types.StringNull()
		}
	}

	return diags
}

func (r *SSHCredentialResourceModel) ToOperationsCreateSSHCredentialsRequest(ctx context.Context) (*operations.CreateSSHCredentialsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	workspaceID := new(int64)
	if !r.WorkspaceID.IsUnknown() && !r.WorkspaceID.IsNull() {
		*workspaceID = r.WorkspaceID.ValueInt64()
	} else {
		workspaceID = nil
	}
	createSSHCredentialsRequest, createSSHCredentialsRequestDiags := r.ToSharedCreateSSHCredentialsRequest(ctx)
	diags.Append(createSSHCredentialsRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreateSSHCredentialsRequest{
		WorkspaceID:                 workspaceID,
		CreateSSHCredentialsRequest: *createSSHCredentialsRequest,
	}

	return &out, diags
}

func (r *SSHCredentialResourceModel) ToOperationsDeleteSSHCredentialsRequest(ctx context.Context) (*operations.DeleteSSHCredentialsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var credentialsID string
	credentialsID = r.CredentialsID.ValueString()

	workspaceID := new(int64)
	if !r.WorkspaceID.IsUnknown() && !r.WorkspaceID.IsNull() {
		*workspaceID = r.WorkspaceID.ValueInt64()
	} else {
		workspaceID = nil
	}
	out := operations.DeleteSSHCredentialsRequest{
		CredentialsID: credentialsID,
		WorkspaceID:   workspaceID,
	}

	return &out, diags
}

func (r *SSHCredentialResourceModel) ToOperationsDescribeSSHCredentialsRequest(ctx context.Context) (*operations.DescribeSSHCredentialsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var credentialsID string
	credentialsID = r.CredentialsID.ValueString()

	workspaceID := new(int64)
	if !r.WorkspaceID.IsUnknown() && !r.WorkspaceID.IsNull() {
		*workspaceID = r.WorkspaceID.ValueInt64()
	} else {
		workspaceID = nil
	}
	out := operations.DescribeSSHCredentialsRequest{
		CredentialsID: credentialsID,
		WorkspaceID:   workspaceID,
	}

	return &out, diags
}

func (r *SSHCredentialResourceModel) ToOperationsUpdateSSHCredentialsRequest(ctx context.Context) (*operations.UpdateSSHCredentialsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var credentialsID string
	credentialsID = r.CredentialsID.ValueString()

	workspaceID := new(int64)
	if !r.WorkspaceID.IsUnknown() && !r.WorkspaceID.IsNull() {
		*workspaceID = r.WorkspaceID.ValueInt64()
	} else {
		workspaceID = nil
	}
	updateSSHCredentialsRequest, updateSSHCredentialsRequestDiags := r.ToSharedUpdateSSHCredentialsRequest(ctx)
	diags.Append(updateSSHCredentialsRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateSSHCredentialsRequest{
		CredentialsID:               credentialsID,
		WorkspaceID:                 workspaceID,
		UpdateSSHCredentialsRequest: *updateSSHCredentialsRequest,
	}

	return &out, diags
}

func (r *SSHCredentialResourceModel) ToSharedCreateSSHCredentialsRequest(ctx context.Context) (*shared.CreateSSHCredentialsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	credentials, credentialsDiags := r.ToSharedSSHCredential(ctx)
	diags.Append(credentialsDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := shared.CreateSSHCredentialsRequest{
		Credentials: credentials,
	}

	return &out, diags
}

func (r *SSHCredentialResourceModel) ToSharedSSHCredential(ctx context.Context) (*shared.SSHCredential, diag.Diagnostics) {
	var diags diag.Diagnostics

	credentialsID := new(string)
	if !r.CredentialsID.IsUnknown() && !r.CredentialsID.IsNull() {
		*credentialsID = r.CredentialsID.ValueString()
	} else {
		credentialsID = nil
	}
	var name string
	name = r.Name.ValueString()

	providerType := new(shared.SSHCredentialProviderType)
	if !r.ProviderType.IsUnknown() && !r.ProviderType.IsNull() {
		*providerType = shared.SSHCredentialProviderType(r.ProviderType.ValueString())
	} else {
		providerType = nil
	}
	keys := shared.SSHCredentialKeys{}
	out := shared.SSHCredential{
		CredentialsID: credentialsID,
		Name:          name,
		ProviderType:  providerType,
		Keys:          keys,
	}

	return &out, diags
}

func (r *SSHCredentialResourceModel) ToSharedSSHCredentialKeys(ctx context.Context) (*shared.SSHCredentialKeys, diag.Diagnostics) {
	var diags diag.Diagnostics

	var privateKey string
	privateKey = r.PrivateKey.ValueString()

	passphrase := new(string)
	if !r.Passphrase.IsUnknown() && !r.Passphrase.IsNull() {
		*passphrase = r.Passphrase.ValueString()
	} else {
		passphrase = nil
	}
	out := shared.SSHCredentialKeys{
		PrivateKey: privateKey,
		Passphrase: passphrase,
	}

	return &out, diags
}

func (r *SSHCredentialResourceModel) ToSharedUpdateSSHCredentialsRequest(ctx context.Context) (*shared.UpdateSSHCredentialsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	credentials, credentialsDiags := r.ToSharedSSHCredential(ctx)
	diags.Append(credentialsDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := shared.UpdateSSHCredentialsRequest{
		Credentials: credentials,
	}

	return &out, diags
}
