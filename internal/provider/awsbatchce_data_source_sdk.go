// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/seqeralabs/terraform-provider-seqera/internal/provider/typeconvert"
	tfTypes "github.com/seqeralabs/terraform-provider-seqera/internal/provider/types"
	"github.com/seqeralabs/terraform-provider-seqera/internal/sdk/models/operations"
	"github.com/seqeralabs/terraform-provider-seqera/internal/sdk/models/shared"
)

func (r *AWSBatchCEDataSourceModel) RefreshFromSharedAWSBatchCEComputeConfig(ctx context.Context, resp *shared.AWSBatchCEComputeConfig) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Config.CliPath = types.StringPointerValue(resp.Config.CliPath)
		r.Config.ComputeJobRole = types.StringPointerValue(resp.Config.ComputeJobRole)
		r.Config.ComputeQueue = types.StringPointerValue(resp.Config.ComputeQueue)
		r.Config.DragenInstanceType = types.StringPointerValue(resp.Config.DragenInstanceType)
		r.Config.DragenQueue = types.StringPointerValue(resp.Config.DragenQueue)
		r.Config.EnableFusion = types.BoolPointerValue(resp.Config.EnableFusion)
		r.Config.EnableWave = types.BoolPointerValue(resp.Config.EnableWave)
		r.Config.Environment = []tfTypes.ConfigEnvVariable{}

		for _, environmentItem := range resp.Config.Environment {
			var environment tfTypes.ConfigEnvVariable

			environment.Compute = types.BoolPointerValue(environmentItem.Compute)
			environment.Head = types.BoolPointerValue(environmentItem.Head)
			environment.Name = types.StringPointerValue(environmentItem.Name)
			environment.Value = types.StringPointerValue(environmentItem.Value)

			r.Config.Environment = append(r.Config.Environment, environment)
		}
		r.Config.ExecutionRole = types.StringPointerValue(resp.Config.ExecutionRole)
		if resp.Config.Forge == nil {
			r.Config.Forge = nil
		} else {
			r.Config.Forge = &tfTypes.ForgeConfig{}
			if resp.Config.Forge.AllocStrategy != nil {
				r.Config.Forge.AllocStrategy = types.StringValue(string(*resp.Config.Forge.AllocStrategy))
			} else {
				r.Config.Forge.AllocStrategy = types.StringNull()
			}
			r.Config.Forge.AllowBuckets = make([]types.String, 0, len(resp.Config.Forge.AllowBuckets))
			for _, v := range resp.Config.Forge.AllowBuckets {
				r.Config.Forge.AllowBuckets = append(r.Config.Forge.AllowBuckets, types.StringValue(v))
			}
			r.Config.Forge.Arm64Enabled = types.BoolPointerValue(resp.Config.Forge.Arm64Enabled)
			r.Config.Forge.BidPercentage = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.Config.Forge.BidPercentage))
			r.Config.Forge.DisposeOnDeletion = types.BoolPointerValue(resp.Config.Forge.DisposeOnDeletion)
			r.Config.Forge.DragenAmiID = types.StringPointerValue(resp.Config.Forge.DragenAmiID)
			r.Config.Forge.DragenEnabled = types.BoolPointerValue(resp.Config.Forge.DragenEnabled)
			r.Config.Forge.DragenInstanceType = types.StringPointerValue(resp.Config.Forge.DragenInstanceType)
			r.Config.Forge.EbsAutoScale = types.BoolPointerValue(resp.Config.Forge.EbsAutoScale)
			r.Config.Forge.EbsBlockSize = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.Config.Forge.EbsBlockSize))
			r.Config.Forge.EbsBootSize = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.Config.Forge.EbsBootSize))
			r.Config.Forge.Ec2KeyPair = types.StringPointerValue(resp.Config.Forge.Ec2KeyPair)
			r.Config.Forge.EcsConfig = types.StringPointerValue(resp.Config.Forge.EcsConfig)
			r.Config.Forge.EfsCreate = types.BoolPointerValue(resp.Config.Forge.EfsCreate)
			r.Config.Forge.EfsID = types.StringPointerValue(resp.Config.Forge.EfsID)
			r.Config.Forge.EfsMount = types.StringPointerValue(resp.Config.Forge.EfsMount)
			r.Config.Forge.FargateHeadEnabled = types.BoolPointerValue(resp.Config.Forge.FargateHeadEnabled)
			r.Config.Forge.FsxMount = types.StringPointerValue(resp.Config.Forge.FsxMount)
			r.Config.Forge.FsxName = types.StringPointerValue(resp.Config.Forge.FsxName)
			r.Config.Forge.FsxSize = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.Config.Forge.FsxSize))
			r.Config.Forge.GpuEnabled = types.BoolPointerValue(resp.Config.Forge.GpuEnabled)
			r.Config.Forge.ImageID = types.StringPointerValue(resp.Config.Forge.ImageID)
			r.Config.Forge.InstanceTypes = make([]types.String, 0, len(resp.Config.Forge.InstanceTypes))
			for _, v := range resp.Config.Forge.InstanceTypes {
				r.Config.Forge.InstanceTypes = append(r.Config.Forge.InstanceTypes, types.StringValue(v))
			}
			r.Config.Forge.MaxCpus = types.Int32Value(int32(resp.Config.Forge.MaxCpus))
			r.Config.Forge.MinCpus = types.Int32Value(int32(resp.Config.Forge.MinCpus))
			r.Config.Forge.SecurityGroups = make([]types.String, 0, len(resp.Config.Forge.SecurityGroups))
			for _, v := range resp.Config.Forge.SecurityGroups {
				r.Config.Forge.SecurityGroups = append(r.Config.Forge.SecurityGroups, types.StringValue(v))
			}
			r.Config.Forge.Subnets = make([]types.String, 0, len(resp.Config.Forge.Subnets))
			for _, v := range resp.Config.Forge.Subnets {
				r.Config.Forge.Subnets = append(r.Config.Forge.Subnets, types.StringValue(v))
			}
			r.Config.Forge.Type = types.StringValue(string(resp.Config.Forge.Type))
			r.Config.Forge.VpcID = types.StringPointerValue(resp.Config.Forge.VpcID)
		}
		r.Config.FusionSnapshots = types.BoolPointerValue(resp.Config.FusionSnapshots)
		r.Config.HeadJobCpus = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.Config.HeadJobCpus))
		r.Config.HeadJobMemoryMb = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.Config.HeadJobMemoryMb))
		r.Config.HeadJobRole = types.StringPointerValue(resp.Config.HeadJobRole)
		r.Config.HeadQueue = types.StringPointerValue(resp.Config.HeadQueue)
		r.Config.LogGroup = types.StringPointerValue(resp.Config.LogGroup)
		r.Config.LustreID = types.StringPointerValue(resp.Config.LustreID)
		r.Config.NextflowConfig = types.StringPointerValue(resp.Config.NextflowConfig)
		r.Config.NvmeStorageEnabled = types.BoolPointerValue(resp.Config.NvmeStorageEnabled)
		r.Config.PostRunScript = types.StringPointerValue(resp.Config.PostRunScript)
		r.Config.PreRunScript = types.StringPointerValue(resp.Config.PreRunScript)
		r.Config.Region = types.StringValue(resp.Config.Region)
		r.Config.StorageType = types.StringPointerValue(resp.Config.StorageType)
		r.Config.Volumes = make([]types.String, 0, len(resp.Config.Volumes))
		for _, v := range resp.Config.Volumes {
			r.Config.Volumes = append(r.Config.Volumes, types.StringValue(v))
		}
		r.Config.WorkDir = types.StringPointerValue(resp.Config.WorkDir)
		r.CredentialsID = types.StringValue(resp.CredentialsID)
		r.DateCreated = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.DateCreated))
		r.Deleted = types.BoolPointerValue(resp.Deleted)
		r.Description = types.StringPointerValue(resp.Description)
		r.ID = types.StringPointerValue(resp.ID)
		r.LastUpdated = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.LastUpdated))
		r.LastUsed = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.LastUsed))
		r.Name = types.StringValue(resp.Name)
		r.OrgID = types.Int64PointerValue(resp.OrgID)
		r.Platform = types.StringValue(string(resp.Platform))
		r.Status = types.StringPointerValue(resp.Status)
		r.WorkspaceID = types.Int64PointerValue(resp.WorkspaceID)
	}

	return diags
}

func (r *AWSBatchCEDataSourceModel) RefreshFromSharedDescribeAWSBatchCEResponse(ctx context.Context, resp *shared.DescribeAWSBatchCEResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		diags.Append(r.RefreshFromSharedAWSBatchCEComputeConfig(ctx, resp.ComputeEnv)...)

		if diags.HasError() {
			return diags
		}

	}

	return diags
}

func (r *AWSBatchCEDataSourceModel) ToOperationsDescribeAWSBatchCERequest(ctx context.Context) (*operations.DescribeAWSBatchCERequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var computeEnvID string
	computeEnvID = r.ComputeEnvID.ValueString()

	var workspaceID int64
	workspaceID = r.WorkspaceID.ValueInt64()

	attributes := make([]shared.ComputeEnvQueryAttribute, 0, len(r.Attributes))
	for _, attributesItem := range r.Attributes {
		attributes = append(attributes, shared.ComputeEnvQueryAttribute(attributesItem.ValueString()))
	}
	out := operations.DescribeAWSBatchCERequest{
		ComputeEnvID: computeEnvID,
		WorkspaceID:  workspaceID,
		Attributes:   attributes,
	}

	return &out, diags
}
