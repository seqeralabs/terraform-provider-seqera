// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework-jsontypes/jsontypes"
	"github.com/hashicorp/terraform-plugin-framework-validators/mapvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/boolplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int32planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/listplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	speakeasy_int64planmodifier "github.com/seqeralabs/terraform-provider-seqera/internal/planmodifiers/int64planmodifier"
	tfTypes "github.com/seqeralabs/terraform-provider-seqera/internal/provider/types"
	"github.com/seqeralabs/terraform-provider-seqera/internal/sdk"
	"github.com/seqeralabs/terraform-provider-seqera/internal/validators"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &WorkflowsResource{}
var _ resource.ResourceWithImportState = &WorkflowsResource{}

func NewWorkflowsResource() resource.Resource {
	return &WorkflowsResource{}
}

// WorkflowsResource defines the resource implementation.
type WorkflowsResource struct {
	// Provider configured SDK client.
	client *sdk.Seqera
}

// WorkflowsResourceModel describes the resource data model.
type WorkflowsResourceModel struct {
	CommitID            types.String                `tfsdk:"commit_id"`
	ComputeEnvID        types.String                `tfsdk:"compute_env_id"`
	ConfigProfiles      []types.String              `tfsdk:"config_profiles"`
	ConfigText          types.String                `tfsdk:"config_text"`
	DateCreated         types.String                `tfsdk:"date_created"`
	EntryName           types.String                `tfsdk:"entry_name"`
	Force               types.Bool                  `queryParam:"style=form,explode=true,name=force" tfsdk:"force"`
	HeadJobCpus         types.Int32                 `tfsdk:"head_job_cpus"`
	HeadJobMemoryMb     types.Int32                 `tfsdk:"head_job_memory_mb"`
	JobInfo             *tfTypes.JobInfoDto         `tfsdk:"job_info"`
	LabelIds            []types.Int64               `tfsdk:"label_ids"`
	Labels              []tfTypes.LabelDbDto        `tfsdk:"labels"`
	LaunchContainer     types.String                `tfsdk:"launch_container"`
	MainScript          types.String                `tfsdk:"main_script"`
	Messages            []types.String              `tfsdk:"messages"`
	OptimizationID      types.String                `tfsdk:"optimization_id"`
	OptimizationTargets types.String                `tfsdk:"optimization_targets"`
	Optimized           types.Bool                  `tfsdk:"optimized"`
	OrgID               types.Int64                 `tfsdk:"org_id"`
	OrgName             types.String                `tfsdk:"org_name"`
	ParamsText          types.String                `tfsdk:"params_text"`
	Pipeline            types.String                `tfsdk:"pipeline"`
	Platform            *tfTypes.ComputePlatformDto `tfsdk:"platform"`
	PostRunScript       types.String                `tfsdk:"post_run_script"`
	PreRunScript        types.String                `tfsdk:"pre_run_script"`
	Progress            *tfTypes.ProgressData       `tfsdk:"progress"`
	PullLatest          types.Bool                  `tfsdk:"pull_latest"`
	Resume              types.Bool                  `tfsdk:"resume"`
	Revision            types.String                `tfsdk:"revision"`
	RunName             types.String                `tfsdk:"run_name"`
	SchemaName          types.String                `tfsdk:"schema_name"`
	SessionID           types.String                `tfsdk:"session_id"`
	SourceWorkspaceID   types.Int64                 `queryParam:"style=form,explode=true,name=sourceWorkspaceId" tfsdk:"source_workspace_id"`
	StubRun             types.Bool                  `tfsdk:"stub_run"`
	TowerConfig         types.String                `tfsdk:"tower_config"`
	UserSecrets         []types.String              `tfsdk:"user_secrets"`
	WorkDir             types.String                `tfsdk:"work_dir"`
	Workflow            *tfTypes.Workflow           `tfsdk:"workflow"`
	WorkflowID          types.String                `tfsdk:"workflow_id"`
	WorkspaceID         types.Int64                 `queryParam:"style=form,explode=true,name=workspaceId" tfsdk:"workspace_id"`
	WorkspaceName       types.String                `tfsdk:"workspace_name"`
	WorkspaceSecrets    []types.String              `tfsdk:"workspace_secrets"`
}

func (r *WorkflowsResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_workflows"
}

func (r *WorkflowsResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "Manage workflow executions and pipeline runs.\n\nWorkflows represent individual executions of Nextflow pipelines,\ncontaining execution status, parameters, results, and monitoring\ninformation for computational workflows.\n",
		Attributes: map[string]schema.Attribute{
			"commit_id": schema.StringAttribute{
				Optional: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
				},
				Description: `Requires replacement if changed.`,
			},
			"compute_env_id": schema.StringAttribute{
				Optional: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
				},
				Description: `Requires replacement if changed.`,
			},
			"config_profiles": schema.ListAttribute{
				Optional: true,
				PlanModifiers: []planmodifier.List{
					listplanmodifier.RequiresReplaceIfConfigured(),
				},
				ElementType: types.StringType,
				Description: `Requires replacement if changed.`,
			},
			"config_text": schema.StringAttribute{
				Optional: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
				},
				Description: `Requires replacement if changed.`,
			},
			"date_created": schema.StringAttribute{
				Optional: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
				},
				Description: `Requires replacement if changed.`,
				Validators: []validator.String{
					validators.IsRFC3339(),
				},
			},
			"entry_name": schema.StringAttribute{
				Optional: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
				},
				Description: `Requires replacement if changed.`,
			},
			"force": schema.BoolAttribute{
				Optional:    true,
				Description: `Force the deletion even if the workflow is active`,
			},
			"head_job_cpus": schema.Int32Attribute{
				Optional: true,
				PlanModifiers: []planmodifier.Int32{
					int32planmodifier.RequiresReplaceIfConfigured(),
				},
				Description: `Requires replacement if changed.`,
			},
			"head_job_memory_mb": schema.Int32Attribute{
				Optional: true,
				PlanModifiers: []planmodifier.Int32{
					int32planmodifier.RequiresReplaceIfConfigured(),
				},
				Description: `Requires replacement if changed.`,
			},
			"job_info": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"exit_code": schema.Int32Attribute{
						Computed: true,
					},
					"id": schema.Int64Attribute{
						Computed: true,
					},
					"message": schema.StringAttribute{
						Computed: true,
					},
					"operation_id": schema.StringAttribute{
						Computed: true,
					},
					"status": schema.StringAttribute{
						Computed: true,
					},
				},
			},
			"label_ids": schema.ListAttribute{
				Optional: true,
				PlanModifiers: []planmodifier.List{
					listplanmodifier.RequiresReplaceIfConfigured(),
				},
				ElementType: types.Int64Type,
				Description: `Requires replacement if changed.`,
			},
			"labels": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"date_created": schema.StringAttribute{
							Computed:    true,
							Description: `Timestamp when the label was created`,
							Validators: []validator.String{
								validators.IsRFC3339(),
							},
						},
						"id": schema.Int64Attribute{
							Computed:    true,
							Description: `Unique numeric identifier for the label`,
						},
						"is_default": schema.BoolAttribute{
							Computed:    true,
							Description: `Flag indicating if this is a default system label`,
						},
						"name": schema.StringAttribute{
							Computed:    true,
							Description: `Name or key of the label`,
						},
						"resource": schema.BoolAttribute{
							Computed:    true,
							Description: `Flag indicating if this is a resource-level label`,
						},
						"value": schema.StringAttribute{
							Computed:    true,
							Description: `Value associated with the label`,
						},
					},
				},
			},
			"launch_container": schema.StringAttribute{
				Optional: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
				},
				Description: `Requires replacement if changed.`,
			},
			"main_script": schema.StringAttribute{
				Optional: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
				},
				Description: `Requires replacement if changed.`,
			},
			"messages": schema.ListAttribute{
				Computed:    true,
				ElementType: types.StringType,
			},
			"optimization_id": schema.StringAttribute{
				Optional: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
				},
				Description: `Requires replacement if changed.`,
			},
			"optimization_targets": schema.StringAttribute{
				Optional: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
				},
				Description: `Requires replacement if changed.`,
			},
			"optimized": schema.BoolAttribute{
				Computed: true,
			},
			"org_id": schema.Int64Attribute{
				Computed: true,
			},
			"org_name": schema.StringAttribute{
				Computed: true,
			},
			"params_text": schema.StringAttribute{
				Optional: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
				},
				Description: `Requires replacement if changed.`,
			},
			"pipeline": schema.StringAttribute{
				Required: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
				},
				Description: `Requires replacement if changed.`,
			},
			"platform": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"id": schema.StringAttribute{
						Computed: true,
					},
					"name": schema.StringAttribute{
						Computed: true,
					},
				},
			},
			"post_run_script": schema.StringAttribute{
				Optional: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
				},
				Description: `Requires replacement if changed.`,
			},
			"pre_run_script": schema.StringAttribute{
				Optional: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
				},
				Description: `Requires replacement if changed.`,
			},
			"progress": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"processes_progress": schema.ListNestedAttribute{
						Computed: true,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"aborted": schema.Int64Attribute{
									Computed: true,
								},
								"cached": schema.Int64Attribute{
									Computed: true,
								},
								"cpu_efficiency": schema.Float32Attribute{
									Computed: true,
								},
								"cpu_load": schema.Int64Attribute{
									Computed:           true,
									DeprecationMessage: `This will be removed in a future release, please migrate away from it as soon as possible`,
								},
								"cpu_time": schema.Int64Attribute{
									Computed:           true,
									DeprecationMessage: `This will be removed in a future release, please migrate away from it as soon as possible`,
								},
								"cpus": schema.Int64Attribute{
									Computed:           true,
									DeprecationMessage: `This will be removed in a future release, please migrate away from it as soon as possible`,
								},
								"date_created": schema.StringAttribute{
									Computed: true,
									Validators: []validator.String{
										validators.IsRFC3339(),
									},
								},
								"failed": schema.Int64Attribute{
									Computed: true,
								},
								"inv_ctx_switch": schema.Int64Attribute{
									Computed:           true,
									DeprecationMessage: `This will be removed in a future release, please migrate away from it as soon as possible`,
								},
								"last_updated": schema.StringAttribute{
									Computed: true,
									Validators: []validator.String{
										validators.IsRFC3339(),
									},
								},
								"load_cpus": schema.Int64Attribute{
									Computed: true,
								},
								"load_memory": schema.Int64Attribute{
									Computed: true,
								},
								"load_tasks": schema.Int64Attribute{
									Computed:           true,
									DeprecationMessage: `This will be removed in a future release, please migrate away from it as soon as possible`,
								},
								"memory_efficiency": schema.Float32Attribute{
									Computed: true,
								},
								"memory_req": schema.Int64Attribute{
									Computed:           true,
									DeprecationMessage: `This will be removed in a future release, please migrate away from it as soon as possible`,
								},
								"memory_rss": schema.Int64Attribute{
									Computed:           true,
									DeprecationMessage: `This will be removed in a future release, please migrate away from it as soon as possible`,
								},
								"peak_cpus": schema.Int64Attribute{
									Computed: true,
								},
								"peak_memory": schema.Int64Attribute{
									Computed: true,
								},
								"peak_tasks": schema.Int64Attribute{
									Computed: true,
								},
								"pending": schema.Int64Attribute{
									Computed: true,
								},
								"process": schema.StringAttribute{
									Computed: true,
								},
								"read_bytes": schema.Int64Attribute{
									Computed:           true,
									DeprecationMessage: `This will be removed in a future release, please migrate away from it as soon as possible`,
								},
								"running": schema.Int64Attribute{
									Computed: true,
								},
								"submitted": schema.Int64Attribute{
									Computed: true,
								},
								"succeeded": schema.Int64Attribute{
									Computed: true,
								},
								"vol_ctx_switch": schema.Int64Attribute{
									Computed:           true,
									DeprecationMessage: `This will be removed in a future release, please migrate away from it as soon as possible`,
								},
								"write_bytes": schema.Int64Attribute{
									Computed:           true,
									DeprecationMessage: `This will be removed in a future release, please migrate away from it as soon as possible`,
								},
							},
						},
					},
					"total_processes": schema.Int32Attribute{
						Computed: true,
					},
					"workflow_progress": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"aborted": schema.Int64Attribute{
								Computed: true,
							},
							"cached": schema.Int64Attribute{
								Computed: true,
							},
							"cost": schema.Float64Attribute{
								Computed: true,
							},
							"cpu_efficiency": schema.Float32Attribute{
								Computed: true,
							},
							"cpu_load": schema.Int64Attribute{
								Computed: true,
							},
							"cpu_time": schema.Int64Attribute{
								Computed: true,
							},
							"cpus": schema.Int64Attribute{
								Computed: true,
							},
							"date_created": schema.StringAttribute{
								Computed: true,
								Validators: []validator.String{
									validators.IsRFC3339(),
								},
							},
							"executors": schema.ListAttribute{
								Computed:    true,
								ElementType: types.StringType,
							},
							"failed": schema.Int64Attribute{
								Computed: true,
							},
							"inv_ctx_switch": schema.Int64Attribute{
								Computed: true,
							},
							"last_updated": schema.StringAttribute{
								Computed: true,
								Validators: []validator.String{
									validators.IsRFC3339(),
								},
							},
							"load_cpus": schema.Int64Attribute{
								Computed: true,
							},
							"load_memory": schema.Int64Attribute{
								Computed: true,
							},
							"load_tasks": schema.Int64Attribute{
								Computed: true,
							},
							"memory_efficiency": schema.Float32Attribute{
								Computed: true,
							},
							"memory_req": schema.Int64Attribute{
								Computed: true,
							},
							"memory_rss": schema.Int64Attribute{
								Computed: true,
							},
							"peak_cpus": schema.Int64Attribute{
								Computed: true,
							},
							"peak_memory": schema.Int64Attribute{
								Computed: true,
							},
							"peak_tasks": schema.Int64Attribute{
								Computed: true,
							},
							"pending": schema.Int64Attribute{
								Computed: true,
							},
							"read_bytes": schema.Int64Attribute{
								Computed: true,
							},
							"running": schema.Int64Attribute{
								Computed: true,
							},
							"submitted": schema.Int64Attribute{
								Computed: true,
							},
							"succeeded": schema.Int64Attribute{
								Computed: true,
							},
							"vol_ctx_switch": schema.Int64Attribute{
								Computed: true,
							},
							"write_bytes": schema.Int64Attribute{
								Computed: true,
							},
						},
					},
				},
			},
			"pull_latest": schema.BoolAttribute{
				Optional: true,
				PlanModifiers: []planmodifier.Bool{
					boolplanmodifier.RequiresReplaceIfConfigured(),
				},
				Description: `Requires replacement if changed.`,
			},
			"resume": schema.BoolAttribute{
				Optional: true,
				PlanModifiers: []planmodifier.Bool{
					boolplanmodifier.RequiresReplaceIfConfigured(),
				},
				Description: `Requires replacement if changed.`,
			},
			"revision": schema.StringAttribute{
				Optional: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
				},
				Description: `Requires replacement if changed.`,
			},
			"run_name": schema.StringAttribute{
				Optional: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
				},
				Description: `Requires replacement if changed.`,
			},
			"schema_name": schema.StringAttribute{
				Optional: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
				},
				Description: `Requires replacement if changed.`,
			},
			"session_id": schema.StringAttribute{
				Optional: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
				},
				Description: `Requires replacement if changed.`,
			},
			"source_workspace_id": schema.Int64Attribute{
				Optional: true,
				PlanModifiers: []planmodifier.Int64{
					int64planmodifier.RequiresReplaceIfConfigured(),
				},
				Description: `Source workspace numeric identifier. Requires replacement if changed.`,
			},
			"stub_run": schema.BoolAttribute{
				Optional: true,
				PlanModifiers: []planmodifier.Bool{
					boolplanmodifier.RequiresReplaceIfConfigured(),
				},
				Description: `Requires replacement if changed.`,
			},
			"tower_config": schema.StringAttribute{
				Optional: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
				},
				Description: `Requires replacement if changed.`,
			},
			"user_secrets": schema.ListAttribute{
				Optional: true,
				PlanModifiers: []planmodifier.List{
					listplanmodifier.RequiresReplaceIfConfigured(),
				},
				ElementType: types.StringType,
				Description: `Requires replacement if changed.`,
			},
			"work_dir": schema.StringAttribute{
				Optional: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
				},
				Description: `Requires replacement if changed.`,
			},
			"workflow": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"command_line": schema.StringAttribute{
						Computed: true,
					},
					"commit_id": schema.StringAttribute{
						Computed: true,
					},
					"complete": schema.StringAttribute{
						Computed: true,
						Validators: []validator.String{
							validators.IsRFC3339(),
						},
					},
					"config_files": schema.ListAttribute{
						Computed:    true,
						ElementType: types.StringType,
					},
					"config_text": schema.StringAttribute{
						Computed: true,
					},
					"container": schema.StringAttribute{
						Computed: true,
					},
					"container_engine": schema.StringAttribute{
						Computed: true,
					},
					"date_created": schema.StringAttribute{
						Computed: true,
						Validators: []validator.String{
							validators.IsRFC3339(),
						},
					},
					"deleted": schema.BoolAttribute{
						Computed: true,
					},
					"duration": schema.Int64Attribute{
						Computed: true,
					},
					"error_message": schema.StringAttribute{
						Computed: true,
					},
					"error_report": schema.StringAttribute{
						Computed: true,
					},
					"exit_status": schema.Int32Attribute{
						Computed: true,
					},
					"home_dir": schema.StringAttribute{
						Computed: true,
					},
					"id": schema.StringAttribute{
						Computed: true,
					},
					"last_updated": schema.StringAttribute{
						Computed: true,
						Validators: []validator.String{
							validators.IsRFC3339(),
						},
					},
					"launch_dir": schema.StringAttribute{
						Computed: true,
					},
					"launch_id": schema.StringAttribute{
						Computed: true,
					},
					"log_file": schema.StringAttribute{
						Computed: true,
					},
					"manifest": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"author": schema.StringAttribute{
								Computed: true,
							},
							"default_branch": schema.StringAttribute{
								Computed: true,
							},
							"description": schema.StringAttribute{
								Computed: true,
							},
							"gitmodules": schema.StringAttribute{
								Computed: true,
							},
							"home_page": schema.StringAttribute{
								Computed: true,
							},
							"icon": schema.StringAttribute{
								Computed: true,
							},
							"main_script": schema.StringAttribute{
								Computed: true,
							},
							"name": schema.StringAttribute{
								Computed: true,
							},
							"nextflow_version": schema.StringAttribute{
								Computed: true,
							},
							"version": schema.StringAttribute{
								Computed: true,
							},
						},
					},
					"nextflow": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"build": schema.StringAttribute{
								Computed: true,
							},
							"timestamp": schema.StringAttribute{
								Computed: true,
								Validators: []validator.String{
									validators.IsRFC3339(),
								},
							},
							"version": schema.StringAttribute{
								Computed: true,
							},
						},
					},
					"operation_id": schema.StringAttribute{
						Computed: true,
					},
					"out_file": schema.StringAttribute{
						Computed: true,
					},
					"owner_id": schema.Int64Attribute{
						Computed: true,
					},
					"params": schema.MapAttribute{
						Computed:    true,
						ElementType: jsontypes.NormalizedType{},
						Validators: []validator.Map{
							mapvalidator.ValueStringsAre(validators.IsValidJSON()),
						},
					},
					"profile": schema.StringAttribute{
						Computed: true,
					},
					"project_dir": schema.StringAttribute{
						Computed: true,
					},
					"project_name": schema.StringAttribute{
						Computed: true,
					},
					"repository": schema.StringAttribute{
						Computed: true,
					},
					"requires_attention": schema.BoolAttribute{
						Computed: true,
					},
					"resume": schema.BoolAttribute{
						Computed: true,
					},
					"revision": schema.StringAttribute{
						Computed: true,
					},
					"run_name": schema.StringAttribute{
						Computed: true,
					},
					"script_file": schema.StringAttribute{
						Computed: true,
					},
					"script_id": schema.StringAttribute{
						Computed: true,
					},
					"script_name": schema.StringAttribute{
						Computed: true,
					},
					"session_id": schema.StringAttribute{
						Computed: true,
					},
					"start": schema.StringAttribute{
						Computed: true,
						Validators: []validator.String{
							validators.IsRFC3339(),
						},
					},
					"stats": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"cached_count": schema.Int32Attribute{
								Computed: true,
							},
							"cached_count_fmt": schema.StringAttribute{
								Computed: true,
							},
							"cached_duration": schema.Int64Attribute{
								Computed: true,
							},
							"cached_pct": schema.Float32Attribute{
								Computed: true,
							},
							"compute_time_fmt": schema.StringAttribute{
								Computed: true,
							},
							"failed_count": schema.Int32Attribute{
								Computed: true,
							},
							"failed_count_fmt": schema.StringAttribute{
								Computed: true,
							},
							"failed_duration": schema.Int64Attribute{
								Computed: true,
							},
							"failed_pct": schema.Float32Attribute{
								Computed: true,
							},
							"ignored_count": schema.Int32Attribute{
								Computed: true,
							},
							"ignored_count_fmt": schema.StringAttribute{
								Computed: true,
							},
							"ignored_pct": schema.Float32Attribute{
								Computed: true,
							},
							"succeed_count": schema.Int32Attribute{
								Computed: true,
							},
							"succeed_count_fmt": schema.StringAttribute{
								Computed: true,
							},
							"succeed_duration": schema.Int64Attribute{
								Computed: true,
							},
							"succeed_pct": schema.Float32Attribute{
								Computed: true,
							},
						},
					},
					"status": schema.StringAttribute{
						Computed:    true,
						Description: `must be one of ["SUBMITTED", "RUNNING", "SUCCEEDED", "FAILED", "CANCELLED", "UNKNOWN"]`,
						Validators: []validator.String{
							stringvalidator.OneOf(
								"SUBMITTED",
								"RUNNING",
								"SUCCEEDED",
								"FAILED",
								"CANCELLED",
								"UNKNOWN",
							),
						},
					},
					"submit": schema.StringAttribute{
						Computed: true,
						Validators: []validator.String{
							validators.IsRFC3339(),
						},
					},
					"success": schema.BoolAttribute{
						Computed: true,
					},
					"user_name": schema.StringAttribute{
						Computed: true,
					},
					"work_dir": schema.StringAttribute{
						Computed: true,
					},
				},
			},
			"workflow_id": schema.StringAttribute{
				Computed:    true,
				Description: `Workflow string identifier`,
			},
			"workspace_id": schema.Int64Attribute{
				Required: true,
				PlanModifiers: []planmodifier.Int64{
					int64planmodifier.RequiresReplaceIfConfigured(),
					speakeasy_int64planmodifier.SuppressDiff(speakeasy_int64planmodifier.ExplicitSuppress),
				},
				Description: `Workspace numeric identifier. Requires replacement if changed.`,
			},
			"workspace_name": schema.StringAttribute{
				Computed: true,
			},
			"workspace_secrets": schema.ListAttribute{
				Optional: true,
				PlanModifiers: []planmodifier.List{
					listplanmodifier.RequiresReplaceIfConfigured(),
				},
				ElementType: types.StringType,
				Description: `Requires replacement if changed.`,
			},
		},
	}
}

func (r *WorkflowsResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.Seqera)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *sdk.Seqera, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *WorkflowsResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *WorkflowsResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(plan.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsCreateWorkflowLaunchRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Workflows.CreateWorkflowLaunch(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.SubmitWorkflowLaunchResponse != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedSubmitWorkflowLaunchResponse(ctx, res.SubmitWorkflowLaunchResponse)...)

	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(refreshPlan(ctx, plan, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}
	request1, request1Diags := data.ToOperationsDescribeWorkflowRequest(ctx)
	resp.Diagnostics.Append(request1Diags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res1, err := r.client.Workflows.DescribeWorkflow(ctx, *request1)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res1 != nil && res1.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res1.RawResponse))
		}
		return
	}
	if res1 == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res1))
		return
	}
	if res1.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res1.StatusCode), debugResponse(res1.RawResponse))
		return
	}
	if !(res1.DescribeWorkflowResponse != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res1.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedDescribeWorkflowResponse(ctx, res1.DescribeWorkflowResponse)...)

	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(refreshPlan(ctx, plan, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *WorkflowsResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *WorkflowsResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsDescribeWorkflowRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Workflows.DescribeWorkflow(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode == 404 {
		resp.State.RemoveResource(ctx)
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.DescribeWorkflowResponse != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedDescribeWorkflowResponse(ctx, res.DescribeWorkflowResponse)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *WorkflowsResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *WorkflowsResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	merge(ctx, req, resp, &data)
	if resp.Diagnostics.HasError() {
		return
	}

	// Not Implemented; all attributes marked as RequiresReplace

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *WorkflowsResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *WorkflowsResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsDeleteWorkflowRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Workflows.DeleteWorkflow(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 204 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}

}

func (r *WorkflowsResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("workflow_id"), req.ID)...)
}
