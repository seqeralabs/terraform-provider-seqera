// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/boolplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int32planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/listplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/objectplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	speakeasy_boolplanmodifier "github.com/seqeralabs/terraform-provider-seqera/internal/planmodifiers/boolplanmodifier"
	speakeasy_int32planmodifier "github.com/seqeralabs/terraform-provider-seqera/internal/planmodifiers/int32planmodifier"
	speakeasy_int64planmodifier "github.com/seqeralabs/terraform-provider-seqera/internal/planmodifiers/int64planmodifier"
	speakeasy_listplanmodifier "github.com/seqeralabs/terraform-provider-seqera/internal/planmodifiers/listplanmodifier"
	speakeasy_objectplanmodifier "github.com/seqeralabs/terraform-provider-seqera/internal/planmodifiers/objectplanmodifier"
	speakeasy_stringplanmodifier "github.com/seqeralabs/terraform-provider-seqera/internal/planmodifiers/stringplanmodifier"
	tfTypes "github.com/seqeralabs/terraform-provider-seqera/internal/provider/types"
	"github.com/seqeralabs/terraform-provider-seqera/internal/sdk"
	"github.com/seqeralabs/terraform-provider-seqera/internal/validators"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &StudiosResource{}
var _ resource.ResourceWithImportState = &StudiosResource{}

func NewStudiosResource() resource.Resource {
	return &StudiosResource{}
}

// StudiosResource defines the resource implementation.
type StudiosResource struct {
	// Provider configured SDK client.
	client *sdk.Seqera
}

// StudiosResourceModel describes the resource data model.
type StudiosResourceModel struct {
	ActiveConnections      []tfTypes.ActiveConnection             `tfsdk:"active_connections"`
	AutoStart              types.Bool                             `queryParam:"style=form,explode=true,name=autoStart" tfsdk:"auto_start"`
	BaseImage              types.String                           `tfsdk:"base_image"`
	ComputeEnv             *tfTypes.DataStudioComputeEnvDto       `tfsdk:"compute_env"`
	ComputeEnvID           types.String                           `tfsdk:"compute_env_id"`
	Configuration          *tfTypes.DataStudioConfiguration       `tfsdk:"configuration"`
	CustomImage            types.Bool                             `tfsdk:"custom_image"`
	DataStudioToolURL      types.String                           `tfsdk:"data_studio_tool_url"`
	DateCreated            types.String                           `tfsdk:"date_created"`
	Description            types.String                           `tfsdk:"description"`
	EffectiveLifespanHours types.Int32                            `tfsdk:"effective_lifespan_hours"`
	InitialCheckpointID    types.Int64                            `tfsdk:"initial_checkpoint_id"`
	IsPrivate              types.Bool                             `tfsdk:"is_private"`
	LabelIds               []types.Int64                          `tfsdk:"label_ids"`
	Labels                 []tfTypes.LabelDbDto                   `tfsdk:"labels"`
	LastStarted            types.String                           `tfsdk:"last_started"`
	LastUpdated            types.String                           `tfsdk:"last_updated"`
	MountedDataLinks       []tfTypes.DataLinkDto                  `tfsdk:"mounted_data_links"`
	Name                   types.String                           `tfsdk:"name"`
	ParentCheckpoint       *tfTypes.DataStudioDtoParentCheckpoint `tfsdk:"parent_checkpoint"`
	Progress               []tfTypes.DataStudioProgressStep       `tfsdk:"progress"`
	SessionID              types.String                           `tfsdk:"session_id"`
	Spot                   types.Bool                             `tfsdk:"spot"`
	StatusInfo             *tfTypes.DataStudioStatusInfo          `tfsdk:"status_info"`
	StudioURL              types.String                           `tfsdk:"studio_url"`
	Template               *tfTypes.DataStudioTemplate            `tfsdk:"template"`
	User                   *tfTypes.StudioUser                    `tfsdk:"user"`
	WaveBuildURL           types.String                           `tfsdk:"wave_build_url"`
	WorkspaceID            types.Int64                            `queryParam:"style=form,explode=true,name=workspaceId" tfsdk:"workspace_id"`
}

func (r *StudiosResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_studios"
}

func (r *StudiosResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "Studios is a unified platform where you can host a combination of\ncontainer images and compute environments for interactive analysis using\nyour preferred tools, like JupyterLab, an R-IDE, Visual Studio Code IDEs,\nor Xpra remote desktops. Each Studio session is an individual interactive\nenvironment that encapsulates the live environment for dynamic data analysis.\n\nNote:\nOn Seqera Cloud, the free tier permits only one running Studio session at a time.\nTo run simultaneous sessions, contact Seqera for a Seqera Cloud Pro license.\n",
		Attributes: map[string]schema.Attribute{
			"active_connections": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"avatar": schema.StringAttribute{
							Computed: true,
						},
						"email": schema.StringAttribute{
							Computed: true,
						},
						"id": schema.Int64Attribute{
							Computed: true,
						},
						"last_active": schema.StringAttribute{
							Computed: true,
							Validators: []validator.String{
								validators.IsRFC3339(),
							},
						},
						"user_name": schema.StringAttribute{
							Computed: true,
						},
					},
				},
			},
			"auto_start": schema.BoolAttribute{
				Optional: true,
				PlanModifiers: []planmodifier.Bool{
					boolplanmodifier.RequiresReplaceIfConfigured(),
				},
				Description: `Optionally disable the Studio's automatic launch when it is created. Requires replacement if changed.`,
			},
			"base_image": schema.StringAttribute{
				Computed: true,
			},
			"compute_env": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"credentials_id": schema.StringAttribute{
						Computed: true,
					},
					"id": schema.StringAttribute{
						Computed: true,
					},
					"name": schema.StringAttribute{
						Computed: true,
					},
					"platform": schema.StringAttribute{
						Computed: true,
					},
					"region": schema.StringAttribute{
						Computed: true,
					},
					"work_dir": schema.StringAttribute{
						Computed: true,
					},
				},
			},
			"compute_env_id": schema.StringAttribute{
				Required: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
				},
				Description: `Requires replacement if changed.`,
				Validators: []validator.String{
					stringvalidator.UTF8LengthAtLeast(1),
				},
			},
			"configuration": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplaceIfConfigured(),
					speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
				},
				Attributes: map[string]schema.Attribute{
					"conda_environment": schema.StringAttribute{
						Computed: true,
						Optional: true,
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplaceIfConfigured(),
							speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
						},
						Description: `Requires replacement if changed.`,
						Validators: []validator.String{
							stringvalidator.UTF8LengthAtMost(2048),
						},
					},
					"cpu": schema.Int32Attribute{
						Computed: true,
						Optional: true,
						PlanModifiers: []planmodifier.Int32{
							int32planmodifier.RequiresReplaceIfConfigured(),
							speakeasy_int32planmodifier.SuppressDiff(speakeasy_int32planmodifier.ExplicitSuppress),
						},
						Description: `Requires replacement if changed.`,
					},
					"gpu": schema.Int32Attribute{
						Computed: true,
						Optional: true,
						PlanModifiers: []planmodifier.Int32{
							int32planmodifier.RequiresReplaceIfConfigured(),
							speakeasy_int32planmodifier.SuppressDiff(speakeasy_int32planmodifier.ExplicitSuppress),
						},
						Description: `Requires replacement if changed.`,
					},
					"lifespan_hours": schema.Int32Attribute{
						Computed: true,
						Optional: true,
						PlanModifiers: []planmodifier.Int32{
							int32planmodifier.RequiresReplaceIfConfigured(),
							speakeasy_int32planmodifier.SuppressDiff(speakeasy_int32planmodifier.ExplicitSuppress),
						},
						Description: `Requires replacement if changed.`,
					},
					"memory": schema.Int32Attribute{
						Computed: true,
						Optional: true,
						PlanModifiers: []planmodifier.Int32{
							int32planmodifier.RequiresReplaceIfConfigured(),
							speakeasy_int32planmodifier.SuppressDiff(speakeasy_int32planmodifier.ExplicitSuppress),
						},
						Description: `Requires replacement if changed.`,
					},
					"mount_data": schema.ListAttribute{
						Computed: true,
						Optional: true,
						PlanModifiers: []planmodifier.List{
							listplanmodifier.RequiresReplaceIfConfigured(),
							speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
						},
						ElementType: types.StringType,
						Description: `Requires replacement if changed.`,
					},
				},
				Description: `Requires replacement if changed.`,
			},
			"custom_image": schema.BoolAttribute{
				Computed: true,
			},
			"data_studio_tool_url": schema.StringAttribute{
				Required: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
				},
				Description: `Requires replacement if changed.`,
				Validators: []validator.String{
					stringvalidator.UTF8LengthAtLeast(1),
				},
			},
			"date_created": schema.StringAttribute{
				Computed: true,
				Validators: []validator.String{
					validators.IsRFC3339(),
				},
			},
			"description": schema.StringAttribute{
				Computed: true,
				Optional: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
					speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
				},
				Description: `Requires replacement if changed.`,
				Validators: []validator.String{
					stringvalidator.UTF8LengthAtMost(2048),
				},
			},
			"effective_lifespan_hours": schema.Int32Attribute{
				Computed: true,
			},
			"initial_checkpoint_id": schema.Int64Attribute{
				Optional: true,
				PlanModifiers: []planmodifier.Int64{
					int64planmodifier.RequiresReplaceIfConfigured(),
				},
				Description: `Requires replacement if changed.`,
			},
			"is_private": schema.BoolAttribute{
				Computed: true,
				Optional: true,
				PlanModifiers: []planmodifier.Bool{
					boolplanmodifier.RequiresReplaceIfConfigured(),
					speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
				},
				Description: `Requires replacement if changed.`,
			},
			"label_ids": schema.ListAttribute{
				Optional: true,
				PlanModifiers: []planmodifier.List{
					listplanmodifier.RequiresReplaceIfConfigured(),
				},
				ElementType: types.Int64Type,
				Description: `Requires replacement if changed.`,
			},
			"labels": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"date_created": schema.StringAttribute{
							Computed:    true,
							Description: `Timestamp when the label was created`,
							Validators: []validator.String{
								validators.IsRFC3339(),
							},
						},
						"id": schema.Int64Attribute{
							Computed:    true,
							Description: `Unique numeric identifier for the label`,
						},
						"is_default": schema.BoolAttribute{
							Computed:    true,
							Description: `Flag indicating if this is a default system label`,
						},
						"name": schema.StringAttribute{
							Computed:    true,
							Description: `Name or key of the label`,
						},
						"resource": schema.BoolAttribute{
							Computed:    true,
							Description: `Flag indicating if this is a resource-level label`,
						},
						"value": schema.StringAttribute{
							Computed:    true,
							Description: `Value associated with the label`,
						},
					},
				},
			},
			"last_started": schema.StringAttribute{
				Computed: true,
				Validators: []validator.String{
					validators.IsRFC3339(),
				},
			},
			"last_updated": schema.StringAttribute{
				Computed: true,
				Validators: []validator.String{
					validators.IsRFC3339(),
				},
			},
			"mounted_data_links": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"credentials": schema.ListNestedAttribute{
							Computed: true,
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"id": schema.StringAttribute{
										Computed: true,
									},
									"name": schema.StringAttribute{
										Computed: true,
									},
									"provider_type": schema.StringAttribute{
										Computed:    true,
										Description: `must be one of ["aws", "google", "azure", "azure_entra", "seqeracompute"]`,
										Validators: []validator.String{
											stringvalidator.OneOf(
												"aws",
												"google",
												"azure",
												"azure_entra",
												"seqeracompute",
											),
										},
									},
								},
							},
							Description: `Array of credentials required to access the data link`,
						},
						"data_link_id": schema.StringAttribute{
							Computed:    true,
							Description: `Unique identifier for the data link`,
						},
						"description": schema.StringAttribute{
							Computed:    true,
							Description: `Description of the data link's purpose and contents`,
						},
						"hidden": schema.BoolAttribute{
							Computed: true,
						},
						"message": schema.StringAttribute{
							Computed: true,
						},
						"name": schema.StringAttribute{
							Computed:    true,
							Description: `Display name for the data link connection`,
						},
						"provider_type": schema.StringAttribute{
							Computed:    true,
							Description: `must be one of ["aws", "google", "azure", "azure_entra", "seqeracompute"]`,
							Validators: []validator.String{
								stringvalidator.OneOf(
									"aws",
									"google",
									"azure",
									"azure_entra",
									"seqeracompute",
								),
							},
						},
						"public_accessible": schema.BoolAttribute{
							Computed: true,
						},
						"region": schema.StringAttribute{
							Computed:    true,
							Description: `Geographic region where the data link is hosted`,
						},
						"resource_ref": schema.StringAttribute{
							Computed:    true,
							Description: `Reference identifier for the external resource`,
						},
						"status": schema.StringAttribute{
							Computed:    true,
							Description: `must be one of ["VALID", "INVALID"]`,
							Validators: []validator.String{
								stringvalidator.OneOf(
									"VALID",
									"INVALID",
								),
							},
						},
						"type": schema.StringAttribute{
							Computed:    true,
							Description: `must be "bucket"`,
							Validators: []validator.String{
								stringvalidator.OneOf("bucket"),
							},
						},
					},
				},
			},
			"name": schema.StringAttribute{
				Required: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
					speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
				},
				Description: `Requires replacement if changed.`,
				Validators: []validator.String{
					stringvalidator.UTF8LengthBetween(1, 80),
				},
			},
			"parent_checkpoint": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"checkpoint_id": schema.Int64Attribute{
						Computed: true,
					},
					"checkpoint_name": schema.StringAttribute{
						Computed: true,
					},
					"session_id": schema.StringAttribute{
						Computed: true,
					},
					"studio_name": schema.StringAttribute{
						Computed: true,
					},
				},
			},
			"progress": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"message": schema.StringAttribute{
							Computed: true,
						},
						"status": schema.StringAttribute{
							Computed:    true,
							Description: `must be one of ["pending", "in-progress", "succeeded", "errored"]`,
							Validators: []validator.String{
								stringvalidator.OneOf(
									"pending",
									"in-progress",
									"succeeded",
									"errored",
								),
							},
						},
						"warnings": schema.ListAttribute{
							Computed:    true,
							ElementType: types.StringType,
						},
					},
				},
			},
			"session_id": schema.StringAttribute{
				Computed:    true,
				Description: `Unique identifier for the Studio session`,
			},
			"spot": schema.BoolAttribute{
				Optional: true,
				PlanModifiers: []planmodifier.Bool{
					boolplanmodifier.RequiresReplaceIfConfigured(),
				},
				Description: `Requires replacement if changed.`,
			},
			"status_info": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"last_update": schema.StringAttribute{
						Computed: true,
						Validators: []validator.String{
							validators.IsRFC3339(),
						},
					},
					"message": schema.StringAttribute{
						Computed: true,
					},
					"status": schema.StringAttribute{
						Computed:    true,
						Description: `must be one of ["starting", "running", "stopping", "stopped", "errored", "building", "buildFailed"]`,
						Validators: []validator.String{
							stringvalidator.OneOf(
								"starting",
								"running",
								"stopping",
								"stopped",
								"errored",
								"building",
								"buildFailed",
							),
						},
					},
				},
			},
			"studio_url": schema.StringAttribute{
				Computed:    true,
				Description: `URL to access the running Studio instance`,
			},
			"template": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"icon": schema.StringAttribute{
						Computed: true,
					},
					"repository": schema.StringAttribute{
						Computed: true,
					},
					"status": schema.StringAttribute{
						Computed:    true,
						Description: `must be one of ["recommended", "deprecated", "experimental", "unsupported"]`,
						Validators: []validator.String{
							stringvalidator.OneOf(
								"recommended",
								"deprecated",
								"experimental",
								"unsupported",
							),
						},
					},
					"tool": schema.StringAttribute{
						Computed: true,
					},
				},
			},
			"user": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"avatar": schema.StringAttribute{
						Computed: true,
					},
					"email": schema.StringAttribute{
						Computed: true,
					},
					"id": schema.Int64Attribute{
						Computed: true,
					},
					"user_name": schema.StringAttribute{
						Computed: true,
					},
				},
			},
			"wave_build_url": schema.StringAttribute{
				Computed: true,
			},
			"workspace_id": schema.Int64Attribute{
				Computed: true,
				Optional: true,
				PlanModifiers: []planmodifier.Int64{
					int64planmodifier.RequiresReplaceIfConfigured(),
					speakeasy_int64planmodifier.SuppressDiff(speakeasy_int64planmodifier.ExplicitSuppress),
				},
				Description: `Workspace numeric identifier. Requires replacement if changed.`,
			},
		},
	}
}

func (r *StudiosResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.Seqera)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *sdk.Seqera, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *StudiosResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *StudiosResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(plan.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsCreateDataStudioRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Studios.CreateDataStudio(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	switch res.StatusCode {
	case 200, 201:
		break
	default:
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.DataStudioCreateResponse != nil && res.DataStudioCreateResponse.Studio != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedDataStudioDto(ctx, res.DataStudioCreateResponse.Studio)...)

	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(refreshPlan(ctx, plan, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}
	request1, request1Diags := data.ToOperationsDescribeDataStudioRequest(ctx)
	resp.Diagnostics.Append(request1Diags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res1, err := r.client.Studios.DescribeDataStudio(ctx, *request1)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res1 != nil && res1.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res1.RawResponse))
		}
		return
	}
	if res1 == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res1))
		return
	}
	switch res1.StatusCode {
	case 200, 202:
		break
	default:
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res1.StatusCode), debugResponse(res1.RawResponse))
		return
	}
	if !(res1.DataStudioDto != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res1.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedDataStudioDto(ctx, res1.DataStudioDto)...)

	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(refreshPlan(ctx, plan, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *StudiosResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *StudiosResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsDescribeDataStudioRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Studios.DescribeDataStudio(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode == 404 {
		resp.State.RemoveResource(ctx)
		return
	}
	switch res.StatusCode {
	case 200, 202:
		break
	default:
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.DataStudioDto != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedDataStudioDto(ctx, res.DataStudioDto)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *StudiosResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *StudiosResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	merge(ctx, req, resp, &data)
	if resp.Diagnostics.HasError() {
		return
	}

	// Not Implemented; all attributes marked as RequiresReplace

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *StudiosResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *StudiosResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsDeleteDataStudioRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Studios.DeleteDataStudio(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 204 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}

}

func (r *StudiosResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("session_id"), req.ID)...)
}
