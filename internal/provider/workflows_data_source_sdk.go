// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"encoding/json"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/speakeasy/terraform-provider-seqera/internal/provider/typeconvert"
	tfTypes "github.com/speakeasy/terraform-provider-seqera/internal/provider/types"
	"github.com/speakeasy/terraform-provider-seqera/internal/sdk/models/operations"
	"github.com/speakeasy/terraform-provider-seqera/internal/sdk/models/shared"
)

func (r *WorkflowsDataSourceModel) ToOperationsDescribeWorkflowRequest(ctx context.Context) (*operations.DescribeWorkflowRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var workflowID string
	workflowID = r.WorkflowID.ValueString()

	workspaceID := new(int64)
	if !r.WorkspaceID.IsUnknown() && !r.WorkspaceID.IsNull() {
		*workspaceID = r.WorkspaceID.ValueInt64()
	} else {
		workspaceID = nil
	}
	attributes := make([]shared.WorkflowQueryAttribute, 0, len(r.Attributes))
	for _, attributesItem := range r.Attributes {
		attributes = append(attributes, shared.WorkflowQueryAttribute(attributesItem.ValueString()))
	}
	out := operations.DescribeWorkflowRequest{
		WorkflowID:  workflowID,
		WorkspaceID: workspaceID,
		Attributes:  attributes,
	}

	return &out, diags
}

func (r *WorkflowsDataSourceModel) RefreshFromSharedDescribeWorkflowResponse(ctx context.Context, resp *shared.DescribeWorkflowResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		if resp.JobInfo == nil {
			r.JobInfo = nil
		} else {
			r.JobInfo = &tfTypes.JobInfoDto{}
			r.JobInfo.ExitCode = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.JobInfo.ExitCode))
			r.JobInfo.ID = types.Int64PointerValue(resp.JobInfo.ID)
			r.JobInfo.Message = types.StringPointerValue(resp.JobInfo.Message)
			r.JobInfo.OperationID = types.StringPointerValue(resp.JobInfo.OperationID)
			r.JobInfo.Status = types.StringPointerValue(resp.JobInfo.Status)
		}
		r.Labels = []tfTypes.LabelDbDto{}
		if len(r.Labels) > len(resp.Labels) {
			r.Labels = r.Labels[:len(resp.Labels)]
		}
		for labelsCount, labelsItem := range resp.Labels {
			var labels tfTypes.LabelDbDto
			labels.DateCreated = types.StringPointerValue(typeconvert.TimePointerToStringPointer(labelsItem.DateCreated))
			labels.ID = types.Int64PointerValue(labelsItem.ID)
			labels.IsDefault = types.BoolPointerValue(labelsItem.IsDefault)
			labels.Name = types.StringPointerValue(labelsItem.Name)
			labels.Resource = types.BoolPointerValue(labelsItem.Resource)
			labels.Value = types.StringPointerValue(labelsItem.Value)
			if labelsCount+1 > len(r.Labels) {
				r.Labels = append(r.Labels, labels)
			} else {
				r.Labels[labelsCount].DateCreated = labels.DateCreated
				r.Labels[labelsCount].ID = labels.ID
				r.Labels[labelsCount].IsDefault = labels.IsDefault
				r.Labels[labelsCount].Name = labels.Name
				r.Labels[labelsCount].Resource = labels.Resource
				r.Labels[labelsCount].Value = labels.Value
			}
		}
		r.Messages = make([]types.String, 0, len(resp.Messages))
		for _, v := range resp.Messages {
			r.Messages = append(r.Messages, types.StringValue(v))
		}
		r.Optimized = types.BoolPointerValue(resp.Optimized)
		r.OrgID = types.Int64PointerValue(resp.OrgID)
		r.OrgName = types.StringPointerValue(resp.OrgName)
		if resp.Platform == nil {
			r.Platform = nil
		} else {
			r.Platform = &tfTypes.ComputePlatformDto{}
			r.Platform.ID = types.StringPointerValue(resp.Platform.ID)
			r.Platform.Name = types.StringPointerValue(resp.Platform.Name)
		}
		if resp.Progress == nil {
			r.Progress = nil
		} else {
			r.Progress = &tfTypes.ProgressData{}
			r.Progress.ProcessesProgress = []tfTypes.ProcessLoad{}
			if len(r.Progress.ProcessesProgress) > len(resp.Progress.ProcessesProgress) {
				r.Progress.ProcessesProgress = r.Progress.ProcessesProgress[:len(resp.Progress.ProcessesProgress)]
			}
			for processesProgressCount, processesProgressItem := range resp.Progress.ProcessesProgress {
				var processesProgress tfTypes.ProcessLoad
				processesProgress.Aborted = types.Int64Value(processesProgressItem.Aborted)
				processesProgress.Cached = types.Int64Value(processesProgressItem.Cached)
				processesProgress.CPUEfficiency = types.Float32PointerValue(processesProgressItem.CPUEfficiency)
				processesProgress.CPULoad = types.Int64Value(processesProgressItem.CPULoad)
				processesProgress.Cpus = types.Int64Value(processesProgressItem.Cpus)
				processesProgress.CPUTime = types.Int64Value(processesProgressItem.CPUTime)
				processesProgress.DateCreated = types.StringPointerValue(typeconvert.TimePointerToStringPointer(processesProgressItem.DateCreated))
				processesProgress.Failed = types.Int64Value(processesProgressItem.Failed)
				processesProgress.InvCtxSwitch = types.Int64Value(processesProgressItem.InvCtxSwitch)
				processesProgress.LastUpdated = types.StringPointerValue(typeconvert.TimePointerToStringPointer(processesProgressItem.LastUpdated))
				processesProgress.LoadCpus = types.Int64Value(processesProgressItem.LoadCpus)
				processesProgress.LoadMemory = types.Int64Value(processesProgressItem.LoadMemory)
				processesProgress.LoadTasks = types.Int64Value(processesProgressItem.LoadTasks)
				processesProgress.MemoryEfficiency = types.Float32PointerValue(processesProgressItem.MemoryEfficiency)
				processesProgress.MemoryReq = types.Int64Value(processesProgressItem.MemoryReq)
				processesProgress.MemoryRss = types.Int64Value(processesProgressItem.MemoryRss)
				processesProgress.PeakCpus = types.Int64Value(processesProgressItem.PeakCpus)
				processesProgress.PeakMemory = types.Int64Value(processesProgressItem.PeakMemory)
				processesProgress.PeakTasks = types.Int64Value(processesProgressItem.PeakTasks)
				processesProgress.Pending = types.Int64Value(processesProgressItem.Pending)
				processesProgress.Process = types.StringValue(processesProgressItem.Process)
				processesProgress.ReadBytes = types.Int64Value(processesProgressItem.ReadBytes)
				processesProgress.Running = types.Int64Value(processesProgressItem.Running)
				processesProgress.Submitted = types.Int64Value(processesProgressItem.Submitted)
				processesProgress.Succeeded = types.Int64Value(processesProgressItem.Succeeded)
				processesProgress.VolCtxSwitch = types.Int64Value(processesProgressItem.VolCtxSwitch)
				processesProgress.WriteBytes = types.Int64Value(processesProgressItem.WriteBytes)
				if processesProgressCount+1 > len(r.Progress.ProcessesProgress) {
					r.Progress.ProcessesProgress = append(r.Progress.ProcessesProgress, processesProgress)
				} else {
					r.Progress.ProcessesProgress[processesProgressCount].Aborted = processesProgress.Aborted
					r.Progress.ProcessesProgress[processesProgressCount].Cached = processesProgress.Cached
					r.Progress.ProcessesProgress[processesProgressCount].CPUEfficiency = processesProgress.CPUEfficiency
					r.Progress.ProcessesProgress[processesProgressCount].CPULoad = processesProgress.CPULoad
					r.Progress.ProcessesProgress[processesProgressCount].Cpus = processesProgress.Cpus
					r.Progress.ProcessesProgress[processesProgressCount].CPUTime = processesProgress.CPUTime
					r.Progress.ProcessesProgress[processesProgressCount].DateCreated = processesProgress.DateCreated
					r.Progress.ProcessesProgress[processesProgressCount].Failed = processesProgress.Failed
					r.Progress.ProcessesProgress[processesProgressCount].InvCtxSwitch = processesProgress.InvCtxSwitch
					r.Progress.ProcessesProgress[processesProgressCount].LastUpdated = processesProgress.LastUpdated
					r.Progress.ProcessesProgress[processesProgressCount].LoadCpus = processesProgress.LoadCpus
					r.Progress.ProcessesProgress[processesProgressCount].LoadMemory = processesProgress.LoadMemory
					r.Progress.ProcessesProgress[processesProgressCount].LoadTasks = processesProgress.LoadTasks
					r.Progress.ProcessesProgress[processesProgressCount].MemoryEfficiency = processesProgress.MemoryEfficiency
					r.Progress.ProcessesProgress[processesProgressCount].MemoryReq = processesProgress.MemoryReq
					r.Progress.ProcessesProgress[processesProgressCount].MemoryRss = processesProgress.MemoryRss
					r.Progress.ProcessesProgress[processesProgressCount].PeakCpus = processesProgress.PeakCpus
					r.Progress.ProcessesProgress[processesProgressCount].PeakMemory = processesProgress.PeakMemory
					r.Progress.ProcessesProgress[processesProgressCount].PeakTasks = processesProgress.PeakTasks
					r.Progress.ProcessesProgress[processesProgressCount].Pending = processesProgress.Pending
					r.Progress.ProcessesProgress[processesProgressCount].Process = processesProgress.Process
					r.Progress.ProcessesProgress[processesProgressCount].ReadBytes = processesProgress.ReadBytes
					r.Progress.ProcessesProgress[processesProgressCount].Running = processesProgress.Running
					r.Progress.ProcessesProgress[processesProgressCount].Submitted = processesProgress.Submitted
					r.Progress.ProcessesProgress[processesProgressCount].Succeeded = processesProgress.Succeeded
					r.Progress.ProcessesProgress[processesProgressCount].VolCtxSwitch = processesProgress.VolCtxSwitch
					r.Progress.ProcessesProgress[processesProgressCount].WriteBytes = processesProgress.WriteBytes
				}
			}
			r.Progress.TotalProcesses = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.Progress.TotalProcesses))
			if resp.Progress.WorkflowProgress == nil {
				r.Progress.WorkflowProgress = nil
			} else {
				r.Progress.WorkflowProgress = &tfTypes.WorkflowLoad{}
				r.Progress.WorkflowProgress.Aborted = types.Int64Value(resp.Progress.WorkflowProgress.Aborted)
				r.Progress.WorkflowProgress.Cached = types.Int64Value(resp.Progress.WorkflowProgress.Cached)
				r.Progress.WorkflowProgress.Cost = types.Float64PointerValue(resp.Progress.WorkflowProgress.Cost)
				r.Progress.WorkflowProgress.CPUEfficiency = types.Float32PointerValue(resp.Progress.WorkflowProgress.CPUEfficiency)
				r.Progress.WorkflowProgress.CPULoad = types.Int64Value(resp.Progress.WorkflowProgress.CPULoad)
				r.Progress.WorkflowProgress.Cpus = types.Int64Value(resp.Progress.WorkflowProgress.Cpus)
				r.Progress.WorkflowProgress.CPUTime = types.Int64Value(resp.Progress.WorkflowProgress.CPUTime)
				r.Progress.WorkflowProgress.DateCreated = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.Progress.WorkflowProgress.DateCreated))
				r.Progress.WorkflowProgress.Executors = make([]types.String, 0, len(resp.Progress.WorkflowProgress.Executors))
				for _, v := range resp.Progress.WorkflowProgress.Executors {
					r.Progress.WorkflowProgress.Executors = append(r.Progress.WorkflowProgress.Executors, types.StringValue(v))
				}
				r.Progress.WorkflowProgress.Failed = types.Int64Value(resp.Progress.WorkflowProgress.Failed)
				r.Progress.WorkflowProgress.InvCtxSwitch = types.Int64Value(resp.Progress.WorkflowProgress.InvCtxSwitch)
				r.Progress.WorkflowProgress.LastUpdated = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.Progress.WorkflowProgress.LastUpdated))
				r.Progress.WorkflowProgress.LoadCpus = types.Int64Value(resp.Progress.WorkflowProgress.LoadCpus)
				r.Progress.WorkflowProgress.LoadMemory = types.Int64Value(resp.Progress.WorkflowProgress.LoadMemory)
				r.Progress.WorkflowProgress.LoadTasks = types.Int64Value(resp.Progress.WorkflowProgress.LoadTasks)
				r.Progress.WorkflowProgress.MemoryEfficiency = types.Float32PointerValue(resp.Progress.WorkflowProgress.MemoryEfficiency)
				r.Progress.WorkflowProgress.MemoryReq = types.Int64Value(resp.Progress.WorkflowProgress.MemoryReq)
				r.Progress.WorkflowProgress.MemoryRss = types.Int64Value(resp.Progress.WorkflowProgress.MemoryRss)
				r.Progress.WorkflowProgress.PeakCpus = types.Int64Value(resp.Progress.WorkflowProgress.PeakCpus)
				r.Progress.WorkflowProgress.PeakMemory = types.Int64Value(resp.Progress.WorkflowProgress.PeakMemory)
				r.Progress.WorkflowProgress.PeakTasks = types.Int64Value(resp.Progress.WorkflowProgress.PeakTasks)
				r.Progress.WorkflowProgress.Pending = types.Int64Value(resp.Progress.WorkflowProgress.Pending)
				r.Progress.WorkflowProgress.ReadBytes = types.Int64Value(resp.Progress.WorkflowProgress.ReadBytes)
				r.Progress.WorkflowProgress.Running = types.Int64Value(resp.Progress.WorkflowProgress.Running)
				r.Progress.WorkflowProgress.Submitted = types.Int64Value(resp.Progress.WorkflowProgress.Submitted)
				r.Progress.WorkflowProgress.Succeeded = types.Int64Value(resp.Progress.WorkflowProgress.Succeeded)
				r.Progress.WorkflowProgress.VolCtxSwitch = types.Int64Value(resp.Progress.WorkflowProgress.VolCtxSwitch)
				r.Progress.WorkflowProgress.WriteBytes = types.Int64Value(resp.Progress.WorkflowProgress.WriteBytes)
			}
		}
		if resp.Workflow == nil {
			r.Workflow = nil
		} else {
			r.Workflow = &tfTypes.Workflow{}
			r.Workflow.CommandLine = types.StringValue(resp.Workflow.CommandLine)
			r.Workflow.CommitID = types.StringPointerValue(resp.Workflow.CommitID)
			r.Workflow.Complete = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.Workflow.Complete))
			r.Workflow.ConfigFiles = make([]types.String, 0, len(resp.Workflow.ConfigFiles))
			for _, v := range resp.Workflow.ConfigFiles {
				r.Workflow.ConfigFiles = append(r.Workflow.ConfigFiles, types.StringValue(v))
			}
			r.Workflow.ConfigText = types.StringPointerValue(resp.Workflow.ConfigText)
			r.Workflow.Container = types.StringPointerValue(resp.Workflow.Container)
			r.Workflow.ContainerEngine = types.StringPointerValue(resp.Workflow.ContainerEngine)
			r.Workflow.DateCreated = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.Workflow.DateCreated))
			r.Workflow.Deleted = types.BoolPointerValue(resp.Workflow.Deleted)
			r.Workflow.Duration = types.Int64PointerValue(resp.Workflow.Duration)
			r.Workflow.ErrorMessage = types.StringPointerValue(resp.Workflow.ErrorMessage)
			r.Workflow.ErrorReport = types.StringPointerValue(resp.Workflow.ErrorReport)
			r.Workflow.ExitStatus = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.Workflow.ExitStatus))
			r.Workflow.HomeDir = types.StringPointerValue(resp.Workflow.HomeDir)
			r.Workflow.ID = types.StringPointerValue(resp.Workflow.ID)
			r.Workflow.LastUpdated = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.Workflow.LastUpdated))
			r.Workflow.LaunchDir = types.StringPointerValue(resp.Workflow.LaunchDir)
			r.Workflow.LaunchID = types.StringPointerValue(resp.Workflow.LaunchID)
			r.Workflow.LogFile = types.StringPointerValue(resp.Workflow.LogFile)
			if resp.Workflow.Manifest == nil {
				r.Workflow.Manifest = nil
			} else {
				r.Workflow.Manifest = &tfTypes.WfManifest{}
				r.Workflow.Manifest.Author = types.StringPointerValue(resp.Workflow.Manifest.Author)
				r.Workflow.Manifest.DefaultBranch = types.StringPointerValue(resp.Workflow.Manifest.DefaultBranch)
				r.Workflow.Manifest.Description = types.StringPointerValue(resp.Workflow.Manifest.Description)
				r.Workflow.Manifest.Gitmodules = types.StringPointerValue(resp.Workflow.Manifest.Gitmodules)
				r.Workflow.Manifest.HomePage = types.StringPointerValue(resp.Workflow.Manifest.HomePage)
				r.Workflow.Manifest.Icon = types.StringPointerValue(resp.Workflow.Manifest.Icon)
				r.Workflow.Manifest.MainScript = types.StringPointerValue(resp.Workflow.Manifest.MainScript)
				r.Workflow.Manifest.Name = types.StringPointerValue(resp.Workflow.Manifest.Name)
				r.Workflow.Manifest.NextflowVersion = types.StringPointerValue(resp.Workflow.Manifest.NextflowVersion)
				r.Workflow.Manifest.Version = types.StringPointerValue(resp.Workflow.Manifest.Version)
			}
			if resp.Workflow.Nextflow == nil {
				r.Workflow.Nextflow = nil
			} else {
				r.Workflow.Nextflow = &tfTypes.WfNextflow{}
				r.Workflow.Nextflow.Build = types.StringPointerValue(resp.Workflow.Nextflow.Build)
				r.Workflow.Nextflow.Timestamp = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.Workflow.Nextflow.Timestamp))
				r.Workflow.Nextflow.Version = types.StringPointerValue(resp.Workflow.Nextflow.Version)
			}
			r.Workflow.OperationID = types.StringPointerValue(resp.Workflow.OperationID)
			r.Workflow.OutFile = types.StringPointerValue(resp.Workflow.OutFile)
			r.Workflow.OwnerID = types.Int64PointerValue(resp.Workflow.OwnerID)
			if len(resp.Workflow.Params) > 0 {
				r.Workflow.Params = make(map[string]types.String, len(resp.Workflow.Params))
				for key, value := range resp.Workflow.Params {
					result, _ := json.Marshal(value)
					r.Workflow.Params[key] = types.StringValue(string(result))
				}
			}
			r.Workflow.Profile = types.StringPointerValue(resp.Workflow.Profile)
			r.Workflow.ProjectDir = types.StringPointerValue(resp.Workflow.ProjectDir)
			r.Workflow.ProjectName = types.StringValue(resp.Workflow.ProjectName)
			r.Workflow.Repository = types.StringPointerValue(resp.Workflow.Repository)
			r.Workflow.RequiresAttention = types.BoolPointerValue(resp.Workflow.RequiresAttention)
			r.Workflow.Resume = types.BoolPointerValue(resp.Workflow.Resume)
			r.Workflow.Revision = types.StringPointerValue(resp.Workflow.Revision)
			r.Workflow.RunName = types.StringValue(resp.Workflow.RunName)
			r.Workflow.ScriptFile = types.StringPointerValue(resp.Workflow.ScriptFile)
			r.Workflow.ScriptID = types.StringPointerValue(resp.Workflow.ScriptID)
			r.Workflow.ScriptName = types.StringPointerValue(resp.Workflow.ScriptName)
			r.Workflow.SessionID = types.StringValue(resp.Workflow.SessionID)
			r.Workflow.Start = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.Workflow.Start))
			if resp.Workflow.Stats == nil {
				r.Workflow.Stats = nil
			} else {
				r.Workflow.Stats = &tfTypes.WfStats{}
				r.Workflow.Stats.CachedCount = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.Workflow.Stats.CachedCount))
				r.Workflow.Stats.CachedCountFmt = types.StringPointerValue(resp.Workflow.Stats.CachedCountFmt)
				r.Workflow.Stats.CachedDuration = types.Int64PointerValue(resp.Workflow.Stats.CachedDuration)
				r.Workflow.Stats.CachedPct = types.Float32PointerValue(resp.Workflow.Stats.CachedPct)
				r.Workflow.Stats.ComputeTimeFmt = types.StringPointerValue(resp.Workflow.Stats.ComputeTimeFmt)
				r.Workflow.Stats.FailedCount = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.Workflow.Stats.FailedCount))
				r.Workflow.Stats.FailedCountFmt = types.StringPointerValue(resp.Workflow.Stats.FailedCountFmt)
				r.Workflow.Stats.FailedDuration = types.Int64PointerValue(resp.Workflow.Stats.FailedDuration)
				r.Workflow.Stats.FailedPct = types.Float32PointerValue(resp.Workflow.Stats.FailedPct)
				r.Workflow.Stats.IgnoredCount = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.Workflow.Stats.IgnoredCount))
				r.Workflow.Stats.IgnoredCountFmt = types.StringPointerValue(resp.Workflow.Stats.IgnoredCountFmt)
				r.Workflow.Stats.IgnoredPct = types.Float32PointerValue(resp.Workflow.Stats.IgnoredPct)
				r.Workflow.Stats.SucceedCount = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.Workflow.Stats.SucceedCount))
				r.Workflow.Stats.SucceedCountFmt = types.StringPointerValue(resp.Workflow.Stats.SucceedCountFmt)
				r.Workflow.Stats.SucceedDuration = types.Int64PointerValue(resp.Workflow.Stats.SucceedDuration)
				r.Workflow.Stats.SucceedPct = types.Float32PointerValue(resp.Workflow.Stats.SucceedPct)
			}
			if resp.Workflow.Status != nil {
				r.Workflow.Status = types.StringValue(string(*resp.Workflow.Status))
			} else {
				r.Workflow.Status = types.StringNull()
			}
			r.Workflow.Submit = types.StringValue(typeconvert.TimeToString(resp.Workflow.Submit))
			r.Workflow.Success = types.BoolPointerValue(resp.Workflow.Success)
			r.Workflow.UserName = types.StringValue(resp.Workflow.UserName)
			r.Workflow.WorkDir = types.StringValue(resp.Workflow.WorkDir)
		}
		r.WorkspaceID = types.Int64PointerValue(resp.WorkspaceID)
		r.WorkspaceName = types.StringPointerValue(resp.WorkspaceName)
		if resp.XSpeakeasyEntity == nil {
			r.XSpeakeasyEntity = types.StringNull()
		} else {
			xSpeakeasyEntityResult, _ := json.Marshal(resp.XSpeakeasyEntity)
			r.XSpeakeasyEntity = types.StringValue(string(xSpeakeasyEntityResult))
		}
	}

	return diags
}
