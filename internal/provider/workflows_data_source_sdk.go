// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"encoding/json"
	"github.com/hashicorp/terraform-plugin-framework-jsontypes/jsontypes"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/seqeralabs/terraform-provider-seqera/internal/provider/typeconvert"
	tfTypes "github.com/seqeralabs/terraform-provider-seqera/internal/provider/types"
	"github.com/seqeralabs/terraform-provider-seqera/internal/sdk/models/operations"
	"github.com/seqeralabs/terraform-provider-seqera/internal/sdk/models/shared"
)

func (r *WorkflowsDataSourceModel) RefreshFromSharedDescribeWorkflowResponse(ctx context.Context, resp *shared.DescribeWorkflowResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		if resp.Workflow == nil {
			r.Workflow = nil
		} else {
			r.Workflow = &tfTypes.Workflow{}
			r.Workflow.CommandLine = types.StringValue(resp.Workflow.CommandLine)
			r.Workflow.CommitID = types.StringPointerValue(resp.Workflow.CommitID)
			r.Workflow.Complete = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.Workflow.Complete))
			r.Workflow.ConfigFiles = make([]types.String, 0, len(resp.Workflow.ConfigFiles))
			for _, v := range resp.Workflow.ConfigFiles {
				r.Workflow.ConfigFiles = append(r.Workflow.ConfigFiles, types.StringValue(v))
			}
			r.Workflow.ConfigText = types.StringPointerValue(resp.Workflow.ConfigText)
			r.Workflow.Container = types.StringPointerValue(resp.Workflow.Container)
			r.Workflow.ContainerEngine = types.StringPointerValue(resp.Workflow.ContainerEngine)
			r.Workflow.DateCreated = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.Workflow.DateCreated))
			r.Workflow.Deleted = types.BoolPointerValue(resp.Workflow.Deleted)
			r.Workflow.Duration = types.Int64PointerValue(resp.Workflow.Duration)
			r.Workflow.ErrorMessage = types.StringPointerValue(resp.Workflow.ErrorMessage)
			r.Workflow.ErrorReport = types.StringPointerValue(resp.Workflow.ErrorReport)
			r.Workflow.ExitStatus = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.Workflow.ExitStatus))
			r.Workflow.HomeDir = types.StringPointerValue(resp.Workflow.HomeDir)
			r.Workflow.ID = types.StringPointerValue(resp.Workflow.ID)
			r.Workflow.LastUpdated = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.Workflow.LastUpdated))
			r.Workflow.LaunchDir = types.StringPointerValue(resp.Workflow.LaunchDir)
			r.Workflow.LaunchID = types.StringPointerValue(resp.Workflow.LaunchID)
			r.Workflow.LogFile = types.StringPointerValue(resp.Workflow.LogFile)
			if resp.Workflow.Manifest == nil {
				r.Workflow.Manifest = nil
			} else {
				r.Workflow.Manifest = &tfTypes.WfManifest{}
				r.Workflow.Manifest.Author = types.StringPointerValue(resp.Workflow.Manifest.Author)
				r.Workflow.Manifest.DefaultBranch = types.StringPointerValue(resp.Workflow.Manifest.DefaultBranch)
				r.Workflow.Manifest.Description = types.StringPointerValue(resp.Workflow.Manifest.Description)
				r.Workflow.Manifest.Gitmodules = types.StringPointerValue(resp.Workflow.Manifest.Gitmodules)
				r.Workflow.Manifest.HomePage = types.StringPointerValue(resp.Workflow.Manifest.HomePage)
				r.Workflow.Manifest.Icon = types.StringPointerValue(resp.Workflow.Manifest.Icon)
				r.Workflow.Manifest.MainScript = types.StringPointerValue(resp.Workflow.Manifest.MainScript)
				r.Workflow.Manifest.Name = types.StringPointerValue(resp.Workflow.Manifest.Name)
				r.Workflow.Manifest.NextflowVersion = types.StringPointerValue(resp.Workflow.Manifest.NextflowVersion)
				r.Workflow.Manifest.Version = types.StringPointerValue(resp.Workflow.Manifest.Version)
			}
			if resp.Workflow.Nextflow == nil {
				r.Workflow.Nextflow = nil
			} else {
				r.Workflow.Nextflow = &tfTypes.WfNextflow{}
				r.Workflow.Nextflow.Build = types.StringPointerValue(resp.Workflow.Nextflow.Build)
				r.Workflow.Nextflow.Timestamp = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.Workflow.Nextflow.Timestamp))
				r.Workflow.Nextflow.Version = types.StringPointerValue(resp.Workflow.Nextflow.Version)
			}
			r.Workflow.OperationID = types.StringPointerValue(resp.Workflow.OperationID)
			r.Workflow.OutFile = types.StringPointerValue(resp.Workflow.OutFile)
			r.Workflow.OwnerID = types.Int64PointerValue(resp.Workflow.OwnerID)
			if len(resp.Workflow.Params) > 0 {
				r.Workflow.Params = make(map[string]jsontypes.Normalized, len(resp.Workflow.Params))
				for key, value := range resp.Workflow.Params {
					result, _ := json.Marshal(value)
					r.Workflow.Params[key] = jsontypes.NewNormalizedValue(string(result))
				}
			}
			r.Workflow.Profile = types.StringPointerValue(resp.Workflow.Profile)
			r.Workflow.ProjectDir = types.StringPointerValue(resp.Workflow.ProjectDir)
			r.Workflow.ProjectName = types.StringValue(resp.Workflow.ProjectName)
			r.Workflow.Repository = types.StringPointerValue(resp.Workflow.Repository)
			r.Workflow.RequiresAttention = types.BoolPointerValue(resp.Workflow.RequiresAttention)
			r.Workflow.Resume = types.BoolPointerValue(resp.Workflow.Resume)
			r.Workflow.Revision = types.StringPointerValue(resp.Workflow.Revision)
			r.Workflow.RunName = types.StringValue(resp.Workflow.RunName)
			r.Workflow.ScriptFile = types.StringPointerValue(resp.Workflow.ScriptFile)
			r.Workflow.ScriptID = types.StringPointerValue(resp.Workflow.ScriptID)
			r.Workflow.ScriptName = types.StringPointerValue(resp.Workflow.ScriptName)
			r.Workflow.SessionID = types.StringValue(resp.Workflow.SessionID)
			r.Workflow.Start = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.Workflow.Start))
			if resp.Workflow.Stats == nil {
				r.Workflow.Stats = nil
			} else {
				r.Workflow.Stats = &tfTypes.WfStats{}
				r.Workflow.Stats.CachedCount = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.Workflow.Stats.CachedCount))
				r.Workflow.Stats.CachedCountFmt = types.StringPointerValue(resp.Workflow.Stats.CachedCountFmt)
				r.Workflow.Stats.CachedDuration = types.Int64PointerValue(resp.Workflow.Stats.CachedDuration)
				r.Workflow.Stats.CachedPct = types.Float32PointerValue(resp.Workflow.Stats.CachedPct)
				r.Workflow.Stats.ComputeTimeFmt = types.StringPointerValue(resp.Workflow.Stats.ComputeTimeFmt)
				r.Workflow.Stats.FailedCount = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.Workflow.Stats.FailedCount))
				r.Workflow.Stats.FailedCountFmt = types.StringPointerValue(resp.Workflow.Stats.FailedCountFmt)
				r.Workflow.Stats.FailedDuration = types.Int64PointerValue(resp.Workflow.Stats.FailedDuration)
				r.Workflow.Stats.FailedPct = types.Float32PointerValue(resp.Workflow.Stats.FailedPct)
				r.Workflow.Stats.IgnoredCount = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.Workflow.Stats.IgnoredCount))
				r.Workflow.Stats.IgnoredCountFmt = types.StringPointerValue(resp.Workflow.Stats.IgnoredCountFmt)
				r.Workflow.Stats.IgnoredPct = types.Float32PointerValue(resp.Workflow.Stats.IgnoredPct)
				r.Workflow.Stats.SucceedCount = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.Workflow.Stats.SucceedCount))
				r.Workflow.Stats.SucceedCountFmt = types.StringPointerValue(resp.Workflow.Stats.SucceedCountFmt)
				r.Workflow.Stats.SucceedDuration = types.Int64PointerValue(resp.Workflow.Stats.SucceedDuration)
				r.Workflow.Stats.SucceedPct = types.Float32PointerValue(resp.Workflow.Stats.SucceedPct)
			}
			if resp.Workflow.Status != nil {
				r.Workflow.Status = types.StringValue(string(*resp.Workflow.Status))
			} else {
				r.Workflow.Status = types.StringNull()
			}
			r.Workflow.Submit = types.StringValue(typeconvert.TimeToString(resp.Workflow.Submit))
			r.Workflow.Success = types.BoolPointerValue(resp.Workflow.Success)
			r.Workflow.UserName = types.StringValue(resp.Workflow.UserName)
			r.Workflow.WorkDir = types.StringValue(resp.Workflow.WorkDir)
		}
		r.WorkspaceID = types.Int64PointerValue(resp.WorkspaceID)
	}

	return diags
}

func (r *WorkflowsDataSourceModel) ToOperationsDescribeWorkflowRequest(ctx context.Context) (*operations.DescribeWorkflowRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var workflowID string
	workflowID = r.WorkflowID.ValueString()

	workspaceID := new(int64)
	if !r.WorkspaceID.IsUnknown() && !r.WorkspaceID.IsNull() {
		*workspaceID = r.WorkspaceID.ValueInt64()
	} else {
		workspaceID = nil
	}
	attributes := make([]shared.WorkflowQueryAttribute, 0, len(r.Attributes))
	for _, attributesItem := range r.Attributes {
		attributes = append(attributes, shared.WorkflowQueryAttribute(attributesItem.ValueString()))
	}
	out := operations.DescribeWorkflowRequest{
		WorkflowID:  workflowID,
		WorkspaceID: workspaceID,
		Attributes:  attributes,
	}

	return &out, diags
}
