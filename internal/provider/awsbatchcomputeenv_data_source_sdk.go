// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/seqeralabs/terraform-provider-seqera/internal/provider/typeconvert"
	tfTypes "github.com/seqeralabs/terraform-provider-seqera/internal/provider/types"
	"github.com/seqeralabs/terraform-provider-seqera/internal/sdk/models/operations"
	"github.com/seqeralabs/terraform-provider-seqera/internal/sdk/models/shared"
)

func (r *AWSBatchComputeEnvDataSourceModel) RefreshFromSharedAWSBatchComputeEnv(ctx context.Context, resp *shared.AWSBatchComputeEnv) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.ComputeEnvID = types.StringPointerValue(resp.ComputeEnvID)
		if resp.Config == nil {
			r.Config = nil
		} else {
			r.Config = &tfTypes.Config{}
			r.Config.CliPath = types.StringPointerValue(resp.Config.CliPath)
			r.Config.ComputeJobRole = types.StringPointerValue(resp.Config.ComputeJobRole)
			r.Config.ComputeQueue = types.StringPointerValue(resp.Config.ComputeQueue)
			r.Config.EnableFusion = types.BoolPointerValue(resp.Config.EnableFusion)
			r.Config.EnableWave = types.BoolPointerValue(resp.Config.EnableWave)
			r.Config.ExecutionRole = types.StringPointerValue(resp.Config.ExecutionRole)
			if resp.Config.Forge == nil {
				r.Config.Forge = nil
			} else {
				r.Config.Forge = &tfTypes.Forge{}
				if resp.Config.Forge.AllocationStrategy != nil {
					r.Config.Forge.AllocationStrategy = types.StringValue(string(*resp.Config.Forge.AllocationStrategy))
				} else {
					r.Config.Forge.AllocationStrategy = types.StringNull()
				}
				r.Config.Forge.BidPercentage = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.Config.Forge.BidPercentage))
				r.Config.Forge.DisposeOnDeletion = types.BoolPointerValue(resp.Config.Forge.DisposeOnDeletion)
				r.Config.Forge.EbsAutoScale = types.BoolPointerValue(resp.Config.Forge.EbsAutoScale)
				r.Config.Forge.EbsBlockSize = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.Config.Forge.EbsBlockSize))
				r.Config.Forge.Ec2KeyPair = types.StringPointerValue(resp.Config.Forge.Ec2KeyPair)
				r.Config.Forge.EfsCreate = types.BoolPointerValue(resp.Config.Forge.EfsCreate)
				r.Config.Forge.EfsID = types.StringPointerValue(resp.Config.Forge.EfsID)
				r.Config.Forge.EfsMount = types.StringPointerValue(resp.Config.Forge.EfsMount)
				r.Config.Forge.FargateHeadEnabled = types.BoolPointerValue(resp.Config.Forge.FargateHeadEnabled)
				if resp.Config.Forge.ForgeType != nil {
					r.Config.Forge.ForgeType = types.StringValue(string(*resp.Config.Forge.ForgeType))
				} else {
					r.Config.Forge.ForgeType = types.StringNull()
				}
				r.Config.Forge.FsxMount = types.StringPointerValue(resp.Config.Forge.FsxMount)
				r.Config.Forge.FsxName = types.StringPointerValue(resp.Config.Forge.FsxName)
				r.Config.Forge.FsxSize = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.Config.Forge.FsxSize))
				r.Config.Forge.GpuEnabled = types.BoolPointerValue(resp.Config.Forge.GpuEnabled)
				r.Config.Forge.InstanceTypes = make([]types.String, 0, len(resp.Config.Forge.InstanceTypes))
				for _, v := range resp.Config.Forge.InstanceTypes {
					r.Config.Forge.InstanceTypes = append(r.Config.Forge.InstanceTypes, types.StringValue(v))
				}
				r.Config.Forge.MaxCpus = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.Config.Forge.MaxCpus))
				r.Config.Forge.MinCpus = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.Config.Forge.MinCpus))
				r.Config.Forge.SecurityGroups = make([]types.String, 0, len(resp.Config.Forge.SecurityGroups))
				for _, v := range resp.Config.Forge.SecurityGroups {
					r.Config.Forge.SecurityGroups = append(r.Config.Forge.SecurityGroups, types.StringValue(v))
				}
				r.Config.Forge.Subnets = make([]types.String, 0, len(resp.Config.Forge.Subnets))
				for _, v := range resp.Config.Forge.Subnets {
					r.Config.Forge.Subnets = append(r.Config.Forge.Subnets, types.StringValue(v))
				}
				r.Config.Forge.VpcID = types.StringPointerValue(resp.Config.Forge.VpcID)
			}
			r.Config.HeadJobCpus = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.Config.HeadJobCpus))
			r.Config.HeadJobMemoryMb = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.Config.HeadJobMemoryMb))
			r.Config.HeadJobRole = types.StringPointerValue(resp.Config.HeadJobRole)
			r.Config.HeadQueue = types.StringPointerValue(resp.Config.HeadQueue)
			r.Config.PostRunScript = types.StringPointerValue(resp.Config.PostRunScript)
			r.Config.PreRunScript = types.StringPointerValue(resp.Config.PreRunScript)
		}
		r.CredentialsID = types.StringValue(resp.CredentialsID)
		r.Description = types.StringPointerValue(resp.Description)
		r.Message = types.StringPointerValue(resp.Message)
		r.Name = types.StringValue(resp.Name)
		r.Region = types.StringValue(resp.Region)
		r.Status = types.StringPointerValue(resp.Status)
		r.WorkDirectory = types.StringValue(resp.WorkDirectory)
		r.WorkspaceID = types.Int64PointerValue(resp.WorkspaceID)
	}

	return diags
}

func (r *AWSBatchComputeEnvDataSourceModel) RefreshFromSharedDescribeAWSBatchComputeEnvResponse(ctx context.Context, resp *shared.DescribeAWSBatchComputeEnvResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		diags.Append(r.RefreshFromSharedAWSBatchComputeEnv(ctx, resp.ComputeEnv)...)

		if diags.HasError() {
			return diags
		}

	}

	return diags
}

func (r *AWSBatchComputeEnvDataSourceModel) ToOperationsDescribeAWSBatchComputeEnvRequest(ctx context.Context) (*operations.DescribeAWSBatchComputeEnvRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var computeEnvID string
	computeEnvID = r.ComputeEnvID.ValueString()

	var workspaceID int64
	workspaceID = r.WorkspaceID.ValueInt64()

	attributes := make([]shared.ComputeEnvQueryAttribute, 0, len(r.Attributes))
	for _, attributesItem := range r.Attributes {
		attributes = append(attributes, shared.ComputeEnvQueryAttribute(attributesItem.ValueString()))
	}
	out := operations.DescribeAWSBatchComputeEnvRequest{
		ComputeEnvID: computeEnvID,
		WorkspaceID:  workspaceID,
		Attributes:   attributes,
	}

	return &out, diags
}
