// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/seqeralabs/terraform-provider-seqera/internal/sdk"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &OrganizationMemberDataSource{}
var _ datasource.DataSourceWithConfigure = &OrganizationMemberDataSource{}

func NewOrganizationMemberDataSource() datasource.DataSource {
	return &OrganizationMemberDataSource{}
}

// OrganizationMemberDataSource is the data source implementation.
type OrganizationMemberDataSource struct {
	// Provider configured SDK client.
	client *sdk.Seqera
}

// OrganizationMemberDataSourceModel describes the data model.
type OrganizationMemberDataSourceModel struct {
	Email     types.String `tfsdk:"email"`
	Max       types.Int32  `queryParam:"style=form,explode=true,name=max" tfsdk:"max"`
	MemberID  types.Int64  `tfsdk:"member_id"`
	Offset    types.Int32  `queryParam:"style=form,explode=true,name=offset" tfsdk:"offset"`
	OrgID     types.Int64  `tfsdk:"org_id"`
	Role      types.String `tfsdk:"role"`
	Search    types.String `queryParam:"style=form,explode=true,name=search" tfsdk:"search"`
	TotalSize types.Int64  `tfsdk:"total_size"`
	User      types.String `tfsdk:"user"`
	UserName  types.String `tfsdk:"user_name"`
}

// Metadata returns the data source type name.
func (r *OrganizationMemberDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_organization_member"
}

// Schema defines the schema for the data source.
func (r *OrganizationMemberDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "Manage organization membership in Seqera Platform.\n\nOrganization members are users who have been granted access to an\norganization. Members can have different roles (owner, member, collaborator)\nthat determine their permissions and access levels within the organization.\n\nAdding a member to an organization grants them the ability to access\norganization resources based on their assigned role. Members can be added\nby username or email address.\n",

		Attributes: map[string]schema.Attribute{
			"email": schema.StringAttribute{
				Computed:    true,
				Description: `Member email address`,
			},
			"max": schema.Int32Attribute{
				Optional:    true,
				Description: `Pagination max results`,
			},
			"member_id": schema.Int64Attribute{
				Computed:    true,
				Description: `Organization member numeric identifier`,
			},
			"offset": schema.Int32Attribute{
				Optional:    true,
				Description: `Pagination offset`,
			},
			"org_id": schema.Int64Attribute{
				Required:    true,
				Description: `Organization numeric identifier`,
			},
			"role": schema.StringAttribute{
				Computed: true,
			},
			"search": schema.StringAttribute{
				Optional:    true,
				Description: `Filter search parameter`,
			},
			"total_size": schema.Int64Attribute{
				Computed: true,
			},
			"user": schema.StringAttribute{
				Computed:    true,
				Description: `Username or email address of the user to add as a member`,
			},
			"user_name": schema.StringAttribute{
				Computed:    true,
				Description: `Member username`,
			},
		},
	}
}

func (r *OrganizationMemberDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.Seqera)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.Seqera, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *OrganizationMemberDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *OrganizationMemberDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsListOrganizationMembersRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Orgs.ListOrganizationMembers(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.ListOrganizationMembersResponse != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedListOrganizationMembersResponse(ctx, res.ListOrganizationMembersResponse)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
