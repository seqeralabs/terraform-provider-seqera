// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/seqeralabs/terraform-provider-seqera/internal/provider/typeconvert"
	"github.com/seqeralabs/terraform-provider-seqera/internal/sdk/models/operations"
	"github.com/seqeralabs/terraform-provider-seqera/internal/sdk/models/shared"
	"time"
)

func (r *GoogleCredentialResourceModel) RefreshFromSharedCreateGoogleCredentialsResponse(ctx context.Context, resp *shared.CreateGoogleCredentialsResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.CredentialsID = types.StringPointerValue(resp.CredentialsID)
	}

	return diags
}

func (r *GoogleCredentialResourceModel) RefreshFromSharedDescribeGoogleCredentialsResponse(ctx context.Context, resp *shared.DescribeGoogleCredentialsResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		diags.Append(r.RefreshFromSharedGoogleCredentialOutput(ctx, resp.Credentials)...)

		if diags.HasError() {
			return diags
		}

	}

	return diags
}

func (r *GoogleCredentialResourceModel) RefreshFromSharedGoogleCredentialOutput(ctx context.Context, resp *shared.GoogleCredentialOutput) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.BaseURL = types.StringPointerValue(resp.BaseURL)
		r.Category = types.StringPointerValue(resp.Category)
		r.CredentialsID = types.StringPointerValue(resp.CredentialsID)
		r.DateCreated = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.DateCreated))
		r.Deleted = types.BoolPointerValue(resp.Deleted)
		r.Description = types.StringPointerValue(resp.Description)
		keysPriorData := r.Keys
		r.Keys.Data = keysPriorData.Data
		r.LastUpdated = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.LastUpdated))
		r.LastUsed = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.LastUsed))
		r.Name = types.StringValue(resp.Name)
		r.ProviderType = types.StringValue(string(resp.ProviderType))
	}

	return diags
}

func (r *GoogleCredentialResourceModel) ToOperationsCreateGoogleCredentialsRequest(ctx context.Context) (*operations.CreateGoogleCredentialsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	workspaceID := new(int64)
	if !r.WorkspaceID.IsUnknown() && !r.WorkspaceID.IsNull() {
		*workspaceID = r.WorkspaceID.ValueInt64()
	} else {
		workspaceID = nil
	}
	createGoogleCredentialsRequest, createGoogleCredentialsRequestDiags := r.ToSharedCreateGoogleCredentialsRequest(ctx)
	diags.Append(createGoogleCredentialsRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreateGoogleCredentialsRequest{
		WorkspaceID:                    workspaceID,
		CreateGoogleCredentialsRequest: *createGoogleCredentialsRequest,
	}

	return &out, diags
}

func (r *GoogleCredentialResourceModel) ToOperationsDeleteGoogleCredentialsRequest(ctx context.Context) (*operations.DeleteGoogleCredentialsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var credentialsID string
	credentialsID = r.CredentialsID.ValueString()

	workspaceID := new(int64)
	if !r.WorkspaceID.IsUnknown() && !r.WorkspaceID.IsNull() {
		*workspaceID = r.WorkspaceID.ValueInt64()
	} else {
		workspaceID = nil
	}
	checked := new(bool)
	if !r.Checked.IsUnknown() && !r.Checked.IsNull() {
		*checked = r.Checked.ValueBool()
	} else {
		checked = nil
	}
	out := operations.DeleteGoogleCredentialsRequest{
		CredentialsID: credentialsID,
		WorkspaceID:   workspaceID,
		Checked:       checked,
	}

	return &out, diags
}

func (r *GoogleCredentialResourceModel) ToOperationsDescribeGoogleCredentialsRequest(ctx context.Context) (*operations.DescribeGoogleCredentialsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var credentialsID string
	credentialsID = r.CredentialsID.ValueString()

	workspaceID := new(int64)
	if !r.WorkspaceID.IsUnknown() && !r.WorkspaceID.IsNull() {
		*workspaceID = r.WorkspaceID.ValueInt64()
	} else {
		workspaceID = nil
	}
	out := operations.DescribeGoogleCredentialsRequest{
		CredentialsID: credentialsID,
		WorkspaceID:   workspaceID,
	}

	return &out, diags
}

func (r *GoogleCredentialResourceModel) ToOperationsUpdateGoogleCredentialsRequest(ctx context.Context) (*operations.UpdateGoogleCredentialsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var credentialsID string
	credentialsID = r.CredentialsID.ValueString()

	workspaceID := new(int64)
	if !r.WorkspaceID.IsUnknown() && !r.WorkspaceID.IsNull() {
		*workspaceID = r.WorkspaceID.ValueInt64()
	} else {
		workspaceID = nil
	}
	updateGoogleCredentialsRequest, updateGoogleCredentialsRequestDiags := r.ToSharedUpdateGoogleCredentialsRequest(ctx)
	diags.Append(updateGoogleCredentialsRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateGoogleCredentialsRequest{
		CredentialsID:                  credentialsID,
		WorkspaceID:                    workspaceID,
		UpdateGoogleCredentialsRequest: *updateGoogleCredentialsRequest,
	}

	return &out, diags
}

func (r *GoogleCredentialResourceModel) ToSharedCreateGoogleCredentialsRequest(ctx context.Context) (*shared.CreateGoogleCredentialsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	credentials, credentialsDiags := r.ToSharedGoogleCredential(ctx)
	diags.Append(credentialsDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := shared.CreateGoogleCredentialsRequest{
		Credentials: *credentials,
	}

	return &out, diags
}

func (r *GoogleCredentialResourceModel) ToSharedGoogleCredential(ctx context.Context) (*shared.GoogleCredential, diag.Diagnostics) {
	var diags diag.Diagnostics

	credentialsID := new(string)
	if !r.CredentialsID.IsUnknown() && !r.CredentialsID.IsNull() {
		*credentialsID = r.CredentialsID.ValueString()
	} else {
		credentialsID = nil
	}
	var name string
	name = r.Name.ValueString()

	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	providerType := shared.GoogleCredentialProviderType(r.ProviderType.ValueString())
	baseURL := new(string)
	if !r.BaseURL.IsUnknown() && !r.BaseURL.IsNull() {
		*baseURL = r.BaseURL.ValueString()
	} else {
		baseURL = nil
	}
	category := new(string)
	if !r.Category.IsUnknown() && !r.Category.IsNull() {
		*category = r.Category.ValueString()
	} else {
		category = nil
	}
	deleted := new(bool)
	if !r.Deleted.IsUnknown() && !r.Deleted.IsNull() {
		*deleted = r.Deleted.ValueBool()
	} else {
		deleted = nil
	}
	lastUsed := new(time.Time)
	if !r.LastUsed.IsUnknown() && !r.LastUsed.IsNull() {
		*lastUsed, _ = time.Parse(time.RFC3339Nano, r.LastUsed.ValueString())
	} else {
		lastUsed = nil
	}
	dateCreated := new(time.Time)
	if !r.DateCreated.IsUnknown() && !r.DateCreated.IsNull() {
		*dateCreated, _ = time.Parse(time.RFC3339Nano, r.DateCreated.ValueString())
	} else {
		dateCreated = nil
	}
	lastUpdated := new(time.Time)
	if !r.LastUpdated.IsUnknown() && !r.LastUpdated.IsNull() {
		*lastUpdated, _ = time.Parse(time.RFC3339Nano, r.LastUpdated.ValueString())
	} else {
		lastUpdated = nil
	}
	data := new(string)
	if !r.Keys.Data.IsUnknown() && !r.Keys.Data.IsNull() {
		*data = r.Keys.Data.ValueString()
	} else {
		data = nil
	}
	keys := shared.GoogleSecurityKeys{
		Data: data,
	}
	out := shared.GoogleCredential{
		CredentialsID: credentialsID,
		Name:          name,
		Description:   description,
		ProviderType:  providerType,
		BaseURL:       baseURL,
		Category:      category,
		Deleted:       deleted,
		LastUsed:      lastUsed,
		DateCreated:   dateCreated,
		LastUpdated:   lastUpdated,
		Keys:          keys,
	}

	return &out, diags
}

func (r *GoogleCredentialResourceModel) ToSharedUpdateGoogleCredentialsRequest(ctx context.Context) (*shared.UpdateGoogleCredentialsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	credentials, credentialsDiags := r.ToSharedGoogleCredential(ctx)
	diags.Append(credentialsDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := shared.UpdateGoogleCredentialsRequest{
		Credentials: *credentials,
	}

	return &out, diags
}
