// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/speakeasy/terraform-provider-seqera/internal/provider/typeconvert"
	tfTypes "github.com/speakeasy/terraform-provider-seqera/internal/provider/types"
	"github.com/speakeasy/terraform-provider-seqera/internal/sdk/models/operations"
	"github.com/speakeasy/terraform-provider-seqera/internal/sdk/models/shared"
)

func (r *LabelsDataSourceModel) RefreshFromSharedListLabelsResponse(ctx context.Context, resp *shared.ListLabelsResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Labels = []tfTypes.LabelDbDto{}

		for _, labelsItem := range resp.Labels {
			var labels tfTypes.LabelDbDto

			labels.DateCreated = types.StringPointerValue(typeconvert.TimePointerToStringPointer(labelsItem.DateCreated))
			labels.ID = types.Int64PointerValue(labelsItem.ID)
			labels.IsDefault = types.BoolPointerValue(labelsItem.IsDefault)
			labels.IsDynamic = types.BoolPointerValue(labelsItem.IsDynamic)
			labels.IsInterpolated = types.BoolPointerValue(labelsItem.IsInterpolated)
			labels.Name = types.StringPointerValue(labelsItem.Name)
			labels.Resource = types.BoolPointerValue(labelsItem.Resource)
			labels.Value = types.StringPointerValue(labelsItem.Value)

			r.Labels = append(r.Labels, labels)
		}
		r.TotalSize = types.Int64PointerValue(resp.TotalSize)
	}

	return diags
}

func (r *LabelsDataSourceModel) ToOperationsListLabelsRequest(ctx context.Context) (*operations.ListLabelsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	workspaceID := new(int64)
	if !r.WorkspaceID.IsUnknown() && !r.WorkspaceID.IsNull() {
		*workspaceID = r.WorkspaceID.ValueInt64()
	} else {
		workspaceID = nil
	}
	max := new(int)
	if !r.Max.IsUnknown() && !r.Max.IsNull() {
		*max = int(r.Max.ValueInt32())
	} else {
		max = nil
	}
	offset := new(int)
	if !r.Offset.IsUnknown() && !r.Offset.IsNull() {
		*offset = int(r.Offset.ValueInt32())
	} else {
		offset = nil
	}
	search := new(string)
	if !r.Search.IsUnknown() && !r.Search.IsNull() {
		*search = r.Search.ValueString()
	} else {
		search = nil
	}
	typeVar := new(shared.LabelType)
	if !r.Type.IsUnknown() && !r.Type.IsNull() {
		*typeVar = shared.LabelType(r.Type.ValueString())
	} else {
		typeVar = nil
	}
	isDefault := new(bool)
	if !r.IsDefault.IsUnknown() && !r.IsDefault.IsNull() {
		*isDefault = r.IsDefault.ValueBool()
	} else {
		isDefault = nil
	}
	out := operations.ListLabelsRequest{
		WorkspaceID: workspaceID,
		Max:         max,
		Offset:      offset,
		Search:      search,
		Type:        typeVar,
		IsDefault:   isDefault,
	}

	return &out, diags
}
