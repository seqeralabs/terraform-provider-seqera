// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/speakeasy/terraform-provider-seqera/internal/provider/typeconvert"
	tfTypes "github.com/speakeasy/terraform-provider-seqera/internal/provider/types"
	"github.com/speakeasy/terraform-provider-seqera/internal/sdk/models/operations"
	"github.com/speakeasy/terraform-provider-seqera/internal/sdk/models/shared"
)

func (r *ActionsDataSourceModel) RefreshFromSharedListActionsResponse(ctx context.Context, resp *shared.ListActionsResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Actions = []tfTypes.ListActionsResponseActionInfo{}
		if len(r.Actions) > len(resp.Actions) {
			r.Actions = r.Actions[:len(resp.Actions)]
		}
		for actionsCount, actionsItem := range resp.Actions {
			var actions tfTypes.ListActionsResponseActionInfo
			actions.DateCreated = types.StringPointerValue(typeconvert.TimePointerToStringPointer(actionsItem.DateCreated))
			actions.Endpoint = types.StringPointerValue(actionsItem.Endpoint)
			if actionsItem.Event != nil {
				actions.Event = &tfTypes.ActionEventType{}
				if actionsItem.Event.ActionTowerActionEvent != nil {
					actions.Event.Tower = &tfTypes.ActionTowerActionEvent{}
					actions.Event.Tower.Discriminator = types.StringPointerValue(actionsItem.Event.ActionTowerActionEvent.Discriminator)
					actions.Event.Tower.Timestamp = types.StringPointerValue(typeconvert.TimePointerToStringPointer(actionsItem.Event.ActionTowerActionEvent.Timestamp))
					actions.Event.Tower.WorkflowID = types.StringPointerValue(actionsItem.Event.ActionTowerActionEvent.WorkflowID)
				}
				if actionsItem.Event.GithubActionEvent != nil {
					actions.Event.Github = &tfTypes.GithubActionEvent{}
					actions.Event.Github.CommitID = types.StringPointerValue(actionsItem.Event.GithubActionEvent.CommitID)
					actions.Event.Github.CommitMessage = types.StringPointerValue(actionsItem.Event.GithubActionEvent.CommitMessage)
					actions.Event.Github.Discriminator = types.StringPointerValue(actionsItem.Event.GithubActionEvent.Discriminator)
					actions.Event.Github.PusherEmail = types.StringPointerValue(actionsItem.Event.GithubActionEvent.PusherEmail)
					actions.Event.Github.PusherName = types.StringPointerValue(actionsItem.Event.GithubActionEvent.PusherName)
					actions.Event.Github.Ref = types.StringPointerValue(actionsItem.Event.GithubActionEvent.Ref)
					actions.Event.Github.Timestamp = types.StringPointerValue(typeconvert.TimePointerToStringPointer(actionsItem.Event.GithubActionEvent.Timestamp))
				}
			}
			actions.ID = types.StringPointerValue(actionsItem.ID)
			actions.Labels = []tfTypes.LabelDbDto{}
			for labelsCount, labelsItem := range actionsItem.Labels {
				var labels tfTypes.LabelDbDto
				labels.DateCreated = types.StringPointerValue(typeconvert.TimePointerToStringPointer(labelsItem.DateCreated))
				labels.ID = types.Int64PointerValue(labelsItem.ID)
				labels.IsDefault = types.BoolPointerValue(labelsItem.IsDefault)
				labels.Name = types.StringPointerValue(labelsItem.Name)
				labels.Resource = types.BoolPointerValue(labelsItem.Resource)
				labels.Value = types.StringPointerValue(labelsItem.Value)
				if labelsCount+1 > len(actions.Labels) {
					actions.Labels = append(actions.Labels, labels)
				} else {
					actions.Labels[labelsCount].DateCreated = labels.DateCreated
					actions.Labels[labelsCount].ID = labels.ID
					actions.Labels[labelsCount].IsDefault = labels.IsDefault
					actions.Labels[labelsCount].Name = labels.Name
					actions.Labels[labelsCount].Resource = labels.Resource
					actions.Labels[labelsCount].Value = labels.Value
				}
			}
			actions.LastSeen = types.StringPointerValue(typeconvert.TimePointerToStringPointer(actionsItem.LastSeen))
			actions.Name = types.StringPointerValue(actionsItem.Name)
			actions.Pipeline = types.StringPointerValue(actionsItem.Pipeline)
			if actionsItem.Source != nil {
				actions.Source = types.StringValue(string(*actionsItem.Source))
			} else {
				actions.Source = types.StringNull()
			}
			if actionsItem.Status != nil {
				actions.Status = types.StringValue(string(*actionsItem.Status))
			} else {
				actions.Status = types.StringNull()
			}
			actions.UsageCmd = types.StringPointerValue(actionsItem.UsageCmd)
			if actionsCount+1 > len(r.Actions) {
				r.Actions = append(r.Actions, actions)
			} else {
				r.Actions[actionsCount].DateCreated = actions.DateCreated
				r.Actions[actionsCount].Endpoint = actions.Endpoint
				r.Actions[actionsCount].Event = actions.Event
				r.Actions[actionsCount].ID = actions.ID
				r.Actions[actionsCount].Labels = actions.Labels
				r.Actions[actionsCount].LastSeen = actions.LastSeen
				r.Actions[actionsCount].Name = actions.Name
				r.Actions[actionsCount].Pipeline = actions.Pipeline
				r.Actions[actionsCount].Source = actions.Source
				r.Actions[actionsCount].Status = actions.Status
				r.Actions[actionsCount].UsageCmd = actions.UsageCmd
			}
		}
	}

	return diags
}

func (r *ActionsDataSourceModel) ToOperationsListActionsRequest(ctx context.Context) (*operations.ListActionsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	workspaceID := new(int64)
	if !r.WorkspaceID.IsUnknown() && !r.WorkspaceID.IsNull() {
		*workspaceID = r.WorkspaceID.ValueInt64()
	} else {
		workspaceID = nil
	}
	attributes := make([]shared.ActionQueryAttribute, 0, len(r.Attributes))
	for _, attributesItem := range r.Attributes {
		attributes = append(attributes, shared.ActionQueryAttribute(attributesItem.ValueString()))
	}
	out := operations.ListActionsRequest{
		WorkspaceID: workspaceID,
		Attributes:  attributes,
	}

	return &out, diags
}
