// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/speakeasy/terraform-provider-seqera/internal/provider/types"
	"github.com/speakeasy/terraform-provider-seqera/internal/sdk/models/operations"
	"github.com/speakeasy/terraform-provider-seqera/internal/sdk/models/shared"
)

func (r *DataLinkResourceModel) RefreshFromSharedDataLinkDto(ctx context.Context, resp *shared.DataLinkDto) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Credentials = []tfTypes.DataLinkCredentials{}
		if len(r.Credentials) > len(resp.Credentials) {
			r.Credentials = r.Credentials[:len(resp.Credentials)]
		}
		for credentialsCount, credentialsItem := range resp.Credentials {
			var credentials tfTypes.DataLinkCredentials
			credentials.ID = types.StringValue(credentialsItem.ID)
			credentials.Name = types.StringValue(credentialsItem.Name)
			credentials.ProviderType = types.StringValue(string(credentialsItem.ProviderType))
			if credentialsCount+1 > len(r.Credentials) {
				r.Credentials = append(r.Credentials, credentials)
			} else {
				r.Credentials[credentialsCount].ID = credentials.ID
				r.Credentials[credentialsCount].Name = credentials.Name
				r.Credentials[credentialsCount].ProviderType = credentials.ProviderType
			}
		}
		r.DataLinkID = types.StringPointerValue(resp.DataLinkID)
		r.Description = types.StringPointerValue(resp.Description)
		r.Hidden = types.BoolPointerValue(resp.Hidden)
		r.Message = types.StringPointerValue(resp.Message)
		r.Name = types.StringPointerValue(resp.Name)
		if resp.ProviderType != nil {
			r.ProviderType = types.StringValue(string(*resp.ProviderType))
		} else {
			r.ProviderType = types.StringNull()
		}
		r.PublicAccessible = types.BoolPointerValue(resp.PublicAccessible)
		r.Region = types.StringPointerValue(resp.Region)
		r.ResourceRef = types.StringPointerValue(resp.ResourceRef)
		if resp.Status != nil {
			r.Status = types.StringValue(string(*resp.Status))
		} else {
			r.Status = types.StringNull()
		}
		if resp.Type != nil {
			r.Type = types.StringValue(string(*resp.Type))
		} else {
			r.Type = types.StringNull()
		}
	}

	return diags
}

func (r *DataLinkResourceModel) ToOperationsCreateCustomDataLinkRequest(ctx context.Context) (*operations.CreateCustomDataLinkRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var workspaceID int64
	workspaceID = r.WorkspaceID.ValueInt64()

	dataLinkCreateRequest, dataLinkCreateRequestDiags := r.ToSharedDataLinkCreateRequest(ctx)
	diags.Append(dataLinkCreateRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreateCustomDataLinkRequest{
		WorkspaceID:           workspaceID,
		DataLinkCreateRequest: *dataLinkCreateRequest,
	}

	return &out, diags
}

func (r *DataLinkResourceModel) ToOperationsDeleteCustomDataLinkRequest(ctx context.Context) (*operations.DeleteCustomDataLinkRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var dataLinkID string
	dataLinkID = r.DataLinkID.ValueString()

	workspaceID := new(int64)
	if !r.WorkspaceID.IsUnknown() && !r.WorkspaceID.IsNull() {
		*workspaceID = r.WorkspaceID.ValueInt64()
	} else {
		workspaceID = nil
	}
	out := operations.DeleteCustomDataLinkRequest{
		DataLinkID:  dataLinkID,
		WorkspaceID: workspaceID,
	}

	return &out, diags
}

func (r *DataLinkResourceModel) ToOperationsDescribeDataLinkRequest(ctx context.Context) (*operations.DescribeDataLinkRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var dataLinkID string
	dataLinkID = r.DataLinkID.ValueString()

	workspaceID := new(int64)
	if !r.WorkspaceID.IsUnknown() && !r.WorkspaceID.IsNull() {
		*workspaceID = r.WorkspaceID.ValueInt64()
	} else {
		workspaceID = nil
	}
	credentialsID := new(string)
	if !r.CredentialsID.IsUnknown() && !r.CredentialsID.IsNull() {
		*credentialsID = r.CredentialsID.ValueString()
	} else {
		credentialsID = nil
	}
	out := operations.DescribeDataLinkRequest{
		DataLinkID:    dataLinkID,
		WorkspaceID:   workspaceID,
		CredentialsID: credentialsID,
	}

	return &out, diags
}

func (r *DataLinkResourceModel) ToOperationsUpdateCustomDataLinkRequest(ctx context.Context) (*operations.UpdateCustomDataLinkRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var dataLinkID string
	dataLinkID = r.DataLinkID.ValueString()

	workspaceID := new(int64)
	if !r.WorkspaceID.IsUnknown() && !r.WorkspaceID.IsNull() {
		*workspaceID = r.WorkspaceID.ValueInt64()
	} else {
		workspaceID = nil
	}
	dataLinkUpdateRequest, dataLinkUpdateRequestDiags := r.ToSharedDataLinkUpdateRequest(ctx)
	diags.Append(dataLinkUpdateRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateCustomDataLinkRequest{
		DataLinkID:            dataLinkID,
		WorkspaceID:           workspaceID,
		DataLinkUpdateRequest: *dataLinkUpdateRequest,
	}

	return &out, diags
}

func (r *DataLinkResourceModel) ToSharedDataLinkCreateRequest(ctx context.Context) (*shared.DataLinkCreateRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var name string
	name = r.Name.ValueString()

	var description string
	description = r.Description.ValueString()

	typeVar := shared.DataLinkType(r.Type.ValueString())
	providerType := shared.ProviderType(r.ProviderType.ValueString())
	var resourceRef string
	resourceRef = r.ResourceRef.ValueString()

	var publicAccessible bool
	publicAccessible = r.PublicAccessible.ValueBool()

	var credentialsID string
	credentialsID = r.CredentialsID.ValueString()

	out := shared.DataLinkCreateRequest{
		Name:             name,
		Description:      description,
		Type:             typeVar,
		ProviderType:     providerType,
		ResourceRef:      resourceRef,
		PublicAccessible: publicAccessible,
		CredentialsID:    credentialsID,
	}

	return &out, diags
}

func (r *DataLinkResourceModel) ToSharedDataLinkUpdateRequest(ctx context.Context) (*shared.DataLinkUpdateRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	name := new(string)
	if !r.Name.IsUnknown() && !r.Name.IsNull() {
		*name = r.Name.ValueString()
	} else {
		name = nil
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	credentialsID := new(string)
	if !r.CredentialsID.IsUnknown() && !r.CredentialsID.IsNull() {
		*credentialsID = r.CredentialsID.ValueString()
	} else {
		credentialsID = nil
	}
	out := shared.DataLinkUpdateRequest{
		Name:          name,
		Description:   description,
		CredentialsID: credentialsID,
	}

	return &out, diags
}
