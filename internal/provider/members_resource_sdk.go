// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/seqeralabs/terraform-provider-seqera/internal/sdk/models/operations"
	"github.com/seqeralabs/terraform-provider-seqera/internal/sdk/models/shared"
)

func (r *MembersResourceModel) RefreshFromSharedMemberDbDto(ctx context.Context, resp *shared.MemberDbDto) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Avatar = types.StringPointerValue(resp.Avatar)
		r.Email = types.StringPointerValue(resp.Email)
		r.FirstName = types.StringPointerValue(resp.FirstName)
		r.LastName = types.StringPointerValue(resp.LastName)
		r.MemberID = types.Int64PointerValue(resp.MemberID)
		if resp.Role != nil {
			r.Role = types.StringValue(string(*resp.Role))
		} else {
			r.Role = types.StringNull()
		}
		r.UserID = types.Int64PointerValue(resp.UserID)
		r.UserName = types.StringPointerValue(resp.UserName)
	}

	return diags
}

func (r *MembersResourceModel) ToOperationsCreateOrganizationTeamMemberRequest(ctx context.Context) (*operations.CreateOrganizationTeamMemberRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var orgID int64
	orgID = r.OrgID.ValueInt64()

	var teamID int64
	teamID = r.TeamID.ValueInt64()

	createTeamMemberRequest, createTeamMemberRequestDiags := r.ToSharedCreateTeamMemberRequest(ctx)
	diags.Append(createTeamMemberRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreateOrganizationTeamMemberRequest{
		OrgID:                   orgID,
		TeamID:                  teamID,
		CreateTeamMemberRequest: *createTeamMemberRequest,
	}

	return &out, diags
}

func (r *MembersResourceModel) ToOperationsListOrganizationTeamMembersRequest(ctx context.Context) (*operations.ListOrganizationTeamMembersRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var orgID int64
	orgID = r.OrgID.ValueInt64()

	var teamID int64
	teamID = r.TeamID.ValueInt64()

	out := operations.ListOrganizationTeamMembersRequest{
		OrgID:  orgID,
		TeamID: teamID,
	}

	return &out, diags
}

func (r *MembersResourceModel) ToSharedCreateTeamMemberRequest(ctx context.Context) (*shared.CreateTeamMemberRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	userNameOrEmail := new(string)
	if !r.UserNameOrEmail.IsUnknown() && !r.UserNameOrEmail.IsNull() {
		*userNameOrEmail = r.UserNameOrEmail.ValueString()
	} else {
		userNameOrEmail = nil
	}
	out := shared.CreateTeamMemberRequest{
		UserNameOrEmail: userNameOrEmail,
	}

	return &out, diags
}
