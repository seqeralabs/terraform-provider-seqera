// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/speakeasy/terraform-provider-seqera/internal/provider/types"
	"github.com/speakeasy/terraform-provider-seqera/internal/sdk/models/operations"
	"github.com/speakeasy/terraform-provider-seqera/internal/sdk/models/shared"
)

func (r *OrgsResourceModel) ToSharedCreateOrganizationRequest(ctx context.Context) (*shared.CreateOrganizationRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var organization *shared.Organization
	if r.Organization != nil {
		var name string
		name = r.Organization.Name.ValueString()

		var fullName string
		fullName = r.Organization.FullName.ValueString()

		description := new(string)
		if !r.Organization.Description.IsUnknown() && !r.Organization.Description.IsNull() {
			*description = r.Organization.Description.ValueString()
		} else {
			description = nil
		}
		location := new(string)
		if !r.Organization.Location.IsUnknown() && !r.Organization.Location.IsNull() {
			*location = r.Organization.Location.ValueString()
		} else {
			location = nil
		}
		website := new(string)
		if !r.Organization.Website.IsUnknown() && !r.Organization.Website.IsNull() {
			*website = r.Organization.Website.ValueString()
		} else {
			website = nil
		}
		organization = &shared.Organization{
			Name:        name,
			FullName:    fullName,
			Description: description,
			Location:    location,
			Website:     website,
		}
	}
	logoID := new(string)
	if !r.LogoID.IsUnknown() && !r.LogoID.IsNull() {
		*logoID = r.LogoID.ValueString()
	} else {
		logoID = nil
	}
	out := shared.CreateOrganizationRequest{
		Organization: organization,
		LogoID:       logoID,
	}

	return &out, diags
}

func (r *OrgsResourceModel) ToSharedUpdateOrganizationRequest(ctx context.Context) (*shared.UpdateOrganizationRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	logoID := new(string)
	if !r.LogoID.IsUnknown() && !r.LogoID.IsNull() {
		*logoID = r.LogoID.ValueString()
	} else {
		logoID = nil
	}
	out := shared.UpdateOrganizationRequest{
		LogoID: logoID,
	}

	return &out, diags
}

func (r *OrgsResourceModel) ToOperationsUpdateOrganizationRequest(ctx context.Context) (*operations.UpdateOrganizationRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var orgID int64
	orgID = r.OrgID.ValueInt64()

	updateOrganizationRequest, updateOrganizationRequestDiags := r.ToSharedUpdateOrganizationRequest(ctx)
	diags.Append(updateOrganizationRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateOrganizationRequest{
		OrgID:                     orgID,
		UpdateOrganizationRequest: *updateOrganizationRequest,
	}

	return &out, diags
}

func (r *OrgsResourceModel) ToOperationsDeleteOrganizationRequest(ctx context.Context) (*operations.DeleteOrganizationRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var orgID int64
	orgID = r.OrgID.ValueInt64()

	out := operations.DeleteOrganizationRequest{
		OrgID: orgID,
	}

	return &out, diags
}

func (r *OrgsResourceModel) RefreshFromSharedCreateOrganizationResponse(ctx context.Context, resp *shared.CreateOrganizationResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		if resp.Organization == nil {
			r.Organization = nil
		} else {
			r.Organization = &tfTypes.Organization{}
			r.Organization.Description = types.StringPointerValue(resp.Organization.Description)
			r.Organization.FullName = types.StringPointerValue(resp.Organization.FullName)
			r.Organization.Location = types.StringPointerValue(resp.Organization.Location)
			r.Organization.LogoID = types.StringPointerValue(resp.Organization.LogoID)
			r.Organization.LogoURL = types.StringPointerValue(resp.Organization.LogoURL)
			r.Organization.MemberID = types.Int64PointerValue(resp.Organization.MemberID)
			if resp.Organization.MemberRole != nil {
				r.Organization.MemberRole = types.StringValue(string(*resp.Organization.MemberRole))
			} else {
				r.Organization.MemberRole = types.StringNull()
			}
			r.Organization.Name = types.StringPointerValue(resp.Organization.Name)
			r.Organization.OrgID = types.Int64PointerValue(resp.Organization.OrgID)
			r.Organization.Paying = types.BoolPointerValue(resp.Organization.Paying)
			if resp.Organization.Type != nil {
				r.Organization.Type = types.StringValue(string(*resp.Organization.Type))
			} else {
				r.Organization.Type = types.StringNull()
			}
			r.Organization.Website = types.StringPointerValue(resp.Organization.Website)
		}
	}

	return diags
}
