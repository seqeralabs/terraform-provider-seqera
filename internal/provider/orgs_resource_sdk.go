// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/speakeasy/terraform-provider-seqera/internal/provider/typeconvert"
	tfTypes "github.com/speakeasy/terraform-provider-seqera/internal/provider/types"
	"github.com/speakeasy/terraform-provider-seqera/internal/sdk/models/operations"
	"github.com/speakeasy/terraform-provider-seqera/internal/sdk/models/shared"
)

func (r *OrgsResourceModel) ToSharedOrganization(ctx context.Context) (*shared.Organization, diag.Diagnostics) {
	var diags diag.Diagnostics

	var name string
	name = r.Name.ValueString()

	var fullName string
	fullName = r.FullName.ValueString()

	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	location := new(string)
	if !r.Location.IsUnknown() && !r.Location.IsNull() {
		*location = r.Location.ValueString()
	} else {
		location = nil
	}
	website := new(string)
	if !r.Website.IsUnknown() && !r.Website.IsNull() {
		*website = r.Website.ValueString()
	} else {
		website = nil
	}
	out := shared.Organization{
		Name:        name,
		FullName:    fullName,
		Description: description,
		Location:    location,
		Website:     website,
	}

	return &out, diags
}

func (r *OrgsResourceModel) ToSharedCreateOrganizationRequest(ctx context.Context) (*shared.CreateOrganizationRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var name string
	name = r.Organization.Name.ValueString()

	var fullName string
	fullName = r.Organization.FullName.ValueString()

	description := new(string)
	if !r.Organization.Description.IsUnknown() && !r.Organization.Description.IsNull() {
		*description = r.Organization.Description.ValueString()
	} else {
		description = nil
	}
	location := new(string)
	if !r.Organization.Location.IsUnknown() && !r.Organization.Location.IsNull() {
		*location = r.Organization.Location.ValueString()
	} else {
		location = nil
	}
	website := new(string)
	if !r.Organization.Website.IsUnknown() && !r.Organization.Website.IsNull() {
		*website = r.Organization.Website.ValueString()
	} else {
		website = nil
	}
	organization := shared.Organization{
		Name:        name,
		FullName:    fullName,
		Description: description,
		Location:    location,
		Website:     website,
	}
	logoID := new(string)
	if !r.LogoID.IsUnknown() && !r.LogoID.IsNull() {
		*logoID = r.LogoID.ValueString()
	} else {
		logoID = nil
	}
	out := shared.CreateOrganizationRequest{
		Organization: organization,
		LogoID:       logoID,
	}

	return &out, diags
}

func (r *OrgsResourceModel) ToSharedUpdateOrganizationRequest(ctx context.Context) (*shared.UpdateOrganizationRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	fullName := new(string)
	if !r.FullName.IsUnknown() && !r.FullName.IsNull() {
		*fullName = r.FullName.ValueString()
	} else {
		fullName = nil
	}
	name := new(string)
	if !r.Name.IsUnknown() && !r.Name.IsNull() {
		*name = r.Name.ValueString()
	} else {
		name = nil
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	location := new(string)
	if !r.Location.IsUnknown() && !r.Location.IsNull() {
		*location = r.Location.ValueString()
	} else {
		location = nil
	}
	website := new(string)
	if !r.Website.IsUnknown() && !r.Website.IsNull() {
		*website = r.Website.ValueString()
	} else {
		website = nil
	}
	logoID := new(string)
	if !r.LogoID.IsUnknown() && !r.LogoID.IsNull() {
		*logoID = r.LogoID.ValueString()
	} else {
		logoID = nil
	}
	out := shared.UpdateOrganizationRequest{
		FullName:    fullName,
		Name:        name,
		Description: description,
		Location:    location,
		Website:     website,
		LogoID:      logoID,
	}

	return &out, diags
}

func (r *OrgsResourceModel) ToOperationsUpdateOrganizationRequest(ctx context.Context) (*operations.UpdateOrganizationRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var orgID int64
	orgID = r.OrgID.ValueInt64()

	updateOrganizationRequest, updateOrganizationRequestDiags := r.ToSharedUpdateOrganizationRequest(ctx)
	diags.Append(updateOrganizationRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateOrganizationRequest{
		OrgID:                     orgID,
		UpdateOrganizationRequest: *updateOrganizationRequest,
	}

	return &out, diags
}

func (r *OrgsResourceModel) ToOperationsListOrganizationsRequest(ctx context.Context) (*operations.ListOrganizationsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	out := operations.ListOrganizationsRequest{}

	return &out, diags
}

func (r *OrgsResourceModel) ToOperationsDeleteOrganizationRequest(ctx context.Context) (*operations.DeleteOrganizationRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var orgID int64
	orgID = r.OrgID.ValueInt64()

	out := operations.DeleteOrganizationRequest{
		OrgID: orgID,
	}

	return &out, diags
}

func (r *OrgsResourceModel) RefreshFromSharedCreateOrganizationResponse(ctx context.Context, resp *shared.CreateOrganizationResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		if resp.Organization == nil {
			r.Organization = nil
		} else {
			r.Organization = &tfTypes.OrganizationDbDto{}
			r.Organization.Description = types.StringPointerValue(resp.Organization.Description)
			r.Organization.FullName = types.StringPointerValue(resp.Organization.FullName)
			r.Organization.Location = types.StringPointerValue(resp.Organization.Location)
			r.Organization.LogoID = types.StringPointerValue(resp.Organization.LogoID)
			r.Organization.LogoURL = types.StringPointerValue(resp.Organization.LogoURL)
			r.Organization.MemberID = types.Int64PointerValue(resp.Organization.MemberID)
			if resp.Organization.MemberRole != nil {
				r.Organization.MemberRole = types.StringValue(string(*resp.Organization.MemberRole))
			} else {
				r.Organization.MemberRole = types.StringNull()
			}
			r.Organization.Name = types.StringPointerValue(resp.Organization.Name)
			r.Organization.OrgID = types.Int64PointerValue(resp.Organization.OrgID)
			r.Organization.Paying = types.BoolPointerValue(resp.Organization.Paying)
			if resp.Organization.Type != nil {
				r.Organization.Type = types.StringValue(string(*resp.Organization.Type))
			} else {
				r.Organization.Type = types.StringNull()
			}
			r.Organization.Website = types.StringPointerValue(resp.Organization.Website)
		}
	}

	return diags
}

func (r *OrgsResourceModel) RefreshFromSharedListOrganizationsResponse(ctx context.Context, resp *shared.ListOrganizationsResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Organizations = []tfTypes.OrganizationDbDto{}
		if len(r.Organizations) > len(resp.Organizations) {
			r.Organizations = r.Organizations[:len(resp.Organizations)]
		}
		for organizationsCount, organizationsItem := range resp.Organizations {
			var organizations tfTypes.OrganizationDbDto
			organizations.Paying = types.BoolPointerValue(organizationsItem.Paying)
			organizations.OrgID = types.Int64PointerValue(organizationsItem.OrgID)
			organizations.Name = types.StringPointerValue(organizationsItem.Name)
			organizations.FullName = types.StringPointerValue(organizationsItem.FullName)
			organizations.Description = types.StringPointerValue(organizationsItem.Description)
			organizations.Location = types.StringPointerValue(organizationsItem.Location)
			organizations.Website = types.StringPointerValue(organizationsItem.Website)
			organizations.LogoID = types.StringPointerValue(organizationsItem.LogoID)
			organizations.LogoURL = types.StringPointerValue(organizationsItem.LogoURL)
			organizations.MemberID = types.Int64PointerValue(organizationsItem.MemberID)
			if organizationsItem.MemberRole != nil {
				organizations.MemberRole = types.StringValue(string(*organizationsItem.MemberRole))
			} else {
				organizations.MemberRole = types.StringNull()
			}
			if organizationsItem.Type != nil {
				organizations.Type = types.StringValue(string(*organizationsItem.Type))
			} else {
				organizations.Type = types.StringNull()
			}
			if organizationsCount+1 > len(r.Organizations) {
				r.Organizations = append(r.Organizations, organizations)
			} else {
				r.Organizations[organizationsCount].Paying = organizations.Paying
				r.Organizations[organizationsCount].OrgID = organizations.OrgID
				r.Organizations[organizationsCount].Name = organizations.Name
				r.Organizations[organizationsCount].FullName = organizations.FullName
				r.Organizations[organizationsCount].Description = organizations.Description
				r.Organizations[organizationsCount].Location = organizations.Location
				r.Organizations[organizationsCount].Website = organizations.Website
				r.Organizations[organizationsCount].LogoID = organizations.LogoID
				r.Organizations[organizationsCount].LogoURL = organizations.LogoURL
				r.Organizations[organizationsCount].MemberID = organizations.MemberID
				r.Organizations[organizationsCount].MemberRole = organizations.MemberRole
				r.Organizations[organizationsCount].Type = organizations.Type
			}
		}
		r.TotalSize = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.TotalSize))
	}

	return diags
}
