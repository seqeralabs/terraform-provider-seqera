// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/seqeralabs/terraform-provider-seqera/internal/sdk/models/operations"
	"github.com/seqeralabs/terraform-provider-seqera/internal/sdk/models/shared"
)

func (r *OrgsResourceModel) RefreshFromSharedCreateOrganizationResponse(ctx context.Context, resp *shared.CreateOrganizationResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		diags.Append(r.RefreshFromSharedOrganizationDbDto(ctx, resp.Organization)...)

		if diags.HasError() {
			return diags
		}

	}

	return diags
}

func (r *OrgsResourceModel) RefreshFromSharedDescribeOrganizationResponse(ctx context.Context, resp *shared.DescribeOrganizationResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		diags.Append(r.RefreshFromSharedOrganizationDbDto(ctx, resp.Organization)...)

		if diags.HasError() {
			return diags
		}

	}

	return diags
}

func (r *OrgsResourceModel) RefreshFromSharedOrganizationDbDto(ctx context.Context, resp *shared.OrganizationDbDto) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Description = types.StringPointerValue(resp.Description)
		r.FullName = types.StringPointerValue(resp.FullName)
		r.Location = types.StringPointerValue(resp.Location)
		r.LogoID = types.StringPointerValue(resp.LogoID)
		r.LogoURL = types.StringPointerValue(resp.LogoURL)
		r.MemberID = types.Int64PointerValue(resp.MemberID)
		if resp.MemberRole != nil {
			r.MemberRole = types.StringValue(string(*resp.MemberRole))
		} else {
			r.MemberRole = types.StringNull()
		}
		r.Name = types.StringPointerValue(resp.Name)
		r.OrgID = types.Int64PointerValue(resp.OrgID)
		r.Paying = types.BoolPointerValue(resp.Paying)
		if resp.Type != nil {
			r.Type = types.StringValue(string(*resp.Type))
		} else {
			r.Type = types.StringNull()
		}
		r.Website = types.StringPointerValue(resp.Website)
	}

	return diags
}

func (r *OrgsResourceModel) ToOperationsDeleteOrganizationRequest(ctx context.Context) (*operations.DeleteOrganizationRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var orgID int64
	orgID = r.OrgID.ValueInt64()

	out := operations.DeleteOrganizationRequest{
		OrgID: orgID,
	}

	return &out, diags
}

func (r *OrgsResourceModel) ToOperationsDescribeOrganizationRequest(ctx context.Context) (*operations.DescribeOrganizationRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var orgID int64
	orgID = r.OrgID.ValueInt64()

	out := operations.DescribeOrganizationRequest{
		OrgID: orgID,
	}

	return &out, diags
}

func (r *OrgsResourceModel) ToOperationsUpdateOrganizationRequest(ctx context.Context) (*operations.UpdateOrganizationRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var orgID int64
	orgID = r.OrgID.ValueInt64()

	updateOrganizationRequest, updateOrganizationRequestDiags := r.ToSharedUpdateOrganizationRequest(ctx)
	diags.Append(updateOrganizationRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateOrganizationRequest{
		OrgID:                     orgID,
		UpdateOrganizationRequest: *updateOrganizationRequest,
	}

	return &out, diags
}

func (r *OrgsResourceModel) ToSharedCreateOrganizationRequest(ctx context.Context) (*shared.CreateOrganizationRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	organization, organizationDiags := r.ToSharedOrganization(ctx)
	diags.Append(organizationDiags...)

	if diags.HasError() {
		return nil, diags
	}

	logoID := new(string)
	if !r.LogoID.IsUnknown() && !r.LogoID.IsNull() {
		*logoID = r.LogoID.ValueString()
	} else {
		logoID = nil
	}
	out := shared.CreateOrganizationRequest{
		Organization: organization,
		LogoID:       logoID,
	}

	return &out, diags
}

func (r *OrgsResourceModel) ToSharedOrganization(ctx context.Context) (*shared.Organization, diag.Diagnostics) {
	var diags diag.Diagnostics

	var name string
	name = r.Name.ValueString()

	var fullName string
	fullName = r.FullName.ValueString()

	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	location := new(string)
	if !r.Location.IsUnknown() && !r.Location.IsNull() {
		*location = r.Location.ValueString()
	} else {
		location = nil
	}
	website := new(string)
	if !r.Website.IsUnknown() && !r.Website.IsNull() {
		*website = r.Website.ValueString()
	} else {
		website = nil
	}
	out := shared.Organization{
		Name:        name,
		FullName:    fullName,
		Description: description,
		Location:    location,
		Website:     website,
	}

	return &out, diags
}

func (r *OrgsResourceModel) ToSharedUpdateOrganizationRequest(ctx context.Context) (*shared.UpdateOrganizationRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	fullName := new(string)
	if !r.FullName.IsUnknown() && !r.FullName.IsNull() {
		*fullName = r.FullName.ValueString()
	} else {
		fullName = nil
	}
	name := new(string)
	if !r.Name.IsUnknown() && !r.Name.IsNull() {
		*name = r.Name.ValueString()
	} else {
		name = nil
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	location := new(string)
	if !r.Location.IsUnknown() && !r.Location.IsNull() {
		*location = r.Location.ValueString()
	} else {
		location = nil
	}
	website := new(string)
	if !r.Website.IsUnknown() && !r.Website.IsNull() {
		*website = r.Website.ValueString()
	} else {
		website = nil
	}
	logoID := new(string)
	if !r.LogoID.IsUnknown() && !r.LogoID.IsNull() {
		*logoID = r.LogoID.ValueString()
	} else {
		logoID = nil
	}
	paying := new(bool)
	if !r.Paying.IsUnknown() && !r.Paying.IsNull() {
		*paying = r.Paying.ValueBool()
	} else {
		paying = nil
	}
	typeVar := new(shared.UpdateOrganizationRequestType)
	if !r.Type.IsUnknown() && !r.Type.IsNull() {
		*typeVar = shared.UpdateOrganizationRequestType(r.Type.ValueString())
	} else {
		typeVar = nil
	}
	out := shared.UpdateOrganizationRequest{
		FullName:    fullName,
		Name:        name,
		Description: description,
		Location:    location,
		Website:     website,
		LogoID:      logoID,
		Paying:      paying,
		Type:        typeVar,
	}

	return &out, diags
}
