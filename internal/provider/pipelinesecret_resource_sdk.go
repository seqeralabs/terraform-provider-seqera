// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/seqeralabs/terraform-provider-seqera/internal/provider/typeconvert"
	"github.com/seqeralabs/terraform-provider-seqera/internal/sdk/models/operations"
	"github.com/seqeralabs/terraform-provider-seqera/internal/sdk/models/shared"
)

func (r *PipelineSecretResourceModel) RefreshFromSharedCreatePipelineSecretResponse(ctx context.Context, resp *shared.CreatePipelineSecretResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.SecretID = types.Int64PointerValue(resp.SecretID)
	}

	return diags
}

func (r *PipelineSecretResourceModel) RefreshFromSharedPipelineSecret(ctx context.Context, resp *shared.PipelineSecret) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.DateCreated = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.DateCreated))
		r.ID = types.Int64PointerValue(resp.ID)
		r.LastUpdated = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.LastUpdated))
		r.LastUsed = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.LastUsed))
		r.Name = types.StringValue(resp.Name)
	}

	return diags
}

func (r *PipelineSecretResourceModel) ToOperationsCreatePipelineSecretRequest(ctx context.Context) (*operations.CreatePipelineSecretRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	workspaceID := new(int64)
	if !r.WorkspaceID.IsUnknown() && !r.WorkspaceID.IsNull() {
		*workspaceID = r.WorkspaceID.ValueInt64()
	} else {
		workspaceID = nil
	}
	createPipelineSecretRequest, createPipelineSecretRequestDiags := r.ToSharedCreatePipelineSecretRequest(ctx)
	diags.Append(createPipelineSecretRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreatePipelineSecretRequest{
		WorkspaceID:                 workspaceID,
		CreatePipelineSecretRequest: *createPipelineSecretRequest,
	}

	return &out, diags
}

func (r *PipelineSecretResourceModel) ToOperationsDeletePipelineSecretRequest(ctx context.Context) (*operations.DeletePipelineSecretRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var secretID int64
	secretID = r.SecretID.ValueInt64()

	workspaceID := new(int64)
	if !r.WorkspaceID.IsUnknown() && !r.WorkspaceID.IsNull() {
		*workspaceID = r.WorkspaceID.ValueInt64()
	} else {
		workspaceID = nil
	}
	out := operations.DeletePipelineSecretRequest{
		SecretID:    secretID,
		WorkspaceID: workspaceID,
	}

	return &out, diags
}

func (r *PipelineSecretResourceModel) ToOperationsDescribePipelineSecretRequest(ctx context.Context) (*operations.DescribePipelineSecretRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var secretID int64
	secretID = r.SecretID.ValueInt64()

	workspaceID := new(int64)
	if !r.WorkspaceID.IsUnknown() && !r.WorkspaceID.IsNull() {
		*workspaceID = r.WorkspaceID.ValueInt64()
	} else {
		workspaceID = nil
	}
	out := operations.DescribePipelineSecretRequest{
		SecretID:    secretID,
		WorkspaceID: workspaceID,
	}

	return &out, diags
}

func (r *PipelineSecretResourceModel) ToOperationsUpdatePipelineSecretRequest(ctx context.Context) (*operations.UpdatePipelineSecretRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var secretID int64
	secretID = r.SecretID.ValueInt64()

	workspaceID := new(int64)
	if !r.WorkspaceID.IsUnknown() && !r.WorkspaceID.IsNull() {
		*workspaceID = r.WorkspaceID.ValueInt64()
	} else {
		workspaceID = nil
	}
	updatePipelineSecretRequest, updatePipelineSecretRequestDiags := r.ToSharedUpdatePipelineSecretRequest(ctx)
	diags.Append(updatePipelineSecretRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdatePipelineSecretRequest{
		SecretID:                    secretID,
		WorkspaceID:                 workspaceID,
		UpdatePipelineSecretRequest: *updatePipelineSecretRequest,
	}

	return &out, diags
}

func (r *PipelineSecretResourceModel) ToSharedCreatePipelineSecretRequest(ctx context.Context) (*shared.CreatePipelineSecretRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var name string
	name = r.Name.ValueString()

	var value string
	value = r.Value.ValueString()

	out := shared.CreatePipelineSecretRequest{
		Name:  name,
		Value: value,
	}

	return &out, diags
}

func (r *PipelineSecretResourceModel) ToSharedUpdatePipelineSecretRequest(ctx context.Context) (*shared.UpdatePipelineSecretRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	value := new(string)
	if !r.Value.IsUnknown() && !r.Value.IsNull() {
		*value = r.Value.ValueString()
	} else {
		value = nil
	}
	out := shared.UpdatePipelineSecretRequest{
		Value: value,
	}

	return &out, diags
}
