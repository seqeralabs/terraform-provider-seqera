// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/speakeasy/terraform-provider-seqera/internal/provider/typeconvert"
	tfTypes "github.com/speakeasy/terraform-provider-seqera/internal/provider/types"
	"github.com/speakeasy/terraform-provider-seqera/internal/sdk/models/operations"
	"github.com/speakeasy/terraform-provider-seqera/internal/sdk/models/shared"
)

func (r *DatasetsDataSourceModel) ToOperationsListDatasetsV2Request(ctx context.Context) (*operations.ListDatasetsV2Request, diag.Diagnostics) {
	var diags diag.Diagnostics

	workspaceID := new(int64)
	if !r.WorkspaceID.IsUnknown() && !r.WorkspaceID.IsNull() {
		*workspaceID = r.WorkspaceID.ValueInt64()
	} else {
		workspaceID = nil
	}
	out := operations.ListDatasetsV2Request{
		WorkspaceID: workspaceID,
	}

	return &out, diags
}

func (r *DatasetsDataSourceModel) RefreshFromSharedListDatasetsResponse(ctx context.Context, resp *shared.ListDatasetsResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Datasets = []tfTypes.Dataset{}
		if len(r.Datasets) > len(resp.Datasets) {
			r.Datasets = r.Datasets[:len(resp.Datasets)]
		}
		for datasetsCount, datasetsItem := range resp.Datasets {
			var datasets tfTypes.Dataset
			datasets.DateCreated = types.StringPointerValue(typeconvert.TimePointerToStringPointer(datasetsItem.DateCreated))
			datasets.Deleted = types.BoolPointerValue(datasetsItem.Deleted)
			datasets.Description = types.StringPointerValue(datasetsItem.Description)
			datasets.ID = types.StringPointerValue(datasetsItem.ID)
			datasets.LastUpdated = types.StringPointerValue(typeconvert.TimePointerToStringPointer(datasetsItem.LastUpdated))
			datasets.MediaType = types.StringPointerValue(datasetsItem.MediaType)
			datasets.Name = types.StringValue(datasetsItem.Name)
			if datasetsCount+1 > len(r.Datasets) {
				r.Datasets = append(r.Datasets, datasets)
			} else {
				r.Datasets[datasetsCount].DateCreated = datasets.DateCreated
				r.Datasets[datasetsCount].Deleted = datasets.Deleted
				r.Datasets[datasetsCount].Description = datasets.Description
				r.Datasets[datasetsCount].ID = datasets.ID
				r.Datasets[datasetsCount].LastUpdated = datasets.LastUpdated
				r.Datasets[datasetsCount].MediaType = datasets.MediaType
				r.Datasets[datasetsCount].Name = datasets.Name
			}
		}
	}

	return diags
}
