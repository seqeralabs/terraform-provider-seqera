// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	tfTypes "github.com/speakeasy/terraform-provider-seqera/internal/provider/types"
	"github.com/speakeasy/terraform-provider-seqera/internal/sdk"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &ActionsDataSource{}
var _ datasource.DataSourceWithConfigure = &ActionsDataSource{}

func NewActionsDataSource() datasource.DataSource {
	return &ActionsDataSource{}
}

// ActionsDataSource is the data source implementation.
type ActionsDataSource struct {
	// Provider configured SDK client.
	client *sdk.Seqera
}

// ActionsDataSourceModel describes the data model.
type ActionsDataSourceModel struct {
	Actions     []tfTypes.ListActionsResponseActionInfo `tfsdk:"actions"`
	Attributes  []types.String                          `queryParam:"style=form,explode=true,name=attributes" tfsdk:"attributes"`
	WorkspaceID types.Int64                             `queryParam:"style=form,explode=true,name=workspaceId" tfsdk:"workspace_id"`
}

// Metadata returns the data source type name.
func (r *ActionsDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_actions"
}

// Schema defines the schema for the data source.
func (r *ActionsDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "Actions DataSource",

		Attributes: map[string]schema.Attribute{
			"actions": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"date_created": schema.StringAttribute{
							Computed: true,
						},
						"endpoint": schema.StringAttribute{
							Computed: true,
						},
						"event": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"github": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"commit_id": schema.StringAttribute{
											Computed: true,
										},
										"commit_message": schema.StringAttribute{
											Computed: true,
										},
										"discriminator": schema.StringAttribute{
											Computed: true,
										},
										"pusher_email": schema.StringAttribute{
											Computed: true,
										},
										"pusher_name": schema.StringAttribute{
											Computed: true,
										},
										"ref": schema.StringAttribute{
											Computed: true,
										},
										"timestamp": schema.StringAttribute{
											Computed: true,
										},
									},
								},
								"tower": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"discriminator": schema.StringAttribute{
											Computed: true,
										},
										"timestamp": schema.StringAttribute{
											Computed: true,
										},
										"workflow_id": schema.StringAttribute{
											Computed: true,
										},
									},
								},
							},
						},
						"id": schema.StringAttribute{
							Computed: true,
						},
						"labels": schema.ListNestedAttribute{
							Computed: true,
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"date_created": schema.StringAttribute{
										Computed: true,
									},
									"id": schema.Int64Attribute{
										Computed: true,
									},
									"is_default": schema.BoolAttribute{
										Computed: true,
									},
									"name": schema.StringAttribute{
										Computed: true,
									},
									"resource": schema.BoolAttribute{
										Computed: true,
									},
									"value": schema.StringAttribute{
										Computed: true,
									},
								},
							},
						},
						"last_seen": schema.StringAttribute{
							Computed: true,
						},
						"name": schema.StringAttribute{
							Computed: true,
						},
						"pipeline": schema.StringAttribute{
							Computed: true,
						},
						"source": schema.StringAttribute{
							Computed: true,
						},
						"status": schema.StringAttribute{
							Computed: true,
						},
						"usage_cmd": schema.StringAttribute{
							Computed: true,
						},
					},
				},
			},
			"attributes": schema.ListAttribute{
				Optional:    true,
				ElementType: types.StringType,
				Description: `Additional attribute values to include in the response (` + "`" + `labels` + "`" + `). Returns an empty value (` + "`" + `labels: null` + "`" + `) if omitted.`,
			},
			"workspace_id": schema.Int64Attribute{
				Optional:    true,
				Description: `Workspace numeric identifier`,
			},
		},
	}
}

func (r *ActionsDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.Seqera)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.Seqera, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *ActionsDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *ActionsDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsListActionsRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Actions.ListActions(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.ListActionsResponse != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedListActionsResponse(ctx, res.ListActionsResponse)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
