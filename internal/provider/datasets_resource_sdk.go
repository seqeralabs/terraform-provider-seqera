// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/speakeasy/terraform-provider-seqera/internal/provider/typeconvert"
	tfTypes "github.com/speakeasy/terraform-provider-seqera/internal/provider/types"
	"github.com/speakeasy/terraform-provider-seqera/internal/sdk/models/operations"
	"github.com/speakeasy/terraform-provider-seqera/internal/sdk/models/shared"
)

func (r *DatasetsResourceModel) RefreshFromSharedCreateDatasetResponse(ctx context.Context, resp *shared.CreateDatasetResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		if resp.Dataset == nil {
			r.Dataset = nil
		} else {
			r.Dataset = &tfTypes.Dataset{}
			r.Dataset.DateCreated = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.Dataset.DateCreated))
			r.Dataset.Deleted = types.BoolPointerValue(resp.Dataset.Deleted)
			r.Dataset.Description = types.StringPointerValue(resp.Dataset.Description)
			r.Dataset.ID = types.StringPointerValue(resp.Dataset.ID)
			r.Dataset.LastUpdated = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.Dataset.LastUpdated))
			r.Dataset.MediaType = types.StringPointerValue(resp.Dataset.MediaType)
			r.Dataset.Name = types.StringValue(resp.Dataset.Name)
		}
	}

	return diags
}

func (r *DatasetsResourceModel) ToOperationsCreateDatasetV2Request(ctx context.Context) (*operations.CreateDatasetV2Request, diag.Diagnostics) {
	var diags diag.Diagnostics

	var workspaceID int64
	workspaceID = r.WorkspaceID.ValueInt64()

	createDatasetRequest, createDatasetRequestDiags := r.ToSharedCreateDatasetRequest(ctx)
	diags.Append(createDatasetRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreateDatasetV2Request{
		WorkspaceID:          workspaceID,
		CreateDatasetRequest: *createDatasetRequest,
	}

	return &out, diags
}

func (r *DatasetsResourceModel) ToSharedCreateDatasetRequest(ctx context.Context) (*shared.CreateDatasetRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var name string
	name = r.Name.ValueString()

	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	out := shared.CreateDatasetRequest{
		Name:        name,
		Description: description,
	}

	return &out, diags
}
