// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/speakeasy/terraform-provider-seqera/internal/provider/typeconvert"
	tfTypes "github.com/speakeasy/terraform-provider-seqera/internal/provider/types"
	"github.com/speakeasy/terraform-provider-seqera/internal/sdk/models/operations"
	"github.com/speakeasy/terraform-provider-seqera/internal/sdk/models/shared"
)

func (r *WorkspaceDatasetsResourceModel) ToSharedUpdateDatasetRequest(ctx context.Context) (*shared.UpdateDatasetRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	name := new(string)
	if !r.Name.IsUnknown() && !r.Name.IsNull() {
		*name = r.Name.ValueString()
	} else {
		name = nil
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	out := shared.UpdateDatasetRequest{
		Name:        name,
		Description: description,
	}

	return &out, diags
}

func (r *WorkspaceDatasetsResourceModel) ToOperationsUpdateDatasetRequest(ctx context.Context) (*operations.UpdateDatasetRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var workspaceID int64
	workspaceID = r.WorkspaceID.ValueInt64()

	var datasetID string
	datasetID = r.DatasetID.ValueString()

	updateDatasetRequest, updateDatasetRequestDiags := r.ToSharedUpdateDatasetRequest(ctx)
	diags.Append(updateDatasetRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateDatasetRequest{
		WorkspaceID:          workspaceID,
		DatasetID:            datasetID,
		UpdateDatasetRequest: *updateDatasetRequest,
	}

	return &out, diags
}

func (r *WorkspaceDatasetsResourceModel) ToOperationsCreateDatasetRequest(ctx context.Context) (*operations.CreateDatasetRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var workspaceID int64
	workspaceID = r.WorkspaceID.ValueInt64()

	out := operations.CreateDatasetRequest{
		WorkspaceID: workspaceID,
	}

	return &out, diags
}

func (r *WorkspaceDatasetsResourceModel) ToOperationsListDatasetsRequest(ctx context.Context) (*operations.ListDatasetsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var workspaceID int64
	workspaceID = r.WorkspaceID.ValueInt64()

	out := operations.ListDatasetsRequest{
		WorkspaceID: workspaceID,
	}

	return &out, diags
}

func (r *WorkspaceDatasetsResourceModel) ToOperationsDeleteDatasetRequest(ctx context.Context) (*operations.DeleteDatasetRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var workspaceID int64
	workspaceID = r.WorkspaceID.ValueInt64()

	var datasetID string
	datasetID = r.DatasetID.ValueString()

	out := operations.DeleteDatasetRequest{
		WorkspaceID: workspaceID,
		DatasetID:   datasetID,
	}

	return &out, diags
}

func (r *WorkspaceDatasetsResourceModel) RefreshFromSharedListDatasetsResponse(ctx context.Context, resp *shared.ListDatasetsResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		rPriorData := r
		r.DatasetID = rPriorData.DatasetID
		r.Datasets = []tfTypes.Dataset{}
		if len(r.Datasets) > len(resp.Datasets) {
			r.Datasets = r.Datasets[:len(resp.Datasets)]
		}
		for datasetsCount, datasetsItem := range resp.Datasets {
			var datasets tfTypes.Dataset
			datasets.ID = types.StringPointerValue(datasetsItem.ID)
			datasets.Name = types.StringValue(datasetsItem.Name)
			datasets.Description = types.StringPointerValue(datasetsItem.Description)
			datasets.MediaType = types.StringPointerValue(datasetsItem.MediaType)
			datasets.Deleted = types.BoolPointerValue(datasetsItem.Deleted)
			datasets.DateCreated = types.StringPointerValue(typeconvert.TimePointerToStringPointer(datasetsItem.DateCreated))
			datasets.LastUpdated = types.StringPointerValue(typeconvert.TimePointerToStringPointer(datasetsItem.LastUpdated))
			if datasetsCount+1 > len(r.Datasets) {
				r.Datasets = append(r.Datasets, datasets)
			} else {
				r.Datasets[datasetsCount].ID = datasets.ID
				r.Datasets[datasetsCount].Name = datasets.Name
				r.Datasets[datasetsCount].Description = datasets.Description
				r.Datasets[datasetsCount].MediaType = datasets.MediaType
				r.Datasets[datasetsCount].Deleted = datasets.Deleted
				r.Datasets[datasetsCount].DateCreated = datasets.DateCreated
				r.Datasets[datasetsCount].LastUpdated = datasets.LastUpdated
			}
		}
		r.DateCreated = rPriorData.DateCreated
		r.Deleted = rPriorData.Deleted
		r.Description = rPriorData.Description
		r.ID = rPriorData.ID
		r.LastUpdated = rPriorData.LastUpdated
		r.MediaType = rPriorData.MediaType
		r.Name = rPriorData.Name
		r.WorkspaceID = rPriorData.WorkspaceID
	}

	return diags
}
