// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/seqeralabs/terraform-provider-seqera/internal/provider/typeconvert"
	tfTypes "github.com/seqeralabs/terraform-provider-seqera/internal/provider/types"
	"github.com/seqeralabs/terraform-provider-seqera/internal/sdk/models/operations"
	"github.com/seqeralabs/terraform-provider-seqera/internal/sdk/models/shared"
)

func (r *StudiosDataSourceModel) RefreshFromSharedDataStudioDto(ctx context.Context, resp *shared.DataStudioDto) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		if resp.Configuration == nil {
			r.Configuration = nil
		} else {
			r.Configuration = &tfTypes.DataStudioConfiguration{}
			r.Configuration.CondaEnvironment = types.StringPointerValue(resp.Configuration.CondaEnvironment)
			r.Configuration.CPU = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.Configuration.CPU))
			if resp.Configuration.Environment != nil {
				r.Configuration.Environment = make(map[string]types.String, len(resp.Configuration.Environment))
				for key, value := range resp.Configuration.Environment {
					r.Configuration.Environment[key] = types.StringValue(value)
				}
			}
			r.Configuration.Gpu = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.Configuration.Gpu))
			r.Configuration.LifespanHours = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.Configuration.LifespanHours))
			r.Configuration.Memory = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.Configuration.Memory))
			r.Configuration.MountData = make([]types.String, 0, len(resp.Configuration.MountData))
			for _, v := range resp.Configuration.MountData {
				r.Configuration.MountData = append(r.Configuration.MountData, types.StringValue(v))
			}
		}
		r.Description = types.StringPointerValue(resp.Description)
		r.IsPrivate = types.BoolPointerValue(resp.IsPrivate)
		r.Name = types.StringPointerValue(resp.Name)
		r.SessionID = types.StringPointerValue(resp.SessionID)
		r.WorkspaceID = types.Int64PointerValue(resp.WorkspaceID)
	}

	return diags
}

func (r *StudiosDataSourceModel) ToOperationsDescribeDataStudioRequest(ctx context.Context) (*operations.DescribeDataStudioRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var sessionID string
	sessionID = r.SessionID.ValueString()

	workspaceID := new(int64)
	if !r.WorkspaceID.IsUnknown() && !r.WorkspaceID.IsNull() {
		*workspaceID = r.WorkspaceID.ValueInt64()
	} else {
		workspaceID = nil
	}
	out := operations.DescribeDataStudioRequest{
		SessionID:   sessionID,
		WorkspaceID: workspaceID,
	}

	return &out, diags
}
