// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework-validators/int32validator"
	"github.com/hashicorp/terraform-plugin-framework-validators/objectvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/boolplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int32planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/listplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/mapplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/objectplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	speakeasy_boolplanmodifier "github.com/seqeralabs/terraform-provider-seqera/internal/planmodifiers/boolplanmodifier"
	speakeasy_int32planmodifier "github.com/seqeralabs/terraform-provider-seqera/internal/planmodifiers/int32planmodifier"
	speakeasy_listplanmodifier "github.com/seqeralabs/terraform-provider-seqera/internal/planmodifiers/listplanmodifier"
	speakeasy_mapplanmodifier "github.com/seqeralabs/terraform-provider-seqera/internal/planmodifiers/mapplanmodifier"
	speakeasy_objectplanmodifier "github.com/seqeralabs/terraform-provider-seqera/internal/planmodifiers/objectplanmodifier"
	speakeasy_stringplanmodifier "github.com/seqeralabs/terraform-provider-seqera/internal/planmodifiers/stringplanmodifier"
	tfTypes "github.com/seqeralabs/terraform-provider-seqera/internal/provider/types"
	"github.com/seqeralabs/terraform-provider-seqera/internal/sdk"
	"github.com/seqeralabs/terraform-provider-seqera/internal/validators"
	custom_boolvalidators "github.com/seqeralabs/terraform-provider-seqera/internal/validators/boolvalidators"
	speakeasy_int32validators "github.com/seqeralabs/terraform-provider-seqera/internal/validators/int32validators"
	custom_objectvalidators "github.com/seqeralabs/terraform-provider-seqera/internal/validators/objectvalidators"
	speakeasy_objectvalidators "github.com/seqeralabs/terraform-provider-seqera/internal/validators/objectvalidators"
	custom_stringvalidators "github.com/seqeralabs/terraform-provider-seqera/internal/validators/stringvalidators"
	speakeasy_stringvalidators "github.com/seqeralabs/terraform-provider-seqera/internal/validators/stringvalidators"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &ComputeEnvResource{}
var _ resource.ResourceWithImportState = &ComputeEnvResource{}

func NewComputeEnvResource() resource.Resource {
	return &ComputeEnvResource{}
}

// ComputeEnvResource defines the resource implementation.
type ComputeEnvResource struct {
	// Provider configured SDK client.
	client *sdk.Seqera
}

// ComputeEnvResourceModel describes the resource data model.
type ComputeEnvResourceModel struct {
	ComputeEnv   tfTypes.ComputeEnvComputeConfig `tfsdk:"compute_env"`
	ComputeEnvID types.String                    `tfsdk:"compute_env_id"`
	LabelIds     []types.Int64                   `tfsdk:"label_ids"`
	WorkspaceID  types.Int64                     `queryParam:"style=form,explode=true,name=workspaceId" tfsdk:"workspace_id"`
}

func (r *ComputeEnvResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_compute_env"
}

func (r *ComputeEnvResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "Seqera Platform compute environments define the execution platform where a pipeline will run.\nCompute environments enable users to launch pipelines on a growing number of cloud and\non-premises platforms. Each compute environment must be configured to enable Seqera to submit tasks.\n\nCompute environments define the computational resources and configuration needed\nto run Nextflow workflows, including cloud provider settings, resource limits,\nand execution parameters.\n",
		Attributes: map[string]schema.Attribute{
			"compute_env": schema.SingleNestedAttribute{
				Required: true,
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplaceIfConfigured(),
					speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
				},
				Attributes: map[string]schema.Attribute{
					"compute_env_id": schema.StringAttribute{
						Computed: true,
					},
					"config": schema.SingleNestedAttribute{
						Required: true,
						PlanModifiers: []planmodifier.Object{
							objectplanmodifier.RequiresReplaceIfConfigured(),
							speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
						},
						Attributes: map[string]schema.Attribute{
							"altair_platform": schema.SingleNestedAttribute{
								Computed: true,
								Optional: true,
								PlanModifiers: []planmodifier.Object{
									objectplanmodifier.RequiresReplaceIfConfigured(),
									speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
								},
								Attributes: map[string]schema.Attribute{
									"compute_queue": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"environment": schema.ListNestedAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.List{
											listplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
										},
										NestedObject: schema.NestedAttributeObject{
											Validators: []validator.Object{
												speakeasy_objectvalidators.NotNull(),
											},
											PlanModifiers: []planmodifier.Object{
												objectplanmodifier.RequiresReplaceIfConfigured(),
												speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
											},
											Attributes: map[string]schema.Attribute{
												"compute": schema.BoolAttribute{
													Computed: true,
													Optional: true,
													PlanModifiers: []planmodifier.Bool{
														boolplanmodifier.RequiresReplaceIfConfigured(),
														speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
													},
													Description: `Requires replacement if changed.`,
												},
												"head": schema.BoolAttribute{
													Computed: true,
													Optional: true,
													PlanModifiers: []planmodifier.Bool{
														boolplanmodifier.RequiresReplaceIfConfigured(),
														speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
													},
													Description: `Requires replacement if changed.`,
												},
												"name": schema.StringAttribute{
													Computed: true,
													Optional: true,
													PlanModifiers: []planmodifier.String{
														stringplanmodifier.RequiresReplaceIfConfigured(),
														speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
													},
													Description: `Requires replacement if changed.`,
												},
												"value": schema.StringAttribute{
													Computed: true,
													Optional: true,
													PlanModifiers: []planmodifier.String{
														stringplanmodifier.RequiresReplaceIfConfigured(),
														speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
													},
													Description: `Requires replacement if changed.`,
												},
											},
										},
										Description: `Array of environment variables for the compute environment. Requires replacement if changed.`,
									},
									"head_job_options": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"head_queue": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"host_name": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"launch_dir": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"max_queue_size": schema.Int32Attribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.Int32{
											int32planmodifier.RequiresReplaceIfConfigured(),
											speakeasy_int32planmodifier.SuppressDiff(speakeasy_int32planmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"nextflow_config": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Nextflow configuration settings and parameters. Requires replacement if changed.`,
									},
									"port": schema.Int32Attribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.Int32{
											int32planmodifier.RequiresReplaceIfConfigured(),
											speakeasy_int32planmodifier.SuppressDiff(speakeasy_int32planmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"post_run_script": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Shell script to execute after workflow completes. Requires replacement if changed.`,
									},
									"pre_run_script": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Shell script to execute before workflow starts. Requires replacement if changed.`,
									},
									"propagate_head_job_options": schema.BoolAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.Bool{
											boolplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"user_name": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"work_dir": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Working directory path for workflow execution. Not Null; Requires replacement if changed.`,
										Validators: []validator.String{
											speakeasy_stringvalidators.NotNull(),
										},
									},
								},
								Description: `Requires replacement if changed.`,
								Validators: []validator.Object{
									objectvalidator.ConflictsWith(path.Expressions{
										path.MatchRelative().AtParent().AtName("eks_platform"),
										path.MatchRelative().AtParent().AtName("aws_batch"),
										path.MatchRelative().AtParent().AtName("aws_cloud"),
										path.MatchRelative().AtParent().AtName("azure_batch"),
										path.MatchRelative().AtParent().AtName("google_batch"),
										path.MatchRelative().AtParent().AtName("gke_platform"),
										path.MatchRelative().AtParent().AtName("google_lifesciences"),
										path.MatchRelative().AtParent().AtName("lsf_platform"),
										path.MatchRelative().AtParent().AtName("k8s_platform"),
										path.MatchRelative().AtParent().AtName("moab_platform"),
										path.MatchRelative().AtParent().AtName("seqeracompute_platform"),
										path.MatchRelative().AtParent().AtName("slurm_platform"),
										path.MatchRelative().AtParent().AtName("uge_platform"),
									}...),
								},
							},
							"aws_batch": schema.SingleNestedAttribute{
								Computed: true,
								Optional: true,
								PlanModifiers: []planmodifier.Object{
									objectplanmodifier.RequiresReplaceIfConfigured(),
									speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
								},
								Attributes: map[string]schema.Attribute{
									"cli_path": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Path to AWS CLI on compute instances. AWS CLI must be available at this path. Requires replacement if changed.`,
									},
									"compute_job_role": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										MarkdownDescription: `IAM role ARN for compute jobs. Jobs assume this role during execution.` + "\n" +
											`Must have permissions for S3, CloudWatch, etc.` + "\n" +
											`Format: arn:aws:iam::account-id:role/role-name` + "\n" +
											`Requires replacement if changed.`,
									},
									"compute_queue": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Name of the AWS Batch compute queue. Requires replacement if changed.`,
									},
									"dragen_instance_type": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"dragen_queue": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"enable_fusion": schema.BoolAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.Bool{
											boolplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"enable_wave": schema.BoolAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.Bool{
											boolplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
										},
										MarkdownDescription: `Enable Wave containers for this compute environment. Wave provides container provisioning` + "\n" +
											`and augmentation capabilities for Nextflow workflows.` + "\n" +
											`` + "\n" +
											`When enable_wave is true, enable_fusion must be explicitly set to either true or false.` + "\n" +
											`Note: If Fusion2 is enabled, Wave must also be enabled.` + "\n" +
											`Requires replacement if changed.`,
										Validators: []validator.Bool{
											custom_boolvalidators.WaveEnabledValidator(),
										},
									},
									"environment": schema.ListNestedAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.List{
											listplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
										},
										NestedObject: schema.NestedAttributeObject{
											Validators: []validator.Object{
												speakeasy_objectvalidators.NotNull(),
											},
											PlanModifiers: []planmodifier.Object{
												objectplanmodifier.RequiresReplaceIfConfigured(),
												speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
											},
											Attributes: map[string]schema.Attribute{
												"compute": schema.BoolAttribute{
													Computed: true,
													Optional: true,
													PlanModifiers: []planmodifier.Bool{
														boolplanmodifier.RequiresReplaceIfConfigured(),
														speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
													},
													Description: `Requires replacement if changed.`,
												},
												"head": schema.BoolAttribute{
													Computed: true,
													Optional: true,
													PlanModifiers: []planmodifier.Bool{
														boolplanmodifier.RequiresReplaceIfConfigured(),
														speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
													},
													Description: `Requires replacement if changed.`,
												},
												"name": schema.StringAttribute{
													Computed: true,
													Optional: true,
													PlanModifiers: []planmodifier.String{
														stringplanmodifier.RequiresReplaceIfConfigured(),
														speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
													},
													Description: `Requires replacement if changed.`,
												},
												"value": schema.StringAttribute{
													Computed: true,
													Optional: true,
													PlanModifiers: []planmodifier.String{
														stringplanmodifier.RequiresReplaceIfConfigured(),
														speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
													},
													Description: `Requires replacement if changed.`,
												},
											},
										},
										Description: `Array of environment variables for the compute environment. Requires replacement if changed.`,
									},
									"execution_role": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										MarkdownDescription: `IAM role ARN for Batch execution (pulling container images, writing logs).` + "\n" +
											`Must have permissions for ECR and CloudWatch Logs.` + "\n" +
											`Format: arn:aws:iam::account-id:role/role-name` + "\n" +
											`Requires replacement if changed.`,
									},
									"forge": schema.SingleNestedAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.Object{
											objectplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
										},
										Attributes: map[string]schema.Attribute{
											"alloc_strategy": schema.StringAttribute{
												Computed: true,
												Optional: true,
												PlanModifiers: []planmodifier.String{
													stringplanmodifier.RequiresReplaceIfConfigured(),
													speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
												},
												MarkdownDescription: `Strategy for allocating compute resources:` + "\n" +
													`- BEST_FIT: Selects instance type that best fits job requirements` + "\n" +
													`- BEST_FIT_PROGRESSIVE: Similar to BEST_FIT but widens search progressively` + "\n" +
													`- SPOT_CAPACITY_OPTIMIZED: For Spot instances, selects from pools with optimal capacity` + "\n" +
													`- SPOT_PRICE_CAPACITY_OPTIMIZED: Optimizes for both price and capacity` + "\n" +
													`Note: SPOT_CAPACITY_OPTIMIZED only valid when type is SPOT` + "\n" +
													`must be one of ["BEST_FIT", "BEST_FIT_PROGRESSIVE", "SPOT_CAPACITY_OPTIMIZED", "SPOT_PRICE_CAPACITY_OPTIMIZED"]; Requires replacement if changed.`,
												Validators: []validator.String{
													stringvalidator.OneOf(
														"BEST_FIT",
														"BEST_FIT_PROGRESSIVE",
														"SPOT_CAPACITY_OPTIMIZED",
														"SPOT_PRICE_CAPACITY_OPTIMIZED",
													),
												},
											},
											"allow_buckets": schema.ListAttribute{
												Computed: true,
												Optional: true,
												PlanModifiers: []planmodifier.List{
													listplanmodifier.RequiresReplaceIfConfigured(),
													speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
												},
												ElementType: types.StringType,
												Description: `Requires replacement if changed.`,
											},
											"arm64_enabled": schema.BoolAttribute{
												Computed: true,
												Optional: true,
												PlanModifiers: []planmodifier.Bool{
													boolplanmodifier.RequiresReplaceIfConfigured(),
													speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
												},
												Description: `Requires replacement if changed.`,
											},
											"bid_percentage": schema.Int32Attribute{
												Computed: true,
												Optional: true,
												PlanModifiers: []planmodifier.Int32{
													int32planmodifier.RequiresReplaceIfConfigured(),
													speakeasy_int32planmodifier.SuppressDiff(speakeasy_int32planmodifier.ExplicitSuppress),
												},
												MarkdownDescription: `The maximum percentage that a Spot Instance price can be when compared with the On-Demand price` + "\n" +
													`for that instance type before instances are launched. For example, if your maximum percentage is 20%,` + "\n" +
													`then the Spot price must be less than 20% of the current On-Demand price for that Amazon EC2 instance.` + "\n" +
													`You always pay the lowest (market) price and never more than your maximum percentage. If you leave this` + "\n" +
													`field empty, the default value is 100% of the On-Demand price. For most use cases, we recommend leaving` + "\n" +
													`this field empty.` + "\n" +
													`` + "\n" +
													`Must be a whole number between 0 and 100 (inclusive).` + "\n" +
													`Requires replacement if changed.`,
												Validators: []validator.Int32{
													int32validator.AtMost(100),
												},
											},
											"dispose_on_deletion": schema.BoolAttribute{
												Computed: true,
												Optional: true,
												PlanModifiers: []planmodifier.Bool{
													boolplanmodifier.RequiresReplaceIfConfigured(),
													speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
												},
												Description: `Dispose of AWS Batch resources when compute environment is deleted. Requires replacement if changed.`,
											},
											"dragen_ami_id": schema.StringAttribute{
												Computed: true,
												Optional: true,
												PlanModifiers: []planmodifier.String{
													stringplanmodifier.RequiresReplaceIfConfigured(),
													speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
												},
												Description: `Requires replacement if changed.`,
											},
											"dragen_enabled": schema.BoolAttribute{
												Computed: true,
												Optional: true,
												PlanModifiers: []planmodifier.Bool{
													boolplanmodifier.RequiresReplaceIfConfigured(),
													speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
												},
												Description: `Requires replacement if changed.`,
											},
											"dragen_instance_type": schema.StringAttribute{
												Computed: true,
												Optional: true,
												PlanModifiers: []planmodifier.String{
													stringplanmodifier.RequiresReplaceIfConfigured(),
													speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
												},
												Description: `Requires replacement if changed.`,
											},
											"ebs_auto_scale": schema.BoolAttribute{
												Computed: true,
												Optional: true,
												PlanModifiers: []planmodifier.Bool{
													boolplanmodifier.RequiresReplaceIfConfigured(),
													speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
												},
												MarkdownDescription: `Enable automatic EBS volume expansion.` + "\n" +
													`When enabled, EBS volumes automatically expand as needed.` + "\n" +
													`Requires replacement if changed.`,
											},
											"ebs_block_size": schema.Int32Attribute{
												Computed: true,
												Optional: true,
												PlanModifiers: []planmodifier.Int32{
													int32planmodifier.RequiresReplaceIfConfigured(),
													speakeasy_int32planmodifier.SuppressDiff(speakeasy_int32planmodifier.ExplicitSuppress),
												},
												Description: `Size of EBS root volume in GB (minimum 8 GB, maximum 16 TB). Requires replacement if changed.`,
											},
											"ebs_boot_size": schema.Int32Attribute{
												Computed: true,
												Optional: true,
												PlanModifiers: []planmodifier.Int32{
													int32planmodifier.RequiresReplaceIfConfigured(),
													speakeasy_int32planmodifier.SuppressDiff(speakeasy_int32planmodifier.ExplicitSuppress),
												},
												Description: `Requires replacement if changed.`,
											},
											"ec2_key_pair": schema.StringAttribute{
												Computed: true,
												Optional: true,
												PlanModifiers: []planmodifier.String{
													stringplanmodifier.RequiresReplaceIfConfigured(),
													speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
												},
												MarkdownDescription: `EC2 key pair name for SSH access to compute instances.` + "\n" +
													`Key pair must exist in the specified region.` + "\n" +
													`Requires replacement if changed.`,
											},
											"ecs_config": schema.StringAttribute{
												Computed: true,
												Optional: true,
												PlanModifiers: []planmodifier.String{
													stringplanmodifier.RequiresReplaceIfConfigured(),
													speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
												},
												Description: `Requires replacement if changed.`,
											},
											"efs_create": schema.BoolAttribute{
												Computed: true,
												Optional: true,
												PlanModifiers: []planmodifier.Bool{
													boolplanmodifier.RequiresReplaceIfConfigured(),
													speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
												},
												Description: `Automatically create an EFS file system. Requires replacement if changed.`,
											},
											"efs_id": schema.StringAttribute{
												Computed: true,
												Optional: true,
												PlanModifiers: []planmodifier.String{
													stringplanmodifier.RequiresReplaceIfConfigured(),
													speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
												},
												MarkdownDescription: `EFS file system ID to mount.` + "\n" +
													`Format: fs- followed by hexadecimal characters.` + "\n" +
													`EFS must be in the same VPC and region.` + "\n" +
													`Requires replacement if changed.`,
											},
											"efs_mount": schema.StringAttribute{
												Computed: true,
												Optional: true,
												PlanModifiers: []planmodifier.String{
													stringplanmodifier.RequiresReplaceIfConfigured(),
													speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
												},
												Description: `Path where EFS will be mounted in the container. Requires replacement if changed.`,
											},
											"fargate_head_enabled": schema.BoolAttribute{
												Computed: true,
												Optional: true,
												PlanModifiers: []planmodifier.Bool{
													boolplanmodifier.RequiresReplaceIfConfigured(),
													speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
												},
												MarkdownDescription: `Use Fargate for head job instead of EC2.` + "\n" +
													`Reduces costs by running head job on serverless compute.` + "\n" +
													`Only applicable when using EC2 for worker jobs.` + "\n" +
													`Requires replacement if changed.`,
											},
											"fsx_mount": schema.StringAttribute{
												Computed: true,
												Optional: true,
												PlanModifiers: []planmodifier.String{
													stringplanmodifier.RequiresReplaceIfConfigured(),
													speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
												},
												Description: `Path where FSx will be mounted in the container. Requires replacement if changed.`,
											},
											"fsx_name": schema.StringAttribute{
												Computed: true,
												Optional: true,
												PlanModifiers: []planmodifier.String{
													stringplanmodifier.RequiresReplaceIfConfigured(),
													speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
												},
												Description: `FSx for Lustre file system name. Requires replacement if changed.`,
											},
											"fsx_size": schema.Int32Attribute{
												Computed: true,
												Optional: true,
												PlanModifiers: []planmodifier.Int32{
													int32planmodifier.RequiresReplaceIfConfigured(),
													speakeasy_int32planmodifier.SuppressDiff(speakeasy_int32planmodifier.ExplicitSuppress),
												},
												Description: `Size of FSx file system in GB. Requires replacement if changed.`,
											},
											"gpu_enabled": schema.BoolAttribute{
												Computed: true,
												Optional: true,
												PlanModifiers: []planmodifier.Bool{
													boolplanmodifier.RequiresReplaceIfConfigured(),
													speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
												},
												MarkdownDescription: `Enable GPU support for compute instances.` + "\n" +
													`When enabled, GPU-capable instance types will be selected.` + "\n" +
													`Requires replacement if changed.`,
											},
											"image_id": schema.StringAttribute{
												Computed: true,
												Optional: true,
												PlanModifiers: []planmodifier.String{
													stringplanmodifier.RequiresReplaceIfConfigured(),
													speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
												},
												Description: `Requires replacement if changed.`,
											},
											"instance_types": schema.ListAttribute{
												Computed: true,
												Optional: true,
												PlanModifiers: []planmodifier.List{
													listplanmodifier.RequiresReplaceIfConfigured(),
													speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
												},
												ElementType: types.StringType,
												MarkdownDescription: `List of EC2 instance types to use.` + "\n" +
													`Examples: ["m5.xlarge", "m5.2xlarge"], ["c5.2xlarge"], ["p3.2xlarge"]` + "\n" +
													`Default: ["optimal"] - AWS Batch selects appropriate instances` + "\n" +
													`Requires replacement if changed.`,
											},
											"max_cpus": schema.Int32Attribute{
												Computed: true,
												Optional: true,
												PlanModifiers: []planmodifier.Int32{
													int32planmodifier.RequiresReplaceIfConfigured(),
													speakeasy_int32planmodifier.SuppressDiff(speakeasy_int32planmodifier.ExplicitSuppress),
												},
												MarkdownDescription: `Maximum number of CPUs available in the compute environment.` + "\n" +
													`Subject to AWS service quotas.` + "\n" +
													`Not Null; Requires replacement if changed.`,
												Validators: []validator.Int32{
													speakeasy_int32validators.NotNull(),
												},
											},
											"min_cpus": schema.Int32Attribute{
												Computed: true,
												Optional: true,
												PlanModifiers: []planmodifier.Int32{
													int32planmodifier.RequiresReplaceIfConfigured(),
													speakeasy_int32planmodifier.SuppressDiff(speakeasy_int32planmodifier.ExplicitSuppress),
												},
												MarkdownDescription: `Minimum number of CPUs to maintain in the compute environment.` + "\n" +
													`Setting to 0 allows environment to scale to zero when idle.` + "\n" +
													`Requires replacement if changed.`,
											},
											"security_groups": schema.ListAttribute{
												Computed: true,
												Optional: true,
												PlanModifiers: []planmodifier.List{
													listplanmodifier.RequiresReplaceIfConfigured(),
													speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
												},
												ElementType: types.StringType,
												MarkdownDescription: `List of security group IDs to attach to compute instances.` + "\n" +
													`Security groups must allow necessary network access.` + "\n" +
													`Requires replacement if changed.`,
											},
											"subnets": schema.ListAttribute{
												Computed: true,
												Optional: true,
												PlanModifiers: []planmodifier.List{
													listplanmodifier.RequiresReplaceIfConfigured(),
													speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
												},
												ElementType: types.StringType,
												MarkdownDescription: `List of subnet IDs for compute instances.` + "\n" +
													`Subnets must be in the specified VPC. Use multiple subnets for high availability.` + "\n" +
													`Must have sufficient IP addresses.` + "\n" +
													`Requires replacement if changed.`,
											},
											"type": schema.StringAttribute{
												Computed: true,
												Optional: true,
												PlanModifiers: []planmodifier.String{
													stringplanmodifier.RequiresReplaceIfConfigured(),
													speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
												},
												MarkdownDescription: `Type of compute instances to provision:` + "\n" +
													`- SPOT: Use EC2 Spot instances (cost-effective, can be interrupted)` + "\n" +
													`- EC2: Use On-Demand EC2 instances (reliable, higher cost)` + "\n" +
													`- FARGATE: Use AWS Fargate serverless compute` + "\n" +
													`Not Null; must be one of ["SPOT", "EC2"]; Requires replacement if changed.`,
												Validators: []validator.String{
													speakeasy_stringvalidators.NotNull(),
													stringvalidator.OneOf(
														"SPOT",
														"EC2",
													),
												},
											},
											"vpc_id": schema.StringAttribute{
												Computed: true,
												Optional: true,
												PlanModifiers: []planmodifier.String{
													stringplanmodifier.RequiresReplaceIfConfigured(),
													speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
												},
												MarkdownDescription: `VPC ID where compute environment will be deployed.` + "\n" +
													`Format: vpc- followed by hexadecimal characters` + "\n" +
													`Requires replacement if changed.`,
											},
										},
										Description: `Requires replacement if changed.`,
									},
									"fusion_snapshots": schema.BoolAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.Bool{
											boolplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"head_job_cpus": schema.Int32Attribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.Int32{
											int32planmodifier.RequiresReplaceIfConfigured(),
											speakeasy_int32planmodifier.SuppressDiff(speakeasy_int32planmodifier.ExplicitSuppress),
										},
										Description: `Number of CPUs allocated for the head job (default: 1). Requires replacement if changed.`,
									},
									"head_job_memory_mb": schema.Int32Attribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.Int32{
											int32planmodifier.RequiresReplaceIfConfigured(),
											speakeasy_int32planmodifier.SuppressDiff(speakeasy_int32planmodifier.ExplicitSuppress),
										},
										Description: `Memory allocation for the head job in MB (default: 1024). Requires replacement if changed.`,
									},
									"head_job_role": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										MarkdownDescription: `IAM role ARN for the head job.` + "\n" +
											`Format: arn:aws:iam::account-id:role/role-name` + "\n" +
											`Requires replacement if changed.`,
									},
									"head_queue": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Name of the head job queue. Requires replacement if changed.`,
									},
									"log_group": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"lustre_id": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										DeprecationMessage: `This will be removed in a future release, please migrate away from it as soon as possible`,
										Description:        `Requires replacement if changed.`,
									},
									"nextflow_config": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Nextflow configuration settings and parameters. Requires replacement if changed.`,
									},
									"nvnme_storage_enabled": schema.BoolAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.Bool{
											boolplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"post_run_script": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Shell script to execute after workflow completes. Requires replacement if changed.`,
									},
									"pre_run_script": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Shell script to execute before workflow starts. Requires replacement if changed.`,
									},
									"region": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										MarkdownDescription: `AWS region where the Batch compute environment will be created.` + "\n" +
											`Examples: us-east-1, eu-west-1, ap-southeast-2` + "\n" +
											`Not Null; Requires replacement if changed.`,
										Validators: []validator.String{
											speakeasy_stringvalidators.NotNull(),
										},
									},
									"storage_type": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										DeprecationMessage: `This will be removed in a future release, please migrate away from it as soon as possible`,
										Description:        `Requires replacement if changed.`,
									},
									"volumes": schema.ListAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.List{
											listplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
										},
										ElementType: types.StringType,
										Description: `Requires replacement if changed.`,
									},
									"work_dir": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Working directory path for workflow execution. Not Null; Requires replacement if changed.`,
										Validators: []validator.String{
											speakeasy_stringvalidators.NotNull(),
										},
									},
								},
								Description: `Requires replacement if changed.`,
								Validators: []validator.Object{
									objectvalidator.ConflictsWith(path.Expressions{
										path.MatchRelative().AtParent().AtName("altair_platform"),
										path.MatchRelative().AtParent().AtName("eks_platform"),
										path.MatchRelative().AtParent().AtName("aws_cloud"),
										path.MatchRelative().AtParent().AtName("azure_batch"),
										path.MatchRelative().AtParent().AtName("google_batch"),
										path.MatchRelative().AtParent().AtName("gke_platform"),
										path.MatchRelative().AtParent().AtName("google_lifesciences"),
										path.MatchRelative().AtParent().AtName("lsf_platform"),
										path.MatchRelative().AtParent().AtName("k8s_platform"),
										path.MatchRelative().AtParent().AtName("moab_platform"),
										path.MatchRelative().AtParent().AtName("seqeracompute_platform"),
										path.MatchRelative().AtParent().AtName("slurm_platform"),
										path.MatchRelative().AtParent().AtName("uge_platform"),
									}...),
									custom_objectvalidators.AwsForgeValidator(),
								},
							},
							"aws_cloud": schema.SingleNestedAttribute{
								Computed: true,
								Optional: true,
								PlanModifiers: []planmodifier.Object{
									objectplanmodifier.RequiresReplaceIfConfigured(),
									speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
								},
								Attributes: map[string]schema.Attribute{
									"allow_buckets": schema.ListAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.List{
											listplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
										},
										ElementType: types.StringType,
										Description: `Requires replacement if changed.`,
									},
									"arm64_enabled": schema.BoolAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.Bool{
											boolplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"ebs_boot_size": schema.Int32Attribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.Int32{
											int32planmodifier.RequiresReplaceIfConfigured(),
											speakeasy_int32planmodifier.SuppressDiff(speakeasy_int32planmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"ec2_key_pair": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"enable_fusion": schema.BoolAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.Bool{
											boolplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"enable_wave": schema.BoolAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.Bool{
											boolplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"environment": schema.ListNestedAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.List{
											listplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
										},
										NestedObject: schema.NestedAttributeObject{
											Validators: []validator.Object{
												speakeasy_objectvalidators.NotNull(),
											},
											PlanModifiers: []planmodifier.Object{
												objectplanmodifier.RequiresReplaceIfConfigured(),
												speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
											},
											Attributes: map[string]schema.Attribute{
												"compute": schema.BoolAttribute{
													Computed: true,
													Optional: true,
													PlanModifiers: []planmodifier.Bool{
														boolplanmodifier.RequiresReplaceIfConfigured(),
														speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
													},
													Description: `Requires replacement if changed.`,
												},
												"head": schema.BoolAttribute{
													Computed: true,
													Optional: true,
													PlanModifiers: []planmodifier.Bool{
														boolplanmodifier.RequiresReplaceIfConfigured(),
														speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
													},
													Description: `Requires replacement if changed.`,
												},
												"name": schema.StringAttribute{
													Computed: true,
													Optional: true,
													PlanModifiers: []planmodifier.String{
														stringplanmodifier.RequiresReplaceIfConfigured(),
														speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
													},
													Description: `Requires replacement if changed.`,
												},
												"value": schema.StringAttribute{
													Computed: true,
													Optional: true,
													PlanModifiers: []planmodifier.String{
														stringplanmodifier.RequiresReplaceIfConfigured(),
														speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
													},
													Description: `Requires replacement if changed.`,
												},
											},
										},
										Description: `Array of environment variables for the compute environment. Requires replacement if changed.`,
									},
									"gpu_enabled": schema.BoolAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.Bool{
											boolplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"image_id": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"instance_profile_arn": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"instance_type": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"log_group": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"nextflow_config": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Nextflow configuration settings and parameters. Requires replacement if changed.`,
									},
									"post_run_script": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Shell script to execute after workflow completes. Requires replacement if changed.`,
									},
									"pre_run_script": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Shell script to execute before workflow starts. Requires replacement if changed.`,
									},
									"region": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Not Null; Requires replacement if changed.`,
										Validators: []validator.String{
											speakeasy_stringvalidators.NotNull(),
										},
									},
									"security_groups": schema.ListAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.List{
											listplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
										},
										ElementType: types.StringType,
										Description: `Requires replacement if changed.`,
									},
									"subnet_id": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"work_dir": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Working directory path for workflow execution. Not Null; Requires replacement if changed.`,
										Validators: []validator.String{
											speakeasy_stringvalidators.NotNull(),
										},
									},
								},
								Description: `Requires replacement if changed.`,
								Validators: []validator.Object{
									objectvalidator.ConflictsWith(path.Expressions{
										path.MatchRelative().AtParent().AtName("altair_platform"),
										path.MatchRelative().AtParent().AtName("eks_platform"),
										path.MatchRelative().AtParent().AtName("aws_batch"),
										path.MatchRelative().AtParent().AtName("azure_batch"),
										path.MatchRelative().AtParent().AtName("google_batch"),
										path.MatchRelative().AtParent().AtName("gke_platform"),
										path.MatchRelative().AtParent().AtName("google_lifesciences"),
										path.MatchRelative().AtParent().AtName("lsf_platform"),
										path.MatchRelative().AtParent().AtName("k8s_platform"),
										path.MatchRelative().AtParent().AtName("moab_platform"),
										path.MatchRelative().AtParent().AtName("seqeracompute_platform"),
										path.MatchRelative().AtParent().AtName("slurm_platform"),
										path.MatchRelative().AtParent().AtName("uge_platform"),
									}...),
								},
							},
							"azure_batch": schema.SingleNestedAttribute{
								Computed: true,
								Optional: true,
								PlanModifiers: []planmodifier.Object{
									objectplanmodifier.RequiresReplaceIfConfigured(),
									speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
								},
								Attributes: map[string]schema.Attribute{
									"auto_pool_mode": schema.BoolAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.Bool{
											boolplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
										},
										DeprecationMessage: `This will be removed in a future release, please migrate away from it as soon as possible`,
										Description:        `Requires replacement if changed.`,
									},
									"delete_jobs_on_completion": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `must be one of ["on_success", "always", "never"]; Requires replacement if changed.`,
										Validators: []validator.String{
											stringvalidator.OneOf(
												"on_success",
												"always",
												"never",
											),
										},
									},
									"delete_pools_on_completion": schema.BoolAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.Bool{
											boolplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"enable_fusion": schema.BoolAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.Bool{
											boolplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"enable_wave": schema.BoolAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.Bool{
											boolplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"environment": schema.ListNestedAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.List{
											listplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
										},
										NestedObject: schema.NestedAttributeObject{
											Validators: []validator.Object{
												speakeasy_objectvalidators.NotNull(),
											},
											PlanModifiers: []planmodifier.Object{
												objectplanmodifier.RequiresReplaceIfConfigured(),
												speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
											},
											Attributes: map[string]schema.Attribute{
												"compute": schema.BoolAttribute{
													Computed: true,
													Optional: true,
													PlanModifiers: []planmodifier.Bool{
														boolplanmodifier.RequiresReplaceIfConfigured(),
														speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
													},
													Description: `Requires replacement if changed.`,
												},
												"head": schema.BoolAttribute{
													Computed: true,
													Optional: true,
													PlanModifiers: []planmodifier.Bool{
														boolplanmodifier.RequiresReplaceIfConfigured(),
														speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
													},
													Description: `Requires replacement if changed.`,
												},
												"name": schema.StringAttribute{
													Computed: true,
													Optional: true,
													PlanModifiers: []planmodifier.String{
														stringplanmodifier.RequiresReplaceIfConfigured(),
														speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
													},
													Description: `Requires replacement if changed.`,
												},
												"value": schema.StringAttribute{
													Computed: true,
													Optional: true,
													PlanModifiers: []planmodifier.String{
														stringplanmodifier.RequiresReplaceIfConfigured(),
														speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
													},
													Description: `Requires replacement if changed.`,
												},
											},
										},
										Description: `Array of environment variables for the compute environment. Requires replacement if changed.`,
									},
									"forge": schema.SingleNestedAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.Object{
											objectplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
										},
										Attributes: map[string]schema.Attribute{
											"auto_scale": schema.BoolAttribute{
												Computed: true,
												Optional: true,
												PlanModifiers: []planmodifier.Bool{
													boolplanmodifier.RequiresReplaceIfConfigured(),
													speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
												},
												Description: `Requires replacement if changed.`,
											},
											"container_reg_ids": schema.ListAttribute{
												Computed: true,
												Optional: true,
												PlanModifiers: []planmodifier.List{
													listplanmodifier.RequiresReplaceIfConfigured(),
													speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
												},
												ElementType: types.StringType,
												Description: `Requires replacement if changed.`,
											},
											"dispose_on_deletion": schema.BoolAttribute{
												Computed: true,
												Optional: true,
												PlanModifiers: []planmodifier.Bool{
													boolplanmodifier.RequiresReplaceIfConfigured(),
													speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
												},
												Description: `Requires replacement if changed.`,
											},
											"vm_count": schema.Int32Attribute{
												Computed: true,
												Optional: true,
												PlanModifiers: []planmodifier.Int32{
													int32planmodifier.RequiresReplaceIfConfigured(),
													speakeasy_int32planmodifier.SuppressDiff(speakeasy_int32planmodifier.ExplicitSuppress),
												},
												Description: `Not Null; Requires replacement if changed.`,
												Validators: []validator.Int32{
													speakeasy_int32validators.NotNull(),
												},
											},
											"vm_type": schema.StringAttribute{
												Computed: true,
												Optional: true,
												PlanModifiers: []planmodifier.String{
													stringplanmodifier.RequiresReplaceIfConfigured(),
													speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
												},
												Description: `Requires replacement if changed.`,
											},
										},
										Description: `Requires replacement if changed.`,
									},
									"head_pool": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"managed_identity_client_id": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"nextflow_config": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Nextflow configuration settings and parameters. Requires replacement if changed.`,
									},
									"post_run_script": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Shell script to execute after workflow completes. Requires replacement if changed.`,
									},
									"pre_run_script": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Shell script to execute before workflow starts. Requires replacement if changed.`,
									},
									"region": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Not Null; Requires replacement if changed.`,
										Validators: []validator.String{
											speakeasy_stringvalidators.NotNull(),
										},
									},
									"token_duration": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"work_dir": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Working directory path for workflow execution. Not Null; Requires replacement if changed.`,
										Validators: []validator.String{
											speakeasy_stringvalidators.NotNull(),
										},
									},
								},
								Description: `Requires replacement if changed.`,
								Validators: []validator.Object{
									objectvalidator.ConflictsWith(path.Expressions{
										path.MatchRelative().AtParent().AtName("altair_platform"),
										path.MatchRelative().AtParent().AtName("eks_platform"),
										path.MatchRelative().AtParent().AtName("aws_batch"),
										path.MatchRelative().AtParent().AtName("aws_cloud"),
										path.MatchRelative().AtParent().AtName("google_batch"),
										path.MatchRelative().AtParent().AtName("gke_platform"),
										path.MatchRelative().AtParent().AtName("google_lifesciences"),
										path.MatchRelative().AtParent().AtName("lsf_platform"),
										path.MatchRelative().AtParent().AtName("k8s_platform"),
										path.MatchRelative().AtParent().AtName("moab_platform"),
										path.MatchRelative().AtParent().AtName("seqeracompute_platform"),
										path.MatchRelative().AtParent().AtName("slurm_platform"),
										path.MatchRelative().AtParent().AtName("uge_platform"),
									}...),
								},
							},
							"eks_platform": schema.SingleNestedAttribute{
								Computed: true,
								Optional: true,
								PlanModifiers: []planmodifier.Object{
									objectplanmodifier.RequiresReplaceIfConfigured(),
									speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
								},
								Attributes: map[string]schema.Attribute{
									"cluster_name": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `The AWS EKS cluster name. Not Null; Requires replacement if changed.`,
										Validators: []validator.String{
											speakeasy_stringvalidators.NotNull(),
										},
									},
									"compute_service_account": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"enable_fusion": schema.BoolAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.Bool{
											boolplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"enable_wave": schema.BoolAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.Bool{
											boolplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"environment": schema.ListNestedAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.List{
											listplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
										},
										NestedObject: schema.NestedAttributeObject{
											Validators: []validator.Object{
												speakeasy_objectvalidators.NotNull(),
											},
											PlanModifiers: []planmodifier.Object{
												objectplanmodifier.RequiresReplaceIfConfigured(),
												speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
											},
											Attributes: map[string]schema.Attribute{
												"compute": schema.BoolAttribute{
													Computed: true,
													Optional: true,
													PlanModifiers: []planmodifier.Bool{
														boolplanmodifier.RequiresReplaceIfConfigured(),
														speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
													},
													Description: `Requires replacement if changed.`,
												},
												"head": schema.BoolAttribute{
													Computed: true,
													Optional: true,
													PlanModifiers: []planmodifier.Bool{
														boolplanmodifier.RequiresReplaceIfConfigured(),
														speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
													},
													Description: `Requires replacement if changed.`,
												},
												"name": schema.StringAttribute{
													Computed: true,
													Optional: true,
													PlanModifiers: []planmodifier.String{
														stringplanmodifier.RequiresReplaceIfConfigured(),
														speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
													},
													Description: `Requires replacement if changed.`,
												},
												"value": schema.StringAttribute{
													Computed: true,
													Optional: true,
													PlanModifiers: []planmodifier.String{
														stringplanmodifier.RequiresReplaceIfConfigured(),
														speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
													},
													Description: `Requires replacement if changed.`,
												},
											},
										},
										Description: `Array of environment variables for the compute environment. Requires replacement if changed.`,
									},
									"head_job_cpus": schema.Int32Attribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.Int32{
											int32planmodifier.RequiresReplaceIfConfigured(),
											speakeasy_int32planmodifier.SuppressDiff(speakeasy_int32planmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"head_job_memory_mb": schema.Int32Attribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.Int32{
											int32planmodifier.RequiresReplaceIfConfigured(),
											speakeasy_int32planmodifier.SuppressDiff(speakeasy_int32planmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"head_pod_spec": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"head_service_account": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Not Null; Requires replacement if changed.`,
										Validators: []validator.String{
											speakeasy_stringvalidators.NotNull(),
										},
									},
									"namespace": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Not Null; Requires replacement if changed.`,
										Validators: []validator.String{
											speakeasy_stringvalidators.NotNull(),
										},
									},
									"nextflow_config": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Nextflow configuration settings and parameters. Requires replacement if changed.`,
									},
									"pod_cleanup": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `must be one of ["on_success", "always", "never"]; Requires replacement if changed.`,
										Validators: []validator.String{
											stringvalidator.OneOf(
												"on_success",
												"always",
												"never",
											),
										},
									},
									"post_run_script": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Shell script to execute after workflow completes. Requires replacement if changed.`,
									},
									"pre_run_script": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Shell script to execute before workflow starts. Requires replacement if changed.`,
									},
									"region": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `AWS region. Not Null; Requires replacement if changed.`,
										Validators: []validator.String{
											speakeasy_stringvalidators.NotNull(),
										},
									},
									"server": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Not Null; Requires replacement if changed.`,
										Validators: []validator.String{
											speakeasy_stringvalidators.NotNull(),
										},
									},
									"service_pod_spec": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"ssl_cert": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Not Null; Requires replacement if changed.`,
										Validators: []validator.String{
											speakeasy_stringvalidators.NotNull(),
										},
									},
									"storage_claim_name": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Not Null; Requires replacement if changed.`,
										Validators: []validator.String{
											speakeasy_stringvalidators.NotNull(),
										},
									},
									"storage_mount_path": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"work_dir": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Working directory path for workflow execution. Not Null; Requires replacement if changed.`,
										Validators: []validator.String{
											speakeasy_stringvalidators.NotNull(),
										},
									},
								},
								Description: `Requires replacement if changed.`,
								Validators: []validator.Object{
									objectvalidator.ConflictsWith(path.Expressions{
										path.MatchRelative().AtParent().AtName("altair_platform"),
										path.MatchRelative().AtParent().AtName("aws_batch"),
										path.MatchRelative().AtParent().AtName("aws_cloud"),
										path.MatchRelative().AtParent().AtName("azure_batch"),
										path.MatchRelative().AtParent().AtName("google_batch"),
										path.MatchRelative().AtParent().AtName("gke_platform"),
										path.MatchRelative().AtParent().AtName("google_lifesciences"),
										path.MatchRelative().AtParent().AtName("lsf_platform"),
										path.MatchRelative().AtParent().AtName("k8s_platform"),
										path.MatchRelative().AtParent().AtName("moab_platform"),
										path.MatchRelative().AtParent().AtName("seqeracompute_platform"),
										path.MatchRelative().AtParent().AtName("slurm_platform"),
										path.MatchRelative().AtParent().AtName("uge_platform"),
									}...),
								},
							},
							"gke_platform": schema.SingleNestedAttribute{
								Computed: true,
								Optional: true,
								PlanModifiers: []planmodifier.Object{
									objectplanmodifier.RequiresReplaceIfConfigured(),
									speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
								},
								Attributes: map[string]schema.Attribute{
									"cluster_name": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `The GKE cluster name. Not Null; Requires replacement if changed.`,
										Validators: []validator.String{
											speakeasy_stringvalidators.NotNull(),
										},
									},
									"compute_service_account": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"enable_fusion": schema.BoolAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.Bool{
											boolplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"enable_wave": schema.BoolAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.Bool{
											boolplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"environment": schema.ListNestedAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.List{
											listplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
										},
										NestedObject: schema.NestedAttributeObject{
											Validators: []validator.Object{
												speakeasy_objectvalidators.NotNull(),
											},
											PlanModifiers: []planmodifier.Object{
												objectplanmodifier.RequiresReplaceIfConfigured(),
												speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
											},
											Attributes: map[string]schema.Attribute{
												"compute": schema.BoolAttribute{
													Computed: true,
													Optional: true,
													PlanModifiers: []planmodifier.Bool{
														boolplanmodifier.RequiresReplaceIfConfigured(),
														speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
													},
													Description: `Requires replacement if changed.`,
												},
												"head": schema.BoolAttribute{
													Computed: true,
													Optional: true,
													PlanModifiers: []planmodifier.Bool{
														boolplanmodifier.RequiresReplaceIfConfigured(),
														speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
													},
													Description: `Requires replacement if changed.`,
												},
												"name": schema.StringAttribute{
													Computed: true,
													Optional: true,
													PlanModifiers: []planmodifier.String{
														stringplanmodifier.RequiresReplaceIfConfigured(),
														speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
													},
													Description: `Requires replacement if changed.`,
												},
												"value": schema.StringAttribute{
													Computed: true,
													Optional: true,
													PlanModifiers: []planmodifier.String{
														stringplanmodifier.RequiresReplaceIfConfigured(),
														speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
													},
													Description: `Requires replacement if changed.`,
												},
											},
										},
										Description: `Array of environment variables for the compute environment. Requires replacement if changed.`,
									},
									"head_job_cpus": schema.Int32Attribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.Int32{
											int32planmodifier.RequiresReplaceIfConfigured(),
											speakeasy_int32planmodifier.SuppressDiff(speakeasy_int32planmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"head_job_memory_mb": schema.Int32Attribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.Int32{
											int32planmodifier.RequiresReplaceIfConfigured(),
											speakeasy_int32planmodifier.SuppressDiff(speakeasy_int32planmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"head_pod_spec": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"head_service_account": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Not Null; Requires replacement if changed.`,
										Validators: []validator.String{
											speakeasy_stringvalidators.NotNull(),
										},
									},
									"namespace": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Not Null; Requires replacement if changed.`,
										Validators: []validator.String{
											speakeasy_stringvalidators.NotNull(),
										},
									},
									"nextflow_config": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Nextflow configuration settings and parameters. Requires replacement if changed.`,
									},
									"pod_cleanup": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `must be one of ["on_success", "always", "never"]; Requires replacement if changed.`,
										Validators: []validator.String{
											stringvalidator.OneOf(
												"on_success",
												"always",
												"never",
											),
										},
									},
									"post_run_script": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Shell script to execute after workflow completes. Requires replacement if changed.`,
									},
									"pre_run_script": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Shell script to execute before workflow starts. Requires replacement if changed.`,
									},
									"region": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `The GKE cluster region - or - zone. Not Null; Requires replacement if changed.`,
										Validators: []validator.String{
											speakeasy_stringvalidators.NotNull(),
										},
									},
									"server": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Not Null; Requires replacement if changed.`,
										Validators: []validator.String{
											speakeasy_stringvalidators.NotNull(),
										},
									},
									"service_pod_spec": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"ssl_cert": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Not Null; Requires replacement if changed.`,
										Validators: []validator.String{
											speakeasy_stringvalidators.NotNull(),
										},
									},
									"storage_claim_name": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Not Null; Requires replacement if changed.`,
										Validators: []validator.String{
											speakeasy_stringvalidators.NotNull(),
										},
									},
									"storage_mount_path": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"work_dir": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Working directory path for workflow execution. Not Null; Requires replacement if changed.`,
										Validators: []validator.String{
											speakeasy_stringvalidators.NotNull(),
										},
									},
								},
								Description: `Requires replacement if changed.`,
								Validators: []validator.Object{
									objectvalidator.ConflictsWith(path.Expressions{
										path.MatchRelative().AtParent().AtName("altair_platform"),
										path.MatchRelative().AtParent().AtName("eks_platform"),
										path.MatchRelative().AtParent().AtName("aws_batch"),
										path.MatchRelative().AtParent().AtName("aws_cloud"),
										path.MatchRelative().AtParent().AtName("azure_batch"),
										path.MatchRelative().AtParent().AtName("google_batch"),
										path.MatchRelative().AtParent().AtName("google_lifesciences"),
										path.MatchRelative().AtParent().AtName("lsf_platform"),
										path.MatchRelative().AtParent().AtName("k8s_platform"),
										path.MatchRelative().AtParent().AtName("moab_platform"),
										path.MatchRelative().AtParent().AtName("seqeracompute_platform"),
										path.MatchRelative().AtParent().AtName("slurm_platform"),
										path.MatchRelative().AtParent().AtName("uge_platform"),
									}...),
								},
							},
							"google_batch": schema.SingleNestedAttribute{
								Computed: true,
								Optional: true,
								PlanModifiers: []planmodifier.Object{
									objectplanmodifier.RequiresReplaceIfConfigured(),
									speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
								},
								Attributes: map[string]schema.Attribute{
									"boot_disk_size_gb": schema.Int32Attribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.Int32{
											int32planmodifier.RequiresReplaceIfConfigured(),
											speakeasy_int32planmodifier.SuppressDiff(speakeasy_int32planmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"compute_jobs_instance_template": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"copy_image": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"cpu_platform": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"debug_mode": schema.Int32Attribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.Int32{
											int32planmodifier.RequiresReplaceIfConfigured(),
											speakeasy_int32planmodifier.SuppressDiff(speakeasy_int32planmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"enable_fusion": schema.BoolAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.Bool{
											boolplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"enable_wave": schema.BoolAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.Bool{
											boolplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"environment": schema.ListNestedAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.List{
											listplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
										},
										NestedObject: schema.NestedAttributeObject{
											Validators: []validator.Object{
												speakeasy_objectvalidators.NotNull(),
											},
											PlanModifiers: []planmodifier.Object{
												objectplanmodifier.RequiresReplaceIfConfigured(),
												speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
											},
											Attributes: map[string]schema.Attribute{
												"compute": schema.BoolAttribute{
													Computed: true,
													Optional: true,
													PlanModifiers: []planmodifier.Bool{
														boolplanmodifier.RequiresReplaceIfConfigured(),
														speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
													},
													Description: `Requires replacement if changed.`,
												},
												"head": schema.BoolAttribute{
													Computed: true,
													Optional: true,
													PlanModifiers: []planmodifier.Bool{
														boolplanmodifier.RequiresReplaceIfConfigured(),
														speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
													},
													Description: `Requires replacement if changed.`,
												},
												"name": schema.StringAttribute{
													Computed: true,
													Optional: true,
													PlanModifiers: []planmodifier.String{
														stringplanmodifier.RequiresReplaceIfConfigured(),
														speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
													},
													Description: `Requires replacement if changed.`,
												},
												"value": schema.StringAttribute{
													Computed: true,
													Optional: true,
													PlanModifiers: []planmodifier.String{
														stringplanmodifier.RequiresReplaceIfConfigured(),
														speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
													},
													Description: `Requires replacement if changed.`,
												},
											},
										},
										Description: `Array of environment variables for the compute environment. Requires replacement if changed.`,
									},
									"head_job_cpus": schema.Int32Attribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.Int32{
											int32planmodifier.RequiresReplaceIfConfigured(),
											speakeasy_int32planmodifier.SuppressDiff(speakeasy_int32planmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"head_job_instance_template": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"head_job_memory_mb": schema.Int32Attribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.Int32{
											int32planmodifier.RequiresReplaceIfConfigured(),
											speakeasy_int32planmodifier.SuppressDiff(speakeasy_int32planmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"labels": schema.MapAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.Map{
											mapplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_mapplanmodifier.SuppressDiff(speakeasy_mapplanmodifier.ExplicitSuppress),
										},
										ElementType: types.StringType,
										Description: `Requires replacement if changed.`,
									},
									"location": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"machine_type": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"network": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"nextflow_config": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Nextflow configuration settings and parameters. Requires replacement if changed.`,
									},
									"nfs_mount": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"nfs_target": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"post_run_script": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Shell script to execute after workflow completes. Requires replacement if changed.`,
									},
									"pre_run_script": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Shell script to execute before workflow starts. Requires replacement if changed.`,
									},
									"project_id": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"service_account": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"spot": schema.BoolAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.Bool{
											boolplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"ssh_daemon": schema.BoolAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.Bool{
											boolplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"ssh_image": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"subnetwork": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"use_private_address": schema.BoolAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.Bool{
											boolplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"work_dir": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Working directory path for workflow execution. Not Null; Requires replacement if changed.`,
										Validators: []validator.String{
											speakeasy_stringvalidators.NotNull(),
										},
									},
								},
								Description: `Requires replacement if changed.`,
								Validators: []validator.Object{
									objectvalidator.ConflictsWith(path.Expressions{
										path.MatchRelative().AtParent().AtName("altair_platform"),
										path.MatchRelative().AtParent().AtName("eks_platform"),
										path.MatchRelative().AtParent().AtName("aws_batch"),
										path.MatchRelative().AtParent().AtName("aws_cloud"),
										path.MatchRelative().AtParent().AtName("azure_batch"),
										path.MatchRelative().AtParent().AtName("gke_platform"),
										path.MatchRelative().AtParent().AtName("google_lifesciences"),
										path.MatchRelative().AtParent().AtName("lsf_platform"),
										path.MatchRelative().AtParent().AtName("k8s_platform"),
										path.MatchRelative().AtParent().AtName("moab_platform"),
										path.MatchRelative().AtParent().AtName("seqeracompute_platform"),
										path.MatchRelative().AtParent().AtName("slurm_platform"),
										path.MatchRelative().AtParent().AtName("uge_platform"),
									}...),
								},
							},
							"google_lifesciences": schema.SingleNestedAttribute{
								Computed: true,
								Optional: true,
								PlanModifiers: []planmodifier.Object{
									objectplanmodifier.RequiresReplaceIfConfigured(),
									speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
								},
								Attributes: map[string]schema.Attribute{
									"boot_disk_size_gb": schema.Int32Attribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.Int32{
											int32planmodifier.RequiresReplaceIfConfigured(),
											speakeasy_int32planmodifier.SuppressDiff(speakeasy_int32planmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"copy_image": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"debug_mode": schema.Int32Attribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.Int32{
											int32planmodifier.RequiresReplaceIfConfigured(),
											speakeasy_int32planmodifier.SuppressDiff(speakeasy_int32planmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"environment": schema.ListNestedAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.List{
											listplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
										},
										NestedObject: schema.NestedAttributeObject{
											Validators: []validator.Object{
												speakeasy_objectvalidators.NotNull(),
											},
											PlanModifiers: []planmodifier.Object{
												objectplanmodifier.RequiresReplaceIfConfigured(),
												speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
											},
											Attributes: map[string]schema.Attribute{
												"compute": schema.BoolAttribute{
													Computed: true,
													Optional: true,
													PlanModifiers: []planmodifier.Bool{
														boolplanmodifier.RequiresReplaceIfConfigured(),
														speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
													},
													Description: `Requires replacement if changed.`,
												},
												"head": schema.BoolAttribute{
													Computed: true,
													Optional: true,
													PlanModifiers: []planmodifier.Bool{
														boolplanmodifier.RequiresReplaceIfConfigured(),
														speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
													},
													Description: `Requires replacement if changed.`,
												},
												"name": schema.StringAttribute{
													Computed: true,
													Optional: true,
													PlanModifiers: []planmodifier.String{
														stringplanmodifier.RequiresReplaceIfConfigured(),
														speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
													},
													Description: `Requires replacement if changed.`,
												},
												"value": schema.StringAttribute{
													Computed: true,
													Optional: true,
													PlanModifiers: []planmodifier.String{
														stringplanmodifier.RequiresReplaceIfConfigured(),
														speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
													},
													Description: `Requires replacement if changed.`,
												},
											},
										},
										Description: `Array of environment variables for the compute environment. Requires replacement if changed.`,
									},
									"head_job_cpus": schema.Int32Attribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.Int32{
											int32planmodifier.RequiresReplaceIfConfigured(),
											speakeasy_int32planmodifier.SuppressDiff(speakeasy_int32planmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"head_job_memory_mb": schema.Int32Attribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.Int32{
											int32planmodifier.RequiresReplaceIfConfigured(),
											speakeasy_int32planmodifier.SuppressDiff(speakeasy_int32planmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"labels": schema.MapAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.Map{
											mapplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_mapplanmodifier.SuppressDiff(speakeasy_mapplanmodifier.ExplicitSuppress),
										},
										ElementType: types.StringType,
										Description: `Requires replacement if changed.`,
									},
									"location": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"nextflow_config": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Nextflow configuration settings and parameters. Requires replacement if changed.`,
									},
									"nfs_mount": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"nfs_target": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"post_run_script": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Shell script to execute after workflow completes. Requires replacement if changed.`,
									},
									"pre_run_script": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Shell script to execute before workflow starts. Requires replacement if changed.`,
									},
									"preemptible": schema.BoolAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.Bool{
											boolplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"project_id": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"region": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"ssh_daemon": schema.BoolAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.Bool{
											boolplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"ssh_image": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"use_private_address": schema.BoolAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.Bool{
											boolplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"work_dir": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Working directory path for workflow execution. Not Null; Requires replacement if changed.`,
										Validators: []validator.String{
											speakeasy_stringvalidators.NotNull(),
										},
									},
									"zones": schema.ListAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.List{
											listplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
										},
										ElementType: types.StringType,
										Description: `Requires replacement if changed.`,
									},
								},
								Description: `Requires replacement if changed.`,
								Validators: []validator.Object{
									objectvalidator.ConflictsWith(path.Expressions{
										path.MatchRelative().AtParent().AtName("altair_platform"),
										path.MatchRelative().AtParent().AtName("eks_platform"),
										path.MatchRelative().AtParent().AtName("aws_batch"),
										path.MatchRelative().AtParent().AtName("aws_cloud"),
										path.MatchRelative().AtParent().AtName("azure_batch"),
										path.MatchRelative().AtParent().AtName("google_batch"),
										path.MatchRelative().AtParent().AtName("gke_platform"),
										path.MatchRelative().AtParent().AtName("lsf_platform"),
										path.MatchRelative().AtParent().AtName("k8s_platform"),
										path.MatchRelative().AtParent().AtName("moab_platform"),
										path.MatchRelative().AtParent().AtName("seqeracompute_platform"),
										path.MatchRelative().AtParent().AtName("slurm_platform"),
										path.MatchRelative().AtParent().AtName("uge_platform"),
									}...),
								},
							},
							"k8s_platform": schema.SingleNestedAttribute{
								Computed: true,
								Optional: true,
								PlanModifiers: []planmodifier.Object{
									objectplanmodifier.RequiresReplaceIfConfigured(),
									speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
								},
								Attributes: map[string]schema.Attribute{
									"compute_service_account": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"environment": schema.ListNestedAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.List{
											listplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
										},
										NestedObject: schema.NestedAttributeObject{
											Validators: []validator.Object{
												speakeasy_objectvalidators.NotNull(),
											},
											PlanModifiers: []planmodifier.Object{
												objectplanmodifier.RequiresReplaceIfConfigured(),
												speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
											},
											Attributes: map[string]schema.Attribute{
												"compute": schema.BoolAttribute{
													Computed: true,
													Optional: true,
													PlanModifiers: []planmodifier.Bool{
														boolplanmodifier.RequiresReplaceIfConfigured(),
														speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
													},
													Description: `Requires replacement if changed.`,
												},
												"head": schema.BoolAttribute{
													Computed: true,
													Optional: true,
													PlanModifiers: []planmodifier.Bool{
														boolplanmodifier.RequiresReplaceIfConfigured(),
														speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
													},
													Description: `Requires replacement if changed.`,
												},
												"name": schema.StringAttribute{
													Computed: true,
													Optional: true,
													PlanModifiers: []planmodifier.String{
														stringplanmodifier.RequiresReplaceIfConfigured(),
														speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
													},
													Description: `Requires replacement if changed.`,
												},
												"value": schema.StringAttribute{
													Computed: true,
													Optional: true,
													PlanModifiers: []planmodifier.String{
														stringplanmodifier.RequiresReplaceIfConfigured(),
														speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
													},
													Description: `Requires replacement if changed.`,
												},
											},
										},
										Description: `Array of environment variables for the compute environment. Requires replacement if changed.`,
									},
									"head_job_cpus": schema.Int32Attribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.Int32{
											int32planmodifier.RequiresReplaceIfConfigured(),
											speakeasy_int32planmodifier.SuppressDiff(speakeasy_int32planmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"head_job_memory_mb": schema.Int32Attribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.Int32{
											int32planmodifier.RequiresReplaceIfConfigured(),
											speakeasy_int32planmodifier.SuppressDiff(speakeasy_int32planmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"head_pod_spec": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"head_service_account": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Not Null; Requires replacement if changed.`,
										Validators: []validator.String{
											speakeasy_stringvalidators.NotNull(),
										},
									},
									"namespace": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Not Null; Requires replacement if changed.`,
										Validators: []validator.String{
											speakeasy_stringvalidators.NotNull(),
										},
									},
									"nextflow_config": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Nextflow configuration settings and parameters. Requires replacement if changed.`,
									},
									"pod_cleanup": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `must be one of ["on_success", "always", "never"]; Requires replacement if changed.`,
										Validators: []validator.String{
											stringvalidator.OneOf(
												"on_success",
												"always",
												"never",
											),
										},
									},
									"post_run_script": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Shell script to execute after workflow completes. Requires replacement if changed.`,
									},
									"pre_run_script": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Shell script to execute before workflow starts. Requires replacement if changed.`,
									},
									"server": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Not Null; Requires replacement if changed.`,
										Validators: []validator.String{
											speakeasy_stringvalidators.NotNull(),
										},
									},
									"service_pod_spec": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"ssl_cert": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Not Null; Requires replacement if changed.`,
										Validators: []validator.String{
											speakeasy_stringvalidators.NotNull(),
										},
									},
									"storage_claim_name": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Not Null; Requires replacement if changed.`,
										Validators: []validator.String{
											speakeasy_stringvalidators.NotNull(),
										},
									},
									"storage_mount_path": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"work_dir": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Working directory path for workflow execution. Not Null; Requires replacement if changed.`,
										Validators: []validator.String{
											speakeasy_stringvalidators.NotNull(),
										},
									},
								},
								Description: `Requires replacement if changed.`,
								Validators: []validator.Object{
									objectvalidator.ConflictsWith(path.Expressions{
										path.MatchRelative().AtParent().AtName("altair_platform"),
										path.MatchRelative().AtParent().AtName("eks_platform"),
										path.MatchRelative().AtParent().AtName("aws_batch"),
										path.MatchRelative().AtParent().AtName("aws_cloud"),
										path.MatchRelative().AtParent().AtName("azure_batch"),
										path.MatchRelative().AtParent().AtName("google_batch"),
										path.MatchRelative().AtParent().AtName("gke_platform"),
										path.MatchRelative().AtParent().AtName("google_lifesciences"),
										path.MatchRelative().AtParent().AtName("lsf_platform"),
										path.MatchRelative().AtParent().AtName("moab_platform"),
										path.MatchRelative().AtParent().AtName("seqeracompute_platform"),
										path.MatchRelative().AtParent().AtName("slurm_platform"),
										path.MatchRelative().AtParent().AtName("uge_platform"),
									}...),
								},
							},
							"lsf_platform": schema.SingleNestedAttribute{
								Computed: true,
								Optional: true,
								PlanModifiers: []planmodifier.Object{
									objectplanmodifier.RequiresReplaceIfConfigured(),
									speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
								},
								Attributes: map[string]schema.Attribute{
									"compute_queue": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"environment": schema.ListNestedAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.List{
											listplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
										},
										NestedObject: schema.NestedAttributeObject{
											Validators: []validator.Object{
												speakeasy_objectvalidators.NotNull(),
											},
											PlanModifiers: []planmodifier.Object{
												objectplanmodifier.RequiresReplaceIfConfigured(),
												speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
											},
											Attributes: map[string]schema.Attribute{
												"compute": schema.BoolAttribute{
													Computed: true,
													Optional: true,
													PlanModifiers: []planmodifier.Bool{
														boolplanmodifier.RequiresReplaceIfConfigured(),
														speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
													},
													Description: `Requires replacement if changed.`,
												},
												"head": schema.BoolAttribute{
													Computed: true,
													Optional: true,
													PlanModifiers: []planmodifier.Bool{
														boolplanmodifier.RequiresReplaceIfConfigured(),
														speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
													},
													Description: `Requires replacement if changed.`,
												},
												"name": schema.StringAttribute{
													Computed: true,
													Optional: true,
													PlanModifiers: []planmodifier.String{
														stringplanmodifier.RequiresReplaceIfConfigured(),
														speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
													},
													Description: `Requires replacement if changed.`,
												},
												"value": schema.StringAttribute{
													Computed: true,
													Optional: true,
													PlanModifiers: []planmodifier.String{
														stringplanmodifier.RequiresReplaceIfConfigured(),
														speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
													},
													Description: `Requires replacement if changed.`,
												},
											},
										},
										Description: `Array of environment variables for the compute environment. Requires replacement if changed.`,
									},
									"head_job_options": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"head_queue": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"host_name": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"launch_dir": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"max_queue_size": schema.Int32Attribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.Int32{
											int32planmodifier.RequiresReplaceIfConfigured(),
											speakeasy_int32planmodifier.SuppressDiff(speakeasy_int32planmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"nextflow_config": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Nextflow configuration settings and parameters. Requires replacement if changed.`,
									},
									"per_job_mem_limit": schema.BoolAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.Bool{
											boolplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"per_task_reserve": schema.BoolAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.Bool{
											boolplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"port": schema.Int32Attribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.Int32{
											int32planmodifier.RequiresReplaceIfConfigured(),
											speakeasy_int32planmodifier.SuppressDiff(speakeasy_int32planmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"post_run_script": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Shell script to execute after workflow completes. Requires replacement if changed.`,
									},
									"pre_run_script": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Shell script to execute before workflow starts. Requires replacement if changed.`,
									},
									"propagate_head_job_options": schema.BoolAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.Bool{
											boolplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"unit_for_limits": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"user_name": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"work_dir": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Working directory path for workflow execution. Not Null; Requires replacement if changed.`,
										Validators: []validator.String{
											speakeasy_stringvalidators.NotNull(),
										},
									},
								},
								Description: `Requires replacement if changed.`,
								Validators: []validator.Object{
									objectvalidator.ConflictsWith(path.Expressions{
										path.MatchRelative().AtParent().AtName("altair_platform"),
										path.MatchRelative().AtParent().AtName("eks_platform"),
										path.MatchRelative().AtParent().AtName("aws_batch"),
										path.MatchRelative().AtParent().AtName("aws_cloud"),
										path.MatchRelative().AtParent().AtName("azure_batch"),
										path.MatchRelative().AtParent().AtName("google_batch"),
										path.MatchRelative().AtParent().AtName("gke_platform"),
										path.MatchRelative().AtParent().AtName("google_lifesciences"),
										path.MatchRelative().AtParent().AtName("k8s_platform"),
										path.MatchRelative().AtParent().AtName("moab_platform"),
										path.MatchRelative().AtParent().AtName("seqeracompute_platform"),
										path.MatchRelative().AtParent().AtName("slurm_platform"),
										path.MatchRelative().AtParent().AtName("uge_platform"),
									}...),
								},
							},
							"moab_platform": schema.SingleNestedAttribute{
								Computed: true,
								Optional: true,
								PlanModifiers: []planmodifier.Object{
									objectplanmodifier.RequiresReplaceIfConfigured(),
									speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
								},
								Attributes: map[string]schema.Attribute{
									"compute_queue": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"environment": schema.ListNestedAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.List{
											listplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
										},
										NestedObject: schema.NestedAttributeObject{
											Validators: []validator.Object{
												speakeasy_objectvalidators.NotNull(),
											},
											PlanModifiers: []planmodifier.Object{
												objectplanmodifier.RequiresReplaceIfConfigured(),
												speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
											},
											Attributes: map[string]schema.Attribute{
												"compute": schema.BoolAttribute{
													Computed: true,
													Optional: true,
													PlanModifiers: []planmodifier.Bool{
														boolplanmodifier.RequiresReplaceIfConfigured(),
														speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
													},
													Description: `Requires replacement if changed.`,
												},
												"head": schema.BoolAttribute{
													Computed: true,
													Optional: true,
													PlanModifiers: []planmodifier.Bool{
														boolplanmodifier.RequiresReplaceIfConfigured(),
														speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
													},
													Description: `Requires replacement if changed.`,
												},
												"name": schema.StringAttribute{
													Computed: true,
													Optional: true,
													PlanModifiers: []planmodifier.String{
														stringplanmodifier.RequiresReplaceIfConfigured(),
														speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
													},
													Description: `Requires replacement if changed.`,
												},
												"value": schema.StringAttribute{
													Computed: true,
													Optional: true,
													PlanModifiers: []planmodifier.String{
														stringplanmodifier.RequiresReplaceIfConfigured(),
														speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
													},
													Description: `Requires replacement if changed.`,
												},
											},
										},
										Description: `Array of environment variables for the compute environment. Requires replacement if changed.`,
									},
									"head_job_options": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"head_queue": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"host_name": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"launch_dir": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"max_queue_size": schema.Int32Attribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.Int32{
											int32planmodifier.RequiresReplaceIfConfigured(),
											speakeasy_int32planmodifier.SuppressDiff(speakeasy_int32planmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"nextflow_config": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Nextflow configuration settings and parameters. Requires replacement if changed.`,
									},
									"port": schema.Int32Attribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.Int32{
											int32planmodifier.RequiresReplaceIfConfigured(),
											speakeasy_int32planmodifier.SuppressDiff(speakeasy_int32planmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"post_run_script": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Shell script to execute after workflow completes. Requires replacement if changed.`,
									},
									"pre_run_script": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Shell script to execute before workflow starts. Requires replacement if changed.`,
									},
									"propagate_head_job_options": schema.BoolAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.Bool{
											boolplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"user_name": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"work_dir": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Working directory path for workflow execution. Not Null; Requires replacement if changed.`,
										Validators: []validator.String{
											speakeasy_stringvalidators.NotNull(),
										},
									},
								},
								Description: `Requires replacement if changed.`,
								Validators: []validator.Object{
									objectvalidator.ConflictsWith(path.Expressions{
										path.MatchRelative().AtParent().AtName("altair_platform"),
										path.MatchRelative().AtParent().AtName("eks_platform"),
										path.MatchRelative().AtParent().AtName("aws_batch"),
										path.MatchRelative().AtParent().AtName("aws_cloud"),
										path.MatchRelative().AtParent().AtName("azure_batch"),
										path.MatchRelative().AtParent().AtName("google_batch"),
										path.MatchRelative().AtParent().AtName("gke_platform"),
										path.MatchRelative().AtParent().AtName("google_lifesciences"),
										path.MatchRelative().AtParent().AtName("lsf_platform"),
										path.MatchRelative().AtParent().AtName("k8s_platform"),
										path.MatchRelative().AtParent().AtName("seqeracompute_platform"),
										path.MatchRelative().AtParent().AtName("slurm_platform"),
										path.MatchRelative().AtParent().AtName("uge_platform"),
									}...),
								},
							},
							"seqeracompute_platform": schema.SingleNestedAttribute{
								Computed: true,
								Optional: true,
								PlanModifiers: []planmodifier.Object{
									objectplanmodifier.RequiresReplaceIfConfigured(),
									speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
								},
								Attributes: map[string]schema.Attribute{
									"cli_path": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Path to AWS CLI on compute instances. AWS CLI must be available at this path. Requires replacement if changed.`,
									},
									"compute_job_role": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										MarkdownDescription: `IAM role ARN for compute jobs. Jobs assume this role during execution.` + "\n" +
											`Must have permissions for S3, CloudWatch, etc.` + "\n" +
											`Format: arn:aws:iam::account-id:role/role-name` + "\n" +
											`Requires replacement if changed.`,
									},
									"compute_queue": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Name of the AWS Batch compute queue. Requires replacement if changed.`,
									},
									"dragen_instance_type": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"dragen_queue": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"enable_fusion": schema.BoolAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.Bool{
											boolplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"enable_wave": schema.BoolAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.Bool{
											boolplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
										},
										MarkdownDescription: `Enable Wave containers for this compute environment. Wave provides container provisioning` + "\n" +
											`and augmentation capabilities for Nextflow workflows.` + "\n" +
											`` + "\n" +
											`When enable_wave is true, enable_fusion must be explicitly set to either true or false.` + "\n" +
											`Note: If Fusion2 is enabled, Wave must also be enabled.` + "\n" +
											`Requires replacement if changed.`,
										Validators: []validator.Bool{
											custom_boolvalidators.WaveEnabledValidator(),
										},
									},
									"environment": schema.ListNestedAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.List{
											listplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
										},
										NestedObject: schema.NestedAttributeObject{
											Validators: []validator.Object{
												speakeasy_objectvalidators.NotNull(),
											},
											PlanModifiers: []planmodifier.Object{
												objectplanmodifier.RequiresReplaceIfConfigured(),
												speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
											},
											Attributes: map[string]schema.Attribute{
												"compute": schema.BoolAttribute{
													Computed: true,
													Optional: true,
													PlanModifiers: []planmodifier.Bool{
														boolplanmodifier.RequiresReplaceIfConfigured(),
														speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
													},
													Description: `Requires replacement if changed.`,
												},
												"head": schema.BoolAttribute{
													Computed: true,
													Optional: true,
													PlanModifiers: []planmodifier.Bool{
														boolplanmodifier.RequiresReplaceIfConfigured(),
														speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
													},
													Description: `Requires replacement if changed.`,
												},
												"name": schema.StringAttribute{
													Computed: true,
													Optional: true,
													PlanModifiers: []planmodifier.String{
														stringplanmodifier.RequiresReplaceIfConfigured(),
														speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
													},
													Description: `Requires replacement if changed.`,
												},
												"value": schema.StringAttribute{
													Computed: true,
													Optional: true,
													PlanModifiers: []planmodifier.String{
														stringplanmodifier.RequiresReplaceIfConfigured(),
														speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
													},
													Description: `Requires replacement if changed.`,
												},
											},
										},
										Description: `Array of environment variables for the compute environment. Requires replacement if changed.`,
									},
									"execution_role": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										MarkdownDescription: `IAM role ARN for Batch execution (pulling container images, writing logs).` + "\n" +
											`Must have permissions for ECR and CloudWatch Logs.` + "\n" +
											`Format: arn:aws:iam::account-id:role/role-name` + "\n" +
											`Requires replacement if changed.`,
									},
									"forge": schema.SingleNestedAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.Object{
											objectplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
										},
										Attributes: map[string]schema.Attribute{
											"alloc_strategy": schema.StringAttribute{
												Computed: true,
												Optional: true,
												PlanModifiers: []planmodifier.String{
													stringplanmodifier.RequiresReplaceIfConfigured(),
													speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
												},
												MarkdownDescription: `Strategy for allocating compute resources:` + "\n" +
													`- BEST_FIT: Selects instance type that best fits job requirements` + "\n" +
													`- BEST_FIT_PROGRESSIVE: Similar to BEST_FIT but widens search progressively` + "\n" +
													`- SPOT_CAPACITY_OPTIMIZED: For Spot instances, selects from pools with optimal capacity` + "\n" +
													`- SPOT_PRICE_CAPACITY_OPTIMIZED: Optimizes for both price and capacity` + "\n" +
													`Note: SPOT_CAPACITY_OPTIMIZED only valid when type is SPOT` + "\n" +
													`must be one of ["BEST_FIT", "BEST_FIT_PROGRESSIVE", "SPOT_CAPACITY_OPTIMIZED", "SPOT_PRICE_CAPACITY_OPTIMIZED"]; Requires replacement if changed.`,
												Validators: []validator.String{
													stringvalidator.OneOf(
														"BEST_FIT",
														"BEST_FIT_PROGRESSIVE",
														"SPOT_CAPACITY_OPTIMIZED",
														"SPOT_PRICE_CAPACITY_OPTIMIZED",
													),
												},
											},
											"allow_buckets": schema.ListAttribute{
												Computed: true,
												Optional: true,
												PlanModifiers: []planmodifier.List{
													listplanmodifier.RequiresReplaceIfConfigured(),
													speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
												},
												ElementType: types.StringType,
												Description: `Requires replacement if changed.`,
											},
											"arm64_enabled": schema.BoolAttribute{
												Computed: true,
												Optional: true,
												PlanModifiers: []planmodifier.Bool{
													boolplanmodifier.RequiresReplaceIfConfigured(),
													speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
												},
												Description: `Requires replacement if changed.`,
											},
											"bid_percentage": schema.Int32Attribute{
												Computed: true,
												Optional: true,
												PlanModifiers: []planmodifier.Int32{
													int32planmodifier.RequiresReplaceIfConfigured(),
													speakeasy_int32planmodifier.SuppressDiff(speakeasy_int32planmodifier.ExplicitSuppress),
												},
												MarkdownDescription: `The maximum percentage that a Spot Instance price can be when compared with the On-Demand price` + "\n" +
													`for that instance type before instances are launched. For example, if your maximum percentage is 20%,` + "\n" +
													`then the Spot price must be less than 20% of the current On-Demand price for that Amazon EC2 instance.` + "\n" +
													`You always pay the lowest (market) price and never more than your maximum percentage. If you leave this` + "\n" +
													`field empty, the default value is 100% of the On-Demand price. For most use cases, we recommend leaving` + "\n" +
													`this field empty.` + "\n" +
													`` + "\n" +
													`Must be a whole number between 0 and 100 (inclusive).` + "\n" +
													`Requires replacement if changed.`,
												Validators: []validator.Int32{
													int32validator.AtMost(100),
												},
											},
											"dispose_on_deletion": schema.BoolAttribute{
												Computed: true,
												Optional: true,
												PlanModifiers: []planmodifier.Bool{
													boolplanmodifier.RequiresReplaceIfConfigured(),
													speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
												},
												Description: `Dispose of AWS Batch resources when compute environment is deleted. Requires replacement if changed.`,
											},
											"dragen_ami_id": schema.StringAttribute{
												Computed: true,
												Optional: true,
												PlanModifiers: []planmodifier.String{
													stringplanmodifier.RequiresReplaceIfConfigured(),
													speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
												},
												Description: `Requires replacement if changed.`,
											},
											"dragen_enabled": schema.BoolAttribute{
												Computed: true,
												Optional: true,
												PlanModifiers: []planmodifier.Bool{
													boolplanmodifier.RequiresReplaceIfConfigured(),
													speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
												},
												Description: `Requires replacement if changed.`,
											},
											"dragen_instance_type": schema.StringAttribute{
												Computed: true,
												Optional: true,
												PlanModifiers: []planmodifier.String{
													stringplanmodifier.RequiresReplaceIfConfigured(),
													speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
												},
												Description: `Requires replacement if changed.`,
											},
											"ebs_auto_scale": schema.BoolAttribute{
												Computed: true,
												Optional: true,
												PlanModifiers: []planmodifier.Bool{
													boolplanmodifier.RequiresReplaceIfConfigured(),
													speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
												},
												MarkdownDescription: `Enable automatic EBS volume expansion.` + "\n" +
													`When enabled, EBS volumes automatically expand as needed.` + "\n" +
													`Requires replacement if changed.`,
											},
											"ebs_block_size": schema.Int32Attribute{
												Computed: true,
												Optional: true,
												PlanModifiers: []planmodifier.Int32{
													int32planmodifier.RequiresReplaceIfConfigured(),
													speakeasy_int32planmodifier.SuppressDiff(speakeasy_int32planmodifier.ExplicitSuppress),
												},
												Description: `Size of EBS root volume in GB (minimum 8 GB, maximum 16 TB). Requires replacement if changed.`,
											},
											"ebs_boot_size": schema.Int32Attribute{
												Computed: true,
												Optional: true,
												PlanModifiers: []planmodifier.Int32{
													int32planmodifier.RequiresReplaceIfConfigured(),
													speakeasy_int32planmodifier.SuppressDiff(speakeasy_int32planmodifier.ExplicitSuppress),
												},
												Description: `Requires replacement if changed.`,
											},
											"ec2_key_pair": schema.StringAttribute{
												Computed: true,
												Optional: true,
												PlanModifiers: []planmodifier.String{
													stringplanmodifier.RequiresReplaceIfConfigured(),
													speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
												},
												MarkdownDescription: `EC2 key pair name for SSH access to compute instances.` + "\n" +
													`Key pair must exist in the specified region.` + "\n" +
													`Requires replacement if changed.`,
											},
											"ecs_config": schema.StringAttribute{
												Computed: true,
												Optional: true,
												PlanModifiers: []planmodifier.String{
													stringplanmodifier.RequiresReplaceIfConfigured(),
													speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
												},
												Description: `Requires replacement if changed.`,
											},
											"efs_create": schema.BoolAttribute{
												Computed: true,
												Optional: true,
												PlanModifiers: []planmodifier.Bool{
													boolplanmodifier.RequiresReplaceIfConfigured(),
													speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
												},
												Description: `Automatically create an EFS file system. Requires replacement if changed.`,
											},
											"efs_id": schema.StringAttribute{
												Computed: true,
												Optional: true,
												PlanModifiers: []planmodifier.String{
													stringplanmodifier.RequiresReplaceIfConfigured(),
													speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
												},
												MarkdownDescription: `EFS file system ID to mount.` + "\n" +
													`Format: fs- followed by hexadecimal characters.` + "\n" +
													`EFS must be in the same VPC and region.` + "\n" +
													`Requires replacement if changed.`,
											},
											"efs_mount": schema.StringAttribute{
												Computed: true,
												Optional: true,
												PlanModifiers: []planmodifier.String{
													stringplanmodifier.RequiresReplaceIfConfigured(),
													speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
												},
												Description: `Path where EFS will be mounted in the container. Requires replacement if changed.`,
											},
											"fargate_head_enabled": schema.BoolAttribute{
												Computed: true,
												Optional: true,
												PlanModifiers: []planmodifier.Bool{
													boolplanmodifier.RequiresReplaceIfConfigured(),
													speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
												},
												MarkdownDescription: `Use Fargate for head job instead of EC2.` + "\n" +
													`Reduces costs by running head job on serverless compute.` + "\n" +
													`Only applicable when using EC2 for worker jobs.` + "\n" +
													`Requires replacement if changed.`,
											},
											"fsx_mount": schema.StringAttribute{
												Computed: true,
												Optional: true,
												PlanModifiers: []planmodifier.String{
													stringplanmodifier.RequiresReplaceIfConfigured(),
													speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
												},
												Description: `Path where FSx will be mounted in the container. Requires replacement if changed.`,
											},
											"fsx_name": schema.StringAttribute{
												Computed: true,
												Optional: true,
												PlanModifiers: []planmodifier.String{
													stringplanmodifier.RequiresReplaceIfConfigured(),
													speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
												},
												Description: `FSx for Lustre file system name. Requires replacement if changed.`,
											},
											"fsx_size": schema.Int32Attribute{
												Computed: true,
												Optional: true,
												PlanModifiers: []planmodifier.Int32{
													int32planmodifier.RequiresReplaceIfConfigured(),
													speakeasy_int32planmodifier.SuppressDiff(speakeasy_int32planmodifier.ExplicitSuppress),
												},
												Description: `Size of FSx file system in GB. Requires replacement if changed.`,
											},
											"gpu_enabled": schema.BoolAttribute{
												Computed: true,
												Optional: true,
												PlanModifiers: []planmodifier.Bool{
													boolplanmodifier.RequiresReplaceIfConfigured(),
													speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
												},
												MarkdownDescription: `Enable GPU support for compute instances.` + "\n" +
													`When enabled, GPU-capable instance types will be selected.` + "\n" +
													`Requires replacement if changed.`,
											},
											"image_id": schema.StringAttribute{
												Computed: true,
												Optional: true,
												PlanModifiers: []planmodifier.String{
													stringplanmodifier.RequiresReplaceIfConfigured(),
													speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
												},
												Description: `Requires replacement if changed.`,
											},
											"instance_types": schema.ListAttribute{
												Computed: true,
												Optional: true,
												PlanModifiers: []planmodifier.List{
													listplanmodifier.RequiresReplaceIfConfigured(),
													speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
												},
												ElementType: types.StringType,
												MarkdownDescription: `List of EC2 instance types to use.` + "\n" +
													`Examples: ["m5.xlarge", "m5.2xlarge"], ["c5.2xlarge"], ["p3.2xlarge"]` + "\n" +
													`Default: ["optimal"] - AWS Batch selects appropriate instances` + "\n" +
													`Requires replacement if changed.`,
											},
											"max_cpus": schema.Int32Attribute{
												Computed: true,
												Optional: true,
												PlanModifiers: []planmodifier.Int32{
													int32planmodifier.RequiresReplaceIfConfigured(),
													speakeasy_int32planmodifier.SuppressDiff(speakeasy_int32planmodifier.ExplicitSuppress),
												},
												MarkdownDescription: `Maximum number of CPUs available in the compute environment.` + "\n" +
													`Subject to AWS service quotas.` + "\n" +
													`Not Null; Requires replacement if changed.`,
												Validators: []validator.Int32{
													speakeasy_int32validators.NotNull(),
												},
											},
											"min_cpus": schema.Int32Attribute{
												Computed: true,
												Optional: true,
												PlanModifiers: []planmodifier.Int32{
													int32planmodifier.RequiresReplaceIfConfigured(),
													speakeasy_int32planmodifier.SuppressDiff(speakeasy_int32planmodifier.ExplicitSuppress),
												},
												MarkdownDescription: `Minimum number of CPUs to maintain in the compute environment.` + "\n" +
													`Setting to 0 allows environment to scale to zero when idle.` + "\n" +
													`Requires replacement if changed.`,
											},
											"security_groups": schema.ListAttribute{
												Computed: true,
												Optional: true,
												PlanModifiers: []planmodifier.List{
													listplanmodifier.RequiresReplaceIfConfigured(),
													speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
												},
												ElementType: types.StringType,
												MarkdownDescription: `List of security group IDs to attach to compute instances.` + "\n" +
													`Security groups must allow necessary network access.` + "\n" +
													`Requires replacement if changed.`,
											},
											"subnets": schema.ListAttribute{
												Computed: true,
												Optional: true,
												PlanModifiers: []planmodifier.List{
													listplanmodifier.RequiresReplaceIfConfigured(),
													speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
												},
												ElementType: types.StringType,
												MarkdownDescription: `List of subnet IDs for compute instances.` + "\n" +
													`Subnets must be in the specified VPC. Use multiple subnets for high availability.` + "\n" +
													`Must have sufficient IP addresses.` + "\n" +
													`Requires replacement if changed.`,
											},
											"type": schema.StringAttribute{
												Computed: true,
												Optional: true,
												PlanModifiers: []planmodifier.String{
													stringplanmodifier.RequiresReplaceIfConfigured(),
													speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
												},
												MarkdownDescription: `Type of compute instances to provision:` + "\n" +
													`- SPOT: Use EC2 Spot instances (cost-effective, can be interrupted)` + "\n" +
													`- EC2: Use On-Demand EC2 instances (reliable, higher cost)` + "\n" +
													`- FARGATE: Use AWS Fargate serverless compute` + "\n" +
													`Not Null; must be one of ["SPOT", "EC2"]; Requires replacement if changed.`,
												Validators: []validator.String{
													speakeasy_stringvalidators.NotNull(),
													stringvalidator.OneOf(
														"SPOT",
														"EC2",
													),
												},
											},
											"vpc_id": schema.StringAttribute{
												Computed: true,
												Optional: true,
												PlanModifiers: []planmodifier.String{
													stringplanmodifier.RequiresReplaceIfConfigured(),
													speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
												},
												MarkdownDescription: `VPC ID where compute environment will be deployed.` + "\n" +
													`Format: vpc- followed by hexadecimal characters` + "\n" +
													`Requires replacement if changed.`,
											},
										},
										Description: `Requires replacement if changed.`,
									},
									"fusion_snapshots": schema.BoolAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.Bool{
											boolplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"head_job_cpus": schema.Int32Attribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.Int32{
											int32planmodifier.RequiresReplaceIfConfigured(),
											speakeasy_int32planmodifier.SuppressDiff(speakeasy_int32planmodifier.ExplicitSuppress),
										},
										Description: `Number of CPUs allocated for the head job (default: 1). Requires replacement if changed.`,
									},
									"head_job_memory_mb": schema.Int32Attribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.Int32{
											int32planmodifier.RequiresReplaceIfConfigured(),
											speakeasy_int32planmodifier.SuppressDiff(speakeasy_int32planmodifier.ExplicitSuppress),
										},
										Description: `Memory allocation for the head job in MB (default: 1024). Requires replacement if changed.`,
									},
									"head_job_role": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										MarkdownDescription: `IAM role ARN for the head job.` + "\n" +
											`Format: arn:aws:iam::account-id:role/role-name` + "\n" +
											`Requires replacement if changed.`,
									},
									"head_queue": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Name of the head job queue. Requires replacement if changed.`,
									},
									"log_group": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"lustre_id": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										DeprecationMessage: `This will be removed in a future release, please migrate away from it as soon as possible`,
										Description:        `Requires replacement if changed.`,
									},
									"nextflow_config": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Nextflow configuration settings and parameters. Requires replacement if changed.`,
									},
									"nvnme_storage_enabled": schema.BoolAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.Bool{
											boolplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"post_run_script": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Shell script to execute after workflow completes. Requires replacement if changed.`,
									},
									"pre_run_script": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Shell script to execute before workflow starts. Requires replacement if changed.`,
									},
									"region": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										MarkdownDescription: `AWS region where the Batch compute environment will be created.` + "\n" +
											`Examples: us-east-1, eu-west-1, ap-southeast-2` + "\n" +
											`Not Null; Requires replacement if changed.`,
										Validators: []validator.String{
											speakeasy_stringvalidators.NotNull(),
										},
									},
									"storage_type": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										DeprecationMessage: `This will be removed in a future release, please migrate away from it as soon as possible`,
										Description:        `Requires replacement if changed.`,
									},
									"volumes": schema.ListAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.List{
											listplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
										},
										ElementType: types.StringType,
										Description: `Requires replacement if changed.`,
									},
									"work_dir": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Working directory path for workflow execution. Not Null; Requires replacement if changed.`,
										Validators: []validator.String{
											speakeasy_stringvalidators.NotNull(),
										},
									},
								},
								Description: `Requires replacement if changed.`,
								Validators: []validator.Object{
									objectvalidator.ConflictsWith(path.Expressions{
										path.MatchRelative().AtParent().AtName("altair_platform"),
										path.MatchRelative().AtParent().AtName("eks_platform"),
										path.MatchRelative().AtParent().AtName("aws_batch"),
										path.MatchRelative().AtParent().AtName("aws_cloud"),
										path.MatchRelative().AtParent().AtName("azure_batch"),
										path.MatchRelative().AtParent().AtName("google_batch"),
										path.MatchRelative().AtParent().AtName("gke_platform"),
										path.MatchRelative().AtParent().AtName("google_lifesciences"),
										path.MatchRelative().AtParent().AtName("lsf_platform"),
										path.MatchRelative().AtParent().AtName("k8s_platform"),
										path.MatchRelative().AtParent().AtName("moab_platform"),
										path.MatchRelative().AtParent().AtName("slurm_platform"),
										path.MatchRelative().AtParent().AtName("uge_platform"),
									}...),
									custom_objectvalidators.AwsForgeValidator(),
								},
							},
							"slurm_platform": schema.SingleNestedAttribute{
								Computed: true,
								Optional: true,
								PlanModifiers: []planmodifier.Object{
									objectplanmodifier.RequiresReplaceIfConfigured(),
									speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
								},
								Attributes: map[string]schema.Attribute{
									"compute_queue": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"environment": schema.ListNestedAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.List{
											listplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
										},
										NestedObject: schema.NestedAttributeObject{
											Validators: []validator.Object{
												speakeasy_objectvalidators.NotNull(),
											},
											PlanModifiers: []planmodifier.Object{
												objectplanmodifier.RequiresReplaceIfConfigured(),
												speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
											},
											Attributes: map[string]schema.Attribute{
												"compute": schema.BoolAttribute{
													Computed: true,
													Optional: true,
													PlanModifiers: []planmodifier.Bool{
														boolplanmodifier.RequiresReplaceIfConfigured(),
														speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
													},
													Description: `Requires replacement if changed.`,
												},
												"head": schema.BoolAttribute{
													Computed: true,
													Optional: true,
													PlanModifiers: []planmodifier.Bool{
														boolplanmodifier.RequiresReplaceIfConfigured(),
														speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
													},
													Description: `Requires replacement if changed.`,
												},
												"name": schema.StringAttribute{
													Computed: true,
													Optional: true,
													PlanModifiers: []planmodifier.String{
														stringplanmodifier.RequiresReplaceIfConfigured(),
														speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
													},
													Description: `Requires replacement if changed.`,
												},
												"value": schema.StringAttribute{
													Computed: true,
													Optional: true,
													PlanModifiers: []planmodifier.String{
														stringplanmodifier.RequiresReplaceIfConfigured(),
														speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
													},
													Description: `Requires replacement if changed.`,
												},
											},
										},
										Description: `Array of environment variables for the compute environment. Requires replacement if changed.`,
									},
									"head_job_options": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"head_queue": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"host_name": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"launch_dir": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"max_queue_size": schema.Int32Attribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.Int32{
											int32planmodifier.RequiresReplaceIfConfigured(),
											speakeasy_int32planmodifier.SuppressDiff(speakeasy_int32planmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"nextflow_config": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Nextflow configuration settings and parameters. Requires replacement if changed.`,
									},
									"port": schema.Int32Attribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.Int32{
											int32planmodifier.RequiresReplaceIfConfigured(),
											speakeasy_int32planmodifier.SuppressDiff(speakeasy_int32planmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"post_run_script": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Shell script to execute after workflow completes. Requires replacement if changed.`,
									},
									"pre_run_script": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Shell script to execute before workflow starts. Requires replacement if changed.`,
									},
									"propagate_head_job_options": schema.BoolAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.Bool{
											boolplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"user_name": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"work_dir": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Working directory path for workflow execution. Not Null; Requires replacement if changed.`,
										Validators: []validator.String{
											speakeasy_stringvalidators.NotNull(),
										},
									},
								},
								Description: `Requires replacement if changed.`,
								Validators: []validator.Object{
									objectvalidator.ConflictsWith(path.Expressions{
										path.MatchRelative().AtParent().AtName("altair_platform"),
										path.MatchRelative().AtParent().AtName("eks_platform"),
										path.MatchRelative().AtParent().AtName("aws_batch"),
										path.MatchRelative().AtParent().AtName("aws_cloud"),
										path.MatchRelative().AtParent().AtName("azure_batch"),
										path.MatchRelative().AtParent().AtName("google_batch"),
										path.MatchRelative().AtParent().AtName("gke_platform"),
										path.MatchRelative().AtParent().AtName("google_lifesciences"),
										path.MatchRelative().AtParent().AtName("lsf_platform"),
										path.MatchRelative().AtParent().AtName("k8s_platform"),
										path.MatchRelative().AtParent().AtName("moab_platform"),
										path.MatchRelative().AtParent().AtName("seqeracompute_platform"),
										path.MatchRelative().AtParent().AtName("uge_platform"),
									}...),
								},
							},
							"uge_platform": schema.SingleNestedAttribute{
								Computed: true,
								Optional: true,
								PlanModifiers: []planmodifier.Object{
									objectplanmodifier.RequiresReplaceIfConfigured(),
									speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
								},
								Attributes: map[string]schema.Attribute{
									"compute_queue": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"environment": schema.ListNestedAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.List{
											listplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
										},
										NestedObject: schema.NestedAttributeObject{
											Validators: []validator.Object{
												speakeasy_objectvalidators.NotNull(),
											},
											PlanModifiers: []planmodifier.Object{
												objectplanmodifier.RequiresReplaceIfConfigured(),
												speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
											},
											Attributes: map[string]schema.Attribute{
												"compute": schema.BoolAttribute{
													Computed: true,
													Optional: true,
													PlanModifiers: []planmodifier.Bool{
														boolplanmodifier.RequiresReplaceIfConfigured(),
														speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
													},
													Description: `Requires replacement if changed.`,
												},
												"head": schema.BoolAttribute{
													Computed: true,
													Optional: true,
													PlanModifiers: []planmodifier.Bool{
														boolplanmodifier.RequiresReplaceIfConfigured(),
														speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
													},
													Description: `Requires replacement if changed.`,
												},
												"name": schema.StringAttribute{
													Computed: true,
													Optional: true,
													PlanModifiers: []planmodifier.String{
														stringplanmodifier.RequiresReplaceIfConfigured(),
														speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
													},
													Description: `Requires replacement if changed.`,
												},
												"value": schema.StringAttribute{
													Computed: true,
													Optional: true,
													PlanModifiers: []planmodifier.String{
														stringplanmodifier.RequiresReplaceIfConfigured(),
														speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
													},
													Description: `Requires replacement if changed.`,
												},
											},
										},
										Description: `Array of environment variables for the compute environment. Requires replacement if changed.`,
									},
									"head_job_options": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"head_queue": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"host_name": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"launch_dir": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"max_queue_size": schema.Int32Attribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.Int32{
											int32planmodifier.RequiresReplaceIfConfigured(),
											speakeasy_int32planmodifier.SuppressDiff(speakeasy_int32planmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"nextflow_config": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Nextflow configuration settings and parameters. Requires replacement if changed.`,
									},
									"port": schema.Int32Attribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.Int32{
											int32planmodifier.RequiresReplaceIfConfigured(),
											speakeasy_int32planmodifier.SuppressDiff(speakeasy_int32planmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"post_run_script": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Shell script to execute after workflow completes. Requires replacement if changed.`,
									},
									"pre_run_script": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Shell script to execute before workflow starts. Requires replacement if changed.`,
									},
									"propagate_head_job_options": schema.BoolAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.Bool{
											boolplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"user_name": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.`,
									},
									"work_dir": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Working directory path for workflow execution. Not Null; Requires replacement if changed.`,
										Validators: []validator.String{
											speakeasy_stringvalidators.NotNull(),
										},
									},
								},
								Description: `Requires replacement if changed.`,
								Validators: []validator.Object{
									objectvalidator.ConflictsWith(path.Expressions{
										path.MatchRelative().AtParent().AtName("altair_platform"),
										path.MatchRelative().AtParent().AtName("eks_platform"),
										path.MatchRelative().AtParent().AtName("aws_batch"),
										path.MatchRelative().AtParent().AtName("aws_cloud"),
										path.MatchRelative().AtParent().AtName("azure_batch"),
										path.MatchRelative().AtParent().AtName("google_batch"),
										path.MatchRelative().AtParent().AtName("gke_platform"),
										path.MatchRelative().AtParent().AtName("google_lifesciences"),
										path.MatchRelative().AtParent().AtName("lsf_platform"),
										path.MatchRelative().AtParent().AtName("k8s_platform"),
										path.MatchRelative().AtParent().AtName("moab_platform"),
										path.MatchRelative().AtParent().AtName("seqeracompute_platform"),
										path.MatchRelative().AtParent().AtName("slurm_platform"),
									}...),
								},
							},
						},
						MarkdownDescription: `Configuration settings for compute environments including work directories,` + "\n" +
							`pre/post run scripts, and environment-specific parameters.` + "\n" +
							`Requires replacement if changed.`,
					},
					"credentials_id": schema.StringAttribute{
						Required: true,
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplaceIfConfigured(),
							speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
						},
						Description: `Requires replacement if changed.`,
					},
					"date_created": schema.StringAttribute{
						Computed: true,
						Validators: []validator.String{
							validators.IsRFC3339(),
						},
					},
					"deleted": schema.BoolAttribute{
						Computed: true,
					},
					"description": schema.StringAttribute{
						Computed: true,
						Optional: true,
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplaceIfConfigured(),
							speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
						},
						Description: `Requires replacement if changed.`,
						Validators: []validator.String{
							stringvalidator.UTF8LengthAtMost(2000),
						},
					},
					"labels": schema.ListNestedAttribute{
						Computed: true,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"date_created": schema.StringAttribute{
									Computed:    true,
									Description: `Timestamp when the label was created`,
									Validators: []validator.String{
										validators.IsRFC3339(),
									},
								},
								"id": schema.Int64Attribute{
									Computed:    true,
									Description: `Unique numeric identifier for the label`,
								},
								"is_default": schema.BoolAttribute{
									Computed:    true,
									Description: `Flag indicating if this is a default system label`,
								},
								"name": schema.StringAttribute{
									Computed:    true,
									Description: `Name or key of the label`,
								},
								"resource": schema.BoolAttribute{
									Computed:    true,
									Description: `Flag indicating if this is a resource-level label`,
								},
								"value": schema.StringAttribute{
									Computed:    true,
									Description: `Value associated with the label`,
								},
							},
						},
					},
					"last_updated": schema.StringAttribute{
						Computed: true,
						Validators: []validator.String{
							validators.IsRFC3339(),
						},
					},
					"last_used": schema.StringAttribute{
						Computed: true,
						Validators: []validator.String{
							validators.IsRFC3339(),
						},
					},
					"managed_identity_id": schema.StringAttribute{
						Computed: true,
					},
					"message": schema.StringAttribute{
						Computed: true,
						Optional: true,
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplaceIfConfigured(),
							speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
						},
						Description: `Requires replacement if changed.`,
						Validators: []validator.String{
							stringvalidator.UTF8LengthAtMost(4096),
						},
					},
					"name": schema.StringAttribute{
						Required: true,
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplaceIfConfigured(),
							speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
						},
						Description: `Requires replacement if changed.`,
						Validators: []validator.String{
							stringvalidator.UTF8LengthAtMost(100),
						},
					},
					"org_id": schema.Int64Attribute{
						Computed: true,
					},
					"platform": schema.StringAttribute{
						Required: true,
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplaceIfConfigured(),
							speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
						},
						Description: `must be one of ["aws-batch", "aws-cloud", "google-lifesciences", "google-batch", "azure-batch", "k8s-platform", "eks-platform", "gke-platform", "uge-platform", "slurm-platform", "lsf-platform", "altair-platform", "moab-platform", "local-platform", "seqeracompute-platform"]; Requires replacement if changed.`,
						Validators: []validator.String{
							stringvalidator.OneOf(
								"aws-batch",
								"aws-cloud",
								"google-lifesciences",
								"google-batch",
								"azure-batch",
								"k8s-platform",
								"eks-platform",
								"gke-platform",
								"uge-platform",
								"slurm-platform",
								"lsf-platform",
								"altair-platform",
								"moab-platform",
								"local-platform",
								"seqeracompute-platform",
							),
							custom_stringvalidators.ComputeConfigValidator(),
						},
					},
					"primary": schema.BoolAttribute{
						Computed: true,
					},
					"status": schema.StringAttribute{
						Computed: true,
						PlanModifiers: []planmodifier.String{
							speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
						},
						Description: `must be one of ["CREATING", "AVAILABLE", "ERRORED", "INVALID"]`,
						Validators: []validator.String{
							stringvalidator.OneOf(
								"CREATING",
								"AVAILABLE",
								"ERRORED",
								"INVALID",
							),
						},
					},
					"workspace_id": schema.Int64Attribute{
						Computed: true,
					},
				},
				Description: `Requires replacement if changed.`,
			},
			"compute_env_id": schema.StringAttribute{
				Computed:    true,
				Description: `Compute environment string identifier`,
			},
			"label_ids": schema.ListAttribute{
				Optional: true,
				PlanModifiers: []planmodifier.List{
					listplanmodifier.RequiresReplaceIfConfigured(),
				},
				ElementType: types.Int64Type,
				Description: `Requires replacement if changed.`,
			},
			"workspace_id": schema.Int64Attribute{
				Required: true,
				PlanModifiers: []planmodifier.Int64{
					int64planmodifier.RequiresReplaceIfConfigured(),
				},
				Description: `Workspace numeric identifier. Requires replacement if changed.`,
			},
		},
	}
}

func (r *ComputeEnvResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.Seqera)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *sdk.Seqera, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *ComputeEnvResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *ComputeEnvResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(plan.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsCreateComputeEnvRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.ComputeEnvs.CreateComputeEnv(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.CreateComputeEnvResponse != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedCreateComputeEnvResponse(ctx, res.CreateComputeEnvResponse)...)

	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(refreshPlan(ctx, plan, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}
	request1, request1Diags := data.ToOperationsDescribeComputeEnvRequest(ctx)
	resp.Diagnostics.Append(request1Diags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res1, err := r.client.ComputeEnvs.DescribeComputeEnv(ctx, *request1)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res1 != nil && res1.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res1.RawResponse))
		}
		return
	}
	if res1 == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res1))
		return
	}
	if res1.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res1.StatusCode), debugResponse(res1.RawResponse))
		return
	}
	if !(res1.DescribeComputeEnvResponse != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res1.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedDescribeComputeEnvResponse(ctx, res1.DescribeComputeEnvResponse)...)

	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(refreshPlan(ctx, plan, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *ComputeEnvResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *ComputeEnvResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsDescribeComputeEnvRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.ComputeEnvs.DescribeComputeEnv(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode == 404 {
		resp.State.RemoveResource(ctx)
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.DescribeComputeEnvResponse != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedDescribeComputeEnvResponse(ctx, res.DescribeComputeEnvResponse)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *ComputeEnvResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *ComputeEnvResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	merge(ctx, req, resp, &data)
	if resp.Diagnostics.HasError() {
		return
	}

	// Not Implemented; all attributes marked as RequiresReplace

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *ComputeEnvResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *ComputeEnvResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsDeleteComputeEnvRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.ComputeEnvs.DeleteComputeEnv(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 204 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}

}

func (r *ComputeEnvResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	dec := json.NewDecoder(bytes.NewReader([]byte(req.ID)))
	dec.DisallowUnknownFields()
	var data struct {
		ComputeEnvID string `json:"compute_env_id"`
		WorkspaceID  int64  `json:"workspace_id"`
	}

	if err := dec.Decode(&data); err != nil {
		resp.Diagnostics.AddError("Invalid ID", `The import ID is not valid. It is expected to be a JSON object string with the format: '{"compute_env_id": "...", "workspace_id": 0}': `+err.Error())
		return
	}

	if len(data.ComputeEnvID) == 0 {
		resp.Diagnostics.AddError("Missing required field", `The field compute_env_id is required but was not found in the json encoded ID. It's expected to be a value alike '""`)
		return
	}
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("compute_env_id"), data.ComputeEnvID)...)
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("workspace_id"), data.WorkspaceID)...)
}
