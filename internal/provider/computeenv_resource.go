// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework-validators/objectvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/boolplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int32planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/listplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/mapplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/objectplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	speakeasy_stringplanmodifier "github.com/speakeasy/terraform-provider-seqera/internal/planmodifiers/stringplanmodifier"
	tfTypes "github.com/speakeasy/terraform-provider-seqera/internal/provider/types"
	"github.com/speakeasy/terraform-provider-seqera/internal/sdk"
	"github.com/speakeasy/terraform-provider-seqera/internal/validators"
	custom_stringvalidators "github.com/speakeasy/terraform-provider-seqera/internal/validators/stringvalidators"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &ComputeEnvResource{}
var _ resource.ResourceWithImportState = &ComputeEnvResource{}

func NewComputeEnvResource() resource.Resource {
	return &ComputeEnvResource{}
}

// ComputeEnvResource defines the resource implementation.
type ComputeEnvResource struct {
	// Provider configured SDK client.
	client *sdk.Seqera
}

// ComputeEnvResourceModel describes the resource data model.
type ComputeEnvResourceModel struct {
	ComputeEnv    *tfTypes.ComputeEnvResponseDto `tfsdk:"compute_env"`
	ComputeEnvID  types.String                   `tfsdk:"compute_env_id"`
	Config        tfTypes.ComputeConfig          `tfsdk:"config"`
	CredentialsID types.String                   `tfsdk:"credentials_id"`
	Description   types.String                   `tfsdk:"description"`
	LabelIds      []types.Int64                  `tfsdk:"label_ids"`
	Message       types.String                   `tfsdk:"message"`
	Name          types.String                   `tfsdk:"name"`
	Platform      types.String                   `tfsdk:"platform"`
	Status        types.String                   `tfsdk:"status"`
	WorkspaceID   types.Int64                    `queryParam:"style=form,explode=true,name=workspaceId" tfsdk:"workspace_id"`
}

func (r *ComputeEnvResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_compute_env"
}

func (r *ComputeEnvResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "ComputeEnv Resource",
		Attributes: map[string]schema.Attribute{
			"compute_env": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"compute_env_id": schema.StringAttribute{
						Computed: true,
					},
					"config": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"altair_platform": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"compute_queue": schema.StringAttribute{
										Computed: true,
									},
									"environment": schema.ListNestedAttribute{
										Computed: true,
										NestedObject: schema.NestedAttributeObject{
											Attributes: map[string]schema.Attribute{
												"compute": schema.BoolAttribute{
													Computed: true,
												},
												"head": schema.BoolAttribute{
													Computed: true,
												},
												"name": schema.StringAttribute{
													Computed: true,
												},
												"value": schema.StringAttribute{
													Computed: true,
												},
											},
										},
										Description: `Array of environment variables for the compute environment`,
									},
									"head_job_options": schema.StringAttribute{
										Computed: true,
									},
									"head_queue": schema.StringAttribute{
										Computed: true,
									},
									"host_name": schema.StringAttribute{
										Computed: true,
									},
									"launch_dir": schema.StringAttribute{
										Computed: true,
									},
									"max_queue_size": schema.Int32Attribute{
										Computed: true,
									},
									"nextflow_config": schema.StringAttribute{
										Computed:    true,
										Description: `Nextflow configuration settings and parameters`,
									},
									"port": schema.Int32Attribute{
										Computed: true,
									},
									"post_run_script": schema.StringAttribute{
										Computed:    true,
										Description: `Shell script to execute after workflow completes`,
									},
									"pre_run_script": schema.StringAttribute{
										Computed:    true,
										Description: `Shell script to execute before workflow starts`,
									},
									"propagate_head_job_options": schema.BoolAttribute{
										Computed: true,
									},
									"user_name": schema.StringAttribute{
										Computed: true,
									},
									"work_dir": schema.StringAttribute{
										Computed:    true,
										Description: `Working directory path for workflow execution`,
									},
								},
								Validators: []validator.Object{
									objectvalidator.ConflictsWith(path.Expressions{
										path.MatchRelative().AtParent().AtName("aws_batch"),
										path.MatchRelative().AtParent().AtName("aws_cloud"),
										path.MatchRelative().AtParent().AtName("seqeracompute_platform"),
										path.MatchRelative().AtParent().AtName("google_lifesciences"),
										path.MatchRelative().AtParent().AtName("google_batch"),
										path.MatchRelative().AtParent().AtName("azure_batch"),
										path.MatchRelative().AtParent().AtName("lsf_platform"),
										path.MatchRelative().AtParent().AtName("slurm_platform"),
										path.MatchRelative().AtParent().AtName("k8s_platform"),
										path.MatchRelative().AtParent().AtName("eks_platform"),
										path.MatchRelative().AtParent().AtName("gke_platform"),
										path.MatchRelative().AtParent().AtName("uge_platform"),
										path.MatchRelative().AtParent().AtName("moab_platform"),
									}...),
								},
							},
							"aws_batch": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"cli_path": schema.StringAttribute{
										Computed: true,
									},
									"compute_job_role": schema.StringAttribute{
										Computed: true,
									},
									"compute_queue": schema.StringAttribute{
										Computed: true,
									},
									"dragen_instance_type": schema.StringAttribute{
										Computed: true,
									},
									"dragen_queue": schema.StringAttribute{
										Computed: true,
									},
									"environment": schema.ListNestedAttribute{
										Computed: true,
										NestedObject: schema.NestedAttributeObject{
											Attributes: map[string]schema.Attribute{
												"compute": schema.BoolAttribute{
													Computed: true,
												},
												"head": schema.BoolAttribute{
													Computed: true,
												},
												"name": schema.StringAttribute{
													Computed: true,
												},
												"value": schema.StringAttribute{
													Computed: true,
												},
											},
										},
										Description: `Array of environment variables for the compute environment`,
									},
									"execution_role": schema.StringAttribute{
										Computed: true,
									},
									"forge": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"alloc_strategy": schema.StringAttribute{
												Computed:    true,
												Description: `must be one of ["BEST_FIT", "BEST_FIT_PROGRESSIVE", "SPOT_CAPACITY_OPTIMIZED", "SPOT_PRICE_CAPACITY_OPTIMIZED"]`,
												Validators: []validator.String{
													stringvalidator.OneOf(
														"BEST_FIT",
														"BEST_FIT_PROGRESSIVE",
														"SPOT_CAPACITY_OPTIMIZED",
														"SPOT_PRICE_CAPACITY_OPTIMIZED",
													),
												},
											},
											"allow_buckets": schema.ListAttribute{
												Computed:    true,
												ElementType: types.StringType,
											},
											"arm64_enabled": schema.BoolAttribute{
												Computed: true,
											},
											"bid_percentage": schema.Int32Attribute{
												Computed: true,
											},
											"dispose_on_deletion": schema.BoolAttribute{
												Computed: true,
											},
											"dragen_ami_id": schema.StringAttribute{
												Computed: true,
											},
											"dragen_enabled": schema.BoolAttribute{
												Computed: true,
											},
											"dragen_instance_type": schema.StringAttribute{
												Computed: true,
											},
											"ebs_auto_scale": schema.BoolAttribute{
												Computed: true,
											},
											"ebs_block_size": schema.Int32Attribute{
												Computed: true,
											},
											"ebs_boot_size": schema.Int32Attribute{
												Computed: true,
											},
											"ec2_key_pair": schema.StringAttribute{
												Computed: true,
											},
											"ecs_config": schema.StringAttribute{
												Computed: true,
											},
											"efs_create": schema.BoolAttribute{
												Computed: true,
											},
											"efs_id": schema.StringAttribute{
												Computed: true,
											},
											"efs_mount": schema.StringAttribute{
												Computed: true,
											},
											"fargate_head_enabled": schema.BoolAttribute{
												Computed: true,
											},
											"fsx_mount": schema.StringAttribute{
												Computed: true,
											},
											"fsx_name": schema.StringAttribute{
												Computed: true,
											},
											"fsx_size": schema.Int32Attribute{
												Computed: true,
											},
											"fusion_enabled": schema.BoolAttribute{
												Computed: true,
											},
											"gpu_enabled": schema.BoolAttribute{
												Computed: true,
											},
											"image_id": schema.StringAttribute{
												Computed: true,
											},
											"instance_types": schema.ListAttribute{
												Computed:    true,
												ElementType: types.StringType,
											},
											"max_cpus": schema.Int32Attribute{
												Computed: true,
											},
											"min_cpus": schema.Int32Attribute{
												Computed: true,
											},
											"security_groups": schema.ListAttribute{
												Computed:    true,
												ElementType: types.StringType,
											},
											"subnets": schema.ListAttribute{
												Computed:    true,
												ElementType: types.StringType,
											},
											"type": schema.StringAttribute{
												Computed:    true,
												Description: `must be one of ["SPOT", "EC2"]`,
												Validators: []validator.String{
													stringvalidator.OneOf(
														"SPOT",
														"EC2",
													),
												},
											},
											"vpc_id": schema.StringAttribute{
												Computed: true,
											},
										},
									},
									"fusion_snapshots": schema.BoolAttribute{
										Computed: true,
									},
									"fusion2_enabled": schema.BoolAttribute{
										Computed: true,
									},
									"head_job_cpus": schema.Int32Attribute{
										Computed: true,
									},
									"head_job_memory_mb": schema.Int32Attribute{
										Computed: true,
									},
									"head_job_role": schema.StringAttribute{
										Computed: true,
									},
									"head_queue": schema.StringAttribute{
										Computed: true,
									},
									"log_group": schema.StringAttribute{
										Computed: true,
									},
									"lustre_id": schema.StringAttribute{
										Computed:           true,
										DeprecationMessage: `This will be removed in a future release, please migrate away from it as soon as possible`,
									},
									"nextflow_config": schema.StringAttribute{
										Computed:    true,
										Description: `Nextflow configuration settings and parameters`,
									},
									"nvnme_storage_enabled": schema.BoolAttribute{
										Computed: true,
									},
									"post_run_script": schema.StringAttribute{
										Computed:    true,
										Description: `Shell script to execute after workflow completes`,
									},
									"pre_run_script": schema.StringAttribute{
										Computed:    true,
										Description: `Shell script to execute before workflow starts`,
									},
									"region": schema.StringAttribute{
										Computed: true,
									},
									"storage_type": schema.StringAttribute{
										Computed:           true,
										DeprecationMessage: `This will be removed in a future release, please migrate away from it as soon as possible`,
									},
									"volumes": schema.ListAttribute{
										Computed:    true,
										ElementType: types.StringType,
									},
									"wave_enabled": schema.BoolAttribute{
										Computed: true,
									},
									"work_dir": schema.StringAttribute{
										Computed:    true,
										Description: `Working directory path for workflow execution`,
									},
								},
								Validators: []validator.Object{
									objectvalidator.ConflictsWith(path.Expressions{
										path.MatchRelative().AtParent().AtName("aws_cloud"),
										path.MatchRelative().AtParent().AtName("seqeracompute_platform"),
										path.MatchRelative().AtParent().AtName("google_lifesciences"),
										path.MatchRelative().AtParent().AtName("google_batch"),
										path.MatchRelative().AtParent().AtName("azure_batch"),
										path.MatchRelative().AtParent().AtName("lsf_platform"),
										path.MatchRelative().AtParent().AtName("slurm_platform"),
										path.MatchRelative().AtParent().AtName("k8s_platform"),
										path.MatchRelative().AtParent().AtName("eks_platform"),
										path.MatchRelative().AtParent().AtName("gke_platform"),
										path.MatchRelative().AtParent().AtName("uge_platform"),
										path.MatchRelative().AtParent().AtName("altair_platform"),
										path.MatchRelative().AtParent().AtName("moab_platform"),
									}...),
								},
							},
							"aws_cloud": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"allow_buckets": schema.ListAttribute{
										Computed:    true,
										ElementType: types.StringType,
									},
									"arm64_enabled": schema.BoolAttribute{
										Computed: true,
									},
									"ebs_boot_size": schema.Int32Attribute{
										Computed: true,
									},
									"ec2_key_pair": schema.StringAttribute{
										Computed: true,
									},
									"environment": schema.ListNestedAttribute{
										Computed: true,
										NestedObject: schema.NestedAttributeObject{
											Attributes: map[string]schema.Attribute{
												"compute": schema.BoolAttribute{
													Computed: true,
												},
												"head": schema.BoolAttribute{
													Computed: true,
												},
												"name": schema.StringAttribute{
													Computed: true,
												},
												"value": schema.StringAttribute{
													Computed: true,
												},
											},
										},
										Description: `Array of environment variables for the compute environment`,
									},
									"fusion2_enabled": schema.BoolAttribute{
										Computed: true,
									},
									"gpu_enabled": schema.BoolAttribute{
										Computed: true,
									},
									"image_id": schema.StringAttribute{
										Computed: true,
									},
									"instance_profile_arn": schema.StringAttribute{
										Computed: true,
									},
									"instance_type": schema.StringAttribute{
										Computed: true,
									},
									"log_group": schema.StringAttribute{
										Computed: true,
									},
									"nextflow_config": schema.StringAttribute{
										Computed:    true,
										Description: `Nextflow configuration settings and parameters`,
									},
									"post_run_script": schema.StringAttribute{
										Computed:    true,
										Description: `Shell script to execute after workflow completes`,
									},
									"pre_run_script": schema.StringAttribute{
										Computed:    true,
										Description: `Shell script to execute before workflow starts`,
									},
									"region": schema.StringAttribute{
										Computed: true,
									},
									"security_groups": schema.ListAttribute{
										Computed:    true,
										ElementType: types.StringType,
									},
									"subnet_id": schema.StringAttribute{
										Computed: true,
									},
									"wave_enabled": schema.BoolAttribute{
										Computed: true,
									},
									"work_dir": schema.StringAttribute{
										Computed:    true,
										Description: `Working directory path for workflow execution`,
									},
								},
								Validators: []validator.Object{
									objectvalidator.ConflictsWith(path.Expressions{
										path.MatchRelative().AtParent().AtName("aws_batch"),
										path.MatchRelative().AtParent().AtName("seqeracompute_platform"),
										path.MatchRelative().AtParent().AtName("google_lifesciences"),
										path.MatchRelative().AtParent().AtName("google_batch"),
										path.MatchRelative().AtParent().AtName("azure_batch"),
										path.MatchRelative().AtParent().AtName("lsf_platform"),
										path.MatchRelative().AtParent().AtName("slurm_platform"),
										path.MatchRelative().AtParent().AtName("k8s_platform"),
										path.MatchRelative().AtParent().AtName("eks_platform"),
										path.MatchRelative().AtParent().AtName("gke_platform"),
										path.MatchRelative().AtParent().AtName("uge_platform"),
										path.MatchRelative().AtParent().AtName("altair_platform"),
										path.MatchRelative().AtParent().AtName("moab_platform"),
									}...),
								},
							},
							"azure_batch": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"auto_pool_mode": schema.BoolAttribute{
										Computed:           true,
										DeprecationMessage: `This will be removed in a future release, please migrate away from it as soon as possible`,
									},
									"delete_jobs_on_completion": schema.StringAttribute{
										Computed:    true,
										Description: `must be one of ["on_success", "always", "never"]`,
										Validators: []validator.String{
											stringvalidator.OneOf(
												"on_success",
												"always",
												"never",
											),
										},
									},
									"delete_pools_on_completion": schema.BoolAttribute{
										Computed: true,
									},
									"environment": schema.ListNestedAttribute{
										Computed: true,
										NestedObject: schema.NestedAttributeObject{
											Attributes: map[string]schema.Attribute{
												"compute": schema.BoolAttribute{
													Computed: true,
												},
												"head": schema.BoolAttribute{
													Computed: true,
												},
												"name": schema.StringAttribute{
													Computed: true,
												},
												"value": schema.StringAttribute{
													Computed: true,
												},
											},
										},
										Description: `Array of environment variables for the compute environment`,
									},
									"forge": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"auto_scale": schema.BoolAttribute{
												Computed: true,
											},
											"container_reg_ids": schema.ListAttribute{
												Computed:    true,
												ElementType: types.StringType,
											},
											"dispose_on_deletion": schema.BoolAttribute{
												Computed: true,
											},
											"vm_count": schema.Int32Attribute{
												Computed: true,
											},
											"vm_type": schema.StringAttribute{
												Computed: true,
											},
										},
									},
									"fusion2_enabled": schema.BoolAttribute{
										Computed: true,
									},
									"head_pool": schema.StringAttribute{
										Computed: true,
									},
									"managed_identity_client_id": schema.StringAttribute{
										Computed: true,
									},
									"nextflow_config": schema.StringAttribute{
										Computed:    true,
										Description: `Nextflow configuration settings and parameters`,
									},
									"post_run_script": schema.StringAttribute{
										Computed:    true,
										Description: `Shell script to execute after workflow completes`,
									},
									"pre_run_script": schema.StringAttribute{
										Computed:    true,
										Description: `Shell script to execute before workflow starts`,
									},
									"region": schema.StringAttribute{
										Computed: true,
									},
									"token_duration": schema.StringAttribute{
										Computed: true,
									},
									"wave_enabled": schema.BoolAttribute{
										Computed: true,
									},
									"work_dir": schema.StringAttribute{
										Computed:    true,
										Description: `Working directory path for workflow execution`,
									},
								},
								Validators: []validator.Object{
									objectvalidator.ConflictsWith(path.Expressions{
										path.MatchRelative().AtParent().AtName("aws_batch"),
										path.MatchRelative().AtParent().AtName("aws_cloud"),
										path.MatchRelative().AtParent().AtName("seqeracompute_platform"),
										path.MatchRelative().AtParent().AtName("google_lifesciences"),
										path.MatchRelative().AtParent().AtName("google_batch"),
										path.MatchRelative().AtParent().AtName("lsf_platform"),
										path.MatchRelative().AtParent().AtName("slurm_platform"),
										path.MatchRelative().AtParent().AtName("k8s_platform"),
										path.MatchRelative().AtParent().AtName("eks_platform"),
										path.MatchRelative().AtParent().AtName("gke_platform"),
										path.MatchRelative().AtParent().AtName("uge_platform"),
										path.MatchRelative().AtParent().AtName("altair_platform"),
										path.MatchRelative().AtParent().AtName("moab_platform"),
									}...),
								},
							},
							"eks_platform": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"cluster_name": schema.StringAttribute{
										Computed:    true,
										Description: `The AWS EKS cluster name`,
									},
									"compute_service_account": schema.StringAttribute{
										Computed: true,
									},
									"environment": schema.ListNestedAttribute{
										Computed: true,
										NestedObject: schema.NestedAttributeObject{
											Attributes: map[string]schema.Attribute{
												"compute": schema.BoolAttribute{
													Computed: true,
												},
												"head": schema.BoolAttribute{
													Computed: true,
												},
												"name": schema.StringAttribute{
													Computed: true,
												},
												"value": schema.StringAttribute{
													Computed: true,
												},
											},
										},
										Description: `Array of environment variables for the compute environment`,
									},
									"fusion2_enabled": schema.BoolAttribute{
										Computed: true,
									},
									"head_job_cpus": schema.Int32Attribute{
										Computed: true,
									},
									"head_job_memory_mb": schema.Int32Attribute{
										Computed: true,
									},
									"head_pod_spec": schema.StringAttribute{
										Computed: true,
									},
									"head_service_account": schema.StringAttribute{
										Computed: true,
									},
									"namespace": schema.StringAttribute{
										Computed: true,
									},
									"nextflow_config": schema.StringAttribute{
										Computed:    true,
										Description: `Nextflow configuration settings and parameters`,
									},
									"pod_cleanup": schema.StringAttribute{
										Computed:    true,
										Description: `must be one of ["on_success", "always", "never"]`,
										Validators: []validator.String{
											stringvalidator.OneOf(
												"on_success",
												"always",
												"never",
											),
										},
									},
									"post_run_script": schema.StringAttribute{
										Computed:    true,
										Description: `Shell script to execute after workflow completes`,
									},
									"pre_run_script": schema.StringAttribute{
										Computed:    true,
										Description: `Shell script to execute before workflow starts`,
									},
									"region": schema.StringAttribute{
										Computed:    true,
										Description: `AWS region`,
									},
									"server": schema.StringAttribute{
										Computed: true,
									},
									"service_pod_spec": schema.StringAttribute{
										Computed: true,
									},
									"ssl_cert": schema.StringAttribute{
										Computed: true,
									},
									"storage_claim_name": schema.StringAttribute{
										Computed: true,
									},
									"storage_mount_path": schema.StringAttribute{
										Computed: true,
									},
									"wave_enabled": schema.BoolAttribute{
										Computed: true,
									},
									"work_dir": schema.StringAttribute{
										Computed:    true,
										Description: `Working directory path for workflow execution`,
									},
								},
								Validators: []validator.Object{
									objectvalidator.ConflictsWith(path.Expressions{
										path.MatchRelative().AtParent().AtName("aws_batch"),
										path.MatchRelative().AtParent().AtName("aws_cloud"),
										path.MatchRelative().AtParent().AtName("seqeracompute_platform"),
										path.MatchRelative().AtParent().AtName("google_lifesciences"),
										path.MatchRelative().AtParent().AtName("google_batch"),
										path.MatchRelative().AtParent().AtName("azure_batch"),
										path.MatchRelative().AtParent().AtName("lsf_platform"),
										path.MatchRelative().AtParent().AtName("slurm_platform"),
										path.MatchRelative().AtParent().AtName("k8s_platform"),
										path.MatchRelative().AtParent().AtName("gke_platform"),
										path.MatchRelative().AtParent().AtName("uge_platform"),
										path.MatchRelative().AtParent().AtName("altair_platform"),
										path.MatchRelative().AtParent().AtName("moab_platform"),
									}...),
								},
							},
							"gke_platform": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"cluster_name": schema.StringAttribute{
										Computed:    true,
										Description: `The GKE cluster name`,
									},
									"compute_service_account": schema.StringAttribute{
										Computed: true,
									},
									"environment": schema.ListNestedAttribute{
										Computed: true,
										NestedObject: schema.NestedAttributeObject{
											Attributes: map[string]schema.Attribute{
												"compute": schema.BoolAttribute{
													Computed: true,
												},
												"head": schema.BoolAttribute{
													Computed: true,
												},
												"name": schema.StringAttribute{
													Computed: true,
												},
												"value": schema.StringAttribute{
													Computed: true,
												},
											},
										},
										Description: `Array of environment variables for the compute environment`,
									},
									"fusion2_enabled": schema.BoolAttribute{
										Computed: true,
									},
									"head_job_cpus": schema.Int32Attribute{
										Computed: true,
									},
									"head_job_memory_mb": schema.Int32Attribute{
										Computed: true,
									},
									"head_pod_spec": schema.StringAttribute{
										Computed: true,
									},
									"head_service_account": schema.StringAttribute{
										Computed: true,
									},
									"namespace": schema.StringAttribute{
										Computed: true,
									},
									"nextflow_config": schema.StringAttribute{
										Computed:    true,
										Description: `Nextflow configuration settings and parameters`,
									},
									"pod_cleanup": schema.StringAttribute{
										Computed:    true,
										Description: `must be one of ["on_success", "always", "never"]`,
										Validators: []validator.String{
											stringvalidator.OneOf(
												"on_success",
												"always",
												"never",
											),
										},
									},
									"post_run_script": schema.StringAttribute{
										Computed:    true,
										Description: `Shell script to execute after workflow completes`,
									},
									"pre_run_script": schema.StringAttribute{
										Computed:    true,
										Description: `Shell script to execute before workflow starts`,
									},
									"region": schema.StringAttribute{
										Computed:    true,
										Description: `The GKE cluster region - or - zone`,
									},
									"server": schema.StringAttribute{
										Computed: true,
									},
									"service_pod_spec": schema.StringAttribute{
										Computed: true,
									},
									"ssl_cert": schema.StringAttribute{
										Computed: true,
									},
									"storage_claim_name": schema.StringAttribute{
										Computed: true,
									},
									"storage_mount_path": schema.StringAttribute{
										Computed: true,
									},
									"wave_enabled": schema.BoolAttribute{
										Computed: true,
									},
									"work_dir": schema.StringAttribute{
										Computed:    true,
										Description: `Working directory path for workflow execution`,
									},
								},
								Validators: []validator.Object{
									objectvalidator.ConflictsWith(path.Expressions{
										path.MatchRelative().AtParent().AtName("aws_batch"),
										path.MatchRelative().AtParent().AtName("aws_cloud"),
										path.MatchRelative().AtParent().AtName("seqeracompute_platform"),
										path.MatchRelative().AtParent().AtName("google_lifesciences"),
										path.MatchRelative().AtParent().AtName("google_batch"),
										path.MatchRelative().AtParent().AtName("azure_batch"),
										path.MatchRelative().AtParent().AtName("lsf_platform"),
										path.MatchRelative().AtParent().AtName("slurm_platform"),
										path.MatchRelative().AtParent().AtName("k8s_platform"),
										path.MatchRelative().AtParent().AtName("eks_platform"),
										path.MatchRelative().AtParent().AtName("uge_platform"),
										path.MatchRelative().AtParent().AtName("altair_platform"),
										path.MatchRelative().AtParent().AtName("moab_platform"),
									}...),
								},
							},
							"google_batch": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"boot_disk_size_gb": schema.Int32Attribute{
										Computed: true,
									},
									"compute_jobs_instance_template": schema.StringAttribute{
										Computed: true,
									},
									"copy_image": schema.StringAttribute{
										Computed: true,
									},
									"cpu_platform": schema.StringAttribute{
										Computed: true,
									},
									"debug_mode": schema.Int32Attribute{
										Computed: true,
									},
									"environment": schema.ListNestedAttribute{
										Computed: true,
										NestedObject: schema.NestedAttributeObject{
											Attributes: map[string]schema.Attribute{
												"compute": schema.BoolAttribute{
													Computed: true,
												},
												"head": schema.BoolAttribute{
													Computed: true,
												},
												"name": schema.StringAttribute{
													Computed: true,
												},
												"value": schema.StringAttribute{
													Computed: true,
												},
											},
										},
										Description: `Array of environment variables for the compute environment`,
									},
									"fusion2_enabled": schema.BoolAttribute{
										Computed: true,
									},
									"head_job_cpus": schema.Int32Attribute{
										Computed: true,
									},
									"head_job_instance_template": schema.StringAttribute{
										Computed: true,
									},
									"head_job_memory_mb": schema.Int32Attribute{
										Computed: true,
									},
									"labels": schema.MapAttribute{
										Computed:    true,
										ElementType: types.StringType,
									},
									"location": schema.StringAttribute{
										Computed: true,
									},
									"machine_type": schema.StringAttribute{
										Computed: true,
									},
									"network": schema.StringAttribute{
										Computed: true,
									},
									"nextflow_config": schema.StringAttribute{
										Computed:    true,
										Description: `Nextflow configuration settings and parameters`,
									},
									"nfs_mount": schema.StringAttribute{
										Computed: true,
									},
									"nfs_target": schema.StringAttribute{
										Computed: true,
									},
									"post_run_script": schema.StringAttribute{
										Computed:    true,
										Description: `Shell script to execute after workflow completes`,
									},
									"pre_run_script": schema.StringAttribute{
										Computed:    true,
										Description: `Shell script to execute before workflow starts`,
									},
									"project_id": schema.StringAttribute{
										Computed: true,
									},
									"service_account": schema.StringAttribute{
										Computed: true,
									},
									"spot": schema.BoolAttribute{
										Computed: true,
									},
									"ssh_daemon": schema.BoolAttribute{
										Computed: true,
									},
									"ssh_image": schema.StringAttribute{
										Computed: true,
									},
									"subnetwork": schema.StringAttribute{
										Computed: true,
									},
									"use_private_address": schema.BoolAttribute{
										Computed: true,
									},
									"wave_enabled": schema.BoolAttribute{
										Computed: true,
									},
									"work_dir": schema.StringAttribute{
										Computed:    true,
										Description: `Working directory path for workflow execution`,
									},
								},
								Validators: []validator.Object{
									objectvalidator.ConflictsWith(path.Expressions{
										path.MatchRelative().AtParent().AtName("aws_batch"),
										path.MatchRelative().AtParent().AtName("aws_cloud"),
										path.MatchRelative().AtParent().AtName("seqeracompute_platform"),
										path.MatchRelative().AtParent().AtName("google_lifesciences"),
										path.MatchRelative().AtParent().AtName("azure_batch"),
										path.MatchRelative().AtParent().AtName("lsf_platform"),
										path.MatchRelative().AtParent().AtName("slurm_platform"),
										path.MatchRelative().AtParent().AtName("k8s_platform"),
										path.MatchRelative().AtParent().AtName("eks_platform"),
										path.MatchRelative().AtParent().AtName("gke_platform"),
										path.MatchRelative().AtParent().AtName("uge_platform"),
										path.MatchRelative().AtParent().AtName("altair_platform"),
										path.MatchRelative().AtParent().AtName("moab_platform"),
									}...),
								},
							},
							"google_lifesciences": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"boot_disk_size_gb": schema.Int32Attribute{
										Computed: true,
									},
									"copy_image": schema.StringAttribute{
										Computed: true,
									},
									"debug_mode": schema.Int32Attribute{
										Computed: true,
									},
									"environment": schema.ListNestedAttribute{
										Computed: true,
										NestedObject: schema.NestedAttributeObject{
											Attributes: map[string]schema.Attribute{
												"compute": schema.BoolAttribute{
													Computed: true,
												},
												"head": schema.BoolAttribute{
													Computed: true,
												},
												"name": schema.StringAttribute{
													Computed: true,
												},
												"value": schema.StringAttribute{
													Computed: true,
												},
											},
										},
										Description: `Array of environment variables for the compute environment`,
									},
									"head_job_cpus": schema.Int32Attribute{
										Computed: true,
									},
									"head_job_memory_mb": schema.Int32Attribute{
										Computed: true,
									},
									"labels": schema.MapAttribute{
										Computed:    true,
										ElementType: types.StringType,
									},
									"location": schema.StringAttribute{
										Computed: true,
									},
									"nextflow_config": schema.StringAttribute{
										Computed:    true,
										Description: `Nextflow configuration settings and parameters`,
									},
									"nfs_mount": schema.StringAttribute{
										Computed: true,
									},
									"nfs_target": schema.StringAttribute{
										Computed: true,
									},
									"post_run_script": schema.StringAttribute{
										Computed:    true,
										Description: `Shell script to execute after workflow completes`,
									},
									"pre_run_script": schema.StringAttribute{
										Computed:    true,
										Description: `Shell script to execute before workflow starts`,
									},
									"preemptible": schema.BoolAttribute{
										Computed: true,
									},
									"project_id": schema.StringAttribute{
										Computed: true,
									},
									"region": schema.StringAttribute{
										Computed: true,
									},
									"ssh_daemon": schema.BoolAttribute{
										Computed: true,
									},
									"ssh_image": schema.StringAttribute{
										Computed: true,
									},
									"use_private_address": schema.BoolAttribute{
										Computed: true,
									},
									"work_dir": schema.StringAttribute{
										Computed:    true,
										Description: `Working directory path for workflow execution`,
									},
									"zones": schema.ListAttribute{
										Computed:    true,
										ElementType: types.StringType,
									},
								},
								Validators: []validator.Object{
									objectvalidator.ConflictsWith(path.Expressions{
										path.MatchRelative().AtParent().AtName("aws_batch"),
										path.MatchRelative().AtParent().AtName("aws_cloud"),
										path.MatchRelative().AtParent().AtName("seqeracompute_platform"),
										path.MatchRelative().AtParent().AtName("google_batch"),
										path.MatchRelative().AtParent().AtName("azure_batch"),
										path.MatchRelative().AtParent().AtName("lsf_platform"),
										path.MatchRelative().AtParent().AtName("slurm_platform"),
										path.MatchRelative().AtParent().AtName("k8s_platform"),
										path.MatchRelative().AtParent().AtName("eks_platform"),
										path.MatchRelative().AtParent().AtName("gke_platform"),
										path.MatchRelative().AtParent().AtName("uge_platform"),
										path.MatchRelative().AtParent().AtName("altair_platform"),
										path.MatchRelative().AtParent().AtName("moab_platform"),
									}...),
								},
							},
							"k8s_platform": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"compute_service_account": schema.StringAttribute{
										Computed: true,
									},
									"environment": schema.ListNestedAttribute{
										Computed: true,
										NestedObject: schema.NestedAttributeObject{
											Attributes: map[string]schema.Attribute{
												"compute": schema.BoolAttribute{
													Computed: true,
												},
												"head": schema.BoolAttribute{
													Computed: true,
												},
												"name": schema.StringAttribute{
													Computed: true,
												},
												"value": schema.StringAttribute{
													Computed: true,
												},
											},
										},
										Description: `Array of environment variables for the compute environment`,
									},
									"head_job_cpus": schema.Int32Attribute{
										Computed: true,
									},
									"head_job_memory_mb": schema.Int32Attribute{
										Computed: true,
									},
									"head_pod_spec": schema.StringAttribute{
										Computed: true,
									},
									"head_service_account": schema.StringAttribute{
										Computed: true,
									},
									"namespace": schema.StringAttribute{
										Computed: true,
									},
									"nextflow_config": schema.StringAttribute{
										Computed:    true,
										Description: `Nextflow configuration settings and parameters`,
									},
									"pod_cleanup": schema.StringAttribute{
										Computed:    true,
										Description: `must be one of ["on_success", "always", "never"]`,
										Validators: []validator.String{
											stringvalidator.OneOf(
												"on_success",
												"always",
												"never",
											),
										},
									},
									"post_run_script": schema.StringAttribute{
										Computed:    true,
										Description: `Shell script to execute after workflow completes`,
									},
									"pre_run_script": schema.StringAttribute{
										Computed:    true,
										Description: `Shell script to execute before workflow starts`,
									},
									"server": schema.StringAttribute{
										Computed: true,
									},
									"service_pod_spec": schema.StringAttribute{
										Computed: true,
									},
									"ssl_cert": schema.StringAttribute{
										Computed: true,
									},
									"storage_claim_name": schema.StringAttribute{
										Computed: true,
									},
									"storage_mount_path": schema.StringAttribute{
										Computed: true,
									},
									"work_dir": schema.StringAttribute{
										Computed:    true,
										Description: `Working directory path for workflow execution`,
									},
								},
								Validators: []validator.Object{
									objectvalidator.ConflictsWith(path.Expressions{
										path.MatchRelative().AtParent().AtName("aws_batch"),
										path.MatchRelative().AtParent().AtName("aws_cloud"),
										path.MatchRelative().AtParent().AtName("seqeracompute_platform"),
										path.MatchRelative().AtParent().AtName("google_lifesciences"),
										path.MatchRelative().AtParent().AtName("google_batch"),
										path.MatchRelative().AtParent().AtName("azure_batch"),
										path.MatchRelative().AtParent().AtName("lsf_platform"),
										path.MatchRelative().AtParent().AtName("slurm_platform"),
										path.MatchRelative().AtParent().AtName("eks_platform"),
										path.MatchRelative().AtParent().AtName("gke_platform"),
										path.MatchRelative().AtParent().AtName("uge_platform"),
										path.MatchRelative().AtParent().AtName("altair_platform"),
										path.MatchRelative().AtParent().AtName("moab_platform"),
									}...),
								},
							},
							"lsf_platform": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"compute_queue": schema.StringAttribute{
										Computed: true,
									},
									"environment": schema.ListNestedAttribute{
										Computed: true,
										NestedObject: schema.NestedAttributeObject{
											Attributes: map[string]schema.Attribute{
												"compute": schema.BoolAttribute{
													Computed: true,
												},
												"head": schema.BoolAttribute{
													Computed: true,
												},
												"name": schema.StringAttribute{
													Computed: true,
												},
												"value": schema.StringAttribute{
													Computed: true,
												},
											},
										},
										Description: `Array of environment variables for the compute environment`,
									},
									"head_job_options": schema.StringAttribute{
										Computed: true,
									},
									"head_queue": schema.StringAttribute{
										Computed: true,
									},
									"host_name": schema.StringAttribute{
										Computed: true,
									},
									"launch_dir": schema.StringAttribute{
										Computed: true,
									},
									"max_queue_size": schema.Int32Attribute{
										Computed: true,
									},
									"nextflow_config": schema.StringAttribute{
										Computed:    true,
										Description: `Nextflow configuration settings and parameters`,
									},
									"per_job_mem_limit": schema.BoolAttribute{
										Computed: true,
									},
									"per_task_reserve": schema.BoolAttribute{
										Computed: true,
									},
									"port": schema.Int32Attribute{
										Computed: true,
									},
									"post_run_script": schema.StringAttribute{
										Computed:    true,
										Description: `Shell script to execute after workflow completes`,
									},
									"pre_run_script": schema.StringAttribute{
										Computed:    true,
										Description: `Shell script to execute before workflow starts`,
									},
									"propagate_head_job_options": schema.BoolAttribute{
										Computed: true,
									},
									"unit_for_limits": schema.StringAttribute{
										Computed: true,
									},
									"user_name": schema.StringAttribute{
										Computed: true,
									},
									"work_dir": schema.StringAttribute{
										Computed:    true,
										Description: `Working directory path for workflow execution`,
									},
								},
								Validators: []validator.Object{
									objectvalidator.ConflictsWith(path.Expressions{
										path.MatchRelative().AtParent().AtName("aws_batch"),
										path.MatchRelative().AtParent().AtName("aws_cloud"),
										path.MatchRelative().AtParent().AtName("seqeracompute_platform"),
										path.MatchRelative().AtParent().AtName("google_lifesciences"),
										path.MatchRelative().AtParent().AtName("google_batch"),
										path.MatchRelative().AtParent().AtName("azure_batch"),
										path.MatchRelative().AtParent().AtName("slurm_platform"),
										path.MatchRelative().AtParent().AtName("k8s_platform"),
										path.MatchRelative().AtParent().AtName("eks_platform"),
										path.MatchRelative().AtParent().AtName("gke_platform"),
										path.MatchRelative().AtParent().AtName("uge_platform"),
										path.MatchRelative().AtParent().AtName("altair_platform"),
										path.MatchRelative().AtParent().AtName("moab_platform"),
									}...),
								},
							},
							"moab_platform": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"compute_queue": schema.StringAttribute{
										Computed: true,
									},
									"environment": schema.ListNestedAttribute{
										Computed: true,
										NestedObject: schema.NestedAttributeObject{
											Attributes: map[string]schema.Attribute{
												"compute": schema.BoolAttribute{
													Computed: true,
												},
												"head": schema.BoolAttribute{
													Computed: true,
												},
												"name": schema.StringAttribute{
													Computed: true,
												},
												"value": schema.StringAttribute{
													Computed: true,
												},
											},
										},
										Description: `Array of environment variables for the compute environment`,
									},
									"head_job_options": schema.StringAttribute{
										Computed: true,
									},
									"head_queue": schema.StringAttribute{
										Computed: true,
									},
									"host_name": schema.StringAttribute{
										Computed: true,
									},
									"launch_dir": schema.StringAttribute{
										Computed: true,
									},
									"max_queue_size": schema.Int32Attribute{
										Computed: true,
									},
									"nextflow_config": schema.StringAttribute{
										Computed:    true,
										Description: `Nextflow configuration settings and parameters`,
									},
									"port": schema.Int32Attribute{
										Computed: true,
									},
									"post_run_script": schema.StringAttribute{
										Computed:    true,
										Description: `Shell script to execute after workflow completes`,
									},
									"pre_run_script": schema.StringAttribute{
										Computed:    true,
										Description: `Shell script to execute before workflow starts`,
									},
									"propagate_head_job_options": schema.BoolAttribute{
										Computed: true,
									},
									"user_name": schema.StringAttribute{
										Computed: true,
									},
									"work_dir": schema.StringAttribute{
										Computed:    true,
										Description: `Working directory path for workflow execution`,
									},
								},
								Validators: []validator.Object{
									objectvalidator.ConflictsWith(path.Expressions{
										path.MatchRelative().AtParent().AtName("aws_batch"),
										path.MatchRelative().AtParent().AtName("aws_cloud"),
										path.MatchRelative().AtParent().AtName("seqeracompute_platform"),
										path.MatchRelative().AtParent().AtName("google_lifesciences"),
										path.MatchRelative().AtParent().AtName("google_batch"),
										path.MatchRelative().AtParent().AtName("azure_batch"),
										path.MatchRelative().AtParent().AtName("lsf_platform"),
										path.MatchRelative().AtParent().AtName("slurm_platform"),
										path.MatchRelative().AtParent().AtName("k8s_platform"),
										path.MatchRelative().AtParent().AtName("eks_platform"),
										path.MatchRelative().AtParent().AtName("gke_platform"),
										path.MatchRelative().AtParent().AtName("uge_platform"),
										path.MatchRelative().AtParent().AtName("altair_platform"),
									}...),
								},
							},
							"seqeracompute_platform": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"environment": schema.ListNestedAttribute{
										Computed: true,
										NestedObject: schema.NestedAttributeObject{
											Attributes: map[string]schema.Attribute{
												"compute": schema.BoolAttribute{
													Computed: true,
												},
												"head": schema.BoolAttribute{
													Computed: true,
												},
												"name": schema.StringAttribute{
													Computed: true,
												},
												"value": schema.StringAttribute{
													Computed: true,
												},
											},
										},
										Description: `Array of environment variables for the compute environment`,
									},
									"nextflow_config": schema.StringAttribute{
										Computed:    true,
										Description: `Nextflow configuration settings and parameters`,
									},
									"post_run_script": schema.StringAttribute{
										Computed:    true,
										Description: `Shell script to execute after workflow completes`,
									},
									"pre_run_script": schema.StringAttribute{
										Computed:    true,
										Description: `Shell script to execute before workflow starts`,
									},
									"region": schema.StringAttribute{
										Computed: true,
									},
									"work_dir": schema.StringAttribute{
										Computed:    true,
										Description: `Working directory path for workflow execution`,
									},
								},
								Validators: []validator.Object{
									objectvalidator.ConflictsWith(path.Expressions{
										path.MatchRelative().AtParent().AtName("aws_batch"),
										path.MatchRelative().AtParent().AtName("aws_cloud"),
										path.MatchRelative().AtParent().AtName("google_lifesciences"),
										path.MatchRelative().AtParent().AtName("google_batch"),
										path.MatchRelative().AtParent().AtName("azure_batch"),
										path.MatchRelative().AtParent().AtName("lsf_platform"),
										path.MatchRelative().AtParent().AtName("slurm_platform"),
										path.MatchRelative().AtParent().AtName("k8s_platform"),
										path.MatchRelative().AtParent().AtName("eks_platform"),
										path.MatchRelative().AtParent().AtName("gke_platform"),
										path.MatchRelative().AtParent().AtName("uge_platform"),
										path.MatchRelative().AtParent().AtName("altair_platform"),
										path.MatchRelative().AtParent().AtName("moab_platform"),
									}...),
								},
							},
							"slurm_platform": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"compute_queue": schema.StringAttribute{
										Computed: true,
									},
									"environment": schema.ListNestedAttribute{
										Computed: true,
										NestedObject: schema.NestedAttributeObject{
											Attributes: map[string]schema.Attribute{
												"compute": schema.BoolAttribute{
													Computed: true,
												},
												"head": schema.BoolAttribute{
													Computed: true,
												},
												"name": schema.StringAttribute{
													Computed: true,
												},
												"value": schema.StringAttribute{
													Computed: true,
												},
											},
										},
										Description: `Array of environment variables for the compute environment`,
									},
									"head_job_options": schema.StringAttribute{
										Computed: true,
									},
									"head_queue": schema.StringAttribute{
										Computed: true,
									},
									"host_name": schema.StringAttribute{
										Computed: true,
									},
									"launch_dir": schema.StringAttribute{
										Computed: true,
									},
									"max_queue_size": schema.Int32Attribute{
										Computed: true,
									},
									"nextflow_config": schema.StringAttribute{
										Computed:    true,
										Description: `Nextflow configuration settings and parameters`,
									},
									"port": schema.Int32Attribute{
										Computed: true,
									},
									"post_run_script": schema.StringAttribute{
										Computed:    true,
										Description: `Shell script to execute after workflow completes`,
									},
									"pre_run_script": schema.StringAttribute{
										Computed:    true,
										Description: `Shell script to execute before workflow starts`,
									},
									"propagate_head_job_options": schema.BoolAttribute{
										Computed: true,
									},
									"user_name": schema.StringAttribute{
										Computed: true,
									},
									"work_dir": schema.StringAttribute{
										Computed:    true,
										Description: `Working directory path for workflow execution`,
									},
								},
								Validators: []validator.Object{
									objectvalidator.ConflictsWith(path.Expressions{
										path.MatchRelative().AtParent().AtName("aws_batch"),
										path.MatchRelative().AtParent().AtName("aws_cloud"),
										path.MatchRelative().AtParent().AtName("seqeracompute_platform"),
										path.MatchRelative().AtParent().AtName("google_lifesciences"),
										path.MatchRelative().AtParent().AtName("google_batch"),
										path.MatchRelative().AtParent().AtName("azure_batch"),
										path.MatchRelative().AtParent().AtName("lsf_platform"),
										path.MatchRelative().AtParent().AtName("k8s_platform"),
										path.MatchRelative().AtParent().AtName("eks_platform"),
										path.MatchRelative().AtParent().AtName("gke_platform"),
										path.MatchRelative().AtParent().AtName("uge_platform"),
										path.MatchRelative().AtParent().AtName("altair_platform"),
										path.MatchRelative().AtParent().AtName("moab_platform"),
									}...),
								},
							},
							"uge_platform": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"compute_queue": schema.StringAttribute{
										Computed: true,
									},
									"environment": schema.ListNestedAttribute{
										Computed: true,
										NestedObject: schema.NestedAttributeObject{
											Attributes: map[string]schema.Attribute{
												"compute": schema.BoolAttribute{
													Computed: true,
												},
												"head": schema.BoolAttribute{
													Computed: true,
												},
												"name": schema.StringAttribute{
													Computed: true,
												},
												"value": schema.StringAttribute{
													Computed: true,
												},
											},
										},
										Description: `Array of environment variables for the compute environment`,
									},
									"head_job_options": schema.StringAttribute{
										Computed: true,
									},
									"head_queue": schema.StringAttribute{
										Computed: true,
									},
									"host_name": schema.StringAttribute{
										Computed: true,
									},
									"launch_dir": schema.StringAttribute{
										Computed: true,
									},
									"max_queue_size": schema.Int32Attribute{
										Computed: true,
									},
									"nextflow_config": schema.StringAttribute{
										Computed:    true,
										Description: `Nextflow configuration settings and parameters`,
									},
									"port": schema.Int32Attribute{
										Computed: true,
									},
									"post_run_script": schema.StringAttribute{
										Computed:    true,
										Description: `Shell script to execute after workflow completes`,
									},
									"pre_run_script": schema.StringAttribute{
										Computed:    true,
										Description: `Shell script to execute before workflow starts`,
									},
									"propagate_head_job_options": schema.BoolAttribute{
										Computed: true,
									},
									"user_name": schema.StringAttribute{
										Computed: true,
									},
									"work_dir": schema.StringAttribute{
										Computed:    true,
										Description: `Working directory path for workflow execution`,
									},
								},
								Validators: []validator.Object{
									objectvalidator.ConflictsWith(path.Expressions{
										path.MatchRelative().AtParent().AtName("aws_batch"),
										path.MatchRelative().AtParent().AtName("aws_cloud"),
										path.MatchRelative().AtParent().AtName("seqeracompute_platform"),
										path.MatchRelative().AtParent().AtName("google_lifesciences"),
										path.MatchRelative().AtParent().AtName("google_batch"),
										path.MatchRelative().AtParent().AtName("azure_batch"),
										path.MatchRelative().AtParent().AtName("lsf_platform"),
										path.MatchRelative().AtParent().AtName("slurm_platform"),
										path.MatchRelative().AtParent().AtName("k8s_platform"),
										path.MatchRelative().AtParent().AtName("eks_platform"),
										path.MatchRelative().AtParent().AtName("gke_platform"),
										path.MatchRelative().AtParent().AtName("altair_platform"),
										path.MatchRelative().AtParent().AtName("moab_platform"),
									}...),
								},
							},
						},
						MarkdownDescription: `Configuration settings for compute environments including work directories,` + "\n" +
							`pre/post run scripts, and environment-specific parameters.`,
					},
					"credentials_id": schema.StringAttribute{
						Computed: true,
					},
					"date_created": schema.StringAttribute{
						Computed: true,
						Validators: []validator.String{
							validators.IsRFC3339(),
						},
					},
					"deleted": schema.BoolAttribute{
						Computed: true,
					},
					"description": schema.StringAttribute{
						Computed: true,
					},
					"labels": schema.ListNestedAttribute{
						Computed: true,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"date_created": schema.StringAttribute{
									Computed:    true,
									Description: `Timestamp when the label was created`,
									Validators: []validator.String{
										validators.IsRFC3339(),
									},
								},
								"id": schema.Int64Attribute{
									Computed:    true,
									Description: `Unique numeric identifier for the label`,
								},
								"is_default": schema.BoolAttribute{
									Computed:    true,
									Description: `Flag indicating if this is a default system label`,
								},
								"is_dynamic": schema.BoolAttribute{
									Computed:    true,
									Description: `Flag indicating if the label value is dynamically generated`,
								},
								"is_interpolated": schema.BoolAttribute{
									Computed:    true,
									Description: `Flag indicating if the label value supports variable interpolation`,
								},
								"name": schema.StringAttribute{
									Computed:    true,
									Description: `Name or key of the label`,
								},
								"resource": schema.BoolAttribute{
									Computed:    true,
									Description: `Flag indicating if this is a resource-level label`,
								},
								"value": schema.StringAttribute{
									Computed:    true,
									Description: `Value associated with the label`,
								},
							},
						},
					},
					"last_updated": schema.StringAttribute{
						Computed: true,
						Validators: []validator.String{
							validators.IsRFC3339(),
						},
					},
					"last_used": schema.StringAttribute{
						Computed: true,
						Validators: []validator.String{
							validators.IsRFC3339(),
						},
					},
					"managed_identity_id": schema.StringAttribute{
						Computed: true,
					},
					"message": schema.StringAttribute{
						Computed: true,
					},
					"name": schema.StringAttribute{
						Computed: true,
					},
					"org_id": schema.Int64Attribute{
						Computed: true,
					},
					"platform": schema.StringAttribute{
						Computed:    true,
						Description: `must be one of ["aws-batch", "aws-cloud", "seqeracompute-platform", "google-lifesciences", "google-batch", "azure-batch", "k8s-platform", "eks-platform", "gke-platform", "uge-platform", "slurm-platform", "lsf-platform", "altair-platform"]`,
						Validators: []validator.String{
							stringvalidator.OneOf(
								"aws-batch",
								"aws-cloud",
								"seqeracompute-platform",
								"google-lifesciences",
								"google-batch",
								"azure-batch",
								"k8s-platform",
								"eks-platform",
								"gke-platform",
								"uge-platform",
								"slurm-platform",
								"lsf-platform",
								"altair-platform",
							),
						},
					},
					"primary": schema.BoolAttribute{
						Computed: true,
					},
					"status": schema.StringAttribute{
						Computed:    true,
						Description: `must be one of ["CREATING", "AVAILABLE", "ERRORED", "INVALID"]`,
						Validators: []validator.String{
							stringvalidator.OneOf(
								"CREATING",
								"AVAILABLE",
								"ERRORED",
								"INVALID",
							),
						},
					},
					"workspace_id": schema.Int64Attribute{
						Computed: true,
					},
				},
			},
			"compute_env_id": schema.StringAttribute{
				Computed:    true,
				Description: `Compute environment string identifier`,
			},
			"config": schema.SingleNestedAttribute{
				Required: true,
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplaceIfConfigured(),
				},
				Attributes: map[string]schema.Attribute{
					"altair_platform": schema.SingleNestedAttribute{
						Optional: true,
						PlanModifiers: []planmodifier.Object{
							objectplanmodifier.RequiresReplaceIfConfigured(),
						},
						Attributes: map[string]schema.Attribute{
							"compute_queue": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"environment": schema.ListNestedAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.List{
									listplanmodifier.RequiresReplaceIfConfigured(),
								},
								NestedObject: schema.NestedAttributeObject{
									PlanModifiers: []planmodifier.Object{
										objectplanmodifier.RequiresReplaceIfConfigured(),
									},
									Attributes: map[string]schema.Attribute{
										"compute": schema.BoolAttribute{
											Optional: true,
											PlanModifiers: []planmodifier.Bool{
												boolplanmodifier.RequiresReplaceIfConfigured(),
											},
											Description: `Requires replacement if changed.`,
										},
										"head": schema.BoolAttribute{
											Optional: true,
											PlanModifiers: []planmodifier.Bool{
												boolplanmodifier.RequiresReplaceIfConfigured(),
											},
											Description: `Requires replacement if changed.`,
										},
										"name": schema.StringAttribute{
											Optional: true,
											PlanModifiers: []planmodifier.String{
												stringplanmodifier.RequiresReplaceIfConfigured(),
											},
											Description: `Requires replacement if changed.`,
										},
										"value": schema.StringAttribute{
											Optional: true,
											PlanModifiers: []planmodifier.String{
												stringplanmodifier.RequiresReplaceIfConfigured(),
											},
											Description: `Requires replacement if changed.`,
										},
									},
								},
								Description: `Array of environment variables for the compute environment. Requires replacement if changed.`,
							},
							"head_job_options": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"head_queue": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"host_name": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"launch_dir": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"max_queue_size": schema.Int32Attribute{
								Optional: true,
								PlanModifiers: []planmodifier.Int32{
									int32planmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"nextflow_config": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Nextflow configuration settings and parameters. Requires replacement if changed.`,
							},
							"port": schema.Int32Attribute{
								Optional: true,
								PlanModifiers: []planmodifier.Int32{
									int32planmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"post_run_script": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Shell script to execute after workflow completes. Requires replacement if changed.`,
							},
							"pre_run_script": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Shell script to execute before workflow starts. Requires replacement if changed.`,
							},
							"propagate_head_job_options": schema.BoolAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.Bool{
									boolplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"user_name": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"work_dir": schema.StringAttribute{
								Required: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Working directory path for workflow execution. Requires replacement if changed.`,
							},
						},
						Description: `Requires replacement if changed.`,
						Validators: []validator.Object{
							objectvalidator.ConflictsWith(path.Expressions{
								path.MatchRelative().AtParent().AtName("eks_platform"),
								path.MatchRelative().AtParent().AtName("aws_batch"),
								path.MatchRelative().AtParent().AtName("aws_cloud"),
								path.MatchRelative().AtParent().AtName("azure_batch"),
								path.MatchRelative().AtParent().AtName("google_batch"),
								path.MatchRelative().AtParent().AtName("gke_platform"),
								path.MatchRelative().AtParent().AtName("google_lifesciences"),
								path.MatchRelative().AtParent().AtName("lsf_platform"),
								path.MatchRelative().AtParent().AtName("k8s_platform"),
								path.MatchRelative().AtParent().AtName("moab_platform"),
								path.MatchRelative().AtParent().AtName("seqeracompute_platform"),
								path.MatchRelative().AtParent().AtName("slurm_platform"),
								path.MatchRelative().AtParent().AtName("uge_platform"),
							}...),
						},
					},
					"aws_batch": schema.SingleNestedAttribute{
						Optional: true,
						PlanModifiers: []planmodifier.Object{
							objectplanmodifier.RequiresReplaceIfConfigured(),
						},
						Attributes: map[string]schema.Attribute{
							"cli_path": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"compute_job_role": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"compute_queue": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"dragen_instance_type": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"dragen_queue": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"environment": schema.ListNestedAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.List{
									listplanmodifier.RequiresReplaceIfConfigured(),
								},
								NestedObject: schema.NestedAttributeObject{
									PlanModifiers: []planmodifier.Object{
										objectplanmodifier.RequiresReplaceIfConfigured(),
									},
									Attributes: map[string]schema.Attribute{
										"compute": schema.BoolAttribute{
											Optional: true,
											PlanModifiers: []planmodifier.Bool{
												boolplanmodifier.RequiresReplaceIfConfigured(),
											},
											Description: `Requires replacement if changed.`,
										},
										"head": schema.BoolAttribute{
											Optional: true,
											PlanModifiers: []planmodifier.Bool{
												boolplanmodifier.RequiresReplaceIfConfigured(),
											},
											Description: `Requires replacement if changed.`,
										},
										"name": schema.StringAttribute{
											Optional: true,
											PlanModifiers: []planmodifier.String{
												stringplanmodifier.RequiresReplaceIfConfigured(),
											},
											Description: `Requires replacement if changed.`,
										},
										"value": schema.StringAttribute{
											Optional: true,
											PlanModifiers: []planmodifier.String{
												stringplanmodifier.RequiresReplaceIfConfigured(),
											},
											Description: `Requires replacement if changed.`,
										},
									},
								},
								Description: `Array of environment variables for the compute environment. Requires replacement if changed.`,
							},
							"execution_role": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"forge": schema.SingleNestedAttribute{
								Required: true,
								PlanModifiers: []planmodifier.Object{
									objectplanmodifier.RequiresReplaceIfConfigured(),
								},
								Attributes: map[string]schema.Attribute{
									"alloc_strategy": schema.StringAttribute{
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
										},
										Description: `must be one of ["BEST_FIT", "BEST_FIT_PROGRESSIVE", "SPOT_CAPACITY_OPTIMIZED", "SPOT_PRICE_CAPACITY_OPTIMIZED"]; Requires replacement if changed.`,
										Validators: []validator.String{
											stringvalidator.OneOf(
												"BEST_FIT",
												"BEST_FIT_PROGRESSIVE",
												"SPOT_CAPACITY_OPTIMIZED",
												"SPOT_PRICE_CAPACITY_OPTIMIZED",
											),
										},
									},
									"allow_buckets": schema.ListAttribute{
										Optional: true,
										PlanModifiers: []planmodifier.List{
											listplanmodifier.RequiresReplaceIfConfigured(),
										},
										ElementType: types.StringType,
										Description: `Requires replacement if changed.`,
									},
									"arm64_enabled": schema.BoolAttribute{
										Optional: true,
										PlanModifiers: []planmodifier.Bool{
											boolplanmodifier.RequiresReplaceIfConfigured(),
										},
										Description: `Requires replacement if changed.`,
									},
									"bid_percentage": schema.Int32Attribute{
										Optional: true,
										PlanModifiers: []planmodifier.Int32{
											int32planmodifier.RequiresReplaceIfConfigured(),
										},
										Description: `Requires replacement if changed.`,
									},
									"dispose_on_deletion": schema.BoolAttribute{
										Optional: true,
										PlanModifiers: []planmodifier.Bool{
											boolplanmodifier.RequiresReplaceIfConfigured(),
										},
										Description: `Requires replacement if changed.`,
									},
									"dragen_ami_id": schema.StringAttribute{
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
										},
										Description: `Requires replacement if changed.`,
									},
									"dragen_enabled": schema.BoolAttribute{
										Optional: true,
										PlanModifiers: []planmodifier.Bool{
											boolplanmodifier.RequiresReplaceIfConfigured(),
										},
										Description: `Requires replacement if changed.`,
									},
									"dragen_instance_type": schema.StringAttribute{
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
										},
										Description: `Requires replacement if changed.`,
									},
									"ebs_auto_scale": schema.BoolAttribute{
										Optional: true,
										PlanModifiers: []planmodifier.Bool{
											boolplanmodifier.RequiresReplaceIfConfigured(),
										},
										Description: `Requires replacement if changed.`,
									},
									"ebs_block_size": schema.Int32Attribute{
										Optional: true,
										PlanModifiers: []planmodifier.Int32{
											int32planmodifier.RequiresReplaceIfConfigured(),
										},
										Description: `Requires replacement if changed.`,
									},
									"ebs_boot_size": schema.Int32Attribute{
										Optional: true,
										PlanModifiers: []planmodifier.Int32{
											int32planmodifier.RequiresReplaceIfConfigured(),
										},
										Description: `Requires replacement if changed.`,
									},
									"ec2_key_pair": schema.StringAttribute{
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
										},
										Description: `Requires replacement if changed.`,
									},
									"ecs_config": schema.StringAttribute{
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
										},
										Description: `Requires replacement if changed.`,
									},
									"efs_create": schema.BoolAttribute{
										Optional: true,
										PlanModifiers: []planmodifier.Bool{
											boolplanmodifier.RequiresReplaceIfConfigured(),
										},
										Description: `Requires replacement if changed.`,
									},
									"efs_id": schema.StringAttribute{
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
										},
										Description: `Requires replacement if changed.`,
									},
									"efs_mount": schema.StringAttribute{
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
										},
										Description: `Requires replacement if changed.`,
									},
									"fargate_head_enabled": schema.BoolAttribute{
										Optional: true,
										PlanModifiers: []planmodifier.Bool{
											boolplanmodifier.RequiresReplaceIfConfigured(),
										},
										Description: `Requires replacement if changed.`,
									},
									"fsx_mount": schema.StringAttribute{
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
										},
										Description: `Requires replacement if changed.`,
									},
									"fsx_name": schema.StringAttribute{
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
										},
										Description: `Requires replacement if changed.`,
									},
									"fsx_size": schema.Int32Attribute{
										Optional: true,
										PlanModifiers: []planmodifier.Int32{
											int32planmodifier.RequiresReplaceIfConfigured(),
										},
										Description: `Requires replacement if changed.`,
									},
									"fusion_enabled": schema.BoolAttribute{
										Optional: true,
										PlanModifiers: []planmodifier.Bool{
											boolplanmodifier.RequiresReplaceIfConfigured(),
										},
										Description: `Requires replacement if changed.`,
									},
									"gpu_enabled": schema.BoolAttribute{
										Optional: true,
										PlanModifiers: []planmodifier.Bool{
											boolplanmodifier.RequiresReplaceIfConfigured(),
										},
										Description: `Requires replacement if changed.`,
									},
									"image_id": schema.StringAttribute{
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
										},
										Description: `Requires replacement if changed.`,
									},
									"instance_types": schema.ListAttribute{
										Optional: true,
										PlanModifiers: []planmodifier.List{
											listplanmodifier.RequiresReplaceIfConfigured(),
										},
										ElementType: types.StringType,
										Description: `Requires replacement if changed.`,
									},
									"max_cpus": schema.Int32Attribute{
										Required: true,
										PlanModifiers: []planmodifier.Int32{
											int32planmodifier.RequiresReplaceIfConfigured(),
										},
										Description: `Requires replacement if changed.`,
									},
									"min_cpus": schema.Int32Attribute{
										Required: true,
										PlanModifiers: []planmodifier.Int32{
											int32planmodifier.RequiresReplaceIfConfigured(),
										},
										Description: `Requires replacement if changed.`,
									},
									"security_groups": schema.ListAttribute{
										Optional: true,
										PlanModifiers: []planmodifier.List{
											listplanmodifier.RequiresReplaceIfConfigured(),
										},
										ElementType: types.StringType,
										Description: `Requires replacement if changed.`,
									},
									"subnets": schema.ListAttribute{
										Optional: true,
										PlanModifiers: []planmodifier.List{
											listplanmodifier.RequiresReplaceIfConfigured(),
										},
										ElementType: types.StringType,
										Description: `Requires replacement if changed.`,
									},
									"type": schema.StringAttribute{
										Required: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
										},
										Description: `must be one of ["SPOT", "EC2"]; Requires replacement if changed.`,
										Validators: []validator.String{
											stringvalidator.OneOf(
												"SPOT",
												"EC2",
											),
										},
									},
									"vpc_id": schema.StringAttribute{
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
										},
										Description: `Requires replacement if changed.`,
									},
								},
								Description: `Requires replacement if changed.`,
							},
							"fusion_snapshots": schema.BoolAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.Bool{
									boolplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"fusion2_enabled": schema.BoolAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.Bool{
									boolplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"head_job_cpus": schema.Int32Attribute{
								Optional: true,
								PlanModifiers: []planmodifier.Int32{
									int32planmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"head_job_memory_mb": schema.Int32Attribute{
								Optional: true,
								PlanModifiers: []planmodifier.Int32{
									int32planmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"head_job_role": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"head_queue": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"log_group": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"lustre_id": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								DeprecationMessage: `This will be removed in a future release, please migrate away from it as soon as possible`,
								Description:        `Requires replacement if changed.`,
							},
							"nextflow_config": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Nextflow configuration settings and parameters. Requires replacement if changed.`,
							},
							"nvnme_storage_enabled": schema.BoolAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.Bool{
									boolplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"post_run_script": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Shell script to execute after workflow completes. Requires replacement if changed.`,
							},
							"pre_run_script": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Shell script to execute before workflow starts. Requires replacement if changed.`,
							},
							"region": schema.StringAttribute{
								Required: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"storage_type": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								DeprecationMessage: `This will be removed in a future release, please migrate away from it as soon as possible`,
								Description:        `Requires replacement if changed.`,
							},
							"volumes": schema.ListAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.List{
									listplanmodifier.RequiresReplaceIfConfigured(),
								},
								ElementType: types.StringType,
								Description: `Requires replacement if changed.`,
							},
							"wave_enabled": schema.BoolAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.Bool{
									boolplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"work_dir": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Working directory path for workflow execution. Requires replacement if changed.`,
							},
						},
						Description: `Requires replacement if changed.`,
						Validators: []validator.Object{
							objectvalidator.ConflictsWith(path.Expressions{
								path.MatchRelative().AtParent().AtName("altair_platform"),
								path.MatchRelative().AtParent().AtName("eks_platform"),
								path.MatchRelative().AtParent().AtName("aws_cloud"),
								path.MatchRelative().AtParent().AtName("azure_batch"),
								path.MatchRelative().AtParent().AtName("google_batch"),
								path.MatchRelative().AtParent().AtName("gke_platform"),
								path.MatchRelative().AtParent().AtName("google_lifesciences"),
								path.MatchRelative().AtParent().AtName("lsf_platform"),
								path.MatchRelative().AtParent().AtName("k8s_platform"),
								path.MatchRelative().AtParent().AtName("moab_platform"),
								path.MatchRelative().AtParent().AtName("seqeracompute_platform"),
								path.MatchRelative().AtParent().AtName("slurm_platform"),
								path.MatchRelative().AtParent().AtName("uge_platform"),
							}...),
						},
					},
					"aws_cloud": schema.SingleNestedAttribute{
						Optional: true,
						PlanModifiers: []planmodifier.Object{
							objectplanmodifier.RequiresReplaceIfConfigured(),
						},
						Attributes: map[string]schema.Attribute{
							"allow_buckets": schema.ListAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.List{
									listplanmodifier.RequiresReplaceIfConfigured(),
								},
								ElementType: types.StringType,
								Description: `Requires replacement if changed.`,
							},
							"arm64_enabled": schema.BoolAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.Bool{
									boolplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"ebs_boot_size": schema.Int32Attribute{
								Optional: true,
								PlanModifiers: []planmodifier.Int32{
									int32planmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"ec2_key_pair": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"environment": schema.ListNestedAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.List{
									listplanmodifier.RequiresReplaceIfConfigured(),
								},
								NestedObject: schema.NestedAttributeObject{
									PlanModifiers: []planmodifier.Object{
										objectplanmodifier.RequiresReplaceIfConfigured(),
									},
									Attributes: map[string]schema.Attribute{
										"compute": schema.BoolAttribute{
											Optional: true,
											PlanModifiers: []planmodifier.Bool{
												boolplanmodifier.RequiresReplaceIfConfigured(),
											},
											Description: `Requires replacement if changed.`,
										},
										"head": schema.BoolAttribute{
											Optional: true,
											PlanModifiers: []planmodifier.Bool{
												boolplanmodifier.RequiresReplaceIfConfigured(),
											},
											Description: `Requires replacement if changed.`,
										},
										"name": schema.StringAttribute{
											Optional: true,
											PlanModifiers: []planmodifier.String{
												stringplanmodifier.RequiresReplaceIfConfigured(),
											},
											Description: `Requires replacement if changed.`,
										},
										"value": schema.StringAttribute{
											Optional: true,
											PlanModifiers: []planmodifier.String{
												stringplanmodifier.RequiresReplaceIfConfigured(),
											},
											Description: `Requires replacement if changed.`,
										},
									},
								},
								Description: `Array of environment variables for the compute environment. Requires replacement if changed.`,
							},
							"fusion2_enabled": schema.BoolAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.Bool{
									boolplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"gpu_enabled": schema.BoolAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.Bool{
									boolplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"image_id": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"instance_profile_arn": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"instance_type": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"log_group": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"nextflow_config": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Nextflow configuration settings and parameters. Requires replacement if changed.`,
							},
							"post_run_script": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Shell script to execute after workflow completes. Requires replacement if changed.`,
							},
							"pre_run_script": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Shell script to execute before workflow starts. Requires replacement if changed.`,
							},
							"region": schema.StringAttribute{
								Required: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"security_groups": schema.ListAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.List{
									listplanmodifier.RequiresReplaceIfConfigured(),
								},
								ElementType: types.StringType,
								Description: `Requires replacement if changed.`,
							},
							"subnet_id": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"wave_enabled": schema.BoolAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.Bool{
									boolplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"work_dir": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Working directory path for workflow execution. Requires replacement if changed.`,
							},
						},
						Description: `Requires replacement if changed.`,
						Validators: []validator.Object{
							objectvalidator.ConflictsWith(path.Expressions{
								path.MatchRelative().AtParent().AtName("altair_platform"),
								path.MatchRelative().AtParent().AtName("eks_platform"),
								path.MatchRelative().AtParent().AtName("aws_batch"),
								path.MatchRelative().AtParent().AtName("azure_batch"),
								path.MatchRelative().AtParent().AtName("google_batch"),
								path.MatchRelative().AtParent().AtName("gke_platform"),
								path.MatchRelative().AtParent().AtName("google_lifesciences"),
								path.MatchRelative().AtParent().AtName("lsf_platform"),
								path.MatchRelative().AtParent().AtName("k8s_platform"),
								path.MatchRelative().AtParent().AtName("moab_platform"),
								path.MatchRelative().AtParent().AtName("seqeracompute_platform"),
								path.MatchRelative().AtParent().AtName("slurm_platform"),
								path.MatchRelative().AtParent().AtName("uge_platform"),
							}...),
						},
					},
					"azure_batch": schema.SingleNestedAttribute{
						Optional: true,
						PlanModifiers: []planmodifier.Object{
							objectplanmodifier.RequiresReplaceIfConfigured(),
						},
						Attributes: map[string]schema.Attribute{
							"auto_pool_mode": schema.BoolAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.Bool{
									boolplanmodifier.RequiresReplaceIfConfigured(),
								},
								DeprecationMessage: `This will be removed in a future release, please migrate away from it as soon as possible`,
								Description:        `Requires replacement if changed.`,
							},
							"delete_jobs_on_completion": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `must be one of ["on_success", "always", "never"]; Requires replacement if changed.`,
								Validators: []validator.String{
									stringvalidator.OneOf(
										"on_success",
										"always",
										"never",
									),
								},
							},
							"delete_pools_on_completion": schema.BoolAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.Bool{
									boolplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"environment": schema.ListNestedAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.List{
									listplanmodifier.RequiresReplaceIfConfigured(),
								},
								NestedObject: schema.NestedAttributeObject{
									PlanModifiers: []planmodifier.Object{
										objectplanmodifier.RequiresReplaceIfConfigured(),
									},
									Attributes: map[string]schema.Attribute{
										"compute": schema.BoolAttribute{
											Optional: true,
											PlanModifiers: []planmodifier.Bool{
												boolplanmodifier.RequiresReplaceIfConfigured(),
											},
											Description: `Requires replacement if changed.`,
										},
										"head": schema.BoolAttribute{
											Optional: true,
											PlanModifiers: []planmodifier.Bool{
												boolplanmodifier.RequiresReplaceIfConfigured(),
											},
											Description: `Requires replacement if changed.`,
										},
										"name": schema.StringAttribute{
											Optional: true,
											PlanModifiers: []planmodifier.String{
												stringplanmodifier.RequiresReplaceIfConfigured(),
											},
											Description: `Requires replacement if changed.`,
										},
										"value": schema.StringAttribute{
											Optional: true,
											PlanModifiers: []planmodifier.String{
												stringplanmodifier.RequiresReplaceIfConfigured(),
											},
											Description: `Requires replacement if changed.`,
										},
									},
								},
								Description: `Array of environment variables for the compute environment. Requires replacement if changed.`,
							},
							"forge": schema.SingleNestedAttribute{
								Required: true,
								PlanModifiers: []planmodifier.Object{
									objectplanmodifier.RequiresReplaceIfConfigured(),
								},
								Attributes: map[string]schema.Attribute{
									"auto_scale": schema.BoolAttribute{
										Optional: true,
										PlanModifiers: []planmodifier.Bool{
											boolplanmodifier.RequiresReplaceIfConfigured(),
										},
										Description: `Requires replacement if changed.`,
									},
									"container_reg_ids": schema.ListAttribute{
										Optional: true,
										PlanModifiers: []planmodifier.List{
											listplanmodifier.RequiresReplaceIfConfigured(),
										},
										ElementType: types.StringType,
										Description: `Requires replacement if changed.`,
									},
									"dispose_on_deletion": schema.BoolAttribute{
										Optional: true,
										PlanModifiers: []planmodifier.Bool{
											boolplanmodifier.RequiresReplaceIfConfigured(),
										},
										Description: `Requires replacement if changed.`,
									},
									"vm_count": schema.Int32Attribute{
										Required: true,
										PlanModifiers: []planmodifier.Int32{
											int32planmodifier.RequiresReplaceIfConfigured(),
										},
										Description: `Requires replacement if changed.`,
									},
									"vm_type": schema.StringAttribute{
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
										},
										Description: `Requires replacement if changed.`,
									},
								},
								Description: `Requires replacement if changed.`,
							},
							"fusion2_enabled": schema.BoolAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.Bool{
									boolplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"head_pool": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"managed_identity_client_id": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"nextflow_config": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Nextflow configuration settings and parameters. Requires replacement if changed.`,
							},
							"post_run_script": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Shell script to execute after workflow completes. Requires replacement if changed.`,
							},
							"pre_run_script": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Shell script to execute before workflow starts. Requires replacement if changed.`,
							},
							"region": schema.StringAttribute{
								Required: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"token_duration": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"wave_enabled": schema.BoolAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.Bool{
									boolplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"work_dir": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Working directory path for workflow execution. Requires replacement if changed.`,
							},
						},
						Description: `Requires replacement if changed.`,
						Validators: []validator.Object{
							objectvalidator.ConflictsWith(path.Expressions{
								path.MatchRelative().AtParent().AtName("altair_platform"),
								path.MatchRelative().AtParent().AtName("eks_platform"),
								path.MatchRelative().AtParent().AtName("aws_batch"),
								path.MatchRelative().AtParent().AtName("aws_cloud"),
								path.MatchRelative().AtParent().AtName("google_batch"),
								path.MatchRelative().AtParent().AtName("gke_platform"),
								path.MatchRelative().AtParent().AtName("google_lifesciences"),
								path.MatchRelative().AtParent().AtName("lsf_platform"),
								path.MatchRelative().AtParent().AtName("k8s_platform"),
								path.MatchRelative().AtParent().AtName("moab_platform"),
								path.MatchRelative().AtParent().AtName("seqeracompute_platform"),
								path.MatchRelative().AtParent().AtName("slurm_platform"),
								path.MatchRelative().AtParent().AtName("uge_platform"),
							}...),
						},
					},
					"eks_platform": schema.SingleNestedAttribute{
						Optional: true,
						PlanModifiers: []planmodifier.Object{
							objectplanmodifier.RequiresReplaceIfConfigured(),
						},
						Attributes: map[string]schema.Attribute{
							"cluster_name": schema.StringAttribute{
								Required: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `The AWS EKS cluster name. Requires replacement if changed.`,
							},
							"compute_service_account": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"environment": schema.ListNestedAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.List{
									listplanmodifier.RequiresReplaceIfConfigured(),
								},
								NestedObject: schema.NestedAttributeObject{
									PlanModifiers: []planmodifier.Object{
										objectplanmodifier.RequiresReplaceIfConfigured(),
									},
									Attributes: map[string]schema.Attribute{
										"compute": schema.BoolAttribute{
											Optional: true,
											PlanModifiers: []planmodifier.Bool{
												boolplanmodifier.RequiresReplaceIfConfigured(),
											},
											Description: `Requires replacement if changed.`,
										},
										"head": schema.BoolAttribute{
											Optional: true,
											PlanModifiers: []planmodifier.Bool{
												boolplanmodifier.RequiresReplaceIfConfigured(),
											},
											Description: `Requires replacement if changed.`,
										},
										"name": schema.StringAttribute{
											Optional: true,
											PlanModifiers: []planmodifier.String{
												stringplanmodifier.RequiresReplaceIfConfigured(),
											},
											Description: `Requires replacement if changed.`,
										},
										"value": schema.StringAttribute{
											Optional: true,
											PlanModifiers: []planmodifier.String{
												stringplanmodifier.RequiresReplaceIfConfigured(),
											},
											Description: `Requires replacement if changed.`,
										},
									},
								},
								Description: `Array of environment variables for the compute environment. Requires replacement if changed.`,
							},
							"fusion2_enabled": schema.BoolAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.Bool{
									boolplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"head_job_cpus": schema.Int32Attribute{
								Optional: true,
								PlanModifiers: []planmodifier.Int32{
									int32planmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"head_job_memory_mb": schema.Int32Attribute{
								Optional: true,
								PlanModifiers: []planmodifier.Int32{
									int32planmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"head_pod_spec": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"head_service_account": schema.StringAttribute{
								Required: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"namespace": schema.StringAttribute{
								Required: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"nextflow_config": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Nextflow configuration settings and parameters. Requires replacement if changed.`,
							},
							"pod_cleanup": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `must be one of ["on_success", "always", "never"]; Requires replacement if changed.`,
								Validators: []validator.String{
									stringvalidator.OneOf(
										"on_success",
										"always",
										"never",
									),
								},
							},
							"post_run_script": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Shell script to execute after workflow completes. Requires replacement if changed.`,
							},
							"pre_run_script": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Shell script to execute before workflow starts. Requires replacement if changed.`,
							},
							"region": schema.StringAttribute{
								Required: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `AWS region. Requires replacement if changed.`,
							},
							"server": schema.StringAttribute{
								Required: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"service_pod_spec": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"ssl_cert": schema.StringAttribute{
								Required: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"storage_claim_name": schema.StringAttribute{
								Required: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"storage_mount_path": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"wave_enabled": schema.BoolAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.Bool{
									boolplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"work_dir": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Working directory path for workflow execution. Requires replacement if changed.`,
							},
						},
						Description: `Requires replacement if changed.`,
						Validators: []validator.Object{
							objectvalidator.ConflictsWith(path.Expressions{
								path.MatchRelative().AtParent().AtName("altair_platform"),
								path.MatchRelative().AtParent().AtName("aws_batch"),
								path.MatchRelative().AtParent().AtName("aws_cloud"),
								path.MatchRelative().AtParent().AtName("azure_batch"),
								path.MatchRelative().AtParent().AtName("google_batch"),
								path.MatchRelative().AtParent().AtName("gke_platform"),
								path.MatchRelative().AtParent().AtName("google_lifesciences"),
								path.MatchRelative().AtParent().AtName("lsf_platform"),
								path.MatchRelative().AtParent().AtName("k8s_platform"),
								path.MatchRelative().AtParent().AtName("moab_platform"),
								path.MatchRelative().AtParent().AtName("seqeracompute_platform"),
								path.MatchRelative().AtParent().AtName("slurm_platform"),
								path.MatchRelative().AtParent().AtName("uge_platform"),
							}...),
						},
					},
					"gke_platform": schema.SingleNestedAttribute{
						Optional: true,
						PlanModifiers: []planmodifier.Object{
							objectplanmodifier.RequiresReplaceIfConfigured(),
						},
						Attributes: map[string]schema.Attribute{
							"cluster_name": schema.StringAttribute{
								Required: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `The GKE cluster name. Requires replacement if changed.`,
							},
							"compute_service_account": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"environment": schema.ListNestedAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.List{
									listplanmodifier.RequiresReplaceIfConfigured(),
								},
								NestedObject: schema.NestedAttributeObject{
									PlanModifiers: []planmodifier.Object{
										objectplanmodifier.RequiresReplaceIfConfigured(),
									},
									Attributes: map[string]schema.Attribute{
										"compute": schema.BoolAttribute{
											Optional: true,
											PlanModifiers: []planmodifier.Bool{
												boolplanmodifier.RequiresReplaceIfConfigured(),
											},
											Description: `Requires replacement if changed.`,
										},
										"head": schema.BoolAttribute{
											Optional: true,
											PlanModifiers: []planmodifier.Bool{
												boolplanmodifier.RequiresReplaceIfConfigured(),
											},
											Description: `Requires replacement if changed.`,
										},
										"name": schema.StringAttribute{
											Optional: true,
											PlanModifiers: []planmodifier.String{
												stringplanmodifier.RequiresReplaceIfConfigured(),
											},
											Description: `Requires replacement if changed.`,
										},
										"value": schema.StringAttribute{
											Optional: true,
											PlanModifiers: []planmodifier.String{
												stringplanmodifier.RequiresReplaceIfConfigured(),
											},
											Description: `Requires replacement if changed.`,
										},
									},
								},
								Description: `Array of environment variables for the compute environment. Requires replacement if changed.`,
							},
							"fusion2_enabled": schema.BoolAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.Bool{
									boolplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"head_job_cpus": schema.Int32Attribute{
								Optional: true,
								PlanModifiers: []planmodifier.Int32{
									int32planmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"head_job_memory_mb": schema.Int32Attribute{
								Optional: true,
								PlanModifiers: []planmodifier.Int32{
									int32planmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"head_pod_spec": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"head_service_account": schema.StringAttribute{
								Required: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"namespace": schema.StringAttribute{
								Required: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"nextflow_config": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Nextflow configuration settings and parameters. Requires replacement if changed.`,
							},
							"pod_cleanup": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `must be one of ["on_success", "always", "never"]; Requires replacement if changed.`,
								Validators: []validator.String{
									stringvalidator.OneOf(
										"on_success",
										"always",
										"never",
									),
								},
							},
							"post_run_script": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Shell script to execute after workflow completes. Requires replacement if changed.`,
							},
							"pre_run_script": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Shell script to execute before workflow starts. Requires replacement if changed.`,
							},
							"region": schema.StringAttribute{
								Required: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `The GKE cluster region - or - zone. Requires replacement if changed.`,
							},
							"server": schema.StringAttribute{
								Required: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"service_pod_spec": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"ssl_cert": schema.StringAttribute{
								Required: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"storage_claim_name": schema.StringAttribute{
								Required: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"storage_mount_path": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"wave_enabled": schema.BoolAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.Bool{
									boolplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"work_dir": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Working directory path for workflow execution. Requires replacement if changed.`,
							},
						},
						Description: `Requires replacement if changed.`,
						Validators: []validator.Object{
							objectvalidator.ConflictsWith(path.Expressions{
								path.MatchRelative().AtParent().AtName("altair_platform"),
								path.MatchRelative().AtParent().AtName("eks_platform"),
								path.MatchRelative().AtParent().AtName("aws_batch"),
								path.MatchRelative().AtParent().AtName("aws_cloud"),
								path.MatchRelative().AtParent().AtName("azure_batch"),
								path.MatchRelative().AtParent().AtName("google_batch"),
								path.MatchRelative().AtParent().AtName("google_lifesciences"),
								path.MatchRelative().AtParent().AtName("lsf_platform"),
								path.MatchRelative().AtParent().AtName("k8s_platform"),
								path.MatchRelative().AtParent().AtName("moab_platform"),
								path.MatchRelative().AtParent().AtName("seqeracompute_platform"),
								path.MatchRelative().AtParent().AtName("slurm_platform"),
								path.MatchRelative().AtParent().AtName("uge_platform"),
							}...),
						},
					},
					"google_batch": schema.SingleNestedAttribute{
						Optional: true,
						PlanModifiers: []planmodifier.Object{
							objectplanmodifier.RequiresReplaceIfConfigured(),
						},
						Attributes: map[string]schema.Attribute{
							"boot_disk_size_gb": schema.Int32Attribute{
								Optional: true,
								PlanModifiers: []planmodifier.Int32{
									int32planmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"compute_jobs_instance_template": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"copy_image": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"cpu_platform": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"debug_mode": schema.Int32Attribute{
								Optional: true,
								PlanModifiers: []planmodifier.Int32{
									int32planmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"environment": schema.ListNestedAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.List{
									listplanmodifier.RequiresReplaceIfConfigured(),
								},
								NestedObject: schema.NestedAttributeObject{
									PlanModifiers: []planmodifier.Object{
										objectplanmodifier.RequiresReplaceIfConfigured(),
									},
									Attributes: map[string]schema.Attribute{
										"compute": schema.BoolAttribute{
											Optional: true,
											PlanModifiers: []planmodifier.Bool{
												boolplanmodifier.RequiresReplaceIfConfigured(),
											},
											Description: `Requires replacement if changed.`,
										},
										"head": schema.BoolAttribute{
											Optional: true,
											PlanModifiers: []planmodifier.Bool{
												boolplanmodifier.RequiresReplaceIfConfigured(),
											},
											Description: `Requires replacement if changed.`,
										},
										"name": schema.StringAttribute{
											Optional: true,
											PlanModifiers: []planmodifier.String{
												stringplanmodifier.RequiresReplaceIfConfigured(),
											},
											Description: `Requires replacement if changed.`,
										},
										"value": schema.StringAttribute{
											Optional: true,
											PlanModifiers: []planmodifier.String{
												stringplanmodifier.RequiresReplaceIfConfigured(),
											},
											Description: `Requires replacement if changed.`,
										},
									},
								},
								Description: `Array of environment variables for the compute environment. Requires replacement if changed.`,
							},
							"fusion2_enabled": schema.BoolAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.Bool{
									boolplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"head_job_cpus": schema.Int32Attribute{
								Optional: true,
								PlanModifiers: []planmodifier.Int32{
									int32planmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"head_job_instance_template": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"head_job_memory_mb": schema.Int32Attribute{
								Optional: true,
								PlanModifiers: []planmodifier.Int32{
									int32planmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"labels": schema.MapAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.Map{
									mapplanmodifier.RequiresReplaceIfConfigured(),
								},
								ElementType: types.StringType,
								Description: `Requires replacement if changed.`,
							},
							"location": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"machine_type": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"network": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"nextflow_config": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Nextflow configuration settings and parameters. Requires replacement if changed.`,
							},
							"nfs_mount": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"nfs_target": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"post_run_script": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Shell script to execute after workflow completes. Requires replacement if changed.`,
							},
							"pre_run_script": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Shell script to execute before workflow starts. Requires replacement if changed.`,
							},
							"project_id": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"service_account": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"spot": schema.BoolAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.Bool{
									boolplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"ssh_daemon": schema.BoolAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.Bool{
									boolplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"ssh_image": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"subnetwork": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"use_private_address": schema.BoolAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.Bool{
									boolplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"wave_enabled": schema.BoolAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.Bool{
									boolplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"work_dir": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Working directory path for workflow execution. Requires replacement if changed.`,
							},
						},
						Description: `Requires replacement if changed.`,
						Validators: []validator.Object{
							objectvalidator.ConflictsWith(path.Expressions{
								path.MatchRelative().AtParent().AtName("altair_platform"),
								path.MatchRelative().AtParent().AtName("eks_platform"),
								path.MatchRelative().AtParent().AtName("aws_batch"),
								path.MatchRelative().AtParent().AtName("aws_cloud"),
								path.MatchRelative().AtParent().AtName("azure_batch"),
								path.MatchRelative().AtParent().AtName("gke_platform"),
								path.MatchRelative().AtParent().AtName("google_lifesciences"),
								path.MatchRelative().AtParent().AtName("lsf_platform"),
								path.MatchRelative().AtParent().AtName("k8s_platform"),
								path.MatchRelative().AtParent().AtName("moab_platform"),
								path.MatchRelative().AtParent().AtName("seqeracompute_platform"),
								path.MatchRelative().AtParent().AtName("slurm_platform"),
								path.MatchRelative().AtParent().AtName("uge_platform"),
							}...),
						},
					},
					"google_lifesciences": schema.SingleNestedAttribute{
						Optional: true,
						PlanModifiers: []planmodifier.Object{
							objectplanmodifier.RequiresReplaceIfConfigured(),
						},
						Attributes: map[string]schema.Attribute{
							"boot_disk_size_gb": schema.Int32Attribute{
								Optional: true,
								PlanModifiers: []planmodifier.Int32{
									int32planmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"copy_image": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"debug_mode": schema.Int32Attribute{
								Optional: true,
								PlanModifiers: []planmodifier.Int32{
									int32planmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"environment": schema.ListNestedAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.List{
									listplanmodifier.RequiresReplaceIfConfigured(),
								},
								NestedObject: schema.NestedAttributeObject{
									PlanModifiers: []planmodifier.Object{
										objectplanmodifier.RequiresReplaceIfConfigured(),
									},
									Attributes: map[string]schema.Attribute{
										"compute": schema.BoolAttribute{
											Optional: true,
											PlanModifiers: []planmodifier.Bool{
												boolplanmodifier.RequiresReplaceIfConfigured(),
											},
											Description: `Requires replacement if changed.`,
										},
										"head": schema.BoolAttribute{
											Optional: true,
											PlanModifiers: []planmodifier.Bool{
												boolplanmodifier.RequiresReplaceIfConfigured(),
											},
											Description: `Requires replacement if changed.`,
										},
										"name": schema.StringAttribute{
											Optional: true,
											PlanModifiers: []planmodifier.String{
												stringplanmodifier.RequiresReplaceIfConfigured(),
											},
											Description: `Requires replacement if changed.`,
										},
										"value": schema.StringAttribute{
											Optional: true,
											PlanModifiers: []planmodifier.String{
												stringplanmodifier.RequiresReplaceIfConfigured(),
											},
											Description: `Requires replacement if changed.`,
										},
									},
								},
								Description: `Array of environment variables for the compute environment. Requires replacement if changed.`,
							},
							"head_job_cpus": schema.Int32Attribute{
								Optional: true,
								PlanModifiers: []planmodifier.Int32{
									int32planmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"head_job_memory_mb": schema.Int32Attribute{
								Optional: true,
								PlanModifiers: []planmodifier.Int32{
									int32planmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"labels": schema.MapAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.Map{
									mapplanmodifier.RequiresReplaceIfConfigured(),
								},
								ElementType: types.StringType,
								Description: `Requires replacement if changed.`,
							},
							"location": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"nextflow_config": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Nextflow configuration settings and parameters. Requires replacement if changed.`,
							},
							"nfs_mount": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"nfs_target": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"post_run_script": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Shell script to execute after workflow completes. Requires replacement if changed.`,
							},
							"pre_run_script": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Shell script to execute before workflow starts. Requires replacement if changed.`,
							},
							"preemptible": schema.BoolAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.Bool{
									boolplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"project_id": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"region": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"ssh_daemon": schema.BoolAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.Bool{
									boolplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"ssh_image": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"use_private_address": schema.BoolAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.Bool{
									boolplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"work_dir": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Working directory path for workflow execution. Requires replacement if changed.`,
							},
							"zones": schema.ListAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.List{
									listplanmodifier.RequiresReplaceIfConfigured(),
								},
								ElementType: types.StringType,
								Description: `Requires replacement if changed.`,
							},
						},
						Description: `Requires replacement if changed.`,
						Validators: []validator.Object{
							objectvalidator.ConflictsWith(path.Expressions{
								path.MatchRelative().AtParent().AtName("altair_platform"),
								path.MatchRelative().AtParent().AtName("eks_platform"),
								path.MatchRelative().AtParent().AtName("aws_batch"),
								path.MatchRelative().AtParent().AtName("aws_cloud"),
								path.MatchRelative().AtParent().AtName("azure_batch"),
								path.MatchRelative().AtParent().AtName("google_batch"),
								path.MatchRelative().AtParent().AtName("gke_platform"),
								path.MatchRelative().AtParent().AtName("lsf_platform"),
								path.MatchRelative().AtParent().AtName("k8s_platform"),
								path.MatchRelative().AtParent().AtName("moab_platform"),
								path.MatchRelative().AtParent().AtName("seqeracompute_platform"),
								path.MatchRelative().AtParent().AtName("slurm_platform"),
								path.MatchRelative().AtParent().AtName("uge_platform"),
							}...),
						},
					},
					"k8s_platform": schema.SingleNestedAttribute{
						Optional: true,
						PlanModifiers: []planmodifier.Object{
							objectplanmodifier.RequiresReplaceIfConfigured(),
						},
						Attributes: map[string]schema.Attribute{
							"compute_service_account": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"environment": schema.ListNestedAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.List{
									listplanmodifier.RequiresReplaceIfConfigured(),
								},
								NestedObject: schema.NestedAttributeObject{
									PlanModifiers: []planmodifier.Object{
										objectplanmodifier.RequiresReplaceIfConfigured(),
									},
									Attributes: map[string]schema.Attribute{
										"compute": schema.BoolAttribute{
											Optional: true,
											PlanModifiers: []planmodifier.Bool{
												boolplanmodifier.RequiresReplaceIfConfigured(),
											},
											Description: `Requires replacement if changed.`,
										},
										"head": schema.BoolAttribute{
											Optional: true,
											PlanModifiers: []planmodifier.Bool{
												boolplanmodifier.RequiresReplaceIfConfigured(),
											},
											Description: `Requires replacement if changed.`,
										},
										"name": schema.StringAttribute{
											Optional: true,
											PlanModifiers: []planmodifier.String{
												stringplanmodifier.RequiresReplaceIfConfigured(),
											},
											Description: `Requires replacement if changed.`,
										},
										"value": schema.StringAttribute{
											Optional: true,
											PlanModifiers: []planmodifier.String{
												stringplanmodifier.RequiresReplaceIfConfigured(),
											},
											Description: `Requires replacement if changed.`,
										},
									},
								},
								Description: `Array of environment variables for the compute environment. Requires replacement if changed.`,
							},
							"head_job_cpus": schema.Int32Attribute{
								Optional: true,
								PlanModifiers: []planmodifier.Int32{
									int32planmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"head_job_memory_mb": schema.Int32Attribute{
								Optional: true,
								PlanModifiers: []planmodifier.Int32{
									int32planmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"head_pod_spec": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"head_service_account": schema.StringAttribute{
								Required: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"namespace": schema.StringAttribute{
								Required: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"nextflow_config": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Nextflow configuration settings and parameters. Requires replacement if changed.`,
							},
							"pod_cleanup": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `must be one of ["on_success", "always", "never"]; Requires replacement if changed.`,
								Validators: []validator.String{
									stringvalidator.OneOf(
										"on_success",
										"always",
										"never",
									),
								},
							},
							"post_run_script": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Shell script to execute after workflow completes. Requires replacement if changed.`,
							},
							"pre_run_script": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Shell script to execute before workflow starts. Requires replacement if changed.`,
							},
							"server": schema.StringAttribute{
								Required: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"service_pod_spec": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"ssl_cert": schema.StringAttribute{
								Required: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"storage_claim_name": schema.StringAttribute{
								Required: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"storage_mount_path": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"work_dir": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Working directory path for workflow execution. Requires replacement if changed.`,
							},
						},
						Description: `Requires replacement if changed.`,
						Validators: []validator.Object{
							objectvalidator.ConflictsWith(path.Expressions{
								path.MatchRelative().AtParent().AtName("altair_platform"),
								path.MatchRelative().AtParent().AtName("eks_platform"),
								path.MatchRelative().AtParent().AtName("aws_batch"),
								path.MatchRelative().AtParent().AtName("aws_cloud"),
								path.MatchRelative().AtParent().AtName("azure_batch"),
								path.MatchRelative().AtParent().AtName("google_batch"),
								path.MatchRelative().AtParent().AtName("gke_platform"),
								path.MatchRelative().AtParent().AtName("google_lifesciences"),
								path.MatchRelative().AtParent().AtName("lsf_platform"),
								path.MatchRelative().AtParent().AtName("moab_platform"),
								path.MatchRelative().AtParent().AtName("seqeracompute_platform"),
								path.MatchRelative().AtParent().AtName("slurm_platform"),
								path.MatchRelative().AtParent().AtName("uge_platform"),
							}...),
						},
					},
					"lsf_platform": schema.SingleNestedAttribute{
						Optional: true,
						PlanModifiers: []planmodifier.Object{
							objectplanmodifier.RequiresReplaceIfConfigured(),
						},
						Attributes: map[string]schema.Attribute{
							"compute_queue": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"environment": schema.ListNestedAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.List{
									listplanmodifier.RequiresReplaceIfConfigured(),
								},
								NestedObject: schema.NestedAttributeObject{
									PlanModifiers: []planmodifier.Object{
										objectplanmodifier.RequiresReplaceIfConfigured(),
									},
									Attributes: map[string]schema.Attribute{
										"compute": schema.BoolAttribute{
											Optional: true,
											PlanModifiers: []planmodifier.Bool{
												boolplanmodifier.RequiresReplaceIfConfigured(),
											},
											Description: `Requires replacement if changed.`,
										},
										"head": schema.BoolAttribute{
											Optional: true,
											PlanModifiers: []planmodifier.Bool{
												boolplanmodifier.RequiresReplaceIfConfigured(),
											},
											Description: `Requires replacement if changed.`,
										},
										"name": schema.StringAttribute{
											Optional: true,
											PlanModifiers: []planmodifier.String{
												stringplanmodifier.RequiresReplaceIfConfigured(),
											},
											Description: `Requires replacement if changed.`,
										},
										"value": schema.StringAttribute{
											Optional: true,
											PlanModifiers: []planmodifier.String{
												stringplanmodifier.RequiresReplaceIfConfigured(),
											},
											Description: `Requires replacement if changed.`,
										},
									},
								},
								Description: `Array of environment variables for the compute environment. Requires replacement if changed.`,
							},
							"head_job_options": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"head_queue": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"host_name": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"launch_dir": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"max_queue_size": schema.Int32Attribute{
								Optional: true,
								PlanModifiers: []planmodifier.Int32{
									int32planmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"nextflow_config": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Nextflow configuration settings and parameters. Requires replacement if changed.`,
							},
							"per_job_mem_limit": schema.BoolAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.Bool{
									boolplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"per_task_reserve": schema.BoolAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.Bool{
									boolplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"port": schema.Int32Attribute{
								Optional: true,
								PlanModifiers: []planmodifier.Int32{
									int32planmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"post_run_script": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Shell script to execute after workflow completes. Requires replacement if changed.`,
							},
							"pre_run_script": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Shell script to execute before workflow starts. Requires replacement if changed.`,
							},
							"propagate_head_job_options": schema.BoolAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.Bool{
									boolplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"unit_for_limits": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"user_name": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"work_dir": schema.StringAttribute{
								Required: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Working directory path for workflow execution. Requires replacement if changed.`,
							},
						},
						Description: `Requires replacement if changed.`,
						Validators: []validator.Object{
							objectvalidator.ConflictsWith(path.Expressions{
								path.MatchRelative().AtParent().AtName("altair_platform"),
								path.MatchRelative().AtParent().AtName("eks_platform"),
								path.MatchRelative().AtParent().AtName("aws_batch"),
								path.MatchRelative().AtParent().AtName("aws_cloud"),
								path.MatchRelative().AtParent().AtName("azure_batch"),
								path.MatchRelative().AtParent().AtName("google_batch"),
								path.MatchRelative().AtParent().AtName("gke_platform"),
								path.MatchRelative().AtParent().AtName("google_lifesciences"),
								path.MatchRelative().AtParent().AtName("k8s_platform"),
								path.MatchRelative().AtParent().AtName("moab_platform"),
								path.MatchRelative().AtParent().AtName("seqeracompute_platform"),
								path.MatchRelative().AtParent().AtName("slurm_platform"),
								path.MatchRelative().AtParent().AtName("uge_platform"),
							}...),
						},
					},
					"moab_platform": schema.SingleNestedAttribute{
						Optional: true,
						PlanModifiers: []planmodifier.Object{
							objectplanmodifier.RequiresReplaceIfConfigured(),
						},
						Attributes: map[string]schema.Attribute{
							"compute_queue": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"environment": schema.ListNestedAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.List{
									listplanmodifier.RequiresReplaceIfConfigured(),
								},
								NestedObject: schema.NestedAttributeObject{
									PlanModifiers: []planmodifier.Object{
										objectplanmodifier.RequiresReplaceIfConfigured(),
									},
									Attributes: map[string]schema.Attribute{
										"compute": schema.BoolAttribute{
											Optional: true,
											PlanModifiers: []planmodifier.Bool{
												boolplanmodifier.RequiresReplaceIfConfigured(),
											},
											Description: `Requires replacement if changed.`,
										},
										"head": schema.BoolAttribute{
											Optional: true,
											PlanModifiers: []planmodifier.Bool{
												boolplanmodifier.RequiresReplaceIfConfigured(),
											},
											Description: `Requires replacement if changed.`,
										},
										"name": schema.StringAttribute{
											Optional: true,
											PlanModifiers: []planmodifier.String{
												stringplanmodifier.RequiresReplaceIfConfigured(),
											},
											Description: `Requires replacement if changed.`,
										},
										"value": schema.StringAttribute{
											Optional: true,
											PlanModifiers: []planmodifier.String{
												stringplanmodifier.RequiresReplaceIfConfigured(),
											},
											Description: `Requires replacement if changed.`,
										},
									},
								},
								Description: `Array of environment variables for the compute environment. Requires replacement if changed.`,
							},
							"head_job_options": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"head_queue": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"host_name": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"launch_dir": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"max_queue_size": schema.Int32Attribute{
								Optional: true,
								PlanModifiers: []planmodifier.Int32{
									int32planmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"nextflow_config": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Nextflow configuration settings and parameters. Requires replacement if changed.`,
							},
							"port": schema.Int32Attribute{
								Optional: true,
								PlanModifiers: []planmodifier.Int32{
									int32planmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"post_run_script": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Shell script to execute after workflow completes. Requires replacement if changed.`,
							},
							"pre_run_script": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Shell script to execute before workflow starts. Requires replacement if changed.`,
							},
							"propagate_head_job_options": schema.BoolAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.Bool{
									boolplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"user_name": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"work_dir": schema.StringAttribute{
								Required: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Working directory path for workflow execution. Requires replacement if changed.`,
							},
						},
						Description: `Requires replacement if changed.`,
						Validators: []validator.Object{
							objectvalidator.ConflictsWith(path.Expressions{
								path.MatchRelative().AtParent().AtName("altair_platform"),
								path.MatchRelative().AtParent().AtName("eks_platform"),
								path.MatchRelative().AtParent().AtName("aws_batch"),
								path.MatchRelative().AtParent().AtName("aws_cloud"),
								path.MatchRelative().AtParent().AtName("azure_batch"),
								path.MatchRelative().AtParent().AtName("google_batch"),
								path.MatchRelative().AtParent().AtName("gke_platform"),
								path.MatchRelative().AtParent().AtName("google_lifesciences"),
								path.MatchRelative().AtParent().AtName("lsf_platform"),
								path.MatchRelative().AtParent().AtName("k8s_platform"),
								path.MatchRelative().AtParent().AtName("seqeracompute_platform"),
								path.MatchRelative().AtParent().AtName("slurm_platform"),
								path.MatchRelative().AtParent().AtName("uge_platform"),
							}...),
						},
					},
					"seqeracompute_platform": schema.SingleNestedAttribute{
						Optional: true,
						PlanModifiers: []planmodifier.Object{
							objectplanmodifier.RequiresReplaceIfConfigured(),
						},
						Attributes: map[string]schema.Attribute{
							"environment": schema.ListNestedAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.List{
									listplanmodifier.RequiresReplaceIfConfigured(),
								},
								NestedObject: schema.NestedAttributeObject{
									PlanModifiers: []planmodifier.Object{
										objectplanmodifier.RequiresReplaceIfConfigured(),
									},
									Attributes: map[string]schema.Attribute{
										"compute": schema.BoolAttribute{
											Optional: true,
											PlanModifiers: []planmodifier.Bool{
												boolplanmodifier.RequiresReplaceIfConfigured(),
											},
											Description: `Requires replacement if changed.`,
										},
										"head": schema.BoolAttribute{
											Optional: true,
											PlanModifiers: []planmodifier.Bool{
												boolplanmodifier.RequiresReplaceIfConfigured(),
											},
											Description: `Requires replacement if changed.`,
										},
										"name": schema.StringAttribute{
											Optional: true,
											PlanModifiers: []planmodifier.String{
												stringplanmodifier.RequiresReplaceIfConfigured(),
											},
											Description: `Requires replacement if changed.`,
										},
										"value": schema.StringAttribute{
											Optional: true,
											PlanModifiers: []planmodifier.String{
												stringplanmodifier.RequiresReplaceIfConfigured(),
											},
											Description: `Requires replacement if changed.`,
										},
									},
								},
								Description: `Array of environment variables for the compute environment. Requires replacement if changed.`,
							},
							"nextflow_config": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Nextflow configuration settings and parameters. Requires replacement if changed.`,
							},
							"post_run_script": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Shell script to execute after workflow completes. Requires replacement if changed.`,
							},
							"pre_run_script": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Shell script to execute before workflow starts. Requires replacement if changed.`,
							},
							"region": schema.StringAttribute{
								Required: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"work_dir": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Working directory path for workflow execution. Requires replacement if changed.`,
							},
						},
						Description: `Requires replacement if changed.`,
						Validators: []validator.Object{
							objectvalidator.ConflictsWith(path.Expressions{
								path.MatchRelative().AtParent().AtName("altair_platform"),
								path.MatchRelative().AtParent().AtName("eks_platform"),
								path.MatchRelative().AtParent().AtName("aws_batch"),
								path.MatchRelative().AtParent().AtName("aws_cloud"),
								path.MatchRelative().AtParent().AtName("azure_batch"),
								path.MatchRelative().AtParent().AtName("google_batch"),
								path.MatchRelative().AtParent().AtName("gke_platform"),
								path.MatchRelative().AtParent().AtName("google_lifesciences"),
								path.MatchRelative().AtParent().AtName("lsf_platform"),
								path.MatchRelative().AtParent().AtName("k8s_platform"),
								path.MatchRelative().AtParent().AtName("moab_platform"),
								path.MatchRelative().AtParent().AtName("slurm_platform"),
								path.MatchRelative().AtParent().AtName("uge_platform"),
							}...),
						},
					},
					"slurm_platform": schema.SingleNestedAttribute{
						Optional: true,
						PlanModifiers: []planmodifier.Object{
							objectplanmodifier.RequiresReplaceIfConfigured(),
						},
						Attributes: map[string]schema.Attribute{
							"compute_queue": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"environment": schema.ListNestedAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.List{
									listplanmodifier.RequiresReplaceIfConfigured(),
								},
								NestedObject: schema.NestedAttributeObject{
									PlanModifiers: []planmodifier.Object{
										objectplanmodifier.RequiresReplaceIfConfigured(),
									},
									Attributes: map[string]schema.Attribute{
										"compute": schema.BoolAttribute{
											Optional: true,
											PlanModifiers: []planmodifier.Bool{
												boolplanmodifier.RequiresReplaceIfConfigured(),
											},
											Description: `Requires replacement if changed.`,
										},
										"head": schema.BoolAttribute{
											Optional: true,
											PlanModifiers: []planmodifier.Bool{
												boolplanmodifier.RequiresReplaceIfConfigured(),
											},
											Description: `Requires replacement if changed.`,
										},
										"name": schema.StringAttribute{
											Optional: true,
											PlanModifiers: []planmodifier.String{
												stringplanmodifier.RequiresReplaceIfConfigured(),
											},
											Description: `Requires replacement if changed.`,
										},
										"value": schema.StringAttribute{
											Optional: true,
											PlanModifiers: []planmodifier.String{
												stringplanmodifier.RequiresReplaceIfConfigured(),
											},
											Description: `Requires replacement if changed.`,
										},
									},
								},
								Description: `Array of environment variables for the compute environment. Requires replacement if changed.`,
							},
							"head_job_options": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"head_queue": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"host_name": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"launch_dir": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"max_queue_size": schema.Int32Attribute{
								Optional: true,
								PlanModifiers: []planmodifier.Int32{
									int32planmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"nextflow_config": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Nextflow configuration settings and parameters. Requires replacement if changed.`,
							},
							"port": schema.Int32Attribute{
								Optional: true,
								PlanModifiers: []planmodifier.Int32{
									int32planmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"post_run_script": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Shell script to execute after workflow completes. Requires replacement if changed.`,
							},
							"pre_run_script": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Shell script to execute before workflow starts. Requires replacement if changed.`,
							},
							"propagate_head_job_options": schema.BoolAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.Bool{
									boolplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"user_name": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"work_dir": schema.StringAttribute{
								Required: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Working directory path for workflow execution. Requires replacement if changed.`,
							},
						},
						Description: `Requires replacement if changed.`,
						Validators: []validator.Object{
							objectvalidator.ConflictsWith(path.Expressions{
								path.MatchRelative().AtParent().AtName("altair_platform"),
								path.MatchRelative().AtParent().AtName("eks_platform"),
								path.MatchRelative().AtParent().AtName("aws_batch"),
								path.MatchRelative().AtParent().AtName("aws_cloud"),
								path.MatchRelative().AtParent().AtName("azure_batch"),
								path.MatchRelative().AtParent().AtName("google_batch"),
								path.MatchRelative().AtParent().AtName("gke_platform"),
								path.MatchRelative().AtParent().AtName("google_lifesciences"),
								path.MatchRelative().AtParent().AtName("lsf_platform"),
								path.MatchRelative().AtParent().AtName("k8s_platform"),
								path.MatchRelative().AtParent().AtName("moab_platform"),
								path.MatchRelative().AtParent().AtName("seqeracompute_platform"),
								path.MatchRelative().AtParent().AtName("uge_platform"),
							}...),
						},
					},
					"uge_platform": schema.SingleNestedAttribute{
						Optional: true,
						PlanModifiers: []planmodifier.Object{
							objectplanmodifier.RequiresReplaceIfConfigured(),
						},
						Attributes: map[string]schema.Attribute{
							"compute_queue": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"environment": schema.ListNestedAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.List{
									listplanmodifier.RequiresReplaceIfConfigured(),
								},
								NestedObject: schema.NestedAttributeObject{
									PlanModifiers: []planmodifier.Object{
										objectplanmodifier.RequiresReplaceIfConfigured(),
									},
									Attributes: map[string]schema.Attribute{
										"compute": schema.BoolAttribute{
											Optional: true,
											PlanModifiers: []planmodifier.Bool{
												boolplanmodifier.RequiresReplaceIfConfigured(),
											},
											Description: `Requires replacement if changed.`,
										},
										"head": schema.BoolAttribute{
											Optional: true,
											PlanModifiers: []planmodifier.Bool{
												boolplanmodifier.RequiresReplaceIfConfigured(),
											},
											Description: `Requires replacement if changed.`,
										},
										"name": schema.StringAttribute{
											Optional: true,
											PlanModifiers: []planmodifier.String{
												stringplanmodifier.RequiresReplaceIfConfigured(),
											},
											Description: `Requires replacement if changed.`,
										},
										"value": schema.StringAttribute{
											Optional: true,
											PlanModifiers: []planmodifier.String{
												stringplanmodifier.RequiresReplaceIfConfigured(),
											},
											Description: `Requires replacement if changed.`,
										},
									},
								},
								Description: `Array of environment variables for the compute environment. Requires replacement if changed.`,
							},
							"head_job_options": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"head_queue": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"host_name": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"launch_dir": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"max_queue_size": schema.Int32Attribute{
								Optional: true,
								PlanModifiers: []planmodifier.Int32{
									int32planmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"nextflow_config": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Nextflow configuration settings and parameters. Requires replacement if changed.`,
							},
							"port": schema.Int32Attribute{
								Optional: true,
								PlanModifiers: []planmodifier.Int32{
									int32planmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"post_run_script": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Shell script to execute after workflow completes. Requires replacement if changed.`,
							},
							"pre_run_script": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Shell script to execute before workflow starts. Requires replacement if changed.`,
							},
							"propagate_head_job_options": schema.BoolAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.Bool{
									boolplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"user_name": schema.StringAttribute{
								Optional: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Requires replacement if changed.`,
							},
							"work_dir": schema.StringAttribute{
								Required: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `Working directory path for workflow execution. Requires replacement if changed.`,
							},
						},
						Description: `Requires replacement if changed.`,
						Validators: []validator.Object{
							objectvalidator.ConflictsWith(path.Expressions{
								path.MatchRelative().AtParent().AtName("altair_platform"),
								path.MatchRelative().AtParent().AtName("eks_platform"),
								path.MatchRelative().AtParent().AtName("aws_batch"),
								path.MatchRelative().AtParent().AtName("aws_cloud"),
								path.MatchRelative().AtParent().AtName("azure_batch"),
								path.MatchRelative().AtParent().AtName("google_batch"),
								path.MatchRelative().AtParent().AtName("gke_platform"),
								path.MatchRelative().AtParent().AtName("google_lifesciences"),
								path.MatchRelative().AtParent().AtName("lsf_platform"),
								path.MatchRelative().AtParent().AtName("k8s_platform"),
								path.MatchRelative().AtParent().AtName("moab_platform"),
								path.MatchRelative().AtParent().AtName("seqeracompute_platform"),
								path.MatchRelative().AtParent().AtName("slurm_platform"),
							}...),
						},
					},
				},
				MarkdownDescription: `Configuration settings for compute environments including work directories,` + "\n" +
					`pre/post run scripts, and environment-specific parameters.` + "\n" +
					`Requires replacement if changed.`,
			},
			"credentials_id": schema.StringAttribute{
				Required: true,
			},
			"description": schema.StringAttribute{
				Optional: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
				},
				Description: `Requires replacement if changed.`,
				Validators: []validator.String{
					stringvalidator.UTF8LengthAtMost(2000),
				},
			},
			"label_ids": schema.ListAttribute{
				Optional: true,
				PlanModifiers: []planmodifier.List{
					listplanmodifier.RequiresReplaceIfConfigured(),
				},
				ElementType: types.Int64Type,
				Description: `Requires replacement if changed.`,
			},
			"message": schema.StringAttribute{
				Optional: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
				},
				Description: `Requires replacement if changed.`,
				Validators: []validator.String{
					stringvalidator.UTF8LengthAtMost(4096),
				},
			},
			"name": schema.StringAttribute{
				Required: true,
				Validators: []validator.String{
					stringvalidator.UTF8LengthAtMost(100),
				},
			},
			"platform": schema.StringAttribute{
				Required: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
				},
				Description: `must be one of ["aws-batch", "aws-cloud", "google-lifesciences", "google-batch", "google-cloud", "azure-batch", "azure-cloud", "k8s-platform", "eks-platform", "gke-platform", "uge-platform", "slurm-platform", "lsf-platform", "altair-platform", "moab-platform", "local-platform", "seqeracompute-platform"]; Requires replacement if changed.`,
				Validators: []validator.String{
					stringvalidator.OneOf(
						"aws-batch",
						"aws-cloud",
						"google-lifesciences",
						"google-batch",
						"google-cloud",
						"azure-batch",
						"azure-cloud",
						"k8s-platform",
						"eks-platform",
						"gke-platform",
						"uge-platform",
						"slurm-platform",
						"lsf-platform",
						"altair-platform",
						"moab-platform",
						"local-platform",
						"seqeracompute-platform",
					),
					custom_stringvalidators.ComputeConfigValidator(),
				},
			},
			"status": schema.StringAttribute{
				Computed: true,
				PlanModifiers: []planmodifier.String{
					speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
				},
				Description: `must be one of ["CREATING", "AVAILABLE", "ERRORED", "INVALID"]`,
				Validators: []validator.String{
					stringvalidator.OneOf(
						"CREATING",
						"AVAILABLE",
						"ERRORED",
						"INVALID",
					),
				},
			},
			"workspace_id": schema.Int64Attribute{
				Required:    true,
				Description: `Workspace numeric identifier`,
			},
		},
	}
}

func (r *ComputeEnvResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.Seqera)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *sdk.Seqera, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *ComputeEnvResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *ComputeEnvResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(plan.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsCreateComputeEnvRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.ComputeEnvs.CreateComputeEnv(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.CreateComputeEnvResponse != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedCreateComputeEnvResponse(ctx, res.CreateComputeEnvResponse)...)

	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(refreshPlan(ctx, plan, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}
	request1, request1Diags := data.ToOperationsDescribeComputeEnvRequest(ctx)
	resp.Diagnostics.Append(request1Diags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res1, err := r.client.ComputeEnvs.DescribeComputeEnv(ctx, *request1)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res1 != nil && res1.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res1.RawResponse))
		}
		return
	}
	if res1 == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res1))
		return
	}
	if res1.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res1.StatusCode), debugResponse(res1.RawResponse))
		return
	}
	if !(res1.DescribeComputeEnvResponse != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res1.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedDescribeComputeEnvResponse(ctx, res1.DescribeComputeEnvResponse)...)

	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(refreshPlan(ctx, plan, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *ComputeEnvResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *ComputeEnvResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsDescribeComputeEnvRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.ComputeEnvs.DescribeComputeEnv(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode == 404 {
		resp.State.RemoveResource(ctx)
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.DescribeComputeEnvResponse != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedDescribeComputeEnvResponse(ctx, res.DescribeComputeEnvResponse)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *ComputeEnvResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *ComputeEnvResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	merge(ctx, req, resp, &data)
	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsUpdateComputeEnvRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.ComputeEnvs.UpdateComputeEnv(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 204 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}

	resp.Diagnostics.Append(refreshPlan(ctx, plan, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}
	request1, request1Diags := data.ToOperationsDescribeComputeEnvRequest(ctx)
	resp.Diagnostics.Append(request1Diags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res1, err := r.client.ComputeEnvs.DescribeComputeEnv(ctx, *request1)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res1 != nil && res1.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res1.RawResponse))
		}
		return
	}
	if res1 == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res1))
		return
	}
	if res1.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res1.StatusCode), debugResponse(res1.RawResponse))
		return
	}
	if !(res1.DescribeComputeEnvResponse != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res1.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedDescribeComputeEnvResponse(ctx, res1.DescribeComputeEnvResponse)...)

	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(refreshPlan(ctx, plan, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *ComputeEnvResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *ComputeEnvResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsDeleteComputeEnvRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.ComputeEnvs.DeleteComputeEnv(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 204 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}

}

func (r *ComputeEnvResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("compute_env_id"), req.ID)...)
}
