// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/seqeralabs/terraform-provider-seqera/internal/sdk"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &TokensDataSource{}
var _ datasource.DataSourceWithConfigure = &TokensDataSource{}

func NewTokensDataSource() datasource.DataSource {
	return &TokensDataSource{}
}

// TokensDataSource is the data source implementation.
type TokensDataSource struct {
	// Provider configured SDK client.
	client *sdk.Seqera
}

// TokensDataSourceModel describes the data model.
type TokensDataSourceModel struct {
	BasicAuth   types.String `tfsdk:"basic_auth"`
	DateCreated types.String `tfsdk:"date_created"`
	ID          types.Int64  `tfsdk:"id"`
	LastUsed    types.String `tfsdk:"last_used"`
	Name        types.String `tfsdk:"name"`
}

// Metadata returns the data source type name.
func (r *TokensDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_tokens"
}

// Schema defines the schema for the data source.
func (r *TokensDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "Manage API access tokens for authentication.\n\nTokens provide secure API access, enabling programmatic\naccess to platform resources and services. They can be used\nfor CI/CD integration, automation scripts, and external tools.\n",

		Attributes: map[string]schema.Attribute{
			"basic_auth": schema.StringAttribute{
				Computed:           true,
				DeprecationMessage: `This will be removed in a future release, please migrate away from it as soon as possible`,
				Description:        `Deprecated basic authentication string`,
			},
			"date_created": schema.StringAttribute{
				Computed:    true,
				Description: `Timestamp when the token was created`,
			},
			"id": schema.Int64Attribute{
				Computed:    true,
				Description: `Unique numeric identifier for the access token (nullable)`,
			},
			"last_used": schema.StringAttribute{
				Computed:    true,
				Description: `Timestamp when the token was last used for authentication`,
			},
			"name": schema.StringAttribute{
				Computed:    true,
				Description: `Display name for the token (1-50 characters)`,
			},
		},
	}
}

func (r *TokensDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.Seqera)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.Seqera, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *TokensDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *TokensDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	res, err := r.client.Tokens.TokenList(ctx)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.ListAccessTokensResponse != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedListAccessTokensResponse(ctx, res.ListAccessTokensResponse)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
