// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/speakeasy/terraform-provider-seqera/internal/provider/typeconvert"
	tfTypes "github.com/speakeasy/terraform-provider-seqera/internal/provider/types"
	"github.com/speakeasy/terraform-provider-seqera/internal/sdk/models/operations"
	"github.com/speakeasy/terraform-provider-seqera/internal/sdk/models/shared"
)

func (r *LabelsResourceModel) RefreshFromSharedCreateLabelResponse(ctx context.Context, resp *shared.CreateLabelResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.IsDefault = types.BoolPointerValue(resp.IsDefault)
		r.LabelID = types.Int64PointerValue(resp.LabelID)
		r.Name = types.StringPointerValue(resp.Name)
		r.Resource = types.BoolPointerValue(resp.Resource)
		r.Value = types.StringPointerValue(resp.Value)
	}

	return diags
}

func (r *LabelsResourceModel) RefreshFromSharedListLabelsResponse(ctx context.Context, resp *shared.ListLabelsResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Labels = []tfTypes.LabelDbDto{}

		for _, labelsItem := range resp.Labels {
			var labels tfTypes.LabelDbDto

			labels.ID = types.Int64PointerValue(labelsItem.ID)
			labels.Name = types.StringPointerValue(labelsItem.Name)
			labels.Value = types.StringPointerValue(labelsItem.Value)
			labels.Resource = types.BoolPointerValue(labelsItem.Resource)
			labels.IsDefault = types.BoolPointerValue(labelsItem.IsDefault)
			labels.DateCreated = types.StringPointerValue(typeconvert.TimePointerToStringPointer(labelsItem.DateCreated))

			r.Labels = append(r.Labels, labels)
		}
		r.TotalSize = types.Int64PointerValue(resp.TotalSize)
	}

	return diags
}

func (r *LabelsResourceModel) RefreshFromSharedUpdateLabelResponse(ctx context.Context, resp *shared.UpdateLabelResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.IsDefault = types.BoolPointerValue(resp.IsDefault)
		r.Name = types.StringPointerValue(resp.Name)
		r.Value = types.StringPointerValue(resp.Value)
	}

	return diags
}

func (r *LabelsResourceModel) ToOperationsCreateLabelRequest(ctx context.Context) (*operations.CreateLabelRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	workspaceID := new(int64)
	if !r.WorkspaceID.IsUnknown() && !r.WorkspaceID.IsNull() {
		*workspaceID = r.WorkspaceID.ValueInt64()
	} else {
		workspaceID = nil
	}
	createLabelRequest, createLabelRequestDiags := r.ToSharedCreateLabelRequest(ctx)
	diags.Append(createLabelRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreateLabelRequest{
		WorkspaceID:        workspaceID,
		CreateLabelRequest: *createLabelRequest,
	}

	return &out, diags
}

func (r *LabelsResourceModel) ToOperationsDeleteLabelRequest(ctx context.Context) (*operations.DeleteLabelRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var labelID int64
	labelID = r.LabelID.ValueInt64()

	workspaceID := new(int64)
	if !r.WorkspaceID.IsUnknown() && !r.WorkspaceID.IsNull() {
		*workspaceID = r.WorkspaceID.ValueInt64()
	} else {
		workspaceID = nil
	}
	out := operations.DeleteLabelRequest{
		LabelID:     labelID,
		WorkspaceID: workspaceID,
	}

	return &out, diags
}

func (r *LabelsResourceModel) ToOperationsListLabelsRequest(ctx context.Context) (*operations.ListLabelsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	workspaceID := new(int64)
	if !r.WorkspaceID.IsUnknown() && !r.WorkspaceID.IsNull() {
		*workspaceID = r.WorkspaceID.ValueInt64()
	} else {
		workspaceID = nil
	}
	isDefault := new(bool)
	if !r.IsDefault.IsUnknown() && !r.IsDefault.IsNull() {
		*isDefault = r.IsDefault.ValueBool()
	} else {
		isDefault = nil
	}
	out := operations.ListLabelsRequest{
		WorkspaceID: workspaceID,
		IsDefault:   isDefault,
	}

	return &out, diags
}

func (r *LabelsResourceModel) ToOperationsUpdateLabelRequest(ctx context.Context) (*operations.UpdateLabelRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var labelID int64
	labelID = r.LabelID.ValueInt64()

	workspaceID := new(int64)
	if !r.WorkspaceID.IsUnknown() && !r.WorkspaceID.IsNull() {
		*workspaceID = r.WorkspaceID.ValueInt64()
	} else {
		workspaceID = nil
	}
	updateLabelRequest, updateLabelRequestDiags := r.ToSharedUpdateLabelRequest(ctx)
	diags.Append(updateLabelRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateLabelRequest{
		LabelID:            labelID,
		WorkspaceID:        workspaceID,
		UpdateLabelRequest: *updateLabelRequest,
	}

	return &out, diags
}

func (r *LabelsResourceModel) ToSharedCreateLabelRequest(ctx context.Context) (*shared.CreateLabelRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	name := new(string)
	if !r.Name.IsUnknown() && !r.Name.IsNull() {
		*name = r.Name.ValueString()
	} else {
		name = nil
	}
	value := new(string)
	if !r.Value.IsUnknown() && !r.Value.IsNull() {
		*value = r.Value.ValueString()
	} else {
		value = nil
	}
	resource := new(bool)
	if !r.Resource.IsUnknown() && !r.Resource.IsNull() {
		*resource = r.Resource.ValueBool()
	} else {
		resource = nil
	}
	isDefault := new(bool)
	if !r.IsDefault.IsUnknown() && !r.IsDefault.IsNull() {
		*isDefault = r.IsDefault.ValueBool()
	} else {
		isDefault = nil
	}
	out := shared.CreateLabelRequest{
		Name:      name,
		Value:     value,
		Resource:  resource,
		IsDefault: isDefault,
	}

	return &out, diags
}

func (r *LabelsResourceModel) ToSharedUpdateLabelRequest(ctx context.Context) (*shared.UpdateLabelRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	name := new(string)
	if !r.Name.IsUnknown() && !r.Name.IsNull() {
		*name = r.Name.ValueString()
	} else {
		name = nil
	}
	value := new(string)
	if !r.Value.IsUnknown() && !r.Value.IsNull() {
		*value = r.Value.ValueString()
	} else {
		value = nil
	}
	isDefault := new(bool)
	if !r.IsDefault.IsUnknown() && !r.IsDefault.IsNull() {
		*isDefault = r.IsDefault.ValueBool()
	} else {
		isDefault = nil
	}
	out := shared.UpdateLabelRequest{
		Name:      name,
		Value:     value,
		IsDefault: isDefault,
	}

	return &out, diags
}
