// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/seqeralabs/terraform-provider-seqera/internal/sdk/models/operations"
	"github.com/seqeralabs/terraform-provider-seqera/internal/sdk/models/shared"
)

func (r *ContainerRegistryCredentialResourceModel) RefreshFromSharedContainerRegistryCredentialKeysOutput(ctx context.Context, resp *shared.ContainerRegistryCredentialKeysOutput) diag.Diagnostics {
	var diags diag.Diagnostics

	r.UserName = types.StringValue(resp.UserName)

	return diags
}

func (r *ContainerRegistryCredentialResourceModel) RefreshFromSharedContainerRegistryCredentialOutput(ctx context.Context, resp *shared.ContainerRegistryCredentialOutput) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.ID = types.StringPointerValue(resp.ID)
		diags.Append(r.RefreshFromSharedContainerRegistryCredentialKeysOutput(ctx, &resp.Keys)...)

		if diags.HasError() {
			return diags
		}

		r.Name = types.StringValue(resp.Name)
		if resp.ProviderType != nil {
			r.ProviderType = types.StringValue(string(*resp.ProviderType))
		} else {
			r.ProviderType = types.StringNull()
		}
	}

	return diags
}

func (r *ContainerRegistryCredentialResourceModel) RefreshFromSharedCreateContainerRegistryCredentialsResponse(ctx context.Context, resp *shared.CreateContainerRegistryCredentialsResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.CredentialsID = types.StringPointerValue(resp.CredentialsID)
	}

	return diags
}

func (r *ContainerRegistryCredentialResourceModel) RefreshFromSharedDescribeContainerRegistryCredentialsResponse(ctx context.Context, resp *shared.DescribeContainerRegistryCredentialsResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		diags.Append(r.RefreshFromSharedContainerRegistryCredentialOutput(ctx, resp.Credentials)...)

		if diags.HasError() {
			return diags
		}

	}

	return diags
}

func (r *ContainerRegistryCredentialResourceModel) ToOperationsCreateContainerRegistryCredentialsRequest(ctx context.Context) (*operations.CreateContainerRegistryCredentialsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	workspaceID := new(int64)
	if !r.WorkspaceID.IsUnknown() && !r.WorkspaceID.IsNull() {
		*workspaceID = r.WorkspaceID.ValueInt64()
	} else {
		workspaceID = nil
	}
	createContainerRegistryCredentialsRequest, createContainerRegistryCredentialsRequestDiags := r.ToSharedCreateContainerRegistryCredentialsRequest(ctx)
	diags.Append(createContainerRegistryCredentialsRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreateContainerRegistryCredentialsRequest{
		WorkspaceID: workspaceID,
		CreateContainerRegistryCredentialsRequest: *createContainerRegistryCredentialsRequest,
	}

	return &out, diags
}

func (r *ContainerRegistryCredentialResourceModel) ToOperationsDeleteContainerRegistryCredentialsRequest(ctx context.Context) (*operations.DeleteContainerRegistryCredentialsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var credentialsID string
	credentialsID = r.CredentialsID.ValueString()

	workspaceID := new(int64)
	if !r.WorkspaceID.IsUnknown() && !r.WorkspaceID.IsNull() {
		*workspaceID = r.WorkspaceID.ValueInt64()
	} else {
		workspaceID = nil
	}
	out := operations.DeleteContainerRegistryCredentialsRequest{
		CredentialsID: credentialsID,
		WorkspaceID:   workspaceID,
	}

	return &out, diags
}

func (r *ContainerRegistryCredentialResourceModel) ToOperationsDescribeContainerRegistryCredentialsRequest(ctx context.Context) (*operations.DescribeContainerRegistryCredentialsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var credentialsID string
	credentialsID = r.CredentialsID.ValueString()

	workspaceID := new(int64)
	if !r.WorkspaceID.IsUnknown() && !r.WorkspaceID.IsNull() {
		*workspaceID = r.WorkspaceID.ValueInt64()
	} else {
		workspaceID = nil
	}
	out := operations.DescribeContainerRegistryCredentialsRequest{
		CredentialsID: credentialsID,
		WorkspaceID:   workspaceID,
	}

	return &out, diags
}

func (r *ContainerRegistryCredentialResourceModel) ToOperationsUpdateContainerRegistryCredentialsRequest(ctx context.Context) (*operations.UpdateContainerRegistryCredentialsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var credentialsID string
	credentialsID = r.CredentialsID.ValueString()

	workspaceID := new(int64)
	if !r.WorkspaceID.IsUnknown() && !r.WorkspaceID.IsNull() {
		*workspaceID = r.WorkspaceID.ValueInt64()
	} else {
		workspaceID = nil
	}
	updateContainerRegistryCredentialsRequest, updateContainerRegistryCredentialsRequestDiags := r.ToSharedUpdateContainerRegistryCredentialsRequest(ctx)
	diags.Append(updateContainerRegistryCredentialsRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateContainerRegistryCredentialsRequest{
		CredentialsID: credentialsID,
		WorkspaceID:   workspaceID,
		UpdateContainerRegistryCredentialsRequest: *updateContainerRegistryCredentialsRequest,
	}

	return &out, diags
}

func (r *ContainerRegistryCredentialResourceModel) ToSharedContainerRegistryCredential(ctx context.Context) (*shared.ContainerRegistryCredential, diag.Diagnostics) {
	var diags diag.Diagnostics

	id := new(string)
	if !r.ID.IsUnknown() && !r.ID.IsNull() {
		*id = r.ID.ValueString()
	} else {
		id = nil
	}
	var name string
	name = r.Name.ValueString()

	providerType := new(shared.ContainerRegistryCredentialProviderType)
	if !r.ProviderType.IsUnknown() && !r.ProviderType.IsNull() {
		*providerType = shared.ContainerRegistryCredentialProviderType(r.ProviderType.ValueString())
	} else {
		providerType = nil
	}
	keys, keysDiags := r.ToSharedContainerRegistryCredentialKeys(ctx)
	diags.Append(keysDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := shared.ContainerRegistryCredential{
		ID:           id,
		Name:         name,
		ProviderType: providerType,
		Keys:         *keys,
	}

	return &out, diags
}

func (r *ContainerRegistryCredentialResourceModel) ToSharedContainerRegistryCredentialKeys(ctx context.Context) (*shared.ContainerRegistryCredentialKeys, diag.Diagnostics) {
	var diags diag.Diagnostics

	var userName string
	userName = r.UserName.ValueString()

	var password string
	password = r.Password.ValueString()

	registry := new(string)
	if !r.Registry.IsUnknown() && !r.Registry.IsNull() {
		*registry = r.Registry.ValueString()
	} else {
		registry = nil
	}
	out := shared.ContainerRegistryCredentialKeys{
		UserName: userName,
		Password: password,
		Registry: registry,
	}

	return &out, diags
}

func (r *ContainerRegistryCredentialResourceModel) ToSharedCreateContainerRegistryCredentialsRequest(ctx context.Context) (*shared.CreateContainerRegistryCredentialsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	credentials, credentialsDiags := r.ToSharedContainerRegistryCredential(ctx)
	diags.Append(credentialsDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := shared.CreateContainerRegistryCredentialsRequest{
		Credentials: credentials,
	}

	return &out, diags
}

func (r *ContainerRegistryCredentialResourceModel) ToSharedUpdateContainerRegistryCredentialsRequest(ctx context.Context) (*shared.UpdateContainerRegistryCredentialsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	credentials, credentialsDiags := r.ToSharedContainerRegistryCredential(ctx)
	diags.Append(credentialsDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := shared.UpdateContainerRegistryCredentialsRequest{
		Credentials: credentials,
	}

	return &out, diags
}
