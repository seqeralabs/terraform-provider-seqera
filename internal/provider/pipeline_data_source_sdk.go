// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/seqeralabs/terraform-provider-seqera/internal/sdk/models/operations"
	"github.com/seqeralabs/terraform-provider-seqera/internal/sdk/models/shared"
)

func (r *PipelineDataSourceModel) RefreshFromSharedDescribePipelineResponse(ctx context.Context, resp *shared.DescribePipelineResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		diags.Append(r.RefreshFromSharedPipelineDbDto(ctx, resp.Pipeline)...)

		if diags.HasError() {
			return diags
		}

	}

	return diags
}

func (r *PipelineDataSourceModel) RefreshFromSharedPipelineDbDto(ctx context.Context, resp *shared.PipelineDbDto) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Description = types.StringPointerValue(resp.Description)
		r.Icon = types.StringPointerValue(resp.Icon)
		r.Name = types.StringPointerValue(resp.Name)
		r.PipelineID = types.Int64PointerValue(resp.PipelineID)
		r.Repository = types.StringPointerValue(resp.Repository)
		r.UserFirstName = types.StringPointerValue(resp.UserFirstName)
		r.UserID = types.Int64PointerValue(resp.UserID)
		r.UserName = types.StringPointerValue(resp.UserName)
		r.WorkspaceID = types.Int64PointerValue(resp.WorkspaceID)
	}

	return diags
}

func (r *PipelineDataSourceModel) ToOperationsDescribePipelineRequest(ctx context.Context) (*operations.DescribePipelineRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var pipelineID int64
	pipelineID = r.PipelineID.ValueInt64()

	attributes := make([]shared.PipelineQueryAttribute, 0, len(r.Attributes))
	for _, attributesItem := range r.Attributes {
		attributes = append(attributes, shared.PipelineQueryAttribute(attributesItem.ValueString()))
	}
	var workspaceID int64
	workspaceID = r.WorkspaceID.ValueInt64()

	sourceWorkspaceID := new(int64)
	if !r.SourceWorkspaceID.IsUnknown() && !r.SourceWorkspaceID.IsNull() {
		*sourceWorkspaceID = r.SourceWorkspaceID.ValueInt64()
	} else {
		sourceWorkspaceID = nil
	}
	out := operations.DescribePipelineRequest{
		PipelineID:        pipelineID,
		Attributes:        attributes,
		WorkspaceID:       workspaceID,
		SourceWorkspaceID: sourceWorkspaceID,
	}

	return &out, diags
}
