// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/speakeasy/terraform-provider-seqera/internal/provider/typeconvert"
	tfTypes "github.com/speakeasy/terraform-provider-seqera/internal/provider/types"
	"github.com/speakeasy/terraform-provider-seqera/internal/sdk/models/operations"
	"github.com/speakeasy/terraform-provider-seqera/internal/sdk/models/shared"
)

func (r *PipelineDataSourceModel) ToOperationsDescribePipelineRequest(ctx context.Context) (*operations.DescribePipelineRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var pipelineID int64
	pipelineID = r.PipelineID.ValueInt64()

	attributes := make([]shared.PipelineQueryAttribute, 0, len(r.Attributes))
	for _, attributesItem := range r.Attributes {
		attributes = append(attributes, shared.PipelineQueryAttribute(attributesItem.ValueString()))
	}
	workspaceID := new(int64)
	if !r.WorkspaceID.IsUnknown() && !r.WorkspaceID.IsNull() {
		*workspaceID = r.WorkspaceID.ValueInt64()
	} else {
		workspaceID = nil
	}
	sourceWorkspaceID := new(int64)
	if !r.SourceWorkspaceID.IsUnknown() && !r.SourceWorkspaceID.IsNull() {
		*sourceWorkspaceID = r.SourceWorkspaceID.ValueInt64()
	} else {
		sourceWorkspaceID = nil
	}
	out := operations.DescribePipelineRequest{
		PipelineID:        pipelineID,
		Attributes:        attributes,
		WorkspaceID:       workspaceID,
		SourceWorkspaceID: sourceWorkspaceID,
	}

	return &out, diags
}

func (r *PipelineDataSourceModel) RefreshFromSharedPipelineDbDto(ctx context.Context, resp *shared.PipelineDbDto) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		if resp.ComputeEnv == nil {
			r.ComputeEnv = nil
		} else {
			r.ComputeEnv = &tfTypes.ComputeEnvDbDto{}
			r.ComputeEnv.ID = types.StringPointerValue(resp.ComputeEnv.ID)
			r.ComputeEnv.Name = types.StringPointerValue(resp.ComputeEnv.Name)
			r.ComputeEnv.Platform = types.StringPointerValue(resp.ComputeEnv.Platform)
			r.ComputeEnv.Region = types.StringPointerValue(resp.ComputeEnv.Region)
		}
		r.Deleted = types.BoolPointerValue(resp.Deleted)
		r.Description = types.StringPointerValue(resp.Description)
		r.Icon = types.StringPointerValue(resp.Icon)
		r.Labels = []tfTypes.LabelDbDto{}
		if len(r.Labels) > len(resp.Labels) {
			r.Labels = r.Labels[:len(resp.Labels)]
		}
		for labelsCount, labelsItem := range resp.Labels {
			var labels tfTypes.LabelDbDto
			labels.DateCreated = types.StringPointerValue(typeconvert.TimePointerToStringPointer(labelsItem.DateCreated))
			labels.ID = types.Int64PointerValue(labelsItem.ID)
			labels.IsDefault = types.BoolPointerValue(labelsItem.IsDefault)
			labels.Name = types.StringPointerValue(labelsItem.Name)
			labels.Resource = types.BoolPointerValue(labelsItem.Resource)
			labels.Value = types.StringPointerValue(labelsItem.Value)
			if labelsCount+1 > len(r.Labels) {
				r.Labels = append(r.Labels, labels)
			} else {
				r.Labels[labelsCount].DateCreated = labels.DateCreated
				r.Labels[labelsCount].ID = labels.ID
				r.Labels[labelsCount].IsDefault = labels.IsDefault
				r.Labels[labelsCount].Name = labels.Name
				r.Labels[labelsCount].Resource = labels.Resource
				r.Labels[labelsCount].Value = labels.Value
			}
		}
		r.LastUpdated = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.LastUpdated))
		r.Name = types.StringPointerValue(resp.Name)
		r.OptimizationID = types.StringPointerValue(resp.OptimizationID)
		if resp.OptimizationStatus != nil {
			r.OptimizationStatus = types.StringValue(string(*resp.OptimizationStatus))
		} else {
			r.OptimizationStatus = types.StringNull()
		}
		r.OptimizationTargets = types.StringPointerValue(resp.OptimizationTargets)
		r.OrgID = types.Int64PointerValue(resp.OrgID)
		r.OrgName = types.StringPointerValue(resp.OrgName)
		r.PipelineID = types.Int64PointerValue(resp.PipelineID)
		r.Repository = types.StringPointerValue(resp.Repository)
		r.UserFirstName = types.StringPointerValue(resp.UserFirstName)
		r.UserID = types.Int64PointerValue(resp.UserID)
		r.UserLastName = types.StringPointerValue(resp.UserLastName)
		r.UserName = types.StringPointerValue(resp.UserName)
		r.Visibility = types.StringPointerValue(resp.Visibility)
		r.WorkspaceID = types.Int64PointerValue(resp.WorkspaceID)
		r.WorkspaceName = types.StringPointerValue(resp.WorkspaceName)
	}

	return diags
}
