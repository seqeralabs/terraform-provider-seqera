// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/seqeralabs/terraform-provider-seqera/internal/sdk"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &MembersDataSource{}
var _ datasource.DataSourceWithConfigure = &MembersDataSource{}

func NewMembersDataSource() datasource.DataSource {
	return &MembersDataSource{}
}

// MembersDataSource is the data source implementation.
type MembersDataSource struct {
	// Provider configured SDK client.
	client *sdk.Seqera
}

// MembersDataSourceModel describes the data model.
type MembersDataSourceModel struct {
	Avatar    types.String `tfsdk:"avatar"`
	Email     types.String `tfsdk:"email"`
	FirstName types.String `tfsdk:"first_name"`
	LastName  types.String `tfsdk:"last_name"`
	Max       types.Int32  `queryParam:"style=form,explode=true,name=max" tfsdk:"max"`
	MemberID  types.Int64  `tfsdk:"member_id"`
	Offset    types.Int32  `queryParam:"style=form,explode=true,name=offset" tfsdk:"offset"`
	OrgID     types.Int64  `tfsdk:"org_id"`
	Role      types.String `tfsdk:"role"`
	Search    types.String `queryParam:"style=form,explode=true,name=search" tfsdk:"search"`
	TeamID    types.Int64  `tfsdk:"team_id"`
	TotalSize types.Int64  `tfsdk:"total_size"`
	UserID    types.Int64  `tfsdk:"user_id"`
	UserName  types.String `tfsdk:"user_name"`
}

// Metadata returns the data source type name.
func (r *MembersDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_members"
}

// Schema defines the schema for the data source.
func (r *MembersDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "Members DataSource",

		Attributes: map[string]schema.Attribute{
			"avatar": schema.StringAttribute{
				Computed: true,
			},
			"email": schema.StringAttribute{
				Computed: true,
			},
			"first_name": schema.StringAttribute{
				Computed: true,
			},
			"last_name": schema.StringAttribute{
				Computed: true,
			},
			"max": schema.Int32Attribute{
				Optional:    true,
				Description: `Pagination max results`,
			},
			"member_id": schema.Int64Attribute{
				Computed: true,
			},
			"offset": schema.Int32Attribute{
				Optional:    true,
				Description: `Pagination offset`,
			},
			"org_id": schema.Int64Attribute{
				Optional:    true,
				Description: `Organization numeric identifier`,
			},
			"role": schema.StringAttribute{
				Computed: true,
			},
			"search": schema.StringAttribute{
				Optional: true,
			},
			"team_id": schema.Int64Attribute{
				Optional:    true,
				Description: `Team numeric identifier`,
			},
			"total_size": schema.Int64Attribute{
				Computed: true,
			},
			"user_id": schema.Int64Attribute{
				Computed: true,
			},
			"user_name": schema.StringAttribute{
				Computed: true,
			},
		},
	}
}

func (r *MembersDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.Seqera)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.Seqera, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *MembersDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *MembersDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsListOrganizationTeamMembersRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Teams.ListOrganizationTeamMembers(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.ListMembersResponse != nil && res.ListMembersResponse.Members != nil && len(res.ListMembersResponse.Members) > 0) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedMemberDbDto(ctx, &res.ListMembersResponse.Members[0])...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
