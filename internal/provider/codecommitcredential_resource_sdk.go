// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/seqeralabs/terraform-provider-seqera/internal/sdk/models/operations"
	"github.com/seqeralabs/terraform-provider-seqera/internal/sdk/models/shared"
)

func (r *CodecommitCredentialResourceModel) RefreshFromSharedCodecommitCredentialKeysOutput(ctx context.Context, resp *shared.CodecommitCredentialKeysOutput) diag.Diagnostics {
	var diags diag.Diagnostics

	r.AccessKey = types.StringValue(resp.AccessKey)

	return diags
}

func (r *CodecommitCredentialResourceModel) RefreshFromSharedCodecommitCredentialOutput(ctx context.Context, resp *shared.CodecommitCredentialOutput) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.CredentialsID = types.StringPointerValue(resp.CredentialsID)
		diags.Append(r.RefreshFromSharedCodecommitCredentialKeysOutput(ctx, &resp.Keys)...)

		if diags.HasError() {
			return diags
		}

		r.Name = types.StringValue(resp.Name)
		if resp.ProviderType != nil {
			r.ProviderType = types.StringValue(string(*resp.ProviderType))
		} else {
			r.ProviderType = types.StringNull()
		}
	}

	return diags
}

func (r *CodecommitCredentialResourceModel) RefreshFromSharedCreateCodecommitCredentialsResponse(ctx context.Context, resp *shared.CreateCodecommitCredentialsResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.CredentialsID = types.StringPointerValue(resp.CredentialsID)
	}

	return diags
}

func (r *CodecommitCredentialResourceModel) RefreshFromSharedDescribeCodecommitCredentialsResponse(ctx context.Context, resp *shared.DescribeCodecommitCredentialsResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		diags.Append(r.RefreshFromSharedCodecommitCredentialOutput(ctx, resp.Credentials)...)

		if diags.HasError() {
			return diags
		}

	}

	return diags
}

func (r *CodecommitCredentialResourceModel) ToOperationsCreateCodecommitCredentialsRequest(ctx context.Context) (*operations.CreateCodecommitCredentialsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	workspaceID := new(int64)
	if !r.WorkspaceID.IsUnknown() && !r.WorkspaceID.IsNull() {
		*workspaceID = r.WorkspaceID.ValueInt64()
	} else {
		workspaceID = nil
	}
	createCodecommitCredentialsRequest, createCodecommitCredentialsRequestDiags := r.ToSharedCreateCodecommitCredentialsRequest(ctx)
	diags.Append(createCodecommitCredentialsRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreateCodecommitCredentialsRequest{
		WorkspaceID:                        workspaceID,
		CreateCodecommitCredentialsRequest: *createCodecommitCredentialsRequest,
	}

	return &out, diags
}

func (r *CodecommitCredentialResourceModel) ToOperationsDeleteCodecommitCredentialsRequest(ctx context.Context) (*operations.DeleteCodecommitCredentialsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var credentialsID string
	credentialsID = r.CredentialsID.ValueString()

	workspaceID := new(int64)
	if !r.WorkspaceID.IsUnknown() && !r.WorkspaceID.IsNull() {
		*workspaceID = r.WorkspaceID.ValueInt64()
	} else {
		workspaceID = nil
	}
	out := operations.DeleteCodecommitCredentialsRequest{
		CredentialsID: credentialsID,
		WorkspaceID:   workspaceID,
	}

	return &out, diags
}

func (r *CodecommitCredentialResourceModel) ToOperationsDescribeCodecommitCredentialsRequest(ctx context.Context) (*operations.DescribeCodecommitCredentialsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var credentialsID string
	credentialsID = r.CredentialsID.ValueString()

	workspaceID := new(int64)
	if !r.WorkspaceID.IsUnknown() && !r.WorkspaceID.IsNull() {
		*workspaceID = r.WorkspaceID.ValueInt64()
	} else {
		workspaceID = nil
	}
	out := operations.DescribeCodecommitCredentialsRequest{
		CredentialsID: credentialsID,
		WorkspaceID:   workspaceID,
	}

	return &out, diags
}

func (r *CodecommitCredentialResourceModel) ToOperationsUpdateCodecommitCredentialsRequest(ctx context.Context) (*operations.UpdateCodecommitCredentialsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var credentialsID string
	credentialsID = r.CredentialsID.ValueString()

	workspaceID := new(int64)
	if !r.WorkspaceID.IsUnknown() && !r.WorkspaceID.IsNull() {
		*workspaceID = r.WorkspaceID.ValueInt64()
	} else {
		workspaceID = nil
	}
	updateCodecommitCredentialsRequest, updateCodecommitCredentialsRequestDiags := r.ToSharedUpdateCodecommitCredentialsRequest(ctx)
	diags.Append(updateCodecommitCredentialsRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateCodecommitCredentialsRequest{
		CredentialsID:                      credentialsID,
		WorkspaceID:                        workspaceID,
		UpdateCodecommitCredentialsRequest: *updateCodecommitCredentialsRequest,
	}

	return &out, diags
}

func (r *CodecommitCredentialResourceModel) ToSharedCodecommitCredential(ctx context.Context) (*shared.CodecommitCredential, diag.Diagnostics) {
	var diags diag.Diagnostics

	credentialsID := new(string)
	if !r.CredentialsID.IsUnknown() && !r.CredentialsID.IsNull() {
		*credentialsID = r.CredentialsID.ValueString()
	} else {
		credentialsID = nil
	}
	var name string
	name = r.Name.ValueString()

	providerType := new(shared.CodecommitCredentialProviderType)
	if !r.ProviderType.IsUnknown() && !r.ProviderType.IsNull() {
		*providerType = shared.CodecommitCredentialProviderType(r.ProviderType.ValueString())
	} else {
		providerType = nil
	}
	keys, keysDiags := r.ToSharedCodecommitCredentialKeys(ctx)
	diags.Append(keysDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := shared.CodecommitCredential{
		CredentialsID: credentialsID,
		Name:          name,
		ProviderType:  providerType,
		Keys:          *keys,
	}

	return &out, diags
}

func (r *CodecommitCredentialResourceModel) ToSharedCodecommitCredentialKeys(ctx context.Context) (*shared.CodecommitCredentialKeys, diag.Diagnostics) {
	var diags diag.Diagnostics

	var accessKey string
	accessKey = r.AccessKey.ValueString()

	var secretKey string
	secretKey = r.SecretKey.ValueString()

	baseURL := new(string)
	if !r.BaseURL.IsUnknown() && !r.BaseURL.IsNull() {
		*baseURL = r.BaseURL.ValueString()
	} else {
		baseURL = nil
	}
	out := shared.CodecommitCredentialKeys{
		AccessKey: accessKey,
		SecretKey: secretKey,
		BaseURL:   baseURL,
	}

	return &out, diags
}

func (r *CodecommitCredentialResourceModel) ToSharedCreateCodecommitCredentialsRequest(ctx context.Context) (*shared.CreateCodecommitCredentialsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	credentials, credentialsDiags := r.ToSharedCodecommitCredential(ctx)
	diags.Append(credentialsDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := shared.CreateCodecommitCredentialsRequest{
		Credentials: credentials,
	}

	return &out, diags
}

func (r *CodecommitCredentialResourceModel) ToSharedUpdateCodecommitCredentialsRequest(ctx context.Context) (*shared.UpdateCodecommitCredentialsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	credentials, credentialsDiags := r.ToSharedCodecommitCredential(ctx)
	diags.Append(credentialsDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := shared.UpdateCodecommitCredentialsRequest{
		Credentials: credentials,
	}

	return &out, diags
}
