// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/seqeralabs/terraform-provider-seqera/internal/sdk/models/operations"
	"github.com/seqeralabs/terraform-provider-seqera/internal/sdk/models/shared"
)

func (r *ManagedCredentialsDataSourceModel) RefreshFromSharedGridManagedCredentials(ctx context.Context, resp *shared.GridManagedCredentials) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp.CredentialProvider != nil {
		r.CredentialProvider = types.StringValue(string(*resp.CredentialProvider))
	} else {
		r.CredentialProvider = types.StringNull()
	}
	r.ManagedCredentialsID = types.Int64PointerValue(resp.ManagedCredentialsID)
	r.ManagedIdentityID = types.Int64Value(resp.ManagedIdentityID)
	r.OrgID = types.Int64PointerValue(resp.OrgID)
	r.UserID = types.Int64PointerValue(resp.UserID)
	r.UserName = types.StringPointerValue(resp.UserName)

	return diags
}

func (r *ManagedCredentialsDataSourceModel) RefreshFromSharedListGridManagedCredentialsResponse(ctx context.Context, resp *shared.ListGridManagedCredentialsResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		if len(resp.ManagedCredentials) == 0 {
			diags.AddError("Unexpected response from API", "Missing response body array data.")
			return diags
		}

		diags.Append(r.RefreshFromSharedGridManagedCredentials(ctx, &resp.ManagedCredentials[0])...)

		if diags.HasError() {
			return diags
		}

		r.TotalSize = types.Int64PointerValue(resp.TotalSize)
	}

	return diags
}

func (r *ManagedCredentialsDataSourceModel) ToOperationsListManagedCredentialsRequest(ctx context.Context) (*operations.ListManagedCredentialsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var managedIdentityID int64
	managedIdentityID = r.ManagedIdentityID.ValueInt64()

	var orgID int64
	orgID = r.OrgID.ValueInt64()

	userID := new(int64)
	if !r.UserID.IsUnknown() && !r.UserID.IsNull() {
		*userID = r.UserID.ValueInt64()
	} else {
		userID = nil
	}
	search := new(string)
	if !r.Search.IsUnknown() && !r.Search.IsNull() {
		*search = r.Search.ValueString()
	} else {
		search = nil
	}
	max := new(int)
	if !r.Max.IsUnknown() && !r.Max.IsNull() {
		*max = int(r.Max.ValueInt32())
	} else {
		max = nil
	}
	offset := new(int)
	if !r.Offset.IsUnknown() && !r.Offset.IsNull() {
		*offset = int(r.Offset.ValueInt32())
	} else {
		offset = nil
	}
	out := operations.ListManagedCredentialsRequest{
		ManagedIdentityID: managedIdentityID,
		OrgID:             orgID,
		UserID:            userID,
		Search:            search,
		Max:               max,
		Offset:            offset,
	}

	return &out, diags
}
