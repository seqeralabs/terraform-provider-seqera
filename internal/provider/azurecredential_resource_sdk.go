// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/seqeralabs/terraform-provider-seqera/internal/sdk/models/operations"
	"github.com/seqeralabs/terraform-provider-seqera/internal/sdk/models/shared"
)

func (r *AzureCredentialResourceModel) RefreshFromSharedAzureCredentialKeysOutput(ctx context.Context, resp *shared.AzureCredentialKeysOutput) diag.Diagnostics {
	var diags diag.Diagnostics

	r.BatchName = types.StringValue(resp.BatchName)
	r.StorageName = types.StringValue(resp.StorageName)

	return diags
}

func (r *AzureCredentialResourceModel) RefreshFromSharedAzureCredentialOutput(ctx context.Context, resp *shared.AzureCredentialOutput) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.ID = types.StringPointerValue(resp.ID)
		diags.Append(r.RefreshFromSharedAzureCredentialKeysOutput(ctx, &resp.Keys)...)

		if diags.HasError() {
			return diags
		}

		r.Name = types.StringValue(resp.Name)
		if resp.ProviderType != nil {
			r.ProviderType = types.StringValue(string(*resp.ProviderType))
		} else {
			r.ProviderType = types.StringNull()
		}
	}

	return diags
}

func (r *AzureCredentialResourceModel) RefreshFromSharedCreateAzureCredentialsResponse(ctx context.Context, resp *shared.CreateAzureCredentialsResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.CredentialsID = types.StringPointerValue(resp.CredentialsID)
	}

	return diags
}

func (r *AzureCredentialResourceModel) RefreshFromSharedDescribeAzureCredentialsResponse(ctx context.Context, resp *shared.DescribeAzureCredentialsResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		diags.Append(r.RefreshFromSharedAzureCredentialOutput(ctx, resp.Credentials)...)

		if diags.HasError() {
			return diags
		}

	}

	return diags
}

func (r *AzureCredentialResourceModel) ToOperationsCreateAzureCredentialsRequest(ctx context.Context) (*operations.CreateAzureCredentialsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	workspaceID := new(int64)
	if !r.WorkspaceID.IsUnknown() && !r.WorkspaceID.IsNull() {
		*workspaceID = r.WorkspaceID.ValueInt64()
	} else {
		workspaceID = nil
	}
	createAzureCredentialsRequest, createAzureCredentialsRequestDiags := r.ToSharedCreateAzureCredentialsRequest(ctx)
	diags.Append(createAzureCredentialsRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreateAzureCredentialsRequest{
		WorkspaceID:                   workspaceID,
		CreateAzureCredentialsRequest: *createAzureCredentialsRequest,
	}

	return &out, diags
}

func (r *AzureCredentialResourceModel) ToOperationsDeleteAzureCredentialsRequest(ctx context.Context) (*operations.DeleteAzureCredentialsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var credentialsID string
	credentialsID = r.CredentialsID.ValueString()

	workspaceID := new(int64)
	if !r.WorkspaceID.IsUnknown() && !r.WorkspaceID.IsNull() {
		*workspaceID = r.WorkspaceID.ValueInt64()
	} else {
		workspaceID = nil
	}
	out := operations.DeleteAzureCredentialsRequest{
		CredentialsID: credentialsID,
		WorkspaceID:   workspaceID,
	}

	return &out, diags
}

func (r *AzureCredentialResourceModel) ToOperationsDescribeAzureCredentialsRequest(ctx context.Context) (*operations.DescribeAzureCredentialsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var credentialsID string
	credentialsID = r.CredentialsID.ValueString()

	workspaceID := new(int64)
	if !r.WorkspaceID.IsUnknown() && !r.WorkspaceID.IsNull() {
		*workspaceID = r.WorkspaceID.ValueInt64()
	} else {
		workspaceID = nil
	}
	out := operations.DescribeAzureCredentialsRequest{
		CredentialsID: credentialsID,
		WorkspaceID:   workspaceID,
	}

	return &out, diags
}

func (r *AzureCredentialResourceModel) ToOperationsUpdateAzureCredentialsRequest(ctx context.Context) (*operations.UpdateAzureCredentialsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var credentialsID string
	credentialsID = r.CredentialsID.ValueString()

	workspaceID := new(int64)
	if !r.WorkspaceID.IsUnknown() && !r.WorkspaceID.IsNull() {
		*workspaceID = r.WorkspaceID.ValueInt64()
	} else {
		workspaceID = nil
	}
	updateAzureCredentialsRequest, updateAzureCredentialsRequestDiags := r.ToSharedUpdateAzureCredentialsRequest(ctx)
	diags.Append(updateAzureCredentialsRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateAzureCredentialsRequest{
		CredentialsID:                 credentialsID,
		WorkspaceID:                   workspaceID,
		UpdateAzureCredentialsRequest: *updateAzureCredentialsRequest,
	}

	return &out, diags
}

func (r *AzureCredentialResourceModel) ToSharedAzureCredential(ctx context.Context) (*shared.AzureCredential, diag.Diagnostics) {
	var diags diag.Diagnostics

	id := new(string)
	if !r.ID.IsUnknown() && !r.ID.IsNull() {
		*id = r.ID.ValueString()
	} else {
		id = nil
	}
	var name string
	name = r.Name.ValueString()

	providerType := new(shared.AzureCredentialProviderType)
	if !r.ProviderType.IsUnknown() && !r.ProviderType.IsNull() {
		*providerType = shared.AzureCredentialProviderType(r.ProviderType.ValueString())
	} else {
		providerType = nil
	}
	keys, keysDiags := r.ToSharedAzureCredentialKeys(ctx)
	diags.Append(keysDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := shared.AzureCredential{
		ID:           id,
		Name:         name,
		ProviderType: providerType,
		Keys:         *keys,
	}

	return &out, diags
}

func (r *AzureCredentialResourceModel) ToSharedAzureCredentialKeys(ctx context.Context) (*shared.AzureCredentialKeys, diag.Diagnostics) {
	var diags diag.Diagnostics

	var batchName string
	batchName = r.BatchName.ValueString()

	var storageName string
	storageName = r.StorageName.ValueString()

	batchKey := new(string)
	if !r.BatchKey.IsUnknown() && !r.BatchKey.IsNull() {
		*batchKey = r.BatchKey.ValueString()
	} else {
		batchKey = nil
	}
	storageKey := new(string)
	if !r.StorageKey.IsUnknown() && !r.StorageKey.IsNull() {
		*storageKey = r.StorageKey.ValueString()
	} else {
		storageKey = nil
	}
	tenantID := new(string)
	if !r.TenantID.IsUnknown() && !r.TenantID.IsNull() {
		*tenantID = r.TenantID.ValueString()
	} else {
		tenantID = nil
	}
	clientID := new(string)
	if !r.ClientID.IsUnknown() && !r.ClientID.IsNull() {
		*clientID = r.ClientID.ValueString()
	} else {
		clientID = nil
	}
	clientSecret := new(string)
	if !r.ClientSecret.IsUnknown() && !r.ClientSecret.IsNull() {
		*clientSecret = r.ClientSecret.ValueString()
	} else {
		clientSecret = nil
	}
	out := shared.AzureCredentialKeys{
		BatchName:    batchName,
		StorageName:  storageName,
		BatchKey:     batchKey,
		StorageKey:   storageKey,
		TenantID:     tenantID,
		ClientID:     clientID,
		ClientSecret: clientSecret,
	}

	return &out, diags
}

func (r *AzureCredentialResourceModel) ToSharedCreateAzureCredentialsRequest(ctx context.Context) (*shared.CreateAzureCredentialsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	credentials, credentialsDiags := r.ToSharedAzureCredential(ctx)
	diags.Append(credentialsDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := shared.CreateAzureCredentialsRequest{
		Credentials: *credentials,
	}

	return &out, diags
}

func (r *AzureCredentialResourceModel) ToSharedUpdateAzureCredentialsRequest(ctx context.Context) (*shared.UpdateAzureCredentialsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	credentials, credentialsDiags := r.ToSharedAzureCredential(ctx)
	diags.Append(credentialsDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := shared.UpdateAzureCredentialsRequest{
		Credentials: *credentials,
	}

	return &out, diags
}
