// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/seqeralabs/terraform-provider-seqera/internal/provider/typeconvert"
	"github.com/seqeralabs/terraform-provider-seqera/internal/sdk/models/operations"
	"github.com/seqeralabs/terraform-provider-seqera/internal/sdk/models/shared"
)

func (r *AzureCredentialResourceModel) RefreshFromSharedAzureCredential(ctx context.Context, resp *shared.AzureCredential) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.BaseURL = types.StringPointerValue(resp.BaseURL)
		r.Category = types.StringPointerValue(resp.Category)
		r.CredentialsID = types.StringPointerValue(resp.CredentialsID)
		r.DateCreated = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.DateCreated))
		r.Deleted = types.BoolPointerValue(resp.Deleted)
		r.Description = types.StringPointerValue(resp.Description)
		r.Keys.BatchName = types.StringPointerValue(resp.Keys.BatchName)
		r.Keys.StorageName = types.StringPointerValue(resp.Keys.StorageName)
		r.LastUpdated = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.LastUpdated))
		r.LastUsed = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.LastUsed))
		r.Name = types.StringValue(resp.Name)
		r.ProviderType = types.StringValue(string(resp.ProviderType))
	}

	return diags
}

func (r *AzureCredentialResourceModel) RefreshFromSharedCreateAzureCredentialsResponse(ctx context.Context, resp *shared.CreateAzureCredentialsResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.CredentialsID = types.StringPointerValue(resp.CredentialsID)
	}

	return diags
}

func (r *AzureCredentialResourceModel) ToOperationsCreateAzureCredentialsRequest(ctx context.Context) (*operations.CreateAzureCredentialsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	workspaceID := new(int64)
	if !r.WorkspaceID.IsUnknown() && !r.WorkspaceID.IsNull() {
		*workspaceID = r.WorkspaceID.ValueInt64()
	} else {
		workspaceID = nil
	}
	createAzureCredentialsRequest, createAzureCredentialsRequestDiags := r.ToSharedCreateAzureCredentialsRequest(ctx)
	diags.Append(createAzureCredentialsRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreateAzureCredentialsRequest{
		WorkspaceID:                   workspaceID,
		CreateAzureCredentialsRequest: *createAzureCredentialsRequest,
	}

	return &out, diags
}

func (r *AzureCredentialResourceModel) ToOperationsDeleteAzureCredentialsRequest(ctx context.Context) (*operations.DeleteAzureCredentialsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var credentialsID string
	credentialsID = r.CredentialsID.ValueString()

	workspaceID := new(int64)
	if !r.WorkspaceID.IsUnknown() && !r.WorkspaceID.IsNull() {
		*workspaceID = r.WorkspaceID.ValueInt64()
	} else {
		workspaceID = nil
	}
	checked := new(bool)
	if !r.Checked.IsUnknown() && !r.Checked.IsNull() {
		*checked = r.Checked.ValueBool()
	} else {
		checked = nil
	}
	out := operations.DeleteAzureCredentialsRequest{
		CredentialsID: credentialsID,
		WorkspaceID:   workspaceID,
		Checked:       checked,
	}

	return &out, diags
}

func (r *AzureCredentialResourceModel) ToOperationsDescribeAzureCredentialsRequest(ctx context.Context) (*operations.DescribeAzureCredentialsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var credentialsID string
	credentialsID = r.CredentialsID.ValueString()

	workspaceID := new(int64)
	if !r.WorkspaceID.IsUnknown() && !r.WorkspaceID.IsNull() {
		*workspaceID = r.WorkspaceID.ValueInt64()
	} else {
		workspaceID = nil
	}
	out := operations.DescribeAzureCredentialsRequest{
		CredentialsID: credentialsID,
		WorkspaceID:   workspaceID,
	}

	return &out, diags
}

func (r *AzureCredentialResourceModel) ToOperationsUpdateAzureCredentialsRequest(ctx context.Context) (*operations.UpdateAzureCredentialsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var credentialsID string
	credentialsID = r.CredentialsID.ValueString()

	workspaceID := new(int64)
	if !r.WorkspaceID.IsUnknown() && !r.WorkspaceID.IsNull() {
		*workspaceID = r.WorkspaceID.ValueInt64()
	} else {
		workspaceID = nil
	}
	updateAzureCredentialsRequest, updateAzureCredentialsRequestDiags := r.ToSharedUpdateAzureCredentialsRequest(ctx)
	diags.Append(updateAzureCredentialsRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateAzureCredentialsRequest{
		CredentialsID:                 credentialsID,
		WorkspaceID:                   workspaceID,
		UpdateAzureCredentialsRequest: *updateAzureCredentialsRequest,
	}

	return &out, diags
}

func (r *AzureCredentialResourceModel) ToSharedCreateAzureCredentialsRequest(ctx context.Context) (*shared.CreateAzureCredentialsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	credentialsID := new(string)
	if !r.Credentials.CredentialsID.IsUnknown() && !r.Credentials.CredentialsID.IsNull() {
		*credentialsID = r.Credentials.CredentialsID.ValueString()
	} else {
		credentialsID = nil
	}
	var name string
	name = r.Credentials.Name.ValueString()

	description := new(string)
	if !r.Credentials.Description.IsUnknown() && !r.Credentials.Description.IsNull() {
		*description = r.Credentials.Description.ValueString()
	} else {
		description = nil
	}
	providerType := shared.AzureCredentialInputProviderType(r.Credentials.ProviderType.ValueString())
	baseURL := new(string)
	if !r.Credentials.BaseURL.IsUnknown() && !r.Credentials.BaseURL.IsNull() {
		*baseURL = r.Credentials.BaseURL.ValueString()
	} else {
		baseURL = nil
	}
	category := new(string)
	if !r.Credentials.Category.IsUnknown() && !r.Credentials.Category.IsNull() {
		*category = r.Credentials.Category.ValueString()
	} else {
		category = nil
	}
	batchName := new(string)
	if !r.Credentials.Keys.BatchName.IsUnknown() && !r.Credentials.Keys.BatchName.IsNull() {
		*batchName = r.Credentials.Keys.BatchName.ValueString()
	} else {
		batchName = nil
	}
	storageName := new(string)
	if !r.Credentials.Keys.StorageName.IsUnknown() && !r.Credentials.Keys.StorageName.IsNull() {
		*storageName = r.Credentials.Keys.StorageName.ValueString()
	} else {
		storageName = nil
	}
	batchKey := new(string)
	if !r.Credentials.Keys.BatchKey.IsUnknown() && !r.Credentials.Keys.BatchKey.IsNull() {
		*batchKey = r.Credentials.Keys.BatchKey.ValueString()
	} else {
		batchKey = nil
	}
	storageKey := new(string)
	if !r.Credentials.Keys.StorageKey.IsUnknown() && !r.Credentials.Keys.StorageKey.IsNull() {
		*storageKey = r.Credentials.Keys.StorageKey.ValueString()
	} else {
		storageKey = nil
	}
	keys := shared.AzureSecurityKeys{
		BatchName:   batchName,
		StorageName: storageName,
		BatchKey:    batchKey,
		StorageKey:  storageKey,
	}
	credentials := shared.AzureCredentialInput{
		CredentialsID: credentialsID,
		Name:          name,
		Description:   description,
		ProviderType:  providerType,
		BaseURL:       baseURL,
		Category:      category,
		Keys:          keys,
	}
	out := shared.CreateAzureCredentialsRequest{
		Credentials: credentials,
	}

	return &out, diags
}

func (r *AzureCredentialResourceModel) ToSharedUpdateAzureCredentialsRequest(ctx context.Context) (*shared.UpdateAzureCredentialsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	credentialsID := new(string)
	if !r.Credentials.CredentialsID.IsUnknown() && !r.Credentials.CredentialsID.IsNull() {
		*credentialsID = r.Credentials.CredentialsID.ValueString()
	} else {
		credentialsID = nil
	}
	var name string
	name = r.Credentials.Name.ValueString()

	description := new(string)
	if !r.Credentials.Description.IsUnknown() && !r.Credentials.Description.IsNull() {
		*description = r.Credentials.Description.ValueString()
	} else {
		description = nil
	}
	providerType := shared.AzureCredentialInputProviderType(r.Credentials.ProviderType.ValueString())
	baseURL := new(string)
	if !r.Credentials.BaseURL.IsUnknown() && !r.Credentials.BaseURL.IsNull() {
		*baseURL = r.Credentials.BaseURL.ValueString()
	} else {
		baseURL = nil
	}
	category := new(string)
	if !r.Credentials.Category.IsUnknown() && !r.Credentials.Category.IsNull() {
		*category = r.Credentials.Category.ValueString()
	} else {
		category = nil
	}
	batchName := new(string)
	if !r.Credentials.Keys.BatchName.IsUnknown() && !r.Credentials.Keys.BatchName.IsNull() {
		*batchName = r.Credentials.Keys.BatchName.ValueString()
	} else {
		batchName = nil
	}
	storageName := new(string)
	if !r.Credentials.Keys.StorageName.IsUnknown() && !r.Credentials.Keys.StorageName.IsNull() {
		*storageName = r.Credentials.Keys.StorageName.ValueString()
	} else {
		storageName = nil
	}
	batchKey := new(string)
	if !r.Credentials.Keys.BatchKey.IsUnknown() && !r.Credentials.Keys.BatchKey.IsNull() {
		*batchKey = r.Credentials.Keys.BatchKey.ValueString()
	} else {
		batchKey = nil
	}
	storageKey := new(string)
	if !r.Credentials.Keys.StorageKey.IsUnknown() && !r.Credentials.Keys.StorageKey.IsNull() {
		*storageKey = r.Credentials.Keys.StorageKey.ValueString()
	} else {
		storageKey = nil
	}
	keys := shared.AzureSecurityKeys{
		BatchName:   batchName,
		StorageName: storageName,
		BatchKey:    batchKey,
		StorageKey:  storageKey,
	}
	credentials := shared.AzureCredentialInput{
		CredentialsID: credentialsID,
		Name:          name,
		Description:   description,
		ProviderType:  providerType,
		BaseURL:       baseURL,
		Category:      category,
		Keys:          keys,
	}
	out := shared.UpdateAzureCredentialsRequest{
		Credentials: credentials,
	}

	return &out, diags
}
