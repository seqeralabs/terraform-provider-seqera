// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/seqeralabs/terraform-provider-seqera/internal/provider/typeconvert"
	tfTypes "github.com/seqeralabs/terraform-provider-seqera/internal/provider/types"
	"github.com/seqeralabs/terraform-provider-seqera/internal/sdk/models/operations"
	"github.com/seqeralabs/terraform-provider-seqera/internal/sdk/models/shared"
)

func (r *ActionResourceModel) RefreshFromSharedActionResponseDto(ctx context.Context, resp *shared.ActionResponseDto) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		if resp.Config != nil {
			r.Config = &tfTypes.ActionConfigType{}
			if resp.Config.ActionTowerActionConfig != nil {
				r.Config.Tower = &tfTypes.ActionTowerActionConfig{}
				r.Config.Tower.Discriminator = types.StringPointerValue(resp.Config.ActionTowerActionConfig.Discriminator)
			}
			if resp.Config.GithubActionConfig != nil {
				r.Config.Github = &tfTypes.GithubActionConfig{}
				r.Config.Github.Discriminator = types.StringPointerValue(resp.Config.GithubActionConfig.Discriminator)
			}
		}
		r.HookID = types.StringPointerValue(resp.HookID)
		r.HookURL = types.StringPointerValue(resp.HookURL)
		r.ID = types.StringPointerValue(resp.ID)
		if resp.Launch != nil {
			launchPriorData := r.Launch
			r.Launch.ConfigProfiles = make([]types.String, 0, len(resp.Launch.ConfigProfiles))
			for _, v := range resp.Launch.ConfigProfiles {
				r.Launch.ConfigProfiles = append(r.Launch.ConfigProfiles, types.StringValue(v))
			}
			r.Launch.ConfigText = types.StringPointerValue(resp.Launch.ConfigText)
			r.Launch.EntryName = types.StringPointerValue(resp.Launch.EntryName)
			r.Launch.HeadJobCpus = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.Launch.HeadJobCpus))
			r.Launch.HeadJobMemoryMb = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.Launch.HeadJobMemoryMb))
			r.Launch.ID = types.StringPointerValue(resp.Launch.ID)
			r.Launch.LaunchContainer = types.StringPointerValue(resp.Launch.LaunchContainer)
			r.Launch.MainScript = types.StringPointerValue(resp.Launch.MainScript)
			r.Launch.OptimizationID = types.StringPointerValue(resp.Launch.OptimizationID)
			r.Launch.OptimizationTargets = types.StringPointerValue(resp.Launch.OptimizationTargets)
			r.Launch.ParamsText = types.StringPointerValue(resp.Launch.ParamsText)
			r.Launch.Pipeline = types.StringValue(resp.Launch.Pipeline)
			r.Launch.PostRunScript = types.StringPointerValue(resp.Launch.PostRunScript)
			r.Launch.PreRunScript = types.StringPointerValue(resp.Launch.PreRunScript)
			r.Launch.PullLatest = types.BoolPointerValue(resp.Launch.PullLatest)
			r.Launch.Resume = types.BoolPointerValue(resp.Launch.Resume)
			r.Launch.ResumeLaunchID = types.StringPointerValue(resp.Launch.ResumeLaunchID)
			r.Launch.Revision = types.StringPointerValue(resp.Launch.Revision)
			r.Launch.RunName = types.StringPointerValue(resp.Launch.RunName)
			r.Launch.SchemaName = types.StringPointerValue(resp.Launch.SchemaName)
			r.Launch.SessionID = types.StringPointerValue(resp.Launch.SessionID)
			r.Launch.StubRun = types.BoolPointerValue(resp.Launch.StubRun)
			r.Launch.TowerConfig = types.StringPointerValue(resp.Launch.TowerConfig)
			r.Launch.UserSecrets = make([]types.String, 0, len(resp.Launch.UserSecrets))
			for _, v := range resp.Launch.UserSecrets {
				r.Launch.UserSecrets = append(r.Launch.UserSecrets, types.StringValue(v))
			}
			r.Launch.WorkDir = types.StringPointerValue(resp.Launch.WorkDir)
			r.Launch.WorkspaceSecrets = make([]types.String, 0, len(resp.Launch.WorkspaceSecrets))
			for _, v := range resp.Launch.WorkspaceSecrets {
				r.Launch.WorkspaceSecrets = append(r.Launch.WorkspaceSecrets, types.StringValue(v))
			}
			r.Launch.ComputeEnvID = launchPriorData.ComputeEnvID
			r.Launch.LabelIds = launchPriorData.LabelIds
		}
		r.Message = types.StringPointerValue(resp.Message)
		r.Name = types.StringPointerValue(resp.Name)
		if resp.Source != nil {
			r.Source = types.StringValue(string(*resp.Source))
		} else {
			r.Source = types.StringNull()
		}
		if resp.Status != nil {
			r.Status = types.StringValue(string(*resp.Status))
		} else {
			r.Status = types.StringNull()
		}
	}

	return diags
}

func (r *ActionResourceModel) RefreshFromSharedCreateActionResponse(ctx context.Context, resp *shared.CreateActionResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.ActionID = types.StringPointerValue(resp.ActionID)
	}

	return diags
}

func (r *ActionResourceModel) RefreshFromSharedDescribeActionResponse(ctx context.Context, resp *shared.DescribeActionResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		diags.Append(r.RefreshFromSharedActionResponseDto(ctx, resp.Action)...)

		if diags.HasError() {
			return diags
		}

	}

	return diags
}

func (r *ActionResourceModel) ToOperationsCreateActionRequest(ctx context.Context) (*operations.CreateActionRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var workspaceID int64
	workspaceID = r.WorkspaceID.ValueInt64()

	createActionRequest, createActionRequestDiags := r.ToSharedCreateActionRequest(ctx)
	diags.Append(createActionRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreateActionRequest{
		WorkspaceID:         workspaceID,
		CreateActionRequest: *createActionRequest,
	}

	return &out, diags
}

func (r *ActionResourceModel) ToOperationsDeleteActionRequest(ctx context.Context) (*operations.DeleteActionRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var actionID string
	actionID = r.ActionID.ValueString()

	workspaceID := new(int64)
	if !r.WorkspaceID.IsUnknown() && !r.WorkspaceID.IsNull() {
		*workspaceID = r.WorkspaceID.ValueInt64()
	} else {
		workspaceID = nil
	}
	out := operations.DeleteActionRequest{
		ActionID:    actionID,
		WorkspaceID: workspaceID,
	}

	return &out, diags
}

func (r *ActionResourceModel) ToOperationsDescribeActionRequest(ctx context.Context) (*operations.DescribeActionRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var actionID string
	actionID = r.ActionID.ValueString()

	workspaceID := new(int64)
	if !r.WorkspaceID.IsUnknown() && !r.WorkspaceID.IsNull() {
		*workspaceID = r.WorkspaceID.ValueInt64()
	} else {
		workspaceID = nil
	}
	out := operations.DescribeActionRequest{
		ActionID:    actionID,
		WorkspaceID: workspaceID,
	}

	return &out, diags
}

func (r *ActionResourceModel) ToOperationsUpdateActionRequest(ctx context.Context) (*operations.UpdateActionRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var actionID string
	actionID = r.ActionID.ValueString()

	workspaceID := new(int64)
	if !r.WorkspaceID.IsUnknown() && !r.WorkspaceID.IsNull() {
		*workspaceID = r.WorkspaceID.ValueInt64()
	} else {
		workspaceID = nil
	}
	updateActionRequest, updateActionRequestDiags := r.ToSharedUpdateActionRequest(ctx)
	diags.Append(updateActionRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateActionRequest{
		ActionID:            actionID,
		WorkspaceID:         workspaceID,
		UpdateActionRequest: *updateActionRequest,
	}

	return &out, diags
}

func (r *ActionResourceModel) ToSharedCreateActionRequest(ctx context.Context) (*shared.CreateActionRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var name string
	name = r.Name.ValueString()

	source := shared.ActionSource(r.Source.ValueString())
	computeEnvID := new(string)
	if !r.Launch.ComputeEnvID.IsUnknown() && !r.Launch.ComputeEnvID.IsNull() {
		*computeEnvID = r.Launch.ComputeEnvID.ValueString()
	} else {
		computeEnvID = nil
	}
	runName := new(string)
	if !r.Launch.RunName.IsUnknown() && !r.Launch.RunName.IsNull() {
		*runName = r.Launch.RunName.ValueString()
	} else {
		runName = nil
	}
	pipeline := new(string)
	if !r.Launch.Pipeline.IsUnknown() && !r.Launch.Pipeline.IsNull() {
		*pipeline = r.Launch.Pipeline.ValueString()
	} else {
		pipeline = nil
	}
	var workDir string
	workDir = r.Launch.WorkDir.ValueString()

	revision := new(string)
	if !r.Launch.Revision.IsUnknown() && !r.Launch.Revision.IsNull() {
		*revision = r.Launch.Revision.ValueString()
	} else {
		revision = nil
	}
	configProfiles := make([]string, 0, len(r.Launch.ConfigProfiles))
	for _, configProfilesItem := range r.Launch.ConfigProfiles {
		configProfiles = append(configProfiles, configProfilesItem.ValueString())
	}
	userSecrets := make([]string, 0, len(r.Launch.UserSecrets))
	for _, userSecretsItem := range r.Launch.UserSecrets {
		userSecrets = append(userSecrets, userSecretsItem.ValueString())
	}
	workspaceSecrets := make([]string, 0, len(r.Launch.WorkspaceSecrets))
	for _, workspaceSecretsItem := range r.Launch.WorkspaceSecrets {
		workspaceSecrets = append(workspaceSecrets, workspaceSecretsItem.ValueString())
	}
	configText := new(string)
	if !r.Launch.ConfigText.IsUnknown() && !r.Launch.ConfigText.IsNull() {
		*configText = r.Launch.ConfigText.ValueString()
	} else {
		configText = nil
	}
	towerConfig := new(string)
	if !r.Launch.TowerConfig.IsUnknown() && !r.Launch.TowerConfig.IsNull() {
		*towerConfig = r.Launch.TowerConfig.ValueString()
	} else {
		towerConfig = nil
	}
	paramsText := new(string)
	if !r.Launch.ParamsText.IsUnknown() && !r.Launch.ParamsText.IsNull() {
		*paramsText = r.Launch.ParamsText.ValueString()
	} else {
		paramsText = nil
	}
	preRunScript := new(string)
	if !r.Launch.PreRunScript.IsUnknown() && !r.Launch.PreRunScript.IsNull() {
		*preRunScript = r.Launch.PreRunScript.ValueString()
	} else {
		preRunScript = nil
	}
	postRunScript := new(string)
	if !r.Launch.PostRunScript.IsUnknown() && !r.Launch.PostRunScript.IsNull() {
		*postRunScript = r.Launch.PostRunScript.ValueString()
	} else {
		postRunScript = nil
	}
	mainScript := new(string)
	if !r.Launch.MainScript.IsUnknown() && !r.Launch.MainScript.IsNull() {
		*mainScript = r.Launch.MainScript.ValueString()
	} else {
		mainScript = nil
	}
	entryName := new(string)
	if !r.Launch.EntryName.IsUnknown() && !r.Launch.EntryName.IsNull() {
		*entryName = r.Launch.EntryName.ValueString()
	} else {
		entryName = nil
	}
	schemaName := new(string)
	if !r.Launch.SchemaName.IsUnknown() && !r.Launch.SchemaName.IsNull() {
		*schemaName = r.Launch.SchemaName.ValueString()
	} else {
		schemaName = nil
	}
	resume := new(bool)
	if !r.Launch.Resume.IsUnknown() && !r.Launch.Resume.IsNull() {
		*resume = r.Launch.Resume.ValueBool()
	} else {
		resume = nil
	}
	pullLatest := new(bool)
	if !r.Launch.PullLatest.IsUnknown() && !r.Launch.PullLatest.IsNull() {
		*pullLatest = r.Launch.PullLatest.ValueBool()
	} else {
		pullLatest = nil
	}
	stubRun := new(bool)
	if !r.Launch.StubRun.IsUnknown() && !r.Launch.StubRun.IsNull() {
		*stubRun = r.Launch.StubRun.ValueBool()
	} else {
		stubRun = nil
	}
	labelIds := make([]int64, 0, len(r.Launch.LabelIds))
	for _, labelIdsItem := range r.Launch.LabelIds {
		labelIds = append(labelIds, labelIdsItem.ValueInt64())
	}
	headJobCpus := new(int)
	if !r.Launch.HeadJobCpus.IsUnknown() && !r.Launch.HeadJobCpus.IsNull() {
		*headJobCpus = int(r.Launch.HeadJobCpus.ValueInt32())
	} else {
		headJobCpus = nil
	}
	headJobMemoryMb := new(int)
	if !r.Launch.HeadJobMemoryMb.IsUnknown() && !r.Launch.HeadJobMemoryMb.IsNull() {
		*headJobMemoryMb = int(r.Launch.HeadJobMemoryMb.ValueInt32())
	} else {
		headJobMemoryMb = nil
	}
	launch := shared.WorkflowLaunchRequest{
		ComputeEnvID:     computeEnvID,
		RunName:          runName,
		Pipeline:         pipeline,
		WorkDir:          workDir,
		Revision:         revision,
		ConfigProfiles:   configProfiles,
		UserSecrets:      userSecrets,
		WorkspaceSecrets: workspaceSecrets,
		ConfigText:       configText,
		TowerConfig:      towerConfig,
		ParamsText:       paramsText,
		PreRunScript:     preRunScript,
		PostRunScript:    postRunScript,
		MainScript:       mainScript,
		EntryName:        entryName,
		SchemaName:       schemaName,
		Resume:           resume,
		PullLatest:       pullLatest,
		StubRun:          stubRun,
		LabelIds:         labelIds,
		HeadJobCpus:      headJobCpus,
		HeadJobMemoryMb:  headJobMemoryMb,
	}
	out := shared.CreateActionRequest{
		Name:   name,
		Source: source,
		Launch: launch,
	}

	return &out, diags
}

func (r *ActionResourceModel) ToSharedUpdateActionRequest(ctx context.Context) (*shared.UpdateActionRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	name := new(string)
	if !r.Name.IsUnknown() && !r.Name.IsNull() {
		*name = r.Name.ValueString()
	} else {
		name = nil
	}
	var launch *shared.WorkflowLaunchRequest
	computeEnvID := new(string)
	if !r.Launch.ComputeEnvID.IsUnknown() && !r.Launch.ComputeEnvID.IsNull() {
		*computeEnvID = r.Launch.ComputeEnvID.ValueString()
	} else {
		computeEnvID = nil
	}
	runName := new(string)
	if !r.Launch.RunName.IsUnknown() && !r.Launch.RunName.IsNull() {
		*runName = r.Launch.RunName.ValueString()
	} else {
		runName = nil
	}
	pipeline := new(string)
	if !r.Launch.Pipeline.IsUnknown() && !r.Launch.Pipeline.IsNull() {
		*pipeline = r.Launch.Pipeline.ValueString()
	} else {
		pipeline = nil
	}
	var workDir string
	workDir = r.Launch.WorkDir.ValueString()

	revision := new(string)
	if !r.Launch.Revision.IsUnknown() && !r.Launch.Revision.IsNull() {
		*revision = r.Launch.Revision.ValueString()
	} else {
		revision = nil
	}
	configProfiles := make([]string, 0, len(r.Launch.ConfigProfiles))
	for _, configProfilesItem := range r.Launch.ConfigProfiles {
		configProfiles = append(configProfiles, configProfilesItem.ValueString())
	}
	userSecrets := make([]string, 0, len(r.Launch.UserSecrets))
	for _, userSecretsItem := range r.Launch.UserSecrets {
		userSecrets = append(userSecrets, userSecretsItem.ValueString())
	}
	workspaceSecrets := make([]string, 0, len(r.Launch.WorkspaceSecrets))
	for _, workspaceSecretsItem := range r.Launch.WorkspaceSecrets {
		workspaceSecrets = append(workspaceSecrets, workspaceSecretsItem.ValueString())
	}
	configText := new(string)
	if !r.Launch.ConfigText.IsUnknown() && !r.Launch.ConfigText.IsNull() {
		*configText = r.Launch.ConfigText.ValueString()
	} else {
		configText = nil
	}
	towerConfig := new(string)
	if !r.Launch.TowerConfig.IsUnknown() && !r.Launch.TowerConfig.IsNull() {
		*towerConfig = r.Launch.TowerConfig.ValueString()
	} else {
		towerConfig = nil
	}
	paramsText := new(string)
	if !r.Launch.ParamsText.IsUnknown() && !r.Launch.ParamsText.IsNull() {
		*paramsText = r.Launch.ParamsText.ValueString()
	} else {
		paramsText = nil
	}
	preRunScript := new(string)
	if !r.Launch.PreRunScript.IsUnknown() && !r.Launch.PreRunScript.IsNull() {
		*preRunScript = r.Launch.PreRunScript.ValueString()
	} else {
		preRunScript = nil
	}
	postRunScript := new(string)
	if !r.Launch.PostRunScript.IsUnknown() && !r.Launch.PostRunScript.IsNull() {
		*postRunScript = r.Launch.PostRunScript.ValueString()
	} else {
		postRunScript = nil
	}
	mainScript := new(string)
	if !r.Launch.MainScript.IsUnknown() && !r.Launch.MainScript.IsNull() {
		*mainScript = r.Launch.MainScript.ValueString()
	} else {
		mainScript = nil
	}
	entryName := new(string)
	if !r.Launch.EntryName.IsUnknown() && !r.Launch.EntryName.IsNull() {
		*entryName = r.Launch.EntryName.ValueString()
	} else {
		entryName = nil
	}
	schemaName := new(string)
	if !r.Launch.SchemaName.IsUnknown() && !r.Launch.SchemaName.IsNull() {
		*schemaName = r.Launch.SchemaName.ValueString()
	} else {
		schemaName = nil
	}
	resume := new(bool)
	if !r.Launch.Resume.IsUnknown() && !r.Launch.Resume.IsNull() {
		*resume = r.Launch.Resume.ValueBool()
	} else {
		resume = nil
	}
	pullLatest := new(bool)
	if !r.Launch.PullLatest.IsUnknown() && !r.Launch.PullLatest.IsNull() {
		*pullLatest = r.Launch.PullLatest.ValueBool()
	} else {
		pullLatest = nil
	}
	stubRun := new(bool)
	if !r.Launch.StubRun.IsUnknown() && !r.Launch.StubRun.IsNull() {
		*stubRun = r.Launch.StubRun.ValueBool()
	} else {
		stubRun = nil
	}
	labelIds := make([]int64, 0, len(r.Launch.LabelIds))
	for _, labelIdsItem := range r.Launch.LabelIds {
		labelIds = append(labelIds, labelIdsItem.ValueInt64())
	}
	headJobCpus := new(int)
	if !r.Launch.HeadJobCpus.IsUnknown() && !r.Launch.HeadJobCpus.IsNull() {
		*headJobCpus = int(r.Launch.HeadJobCpus.ValueInt32())
	} else {
		headJobCpus = nil
	}
	headJobMemoryMb := new(int)
	if !r.Launch.HeadJobMemoryMb.IsUnknown() && !r.Launch.HeadJobMemoryMb.IsNull() {
		*headJobMemoryMb = int(r.Launch.HeadJobMemoryMb.ValueInt32())
	} else {
		headJobMemoryMb = nil
	}
	launch = &shared.WorkflowLaunchRequest{
		ComputeEnvID:     computeEnvID,
		RunName:          runName,
		Pipeline:         pipeline,
		WorkDir:          workDir,
		Revision:         revision,
		ConfigProfiles:   configProfiles,
		UserSecrets:      userSecrets,
		WorkspaceSecrets: workspaceSecrets,
		ConfigText:       configText,
		TowerConfig:      towerConfig,
		ParamsText:       paramsText,
		PreRunScript:     preRunScript,
		PostRunScript:    postRunScript,
		MainScript:       mainScript,
		EntryName:        entryName,
		SchemaName:       schemaName,
		Resume:           resume,
		PullLatest:       pullLatest,
		StubRun:          stubRun,
		LabelIds:         labelIds,
		HeadJobCpus:      headJobCpus,
		HeadJobMemoryMb:  headJobMemoryMb,
	}
	out := shared.UpdateActionRequest{
		Name:   name,
		Launch: launch,
	}

	return &out, diags
}
