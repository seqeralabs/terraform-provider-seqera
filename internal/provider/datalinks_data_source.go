// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	tfTypes "github.com/seqeralabs/terraform-provider-seqera/internal/provider/types"
	"github.com/seqeralabs/terraform-provider-seqera/internal/sdk"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &DataLinksDataSource{}
var _ datasource.DataSourceWithConfigure = &DataLinksDataSource{}

func NewDataLinksDataSource() datasource.DataSource {
	return &DataLinksDataSource{}
}

// DataLinksDataSource is the data source implementation.
type DataLinksDataSource struct {
	// Provider configured SDK client.
	client *sdk.Seqera
}

// DataLinksDataSourceModel describes the data model.
type DataLinksDataSourceModel struct {
	DataLinks   []tfTypes.DataLink `tfsdk:"data_links"`
	WorkspaceID types.Int64        `queryParam:"style=form,explode=true,name=workspaceId" tfsdk:"workspace_id"`
}

// Metadata returns the data source type name.
func (r *DataLinksDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_data_links"
}

// Schema defines the schema for the data source.
func (r *DataLinksDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "Data source for listing data links in Seqera platform.\n\nThis data source returns all data links accessible to the authenticated user,\nwith optional filtering by workspace. Use Terraform locals with for expressions\nto filter by provider type or name.\n",

		Attributes: map[string]schema.Attribute{
			"data_links": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"id": schema.StringAttribute{
							Computed:    true,
							Description: `Data link ID`,
						},
						"name": schema.StringAttribute{
							Computed:    true,
							Description: `Data link name`,
						},
						"provider": schema.StringAttribute{
							Computed:    true,
							Description: `Provider type (aws, azure, google, azure_entra, seqeracompute)`,
						},
						"region": schema.StringAttribute{
							Computed:    true,
							Description: `Geographic region where the data link is hosted`,
						},
						"resource_ref": schema.StringAttribute{
							Computed:    true,
							Description: `Resource reference (e.g., s3://bucket-name)`,
						},
					},
				},
				Description: `List of data links`,
			},
			"workspace_id": schema.Int64Attribute{
				Computed:    true,
				Optional:    true,
				Description: `Workspace numeric identifier`,
			},
		},
	}
}

func (r *DataLinksDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.Seqera)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.Seqera, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *DataLinksDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *DataLinksDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsListDataLinksDataSourceRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.DataLinks.ListDataLinks(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	switch res.StatusCode {
	case 200, 202:
		break
	default:
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.ListDataLinksDataSourceResponse != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedListDataLinksDataSourceResponse(ctx, res.ListDataLinksDataSourceResponse)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
