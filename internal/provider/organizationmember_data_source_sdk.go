// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/seqeralabs/terraform-provider-seqera/internal/sdk/models/operations"
	"github.com/seqeralabs/terraform-provider-seqera/internal/sdk/models/shared"
)

func (r *OrganizationMemberDataSourceModel) RefreshFromSharedListOrganizationMembersResponse(ctx context.Context, resp *shared.ListOrganizationMembersResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		if len(resp.Members) == 0 {
			diags.AddError("Unexpected response from API", "Missing response body array data.")
			return diags
		}

		diags.Append(r.RefreshFromSharedOrganizationMember(ctx, &resp.Members[0])...)

		if diags.HasError() {
			return diags
		}

		r.TotalSize = types.Int64PointerValue(resp.TotalSize)
	}

	return diags
}

func (r *OrganizationMemberDataSourceModel) RefreshFromSharedOrganizationMember(ctx context.Context, resp *shared.OrganizationMember) diag.Diagnostics {
	var diags diag.Diagnostics

	r.Email = types.StringPointerValue(resp.Email)
	r.MemberID = types.Int64PointerValue(resp.MemberID)
	r.OrgID = types.Int64Value(resp.OrgID)
	if resp.Role != nil {
		r.Role = types.StringValue(string(*resp.Role))
	} else {
		r.Role = types.StringNull()
	}
	r.User = types.StringValue(resp.User)
	r.UserName = types.StringPointerValue(resp.UserName)

	return diags
}

func (r *OrganizationMemberDataSourceModel) ToOperationsListOrganizationMembersRequest(ctx context.Context) (*operations.ListOrganizationMembersRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var orgID int64
	orgID = r.OrgID.ValueInt64()

	max := new(int)
	if !r.Max.IsUnknown() && !r.Max.IsNull() {
		*max = int(r.Max.ValueInt32())
	} else {
		max = nil
	}
	offset := new(int)
	if !r.Offset.IsUnknown() && !r.Offset.IsNull() {
		*offset = int(r.Offset.ValueInt32())
	} else {
		offset = nil
	}
	search := new(string)
	if !r.Search.IsUnknown() && !r.Search.IsNull() {
		*search = r.Search.ValueString()
	} else {
		search = nil
	}
	out := operations.ListOrganizationMembersRequest{
		OrgID:  orgID,
		Max:    max,
		Offset: offset,
		Search: search,
	}

	return &out, diags
}
