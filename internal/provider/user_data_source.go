// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/speakeasy/terraform-provider-seqera/internal/sdk"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &UserDataSource{}
var _ datasource.DataSourceWithConfigure = &UserDataSource{}

func NewUserDataSource() datasource.DataSource {
	return &UserDataSource{}
}

// UserDataSource is the data source implementation.
type UserDataSource struct {
	// Provider configured SDK client.
	client *sdk.Seqera
}

// UserDataSourceModel describes the data model.
type UserDataSourceModel struct {
	Avatar             types.String `tfsdk:"avatar"`
	AvatarID           types.String `tfsdk:"avatar_id"`
	DateCreated        types.String `tfsdk:"date_created"`
	DefaultWorkspaceID types.Int64  `tfsdk:"default_workspace_id"`
	Deleted            types.Bool   `tfsdk:"deleted"`
	Description        types.String `tfsdk:"description"`
	Email              types.String `tfsdk:"email"`
	FirstName          types.String `tfsdk:"first_name"`
	ID                 types.Int64  `tfsdk:"id"`
	LastAccess         types.String `tfsdk:"last_access"`
	LastName           types.String `tfsdk:"last_name"`
	LastUpdated        types.String `tfsdk:"last_updated"`
	MarketingConsent   types.Bool   `tfsdk:"marketing_consent"`
	NeedConsent        types.Bool   `tfsdk:"need_consent"`
	Notification       types.Bool   `tfsdk:"notification"`
	Organization       types.String `tfsdk:"organization"`
	TermsOfUseConsent  types.Bool   `tfsdk:"terms_of_use_consent"`
	UserID             types.Int64  `tfsdk:"user_id"`
	UserName           types.String `tfsdk:"user_name"`
}

// Metadata returns the data source type name.
func (r *UserDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_user"
}

// Schema defines the schema for the data source.
func (r *UserDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "User DataSource",

		Attributes: map[string]schema.Attribute{
			"avatar": schema.StringAttribute{
				Computed: true,
			},
			"avatar_id": schema.StringAttribute{
				Computed: true,
			},
			"date_created": schema.StringAttribute{
				Computed: true,
			},
			"default_workspace_id": schema.Int64Attribute{
				Computed: true,
			},
			"deleted": schema.BoolAttribute{
				Computed: true,
			},
			"description": schema.StringAttribute{
				Computed: true,
			},
			"email": schema.StringAttribute{
				Computed: true,
			},
			"first_name": schema.StringAttribute{
				Computed: true,
			},
			"id": schema.Int64Attribute{
				Computed: true,
			},
			"last_access": schema.StringAttribute{
				Computed: true,
			},
			"last_name": schema.StringAttribute{
				Computed: true,
			},
			"last_updated": schema.StringAttribute{
				Computed: true,
			},
			"marketing_consent": schema.BoolAttribute{
				Computed: true,
			},
			"need_consent": schema.BoolAttribute{
				Computed: true,
			},
			"notification": schema.BoolAttribute{
				Computed: true,
			},
			"organization": schema.StringAttribute{
				Computed: true,
			},
			"terms_of_use_consent": schema.BoolAttribute{
				Computed: true,
			},
			"user_id": schema.Int64Attribute{
				Required:    true,
				Description: `User numeric identifier`,
			},
			"user_name": schema.StringAttribute{
				Computed: true,
			},
		},
	}
}

func (r *UserDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.Seqera)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.Seqera, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *UserDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *UserDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsDescribeUserRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Users.DescribeUser(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.DescribeUserResponse != nil && res.DescribeUserResponse.User != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedUserDbDto(ctx, res.DescribeUserResponse.User)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
