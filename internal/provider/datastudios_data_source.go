// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	tfTypes "github.com/speakeasy/terraform-provider-seqera/internal/provider/types"
	"github.com/speakeasy/terraform-provider-seqera/internal/sdk"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &DataStudiosDataSource{}
var _ datasource.DataSourceWithConfigure = &DataStudiosDataSource{}

func NewDataStudiosDataSource() datasource.DataSource {
	return &DataStudiosDataSource{}
}

// DataStudiosDataSource is the data source implementation.
type DataStudiosDataSource struct {
	client *sdk.Seqera
}

// DataStudiosDataSourceModel describes the data model.
type DataStudiosDataSourceModel struct {
	Attributes  []types.String          `queryParam:"style=form,explode=true,name=attributes" tfsdk:"attributes"`
	Max         types.Int32             `queryParam:"style=form,explode=true,name=max" tfsdk:"max"`
	Offset      types.Int32             `queryParam:"style=form,explode=true,name=offset" tfsdk:"offset"`
	Search      types.String            `queryParam:"style=form,explode=true,name=search" tfsdk:"search"`
	Studios     []tfTypes.DataStudioDto `tfsdk:"studios"`
	TotalSize   types.Int64             `tfsdk:"total_size"`
	WorkspaceID types.Int64             `queryParam:"style=form,explode=true,name=workspaceId" tfsdk:"workspace_id"`
}

// Metadata returns the data source type name.
func (r *DataStudiosDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_data_studios"
}

// Schema defines the schema for the data source.
func (r *DataStudiosDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "DataStudios DataSource",

		Attributes: map[string]schema.Attribute{
			"attributes": schema.ListAttribute{
				Optional:    true,
				ElementType: types.StringType,
				Description: `Optional attribute values to be included in the response (` + "`" + `labels` + "`" + `). Returns an empty value (` + "`" + `labels: null` + "`" + `) if omitted.`,
			},
			"max": schema.Int32Attribute{
				Optional:    true,
				Description: `Pagination max results`,
			},
			"offset": schema.Int32Attribute{
				Optional:    true,
				Description: `Pagination offset`,
			},
			"search": schema.StringAttribute{
				Optional:    true,
				Description: `Optional search criteria, allowing free text search on name and templateUrl and keywords: ` + "`" + `userId` + "`" + `, ` + "`" + `computeEnvId` + "`" + ` and ` + "`" + `status` + "`" + `.`,
			},
			"studios": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"active_connections": schema.ListNestedAttribute{
							Computed: true,
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"avatar": schema.StringAttribute{
										Computed: true,
									},
									"email": schema.StringAttribute{
										Computed: true,
									},
									"id": schema.Int64Attribute{
										Computed: true,
									},
									"last_active": schema.StringAttribute{
										Computed: true,
									},
									"user_name": schema.StringAttribute{
										Computed: true,
									},
								},
							},
						},
						"base_image": schema.StringAttribute{
							Computed: true,
						},
						"compute_env": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"credentials_id": schema.StringAttribute{
									Computed: true,
								},
								"id": schema.StringAttribute{
									Computed: true,
								},
								"name": schema.StringAttribute{
									Computed: true,
								},
								"platform": schema.StringAttribute{
									Computed: true,
								},
								"region": schema.StringAttribute{
									Computed: true,
								},
								"work_dir": schema.StringAttribute{
									Computed: true,
								},
							},
						},
						"configuration": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"conda_environment": schema.StringAttribute{
									Computed: true,
								},
								"cpu": schema.Int32Attribute{
									Computed: true,
								},
								"gpu": schema.Int32Attribute{
									Computed: true,
								},
								"lifespan_hours": schema.Int32Attribute{
									Computed: true,
								},
								"memory": schema.Int32Attribute{
									Computed: true,
								},
								"mount_data": schema.ListAttribute{
									Computed:    true,
									ElementType: types.StringType,
								},
							},
						},
						"custom_image": schema.BoolAttribute{
							Computed: true,
						},
						"date_created": schema.StringAttribute{
							Computed: true,
						},
						"description": schema.StringAttribute{
							Computed: true,
						},
						"effective_lifespan_hours": schema.Int32Attribute{
							Computed: true,
						},
						"is_private": schema.BoolAttribute{
							Computed: true,
						},
						"labels": schema.ListNestedAttribute{
							Computed: true,
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"date_created": schema.StringAttribute{
										Computed: true,
									},
									"id": schema.Int64Attribute{
										Computed: true,
									},
									"is_default": schema.BoolAttribute{
										Computed: true,
									},
									"name": schema.StringAttribute{
										Computed: true,
									},
									"resource": schema.BoolAttribute{
										Computed: true,
									},
									"value": schema.StringAttribute{
										Computed: true,
									},
								},
							},
						},
						"last_started": schema.StringAttribute{
							Computed: true,
						},
						"last_updated": schema.StringAttribute{
							Computed: true,
						},
						"mounted_data_links": schema.ListNestedAttribute{
							Computed: true,
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"credentials": schema.ListNestedAttribute{
										Computed: true,
										NestedObject: schema.NestedAttributeObject{
											Attributes: map[string]schema.Attribute{
												"id": schema.StringAttribute{
													Computed: true,
												},
												"name": schema.StringAttribute{
													Computed: true,
												},
												"provider": schema.StringAttribute{
													Computed: true,
												},
											},
										},
									},
									"description": schema.StringAttribute{
										Computed: true,
									},
									"hidden": schema.BoolAttribute{
										Computed: true,
									},
									"id": schema.StringAttribute{
										Computed: true,
									},
									"message": schema.StringAttribute{
										Computed: true,
									},
									"name": schema.StringAttribute{
										Computed: true,
									},
									"provider": schema.StringAttribute{
										Computed: true,
									},
									"public_accessible": schema.BoolAttribute{
										Computed: true,
									},
									"region": schema.StringAttribute{
										Computed: true,
									},
									"resource_ref": schema.StringAttribute{
										Computed: true,
									},
									"status": schema.StringAttribute{
										Computed: true,
									},
									"type": schema.StringAttribute{
										Computed: true,
									},
								},
							},
						},
						"name": schema.StringAttribute{
							Computed: true,
						},
						"parent_checkpoint": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"checkpoint_id": schema.Int64Attribute{
									Computed: true,
								},
								"checkpoint_name": schema.StringAttribute{
									Computed: true,
								},
								"session_id": schema.StringAttribute{
									Computed: true,
								},
								"studio_name": schema.StringAttribute{
									Computed: true,
								},
							},
						},
						"progress": schema.ListNestedAttribute{
							Computed: true,
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"message": schema.StringAttribute{
										Computed: true,
									},
									"status": schema.StringAttribute{
										Computed: true,
									},
									"warnings": schema.ListAttribute{
										Computed:    true,
										ElementType: types.StringType,
									},
								},
							},
						},
						"session_id": schema.StringAttribute{
							Computed: true,
						},
						"status_info": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"last_update": schema.StringAttribute{
									Computed: true,
								},
								"message": schema.StringAttribute{
									Computed: true,
								},
								"status": schema.StringAttribute{
									Computed: true,
								},
							},
						},
						"studio_url": schema.StringAttribute{
							Computed: true,
						},
						"template": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"icon": schema.StringAttribute{
									Computed: true,
								},
								"repository": schema.StringAttribute{
									Computed: true,
								},
								"status": schema.StringAttribute{
									Computed: true,
								},
								"tool": schema.StringAttribute{
									Computed: true,
								},
							},
						},
						"user": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"avatar": schema.StringAttribute{
									Computed: true,
								},
								"email": schema.StringAttribute{
									Computed: true,
								},
								"id": schema.Int64Attribute{
									Computed: true,
								},
								"user_name": schema.StringAttribute{
									Computed: true,
								},
							},
						},
						"wave_build_url": schema.StringAttribute{
							Computed: true,
						},
						"workspace_id": schema.Int64Attribute{
							Computed: true,
						},
					},
				},
			},
			"total_size": schema.Int64Attribute{
				Computed: true,
			},
			"workspace_id": schema.Int64Attribute{
				Optional:    true,
				Description: `Workspace numeric identifier`,
			},
		},
	}
}

func (r *DataStudiosDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.Seqera)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.Seqera, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *DataStudiosDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *DataStudiosDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsListDataStudiosRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Studios.ListDataStudios(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.DataStudioListResponse != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedDataStudioListResponse(ctx, res.DataStudioListResponse)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
