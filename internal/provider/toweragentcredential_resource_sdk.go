// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/seqeralabs/terraform-provider-seqera/internal/sdk/models/operations"
	"github.com/seqeralabs/terraform-provider-seqera/internal/sdk/models/shared"
)

func (r *TowerAgentCredentialResourceModel) RefreshFromSharedCreateTowerAgentCredentialsResponse(ctx context.Context, resp *shared.CreateTowerAgentCredentialsResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.CredentialsID = types.StringPointerValue(resp.CredentialsID)
	}

	return diags
}

func (r *TowerAgentCredentialResourceModel) RefreshFromSharedDescribeTowerAgentCredentialsResponse(ctx context.Context, resp *shared.DescribeTowerAgentCredentialsResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		diags.Append(r.RefreshFromSharedTowerAgentCredentialOutput(ctx, resp.Credentials)...)

		if diags.HasError() {
			return diags
		}

	}

	return diags
}

func (r *TowerAgentCredentialResourceModel) RefreshFromSharedTowerAgentCredentialOutput(ctx context.Context, resp *shared.TowerAgentCredentialOutput) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.ID = types.StringPointerValue(resp.ID)
		r.Name = types.StringValue(resp.Name)
		if resp.ProviderType != nil {
			r.ProviderType = types.StringValue(string(*resp.ProviderType))
		} else {
			r.ProviderType = types.StringNull()
		}
	}

	return diags
}

func (r *TowerAgentCredentialResourceModel) ToOperationsCreateTowerAgentCredentialsRequest(ctx context.Context) (*operations.CreateTowerAgentCredentialsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	workspaceID := new(int64)
	if !r.WorkspaceID.IsUnknown() && !r.WorkspaceID.IsNull() {
		*workspaceID = r.WorkspaceID.ValueInt64()
	} else {
		workspaceID = nil
	}
	createTowerAgentCredentialsRequest, createTowerAgentCredentialsRequestDiags := r.ToSharedCreateTowerAgentCredentialsRequest(ctx)
	diags.Append(createTowerAgentCredentialsRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreateTowerAgentCredentialsRequest{
		WorkspaceID:                        workspaceID,
		CreateTowerAgentCredentialsRequest: *createTowerAgentCredentialsRequest,
	}

	return &out, diags
}

func (r *TowerAgentCredentialResourceModel) ToOperationsDeleteTowerAgentCredentialsRequest(ctx context.Context) (*operations.DeleteTowerAgentCredentialsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var credentialsID string
	credentialsID = r.CredentialsID.ValueString()

	workspaceID := new(int64)
	if !r.WorkspaceID.IsUnknown() && !r.WorkspaceID.IsNull() {
		*workspaceID = r.WorkspaceID.ValueInt64()
	} else {
		workspaceID = nil
	}
	out := operations.DeleteTowerAgentCredentialsRequest{
		CredentialsID: credentialsID,
		WorkspaceID:   workspaceID,
	}

	return &out, diags
}

func (r *TowerAgentCredentialResourceModel) ToOperationsDescribeTowerAgentCredentialsRequest(ctx context.Context) (*operations.DescribeTowerAgentCredentialsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var credentialsID string
	credentialsID = r.CredentialsID.ValueString()

	workspaceID := new(int64)
	if !r.WorkspaceID.IsUnknown() && !r.WorkspaceID.IsNull() {
		*workspaceID = r.WorkspaceID.ValueInt64()
	} else {
		workspaceID = nil
	}
	out := operations.DescribeTowerAgentCredentialsRequest{
		CredentialsID: credentialsID,
		WorkspaceID:   workspaceID,
	}

	return &out, diags
}

func (r *TowerAgentCredentialResourceModel) ToOperationsUpdateTowerAgentCredentialsRequest(ctx context.Context) (*operations.UpdateTowerAgentCredentialsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var credentialsID string
	credentialsID = r.CredentialsID.ValueString()

	workspaceID := new(int64)
	if !r.WorkspaceID.IsUnknown() && !r.WorkspaceID.IsNull() {
		*workspaceID = r.WorkspaceID.ValueInt64()
	} else {
		workspaceID = nil
	}
	updateTowerAgentCredentialsRequest, updateTowerAgentCredentialsRequestDiags := r.ToSharedUpdateTowerAgentCredentialsRequest(ctx)
	diags.Append(updateTowerAgentCredentialsRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateTowerAgentCredentialsRequest{
		CredentialsID:                      credentialsID,
		WorkspaceID:                        workspaceID,
		UpdateTowerAgentCredentialsRequest: *updateTowerAgentCredentialsRequest,
	}

	return &out, diags
}

func (r *TowerAgentCredentialResourceModel) ToSharedCreateTowerAgentCredentialsRequest(ctx context.Context) (*shared.CreateTowerAgentCredentialsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	credentials, credentialsDiags := r.ToSharedTowerAgentCredential(ctx)
	diags.Append(credentialsDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := shared.CreateTowerAgentCredentialsRequest{
		Credentials: credentials,
	}

	return &out, diags
}

func (r *TowerAgentCredentialResourceModel) ToSharedTowerAgentCredential(ctx context.Context) (*shared.TowerAgentCredential, diag.Diagnostics) {
	var diags diag.Diagnostics

	id := new(string)
	if !r.ID.IsUnknown() && !r.ID.IsNull() {
		*id = r.ID.ValueString()
	} else {
		id = nil
	}
	var name string
	name = r.Name.ValueString()

	providerType := new(shared.TowerAgentCredentialProviderType)
	if !r.ProviderType.IsUnknown() && !r.ProviderType.IsNull() {
		*providerType = shared.TowerAgentCredentialProviderType(r.ProviderType.ValueString())
	} else {
		providerType = nil
	}
	keys := shared.TowerAgentCredentialKeys{}
	out := shared.TowerAgentCredential{
		ID:           id,
		Name:         name,
		ProviderType: providerType,
		Keys:         keys,
	}

	return &out, diags
}

func (r *TowerAgentCredentialResourceModel) ToSharedTowerAgentCredentialKeys(ctx context.Context) (*shared.TowerAgentCredentialKeys, diag.Diagnostics) {
	var diags diag.Diagnostics

	var connectionID string
	connectionID = r.ConnectionID.ValueString()

	workDir := new(string)
	if !r.WorkDir.IsUnknown() && !r.WorkDir.IsNull() {
		*workDir = r.WorkDir.ValueString()
	} else {
		workDir = nil
	}
	out := shared.TowerAgentCredentialKeys{
		ConnectionID: connectionID,
		WorkDir:      workDir,
	}

	return &out, diags
}

func (r *TowerAgentCredentialResourceModel) ToSharedUpdateTowerAgentCredentialsRequest(ctx context.Context) (*shared.UpdateTowerAgentCredentialsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	credentials, credentialsDiags := r.ToSharedTowerAgentCredential(ctx)
	diags.Append(credentialsDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := shared.UpdateTowerAgentCredentialsRequest{
		Credentials: credentials,
	}

	return &out, diags
}
