// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	tfTypes "github.com/speakeasy/terraform-provider-seqera/internal/provider/types"
	"github.com/speakeasy/terraform-provider-seqera/internal/sdk"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &DataLinkDataSource{}
var _ datasource.DataSourceWithConfigure = &DataLinkDataSource{}

func NewDataLinkDataSource() datasource.DataSource {
	return &DataLinkDataSource{}
}

// DataLinkDataSource is the data source implementation.
type DataLinkDataSource struct {
	client *sdk.Seqera
}

// DataLinkDataSourceModel describes the data model.
type DataLinkDataSourceModel struct {
	Credentials      []tfTypes.DataLinkCredentials `tfsdk:"credentials"`
	CredentialsID    types.String                  `queryParam:"style=form,explode=true,name=credentialsId" tfsdk:"credentials_id"`
	DataLinkID       types.String                  `tfsdk:"data_link_id"`
	Description      types.String                  `tfsdk:"description"`
	Hidden           types.Bool                    `tfsdk:"hidden"`
	Message          types.String                  `tfsdk:"message"`
	Name             types.String                  `tfsdk:"name"`
	ProviderType     types.String                  `tfsdk:"provider_type"`
	PublicAccessible types.Bool                    `tfsdk:"public_accessible"`
	Region           types.String                  `tfsdk:"region"`
	ResourceRef      types.String                  `tfsdk:"resource_ref"`
	Status           types.String                  `tfsdk:"status"`
	Type             types.String                  `tfsdk:"type"`
	WorkspaceID      types.Int64                   `queryParam:"style=form,explode=true,name=workspaceId" tfsdk:"workspace_id"`
}

// Metadata returns the data source type name.
func (r *DataLinkDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_data_link"
}

// Schema defines the schema for the data source.
func (r *DataLinkDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "DataLink DataSource",

		Attributes: map[string]schema.Attribute{
			"credentials": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"id": schema.StringAttribute{
							Computed: true,
						},
						"name": schema.StringAttribute{
							Computed: true,
						},
						"provider_type": schema.StringAttribute{
							Computed: true,
						},
					},
				},
			},
			"credentials_id": schema.StringAttribute{
				Optional:    true,
				Description: `Credentials string identifier`,
			},
			"data_link_id": schema.StringAttribute{
				Required:    true,
				Description: `Data-link string identifier`,
			},
			"description": schema.StringAttribute{
				Computed: true,
			},
			"hidden": schema.BoolAttribute{
				Computed: true,
			},
			"message": schema.StringAttribute{
				Computed: true,
			},
			"name": schema.StringAttribute{
				Computed: true,
			},
			"provider_type": schema.StringAttribute{
				Computed: true,
			},
			"public_accessible": schema.BoolAttribute{
				Computed: true,
			},
			"region": schema.StringAttribute{
				Computed: true,
			},
			"resource_ref": schema.StringAttribute{
				Computed: true,
			},
			"status": schema.StringAttribute{
				Computed: true,
			},
			"type": schema.StringAttribute{
				Computed: true,
			},
			"workspace_id": schema.Int64Attribute{
				Optional:    true,
				Description: `Workspace numeric identifier`,
			},
		},
	}
}

func (r *DataLinkDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.Seqera)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.Seqera, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *DataLinkDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *DataLinkDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsDescribeDataLinkRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.DataLinks.DescribeDataLink(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.DataLinkResponse != nil && res.DataLinkResponse.DataLink != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedDataLinkDto(ctx, res.DataLinkResponse.DataLink)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
