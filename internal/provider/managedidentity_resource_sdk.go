// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/seqeralabs/terraform-provider-seqera/internal/sdk/models/operations"
	"github.com/seqeralabs/terraform-provider-seqera/internal/sdk/models/shared"
)

func (r *ManagedIdentityResourceModel) RefreshFromSharedCreateGridManagedIdentityResponse(ctx context.Context, resp *shared.CreateGridManagedIdentityResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.ManagedIdentityID = types.Int64PointerValue(resp.ManagedIdentityID)
	}

	return diags
}

func (r *ManagedIdentityResourceModel) RefreshFromSharedDescribeGridManagedIdentityResponse(ctx context.Context, resp *shared.DescribeGridManagedIdentityResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		diags.Append(r.RefreshFromSharedGridManagedIdentity(ctx, resp.ManagedIdentity)...)

		if diags.HasError() {
			return diags
		}

	}

	return diags
}

func (r *ManagedIdentityResourceModel) RefreshFromSharedGridManagedIdentity(ctx context.Context, resp *shared.GridManagedIdentity) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.HostName = types.StringValue(resp.HostName)
		r.ManagedIdentityID = types.Int64PointerValue(resp.ManagedIdentityID)
		r.Name = types.StringValue(resp.Name)
		r.OrgID = types.Int64Value(resp.OrgID)
		r.Platform = types.StringValue(string(resp.Platform))
		r.Port = types.Int32Value(int32(resp.Port))
	}

	return diags
}

func (r *ManagedIdentityResourceModel) ToOperationsCreateManagedIdentityRequest(ctx context.Context) (*operations.CreateManagedIdentityRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var orgID int64
	orgID = r.OrgID.ValueInt64()

	createGridManagedIdentityRequest, createGridManagedIdentityRequestDiags := r.ToSharedCreateGridManagedIdentityRequest(ctx)
	diags.Append(createGridManagedIdentityRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreateManagedIdentityRequest{
		OrgID:                            orgID,
		CreateGridManagedIdentityRequest: *createGridManagedIdentityRequest,
	}

	return &out, diags
}

func (r *ManagedIdentityResourceModel) ToOperationsDeleteManagedIdentityRequest(ctx context.Context) (*operations.DeleteManagedIdentityRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var managedIdentityID int64
	managedIdentityID = r.ManagedIdentityID.ValueInt64()

	orgID := new(int64)
	if !r.OrgID.IsUnknown() && !r.OrgID.IsNull() {
		*orgID = r.OrgID.ValueInt64()
	} else {
		orgID = nil
	}
	checked := new(bool)
	if !r.Checked.IsUnknown() && !r.Checked.IsNull() {
		*checked = r.Checked.ValueBool()
	} else {
		checked = nil
	}
	out := operations.DeleteManagedIdentityRequest{
		ManagedIdentityID: managedIdentityID,
		OrgID:             orgID,
		Checked:           checked,
	}

	return &out, diags
}

func (r *ManagedIdentityResourceModel) ToOperationsDescribeManagedIdentityRequest(ctx context.Context) (*operations.DescribeManagedIdentityRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var managedIdentityID int64
	managedIdentityID = r.ManagedIdentityID.ValueInt64()

	var orgID int64
	orgID = r.OrgID.ValueInt64()

	out := operations.DescribeManagedIdentityRequest{
		ManagedIdentityID: managedIdentityID,
		OrgID:             orgID,
	}

	return &out, diags
}

func (r *ManagedIdentityResourceModel) ToOperationsUpdateManagedIdentityRequest(ctx context.Context) (*operations.UpdateManagedIdentityRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	orgID := new(int64)
	if !r.OrgID.IsUnknown() && !r.OrgID.IsNull() {
		*orgID = r.OrgID.ValueInt64()
	} else {
		orgID = nil
	}
	var managedIdentityID int64
	managedIdentityID = r.ManagedIdentityID.ValueInt64()

	updateGridManagedIdentityRequest, updateGridManagedIdentityRequestDiags := r.ToSharedUpdateGridManagedIdentityRequest(ctx)
	diags.Append(updateGridManagedIdentityRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateManagedIdentityRequest{
		OrgID:                            orgID,
		ManagedIdentityID:                managedIdentityID,
		UpdateGridManagedIdentityRequest: *updateGridManagedIdentityRequest,
	}

	return &out, diags
}

func (r *ManagedIdentityResourceModel) ToSharedCreateGridManagedIdentityRequest(ctx context.Context) (*shared.CreateGridManagedIdentityRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	managedIdentity, managedIdentityDiags := r.ToSharedGridManagedIdentity(ctx)
	diags.Append(managedIdentityDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := shared.CreateGridManagedIdentityRequest{
		ManagedIdentity: *managedIdentity,
	}

	return &out, diags
}

func (r *ManagedIdentityResourceModel) ToSharedGridManagedIdentity(ctx context.Context) (*shared.GridManagedIdentity, diag.Diagnostics) {
	var diags diag.Diagnostics

	managedIdentityID := new(int64)
	if !r.ManagedIdentityID.IsUnknown() && !r.ManagedIdentityID.IsNull() {
		*managedIdentityID = r.ManagedIdentityID.ValueInt64()
	} else {
		managedIdentityID = nil
	}
	var name string
	name = r.Name.ValueString()

	platform := shared.GridPlatform(r.Platform.ValueString())
	var hostName string
	hostName = r.HostName.ValueString()

	var port int
	port = int(r.Port.ValueInt32())

	var orgID int64
	orgID = r.OrgID.ValueInt64()

	out := shared.GridManagedIdentity{
		ManagedIdentityID: managedIdentityID,
		Name:              name,
		Platform:          platform,
		HostName:          hostName,
		Port:              port,
		OrgID:             orgID,
	}

	return &out, diags
}

func (r *ManagedIdentityResourceModel) ToSharedUpdateGridManagedIdentityRequest(ctx context.Context) (*shared.UpdateGridManagedIdentityRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	managedIdentity, managedIdentityDiags := r.ToSharedGridManagedIdentity(ctx)
	diags.Append(managedIdentityDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := shared.UpdateGridManagedIdentityRequest{
		ManagedIdentity: *managedIdentity,
	}

	return &out, diags
}
