// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/speakeasy/terraform-provider-seqera/internal/provider/typeconvert"
	tfTypes "github.com/speakeasy/terraform-provider-seqera/internal/provider/types"
	"github.com/speakeasy/terraform-provider-seqera/internal/sdk/models/operations"
	"github.com/speakeasy/terraform-provider-seqera/internal/sdk/models/shared"
)

func (r *DataStudiosDataSourceModel) ToOperationsListDataStudiosRequest(ctx context.Context) (*operations.ListDataStudiosRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	workspaceID := new(int64)
	if !r.WorkspaceID.IsUnknown() && !r.WorkspaceID.IsNull() {
		*workspaceID = r.WorkspaceID.ValueInt64()
	} else {
		workspaceID = nil
	}
	search := new(string)
	if !r.Search.IsUnknown() && !r.Search.IsNull() {
		*search = r.Search.ValueString()
	} else {
		search = nil
	}
	max := new(int)
	if !r.Max.IsUnknown() && !r.Max.IsNull() {
		*max = int(r.Max.ValueInt32())
	} else {
		max = nil
	}
	offset := new(int)
	if !r.Offset.IsUnknown() && !r.Offset.IsNull() {
		*offset = int(r.Offset.ValueInt32())
	} else {
		offset = nil
	}
	attributes := make([]shared.DataStudioQueryAttribute, 0, len(r.Attributes))
	for _, attributesItem := range r.Attributes {
		attributes = append(attributes, shared.DataStudioQueryAttribute(attributesItem.ValueString()))
	}
	out := operations.ListDataStudiosRequest{
		WorkspaceID: workspaceID,
		Search:      search,
		Max:         max,
		Offset:      offset,
		Attributes:  attributes,
	}

	return &out, diags
}

func (r *DataStudiosDataSourceModel) RefreshFromSharedDataStudioListResponse(ctx context.Context, resp *shared.DataStudioListResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Studios = []tfTypes.DataStudioDto{}
		if len(r.Studios) > len(resp.Studios) {
			r.Studios = r.Studios[:len(resp.Studios)]
		}
		for studiosCount, studiosItem := range resp.Studios {
			var studios tfTypes.DataStudioDto
			studios.ActiveConnections = []tfTypes.ActiveConnection{}
			for activeConnectionsCount, activeConnectionsItem := range studiosItem.ActiveConnections {
				var activeConnections tfTypes.ActiveConnection
				activeConnections.Avatar = types.StringValue(activeConnectionsItem.Avatar)
				activeConnections.Email = types.StringValue(activeConnectionsItem.Email)
				activeConnections.ID = types.Int64Value(activeConnectionsItem.ID)
				activeConnections.LastActive = types.StringValue(typeconvert.TimeToString(activeConnectionsItem.LastActive))
				activeConnections.UserName = types.StringValue(activeConnectionsItem.UserName)
				if activeConnectionsCount+1 > len(studios.ActiveConnections) {
					studios.ActiveConnections = append(studios.ActiveConnections, activeConnections)
				} else {
					studios.ActiveConnections[activeConnectionsCount].Avatar = activeConnections.Avatar
					studios.ActiveConnections[activeConnectionsCount].Email = activeConnections.Email
					studios.ActiveConnections[activeConnectionsCount].ID = activeConnections.ID
					studios.ActiveConnections[activeConnectionsCount].LastActive = activeConnections.LastActive
					studios.ActiveConnections[activeConnectionsCount].UserName = activeConnections.UserName
				}
			}
			studios.BaseImage = types.StringPointerValue(studiosItem.BaseImage)
			if studiosItem.ComputeEnv == nil {
				studios.ComputeEnv = nil
			} else {
				studios.ComputeEnv = &tfTypes.DataStudioComputeEnvDto{}
				studios.ComputeEnv.CredentialsID = types.StringPointerValue(studiosItem.ComputeEnv.CredentialsID)
				studios.ComputeEnv.ID = types.StringPointerValue(studiosItem.ComputeEnv.ID)
				studios.ComputeEnv.Name = types.StringPointerValue(studiosItem.ComputeEnv.Name)
				studios.ComputeEnv.Platform = types.StringPointerValue(studiosItem.ComputeEnv.Platform)
				studios.ComputeEnv.Region = types.StringPointerValue(studiosItem.ComputeEnv.Region)
				studios.ComputeEnv.WorkDir = types.StringPointerValue(studiosItem.ComputeEnv.WorkDir)
			}
			if studiosItem.Configuration == nil {
				studios.Configuration = nil
			} else {
				studios.Configuration = &tfTypes.DataStudioConfiguration{}
				studios.Configuration.CondaEnvironment = types.StringPointerValue(studiosItem.Configuration.CondaEnvironment)
				studios.Configuration.CPU = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(studiosItem.Configuration.CPU))
				studios.Configuration.Gpu = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(studiosItem.Configuration.Gpu))
				studios.Configuration.LifespanHours = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(studiosItem.Configuration.LifespanHours))
				studios.Configuration.Memory = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(studiosItem.Configuration.Memory))
				studios.Configuration.MountData = make([]types.String, 0, len(studiosItem.Configuration.MountData))
				for _, v := range studiosItem.Configuration.MountData {
					studios.Configuration.MountData = append(studios.Configuration.MountData, types.StringValue(v))
				}
			}
			studios.CustomImage = types.BoolPointerValue(studiosItem.CustomImage)
			studios.DateCreated = types.StringPointerValue(typeconvert.TimePointerToStringPointer(studiosItem.DateCreated))
			studios.Description = types.StringPointerValue(studiosItem.Description)
			studios.EffectiveLifespanHours = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(studiosItem.EffectiveLifespanHours))
			studios.IsPrivate = types.BoolPointerValue(studiosItem.IsPrivate)
			if studiosItem.Labels != nil {
				studios.Labels = []tfTypes.LabelDbDto{}
				for labelsCount, labelsItem := range studiosItem.Labels {
					var labels tfTypes.LabelDbDto
					labels.DateCreated = types.StringPointerValue(typeconvert.TimePointerToStringPointer(labelsItem.DateCreated))
					labels.ID = types.Int64PointerValue(labelsItem.ID)
					labels.IsDefault = types.BoolPointerValue(labelsItem.IsDefault)
					labels.Name = types.StringPointerValue(labelsItem.Name)
					labels.Resource = types.BoolPointerValue(labelsItem.Resource)
					labels.Value = types.StringPointerValue(labelsItem.Value)
					if labelsCount+1 > len(studios.Labels) {
						studios.Labels = append(studios.Labels, labels)
					} else {
						studios.Labels[labelsCount].DateCreated = labels.DateCreated
						studios.Labels[labelsCount].ID = labels.ID
						studios.Labels[labelsCount].IsDefault = labels.IsDefault
						studios.Labels[labelsCount].Name = labels.Name
						studios.Labels[labelsCount].Resource = labels.Resource
						studios.Labels[labelsCount].Value = labels.Value
					}
				}
			}
			studios.LastStarted = types.StringPointerValue(typeconvert.TimePointerToStringPointer(studiosItem.LastStarted))
			studios.LastUpdated = types.StringPointerValue(typeconvert.TimePointerToStringPointer(studiosItem.LastUpdated))
			studios.MountedDataLinks = []tfTypes.DataLinkDto{}
			for mountedDataLinksCount, mountedDataLinksItem := range studiosItem.MountedDataLinks {
				var mountedDataLinks tfTypes.DataLinkDto
				mountedDataLinks.Credentials = []tfTypes.DataLinkCredentials{}
				for credentialsCount, credentialsItem := range mountedDataLinksItem.Credentials {
					var credentials tfTypes.DataLinkCredentials
					credentials.ID = types.StringValue(credentialsItem.ID)
					credentials.Name = types.StringValue(credentialsItem.Name)
					credentials.Provider = types.StringValue(string(credentialsItem.Provider))
					if credentialsCount+1 > len(mountedDataLinks.Credentials) {
						mountedDataLinks.Credentials = append(mountedDataLinks.Credentials, credentials)
					} else {
						mountedDataLinks.Credentials[credentialsCount].ID = credentials.ID
						mountedDataLinks.Credentials[credentialsCount].Name = credentials.Name
						mountedDataLinks.Credentials[credentialsCount].Provider = credentials.Provider
					}
				}
				mountedDataLinks.Description = types.StringPointerValue(mountedDataLinksItem.Description)
				mountedDataLinks.Hidden = types.BoolPointerValue(mountedDataLinksItem.Hidden)
				mountedDataLinks.ID = types.StringPointerValue(mountedDataLinksItem.ID)
				mountedDataLinks.Message = types.StringPointerValue(mountedDataLinksItem.Message)
				mountedDataLinks.Name = types.StringPointerValue(mountedDataLinksItem.Name)
				if mountedDataLinksItem.Provider != nil {
					mountedDataLinks.Provider = types.StringValue(string(*mountedDataLinksItem.Provider))
				} else {
					mountedDataLinks.Provider = types.StringNull()
				}
				mountedDataLinks.PublicAccessible = types.BoolPointerValue(mountedDataLinksItem.PublicAccessible)
				mountedDataLinks.Region = types.StringPointerValue(mountedDataLinksItem.Region)
				mountedDataLinks.ResourceRef = types.StringPointerValue(mountedDataLinksItem.ResourceRef)
				if mountedDataLinksItem.Status != nil {
					mountedDataLinks.Status = types.StringValue(string(*mountedDataLinksItem.Status))
				} else {
					mountedDataLinks.Status = types.StringNull()
				}
				if mountedDataLinksItem.Type != nil {
					mountedDataLinks.Type = types.StringValue(string(*mountedDataLinksItem.Type))
				} else {
					mountedDataLinks.Type = types.StringNull()
				}
				if mountedDataLinksCount+1 > len(studios.MountedDataLinks) {
					studios.MountedDataLinks = append(studios.MountedDataLinks, mountedDataLinks)
				} else {
					studios.MountedDataLinks[mountedDataLinksCount].Credentials = mountedDataLinks.Credentials
					studios.MountedDataLinks[mountedDataLinksCount].Description = mountedDataLinks.Description
					studios.MountedDataLinks[mountedDataLinksCount].Hidden = mountedDataLinks.Hidden
					studios.MountedDataLinks[mountedDataLinksCount].ID = mountedDataLinks.ID
					studios.MountedDataLinks[mountedDataLinksCount].Message = mountedDataLinks.Message
					studios.MountedDataLinks[mountedDataLinksCount].Name = mountedDataLinks.Name
					studios.MountedDataLinks[mountedDataLinksCount].Provider = mountedDataLinks.Provider
					studios.MountedDataLinks[mountedDataLinksCount].PublicAccessible = mountedDataLinks.PublicAccessible
					studios.MountedDataLinks[mountedDataLinksCount].Region = mountedDataLinks.Region
					studios.MountedDataLinks[mountedDataLinksCount].ResourceRef = mountedDataLinks.ResourceRef
					studios.MountedDataLinks[mountedDataLinksCount].Status = mountedDataLinks.Status
					studios.MountedDataLinks[mountedDataLinksCount].Type = mountedDataLinks.Type
				}
			}
			studios.Name = types.StringPointerValue(studiosItem.Name)
			if studiosItem.ParentCheckpoint == nil {
				studios.ParentCheckpoint = nil
			} else {
				studios.ParentCheckpoint = &tfTypes.DataStudioDtoParentCheckpoint{}
				studios.ParentCheckpoint.CheckpointID = types.Int64PointerValue(studiosItem.ParentCheckpoint.CheckpointID)
				studios.ParentCheckpoint.CheckpointName = types.StringPointerValue(studiosItem.ParentCheckpoint.CheckpointName)
				studios.ParentCheckpoint.SessionID = types.StringPointerValue(studiosItem.ParentCheckpoint.SessionID)
				studios.ParentCheckpoint.StudioName = types.StringPointerValue(studiosItem.ParentCheckpoint.StudioName)
			}
			studios.Progress = []tfTypes.DataStudioProgressStep{}
			for progressCount, progressItem := range studiosItem.Progress {
				var progress tfTypes.DataStudioProgressStep
				progress.Message = types.StringPointerValue(progressItem.Message)
				if progressItem.Status != nil {
					progress.Status = types.StringValue(string(*progressItem.Status))
				} else {
					progress.Status = types.StringNull()
				}
				progress.Warnings = make([]types.String, 0, len(progressItem.Warnings))
				for _, v := range progressItem.Warnings {
					progress.Warnings = append(progress.Warnings, types.StringValue(v))
				}
				if progressCount+1 > len(studios.Progress) {
					studios.Progress = append(studios.Progress, progress)
				} else {
					studios.Progress[progressCount].Message = progress.Message
					studios.Progress[progressCount].Status = progress.Status
					studios.Progress[progressCount].Warnings = progress.Warnings
				}
			}
			studios.SessionID = types.StringPointerValue(studiosItem.SessionID)
			if studiosItem.StatusInfo == nil {
				studios.StatusInfo = nil
			} else {
				studios.StatusInfo = &tfTypes.DataStudioStatusInfo{}
				studios.StatusInfo.LastUpdate = types.StringPointerValue(typeconvert.TimePointerToStringPointer(studiosItem.StatusInfo.LastUpdate))
				studios.StatusInfo.Message = types.StringPointerValue(studiosItem.StatusInfo.Message)
				if studiosItem.StatusInfo.Status != nil {
					studios.StatusInfo.Status = types.StringValue(string(*studiosItem.StatusInfo.Status))
				} else {
					studios.StatusInfo.Status = types.StringNull()
				}
			}
			studios.StudioURL = types.StringPointerValue(studiosItem.StudioURL)
			if studiosItem.Template == nil {
				studios.Template = nil
			} else {
				studios.Template = &tfTypes.DataStudioTemplate{}
				studios.Template.Icon = types.StringPointerValue(studiosItem.Template.Icon)
				studios.Template.Repository = types.StringPointerValue(studiosItem.Template.Repository)
				if studiosItem.Template.Status != nil {
					studios.Template.Status = types.StringValue(string(*studiosItem.Template.Status))
				} else {
					studios.Template.Status = types.StringNull()
				}
				studios.Template.Tool = types.StringPointerValue(studiosItem.Template.Tool)
			}
			if studiosItem.User == nil {
				studios.User = nil
			} else {
				studios.User = &tfTypes.StudioUser{}
				studios.User.Avatar = types.StringValue(studiosItem.User.Avatar)
				studios.User.Email = types.StringValue(studiosItem.User.Email)
				studios.User.ID = types.Int64Value(studiosItem.User.ID)
				studios.User.UserName = types.StringValue(studiosItem.User.UserName)
			}
			studios.WaveBuildURL = types.StringPointerValue(studiosItem.WaveBuildURL)
			studios.WorkspaceID = types.Int64PointerValue(studiosItem.WorkspaceID)
			if studiosCount+1 > len(r.Studios) {
				r.Studios = append(r.Studios, studios)
			} else {
				r.Studios[studiosCount].ActiveConnections = studios.ActiveConnections
				r.Studios[studiosCount].BaseImage = studios.BaseImage
				r.Studios[studiosCount].ComputeEnv = studios.ComputeEnv
				r.Studios[studiosCount].Configuration = studios.Configuration
				r.Studios[studiosCount].CustomImage = studios.CustomImage
				r.Studios[studiosCount].DateCreated = studios.DateCreated
				r.Studios[studiosCount].Description = studios.Description
				r.Studios[studiosCount].EffectiveLifespanHours = studios.EffectiveLifespanHours
				r.Studios[studiosCount].IsPrivate = studios.IsPrivate
				r.Studios[studiosCount].Labels = studios.Labels
				r.Studios[studiosCount].LastStarted = studios.LastStarted
				r.Studios[studiosCount].LastUpdated = studios.LastUpdated
				r.Studios[studiosCount].MountedDataLinks = studios.MountedDataLinks
				r.Studios[studiosCount].Name = studios.Name
				r.Studios[studiosCount].ParentCheckpoint = studios.ParentCheckpoint
				r.Studios[studiosCount].Progress = studios.Progress
				r.Studios[studiosCount].SessionID = studios.SessionID
				r.Studios[studiosCount].StatusInfo = studios.StatusInfo
				r.Studios[studiosCount].StudioURL = studios.StudioURL
				r.Studios[studiosCount].Template = studios.Template
				r.Studios[studiosCount].User = studios.User
				r.Studios[studiosCount].WaveBuildURL = studios.WaveBuildURL
				r.Studios[studiosCount].WorkspaceID = studios.WorkspaceID
			}
		}
		r.TotalSize = types.Int64Value(resp.TotalSize)
	}

	return diags
}
