// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	tfTypes "github.com/speakeasy/terraform-provider-seqera/internal/provider/types"
	"github.com/speakeasy/terraform-provider-seqera/internal/sdk"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &LabelsDataSource{}
var _ datasource.DataSourceWithConfigure = &LabelsDataSource{}

func NewLabelsDataSource() datasource.DataSource {
	return &LabelsDataSource{}
}

// LabelsDataSource is the data source implementation.
type LabelsDataSource struct {
	client *sdk.Seqera
}

// LabelsDataSourceModel describes the data model.
type LabelsDataSourceModel struct {
	IsDefault   types.Bool           `queryParam:"style=form,explode=true,name=isDefault" tfsdk:"is_default"`
	Labels      []tfTypes.LabelDbDto `tfsdk:"labels"`
	Max         types.Int32          `queryParam:"style=form,explode=true,name=max" tfsdk:"max"`
	Offset      types.Int32          `queryParam:"style=form,explode=true,name=offset" tfsdk:"offset"`
	Search      types.String         `queryParam:"style=form,explode=true,name=search" tfsdk:"search"`
	TotalSize   types.Int64          `tfsdk:"total_size"`
	Type        types.String         `queryParam:"style=form,explode=true,name=type" tfsdk:"type"`
	WorkspaceID types.Int64          `queryParam:"style=form,explode=true,name=workspaceId" tfsdk:"workspace_id"`
}

// Metadata returns the data source type name.
func (r *LabelsDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_labels"
}

// Schema defines the schema for the data source.
func (r *LabelsDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "Labels DataSource",

		Attributes: map[string]schema.Attribute{
			"is_default": schema.BoolAttribute{
				Optional:    true,
				Description: `Label default flag`,
			},
			"labels": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"date_created": schema.StringAttribute{
							Computed: true,
						},
						"id": schema.Int64Attribute{
							Computed: true,
						},
						"is_default": schema.BoolAttribute{
							Computed: true,
						},
						"name": schema.StringAttribute{
							Computed: true,
						},
						"resource": schema.BoolAttribute{
							Computed: true,
						},
						"value": schema.StringAttribute{
							Computed: true,
						},
					},
				},
			},
			"max": schema.Int32Attribute{
				Optional:    true,
				Description: `Pagination max results`,
			},
			"offset": schema.Int32Attribute{
				Optional:    true,
				Description: `Pagination offset`,
			},
			"search": schema.StringAttribute{
				Optional:    true,
				Description: `Filter search parameter`,
			},
			"total_size": schema.Int64Attribute{
				Computed: true,
			},
			"type": schema.StringAttribute{
				Optional:    true,
				Description: `Label type`,
			},
			"workspace_id": schema.Int64Attribute{
				Optional:    true,
				Description: `Workspace numeric identifier`,
			},
		},
	}
}

func (r *LabelsDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.Seqera)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.Seqera, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *LabelsDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *LabelsDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsListLabelsRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Labels.ListLabels(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.ListLabelsResponse != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedListLabelsResponse(ctx, res.ListLabelsResponse)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
