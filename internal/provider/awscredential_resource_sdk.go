// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/seqeralabs/terraform-provider-seqera/internal/sdk/models/operations"
	"github.com/seqeralabs/terraform-provider-seqera/internal/sdk/models/shared"
)

func (r *AWSCredentialResourceModel) RefreshFromSharedAWSCredentialKeysOutput(ctx context.Context, resp *shared.AWSCredentialKeysOutput) diag.Diagnostics {
	var diags diag.Diagnostics

	r.AccessKey = types.StringValue(resp.AccessKey)

	return diags
}

func (r *AWSCredentialResourceModel) RefreshFromSharedAWSCredentialOutput(ctx context.Context, resp *shared.AWSCredentialOutput) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.ID = types.StringPointerValue(resp.ID)
		diags.Append(r.RefreshFromSharedAWSCredentialKeysOutput(ctx, &resp.Keys)...)

		if diags.HasError() {
			return diags
		}

		r.Name = types.StringValue(resp.Name)
		if resp.ProviderType != nil {
			r.ProviderType = types.StringValue(string(*resp.ProviderType))
		} else {
			r.ProviderType = types.StringNull()
		}
	}

	return diags
}

func (r *AWSCredentialResourceModel) RefreshFromSharedCreateAWSCredentialsResponse(ctx context.Context, resp *shared.CreateAWSCredentialsResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.CredentialsID = types.StringPointerValue(resp.CredentialsID)
	}

	return diags
}

func (r *AWSCredentialResourceModel) RefreshFromSharedDescribeAWSCredentialsResponse(ctx context.Context, resp *shared.DescribeAWSCredentialsResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		diags.Append(r.RefreshFromSharedAWSCredentialOutput(ctx, resp.Credentials)...)

		if diags.HasError() {
			return diags
		}

	}

	return diags
}

func (r *AWSCredentialResourceModel) ToOperationsCreateAWSCredentialsRequest(ctx context.Context) (*operations.CreateAWSCredentialsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	workspaceID := new(int64)
	if !r.WorkspaceID.IsUnknown() && !r.WorkspaceID.IsNull() {
		*workspaceID = r.WorkspaceID.ValueInt64()
	} else {
		workspaceID = nil
	}
	createAWSCredentialsRequest, createAWSCredentialsRequestDiags := r.ToSharedCreateAWSCredentialsRequest(ctx)
	diags.Append(createAWSCredentialsRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreateAWSCredentialsRequest{
		WorkspaceID:                 workspaceID,
		CreateAWSCredentialsRequest: *createAWSCredentialsRequest,
	}

	return &out, diags
}

func (r *AWSCredentialResourceModel) ToOperationsDeleteAWSCredentialsRequest(ctx context.Context) (*operations.DeleteAWSCredentialsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var credentialsID string
	credentialsID = r.CredentialsID.ValueString()

	workspaceID := new(int64)
	if !r.WorkspaceID.IsUnknown() && !r.WorkspaceID.IsNull() {
		*workspaceID = r.WorkspaceID.ValueInt64()
	} else {
		workspaceID = nil
	}
	out := operations.DeleteAWSCredentialsRequest{
		CredentialsID: credentialsID,
		WorkspaceID:   workspaceID,
	}

	return &out, diags
}

func (r *AWSCredentialResourceModel) ToOperationsDescribeAWSCredentialsRequest(ctx context.Context) (*operations.DescribeAWSCredentialsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var credentialsID string
	credentialsID = r.CredentialsID.ValueString()

	workspaceID := new(int64)
	if !r.WorkspaceID.IsUnknown() && !r.WorkspaceID.IsNull() {
		*workspaceID = r.WorkspaceID.ValueInt64()
	} else {
		workspaceID = nil
	}
	out := operations.DescribeAWSCredentialsRequest{
		CredentialsID: credentialsID,
		WorkspaceID:   workspaceID,
	}

	return &out, diags
}

func (r *AWSCredentialResourceModel) ToOperationsUpdateAWSCredentialsRequest(ctx context.Context) (*operations.UpdateAWSCredentialsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var credentialsID string
	credentialsID = r.CredentialsID.ValueString()

	workspaceID := new(int64)
	if !r.WorkspaceID.IsUnknown() && !r.WorkspaceID.IsNull() {
		*workspaceID = r.WorkspaceID.ValueInt64()
	} else {
		workspaceID = nil
	}
	updateAWSCredentialsRequest, updateAWSCredentialsRequestDiags := r.ToSharedUpdateAWSCredentialsRequest(ctx)
	diags.Append(updateAWSCredentialsRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateAWSCredentialsRequest{
		CredentialsID:               credentialsID,
		WorkspaceID:                 workspaceID,
		UpdateAWSCredentialsRequest: *updateAWSCredentialsRequest,
	}

	return &out, diags
}

func (r *AWSCredentialResourceModel) ToSharedAWSCredential(ctx context.Context) (*shared.AWSCredential, diag.Diagnostics) {
	var diags diag.Diagnostics

	id := new(string)
	if !r.ID.IsUnknown() && !r.ID.IsNull() {
		*id = r.ID.ValueString()
	} else {
		id = nil
	}
	var name string
	name = r.Name.ValueString()

	providerType := new(shared.AWSCredentialProviderType)
	if !r.ProviderType.IsUnknown() && !r.ProviderType.IsNull() {
		*providerType = shared.AWSCredentialProviderType(r.ProviderType.ValueString())
	} else {
		providerType = nil
	}
	keys, keysDiags := r.ToSharedAWSCredentialKeys(ctx)
	diags.Append(keysDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := shared.AWSCredential{
		ID:           id,
		Name:         name,
		ProviderType: providerType,
		Keys:         *keys,
	}

	return &out, diags
}

func (r *AWSCredentialResourceModel) ToSharedAWSCredentialKeys(ctx context.Context) (*shared.AWSCredentialKeys, diag.Diagnostics) {
	var diags diag.Diagnostics

	var accessKey string
	accessKey = r.AccessKey.ValueString()

	var secretKey string
	secretKey = r.SecretKey.ValueString()

	assumeRoleArn := new(string)
	if !r.AssumeRoleArn.IsUnknown() && !r.AssumeRoleArn.IsNull() {
		*assumeRoleArn = r.AssumeRoleArn.ValueString()
	} else {
		assumeRoleArn = nil
	}
	out := shared.AWSCredentialKeys{
		AccessKey:     accessKey,
		SecretKey:     secretKey,
		AssumeRoleArn: assumeRoleArn,
	}

	return &out, diags
}

func (r *AWSCredentialResourceModel) ToSharedCreateAWSCredentialsRequest(ctx context.Context) (*shared.CreateAWSCredentialsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	credentials, credentialsDiags := r.ToSharedAWSCredential(ctx)
	diags.Append(credentialsDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := shared.CreateAWSCredentialsRequest{
		Credentials: credentials,
	}

	return &out, diags
}

func (r *AWSCredentialResourceModel) ToSharedUpdateAWSCredentialsRequest(ctx context.Context) (*shared.UpdateAWSCredentialsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	credentials, credentialsDiags := r.ToSharedAWSCredential(ctx)
	diags.Append(credentialsDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := shared.UpdateAWSCredentialsRequest{
		Credentials: credentials,
	}

	return &out, diags
}
