// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/listplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	tfTypes "github.com/seqeralabs/terraform-provider-seqera/internal/provider/types"
	"github.com/seqeralabs/terraform-provider-seqera/internal/sdk"
	"github.com/seqeralabs/terraform-provider-seqera/internal/validators"
	speakeasy_int32validators "github.com/seqeralabs/terraform-provider-seqera/internal/validators/int32validators"
	custom_objectvalidators "github.com/seqeralabs/terraform-provider-seqera/internal/validators/objectvalidators"
	speakeasy_objectvalidators "github.com/seqeralabs/terraform-provider-seqera/internal/validators/objectvalidators"
	speakeasy_stringvalidators "github.com/seqeralabs/terraform-provider-seqera/internal/validators/stringvalidators"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &AWSComputeEnvResource{}
var _ resource.ResourceWithImportState = &AWSComputeEnvResource{}

func NewAWSComputeEnvResource() resource.Resource {
	return &AWSComputeEnvResource{}
}

// AWSComputeEnvResource defines the resource implementation.
type AWSComputeEnvResource struct {
	// Provider configured SDK client.
	client *sdk.Seqera
}

// AWSComputeEnvResourceModel describes the resource data model.
type AWSComputeEnvResourceModel struct {
	ComputeEnvID  types.String           `tfsdk:"compute_env_id"`
	Config        tfTypes.AwsBatchConfig `tfsdk:"config"`
	CredentialsID types.String           `tfsdk:"credentials_id"`
	DateCreated   types.String           `tfsdk:"date_created"`
	Deleted       types.Bool             `tfsdk:"deleted"`
	Description   types.String           `tfsdk:"description"`
	LabelIds      []types.Int64          `tfsdk:"label_ids"`
	LastUpdated   types.String           `tfsdk:"last_updated"`
	LastUsed      types.String           `tfsdk:"last_used"`
	Name          types.String           `tfsdk:"name"`
	OrgID         types.Int64            `tfsdk:"org_id"`
	Platform      types.String           `tfsdk:"platform"`
	Status        types.String           `tfsdk:"status"`
	WorkspaceID   types.Int64            `queryParam:"style=form,explode=true,name=workspaceId" tfsdk:"workspace_id"`
}

func (r *AWSComputeEnvResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_aws_compute_env"
}

func (r *AWSComputeEnvResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "Manage AWS compute environments in Seqera platform using this resource.\n\nAWS compute environments define the execution platform where a pipeline will run\non AWS infrastructure (AWS Batch, AWS Cloud, EKS).\n",
		Attributes: map[string]schema.Attribute{
			"compute_env_id": schema.StringAttribute{
				Computed:    true,
				Description: `Unique identifier for the compute environment`,
			},
			"config": schema.SingleNestedAttribute{
				Required: true,
				Attributes: map[string]schema.Attribute{
					"cli_path": schema.StringAttribute{
						Computed: true,
						Optional: true,
					},
					"compute_job_role": schema.StringAttribute{
						Computed: true,
						Optional: true,
					},
					"compute_queue": schema.StringAttribute{
						Computed: true,
						Optional: true,
					},
					"dragen_instance_type": schema.StringAttribute{
						Computed: true,
						Optional: true,
					},
					"dragen_queue": schema.StringAttribute{
						Computed: true,
						Optional: true,
					},
					"environment": schema.ListNestedAttribute{
						Computed: true,
						Optional: true,
						NestedObject: schema.NestedAttributeObject{
							Validators: []validator.Object{
								speakeasy_objectvalidators.NotNull(),
							},
							Attributes: map[string]schema.Attribute{
								"compute": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"head": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"name": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"value": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
							},
						},
					},
					"execution_role": schema.StringAttribute{
						Computed: true,
						Optional: true,
					},
					"forge": schema.SingleNestedAttribute{
						Computed: true,
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"alloc_strategy": schema.StringAttribute{
								Computed:    true,
								Optional:    true,
								Description: `must be one of ["BEST_FIT", "BEST_FIT_PROGRESSIVE", "SPOT_CAPACITY_OPTIMIZED", "SPOT_PRICE_CAPACITY_OPTIMIZED"]`,
								Validators: []validator.String{
									stringvalidator.OneOf(
										"BEST_FIT",
										"BEST_FIT_PROGRESSIVE",
										"SPOT_CAPACITY_OPTIMIZED",
										"SPOT_PRICE_CAPACITY_OPTIMIZED",
									),
								},
							},
							"allow_buckets": schema.ListAttribute{
								Computed:    true,
								Optional:    true,
								ElementType: types.StringType,
							},
							"arm64_enabled": schema.BoolAttribute{
								Computed: true,
								Optional: true,
							},
							"bid_percentage": schema.Int32Attribute{
								Computed: true,
								Optional: true,
							},
							"dispose_on_deletion": schema.BoolAttribute{
								Computed: true,
								Optional: true,
							},
							"dragen_ami_id": schema.StringAttribute{
								Computed: true,
								Optional: true,
							},
							"dragen_enabled": schema.BoolAttribute{
								Computed: true,
								Optional: true,
							},
							"dragen_instance_type": schema.StringAttribute{
								Computed: true,
								Optional: true,
							},
							"ebs_auto_scale": schema.BoolAttribute{
								Computed: true,
								Optional: true,
							},
							"ebs_block_size": schema.Int32Attribute{
								Computed: true,
								Optional: true,
							},
							"ebs_boot_size": schema.Int32Attribute{
								Computed: true,
								Optional: true,
							},
							"ec2_key_pair": schema.StringAttribute{
								Computed: true,
								Optional: true,
							},
							"ecs_config": schema.StringAttribute{
								Computed: true,
								Optional: true,
							},
							"efs_create": schema.BoolAttribute{
								Computed: true,
								Optional: true,
							},
							"efs_id": schema.StringAttribute{
								Computed: true,
								Optional: true,
							},
							"efs_mount": schema.StringAttribute{
								Computed: true,
								Optional: true,
							},
							"fargate_head_enabled": schema.BoolAttribute{
								Computed: true,
								Optional: true,
							},
							"fsx_mount": schema.StringAttribute{
								Computed: true,
								Optional: true,
							},
							"fsx_name": schema.StringAttribute{
								Computed: true,
								Optional: true,
							},
							"fsx_size": schema.Int32Attribute{
								Computed: true,
								Optional: true,
							},
							"fusion_enabled": schema.BoolAttribute{
								Computed: true,
								Optional: true,
							},
							"gpu_enabled": schema.BoolAttribute{
								Computed: true,
								Optional: true,
							},
							"image_id": schema.StringAttribute{
								Computed: true,
								Optional: true,
							},
							"instance_types": schema.ListAttribute{
								Computed:    true,
								Optional:    true,
								ElementType: types.StringType,
							},
							"max_cpus": schema.Int32Attribute{
								Computed:    true,
								Optional:    true,
								Description: `Not Null`,
								Validators: []validator.Int32{
									speakeasy_int32validators.NotNull(),
								},
							},
							"min_cpus": schema.Int32Attribute{
								Computed:    true,
								Optional:    true,
								Description: `Not Null`,
								Validators: []validator.Int32{
									speakeasy_int32validators.NotNull(),
								},
							},
							"security_groups": schema.ListAttribute{
								Computed:    true,
								Optional:    true,
								ElementType: types.StringType,
							},
							"subnets": schema.ListAttribute{
								Computed:    true,
								Optional:    true,
								ElementType: types.StringType,
							},
							"type": schema.StringAttribute{
								Computed:    true,
								Optional:    true,
								Description: `Not Null; must be one of ["SPOT", "EC2"]`,
								Validators: []validator.String{
									speakeasy_stringvalidators.NotNull(),
									stringvalidator.OneOf(
										"SPOT",
										"EC2",
									),
								},
							},
							"vpc_id": schema.StringAttribute{
								Computed: true,
								Optional: true,
							},
						},
					},
					"fusion_snapshots": schema.BoolAttribute{
						Computed: true,
						Optional: true,
					},
					"fusion2_enabled": schema.BoolAttribute{
						Computed: true,
						Optional: true,
					},
					"head_job_cpus": schema.Int32Attribute{
						Computed: true,
						Optional: true,
					},
					"head_job_memory_mb": schema.Int32Attribute{
						Computed: true,
						Optional: true,
					},
					"head_job_role": schema.StringAttribute{
						Computed: true,
						Optional: true,
					},
					"head_queue": schema.StringAttribute{
						Computed: true,
						Optional: true,
					},
					"log_group": schema.StringAttribute{
						Computed: true,
						Optional: true,
					},
					"lustre_id": schema.StringAttribute{
						Computed:           true,
						Optional:           true,
						DeprecationMessage: `This will be removed in a future release, please migrate away from it as soon as possible`,
					},
					"nextflow_config": schema.StringAttribute{
						Computed: true,
						Optional: true,
					},
					"nvnme_storage_enabled": schema.BoolAttribute{
						Computed: true,
						Optional: true,
					},
					"post_run_script": schema.StringAttribute{
						Computed: true,
						Optional: true,
					},
					"pre_run_script": schema.StringAttribute{
						Computed: true,
						Optional: true,
					},
					"region": schema.StringAttribute{
						Required:    true,
						Description: `AWS region where the compute environment will be deployed. This field is required and must be provided`,
					},
					"storage_type": schema.StringAttribute{
						Computed:           true,
						Optional:           true,
						DeprecationMessage: `This will be removed in a future release, please migrate away from it as soon as possible`,
					},
					"volumes": schema.ListAttribute{
						Computed:    true,
						Optional:    true,
						ElementType: types.StringType,
					},
					"wave_enabled": schema.BoolAttribute{
						Computed: true,
						Optional: true,
					},
					"work_dir": schema.StringAttribute{
						Computed: true,
						Optional: true,
					},
				},
				Validators: []validator.Object{
					custom_objectvalidators.AwsForgeValidator(),
				},
			},
			"credentials_id": schema.StringAttribute{
				Required:    true,
				Description: `AWS credentials identifier`,
			},
			"date_created": schema.StringAttribute{
				Computed:    true,
				Description: `Timestamp when the compute environment was created`,
				Validators: []validator.String{
					validators.IsRFC3339(),
				},
			},
			"deleted": schema.BoolAttribute{
				Computed:    true,
				Description: `Flag indicating if the compute environment has been deleted`,
			},
			"description": schema.StringAttribute{
				Optional:    true,
				Description: `Optional description of the compute environment`,
			},
			"label_ids": schema.ListAttribute{
				Optional: true,
				PlanModifiers: []planmodifier.List{
					listplanmodifier.RequiresReplaceIfConfigured(),
				},
				ElementType: types.Int64Type,
				Description: `Requires replacement if changed.`,
			},
			"last_updated": schema.StringAttribute{
				Computed:    true,
				Description: `Timestamp when the compute environment was last updated`,
				Validators: []validator.String{
					validators.IsRFC3339(),
				},
			},
			"last_used": schema.StringAttribute{
				Computed:    true,
				Description: `Timestamp when the compute environment was last used`,
				Validators: []validator.String{
					validators.IsRFC3339(),
				},
			},
			"name": schema.StringAttribute{
				Required:    true,
				Description: `Display name for the compute environment`,
				Validators: []validator.String{
					stringvalidator.UTF8LengthAtMost(100),
				},
			},
			"org_id": schema.Int64Attribute{
				Computed: true,
			},
			"platform": schema.StringAttribute{
				Required:    true,
				Description: `AWS platform type. must be "aws-batch"`,
				Validators: []validator.String{
					stringvalidator.OneOf(
						"aws-batch",
					),
				},
			},
			"status": schema.StringAttribute{
				Computed:    true,
				Description: `Compute environment status`,
			},
			"workspace_id": schema.Int64Attribute{
				Required:    true,
				Description: `Workspace numeric identifier`,
			},
		},
	}
}

func (r *AWSComputeEnvResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.Seqera)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *sdk.Seqera, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *AWSComputeEnvResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *AWSComputeEnvResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(plan.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsCreateAWSComputeEnvRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.ComputeEnvs.CreateAWSComputeEnv(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.CreateAWSComputeEnvResponse != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedCreateAWSComputeEnvResponse(ctx, res.CreateAWSComputeEnvResponse)...)

	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(refreshPlan(ctx, plan, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}
	request1, request1Diags := data.ToOperationsDescribeAWSComputeEnvRequest(ctx)
	resp.Diagnostics.Append(request1Diags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res1, err := r.client.ComputeEnvs.DescribeAWSComputeEnv(ctx, *request1)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res1 != nil && res1.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res1.RawResponse))
		}
		return
	}
	if res1 == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res1))
		return
	}
	if res1.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res1.StatusCode), debugResponse(res1.RawResponse))
		return
	}
	if !(res1.DescribeAWSComputeEnvResponse != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res1.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedDescribeAWSComputeEnvResponse(ctx, res1.DescribeAWSComputeEnvResponse)...)

	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(refreshPlan(ctx, plan, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *AWSComputeEnvResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *AWSComputeEnvResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsDescribeAWSComputeEnvRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.ComputeEnvs.DescribeAWSComputeEnv(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode == 404 {
		resp.State.RemoveResource(ctx)
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.DescribeAWSComputeEnvResponse != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedDescribeAWSComputeEnvResponse(ctx, res.DescribeAWSComputeEnvResponse)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *AWSComputeEnvResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *AWSComputeEnvResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	merge(ctx, req, resp, &data)
	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsUpdateAWSComputeEnvRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.ComputeEnvs.UpdateAWSComputeEnv(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 204 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}

	resp.Diagnostics.Append(refreshPlan(ctx, plan, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *AWSComputeEnvResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *AWSComputeEnvResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsDeleteAWSComputeEnvRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.ComputeEnvs.DeleteAWSComputeEnv(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 204 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}

}

func (r *AWSComputeEnvResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	dec := json.NewDecoder(bytes.NewReader([]byte(req.ID)))
	dec.DisallowUnknownFields()
	var data struct {
		ComputeEnvID string `json:"compute_env_id"`
		WorkspaceID  int64  `json:"workspace_id"`
	}

	if err := dec.Decode(&data); err != nil {
		resp.Diagnostics.AddError("Invalid ID", `The import ID is not valid. It is expected to be a JSON object string with the format: '{"compute_env_id": "...", "workspace_id": 0}': `+err.Error())
		return
	}

	if len(data.ComputeEnvID) == 0 {
		resp.Diagnostics.AddError("Missing required field", `The field compute_env_id is required but was not found in the json encoded ID. It's expected to be a value alike '""`)
		return
	}
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("compute_env_id"), data.ComputeEnvID)...)
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("workspace_id"), data.WorkspaceID)...)
}
