// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	tfTypes "github.com/seqeralabs/terraform-provider-seqera/internal/provider/types"
	"github.com/seqeralabs/terraform-provider-seqera/internal/sdk"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &AWSBatchComputeEnvDataSource{}
var _ datasource.DataSourceWithConfigure = &AWSBatchComputeEnvDataSource{}

func NewAWSBatchComputeEnvDataSource() datasource.DataSource {
	return &AWSBatchComputeEnvDataSource{}
}

// AWSBatchComputeEnvDataSource is the data source implementation.
type AWSBatchComputeEnvDataSource struct {
	// Provider configured SDK client.
	client *sdk.Seqera
}

// AWSBatchComputeEnvDataSourceModel describes the data model.
type AWSBatchComputeEnvDataSourceModel struct {
	Attributes    []types.String  `queryParam:"style=form,explode=true,name=attributes" tfsdk:"attributes"`
	ComputeEnvID  types.String    `tfsdk:"compute_env_id"`
	Config        *tfTypes.Config `tfsdk:"config"`
	CredentialsID types.String    `tfsdk:"credentials_id"`
	Description   types.String    `tfsdk:"description"`
	Message       types.String    `tfsdk:"message"`
	Name          types.String    `tfsdk:"name"`
	Region        types.String    `tfsdk:"region"`
	Status        types.String    `tfsdk:"status"`
	WorkDirectory types.String    `tfsdk:"work_directory"`
	WorkspaceID   types.Int64     `queryParam:"style=form,explode=true,name=workspaceId" tfsdk:"workspace_id"`
}

// Metadata returns the data source type name.
func (r *AWSBatchComputeEnvDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_aws_batch_compute_env"
}

// Schema defines the schema for the data source.
func (r *AWSBatchComputeEnvDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "Manage AWS Batch compute environments in Seqera Platform.\n\nAWS Batch compute environments provide scalable compute capacity for running\nNextflow workflows on AWS using the AWS Batch service.\n",

		Attributes: map[string]schema.Attribute{
			"attributes": schema.ListAttribute{
				Optional:    true,
				ElementType: types.StringType,
				Description: `Additional attribute values to include in the response (` + "`" + `labels` + "`" + `). Returns an empty value (` + "`" + `labels: null` + "`" + `) if omitted.`,
			},
			"compute_env_id": schema.StringAttribute{
				Computed:    true,
				Description: `Compute environment string identifier`,
			},
			"config": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"cli_path": schema.StringAttribute{
						Computed:    true,
						Description: `Path to AWS CLI on compute instances`,
					},
					"compute_job_role": schema.StringAttribute{
						Computed: true,
						MarkdownDescription: `IAM role ARN for compute jobs. Jobs assume this role during execution.` + "\n" +
							`Format: arn:aws:iam::account-id:role/role-name`,
					},
					"compute_queue": schema.StringAttribute{
						Computed:    true,
						Description: `Name of the AWS Batch compute queue`,
					},
					"enable_fusion": schema.BoolAttribute{
						Computed: true,
						MarkdownDescription: `Enable Fusion v2 for virtual file system. Fusion provides virtual file system` + "\n" +
							`for efficient S3 access and improves performance by lazy loading files.`,
					},
					"enable_wave": schema.BoolAttribute{
						Computed: true,
						MarkdownDescription: `Enable Wave containers service. Wave builds and manages container images on-demand.` + "\n" +
							`When enable_wave is true, enable_fusion must be explicitly set.`,
					},
					"execution_role": schema.StringAttribute{
						Computed: true,
						MarkdownDescription: `IAM role ARN for Batch execution (pulling container images, writing logs).` + "\n" +
							`Format: arn:aws:iam::account-id:role/role-name`,
					},
					"forge": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"allocation_strategy": schema.StringAttribute{
								Computed: true,
								MarkdownDescription: `Strategy for allocating compute resources.` + "\n" +
									`SPOT_CAPACITY_OPTIMIZED only valid when forge_type is SPOT.`,
							},
							"bid_percentage": schema.Int32Attribute{
								Computed: true,
								MarkdownDescription: `Maximum percentage of On-Demand price to pay for Spot instances (0-100).` + "\n" +
									`Only applicable when forge_type is SPOT.`,
							},
							"dispose_on_deletion": schema.BoolAttribute{
								Computed:    true,
								Description: `Dispose of AWS Batch resources when compute environment is deleted`,
							},
							"ebs_auto_scale": schema.BoolAttribute{
								Computed:    true,
								Description: `Enable automatic EBS volume expansion`,
							},
							"ebs_block_size": schema.Int32Attribute{
								Computed:    true,
								Description: `Size of EBS root volume in GB (minimum 8 GB, maximum 16 TB)`,
							},
							"ec2_key_pair": schema.StringAttribute{
								Computed:    true,
								Description: `EC2 key pair name for SSH access to compute instances`,
							},
							"efs_create": schema.BoolAttribute{
								Computed:    true,
								Description: `Automatically create an EFS file system`,
							},
							"efs_id": schema.StringAttribute{
								Computed: true,
								MarkdownDescription: `EFS file system ID to mount.` + "\n" +
									`Format: fs- followed by hexadecimal characters`,
							},
							"efs_mount": schema.StringAttribute{
								Computed:    true,
								Description: `Path where EFS will be mounted in the container`,
							},
							"fargate_head_enabled": schema.BoolAttribute{
								Computed: true,
								MarkdownDescription: `Use Fargate for head job instead of EC2.` + "\n" +
									`Reduces costs by running head job on serverless compute.`,
							},
							"forge_type": schema.StringAttribute{
								Computed: true,
								MarkdownDescription: `Type of compute instances to provision:` + "\n" +
									`- SPOT: Use EC2 Spot instances (cost-effective, can be interrupted)` + "\n" +
									`- EC2: Use On-Demand EC2 instances (reliable, higher cost)` + "\n" +
									`- FARGATE: Use AWS Fargate serverless compute`,
							},
							"fsx_mount": schema.StringAttribute{
								Computed:    true,
								Description: `Path where FSx will be mounted in the container`,
							},
							"fsx_name": schema.StringAttribute{
								Computed:    true,
								Description: `FSx for Lustre file system name`,
							},
							"fsx_size": schema.Int32Attribute{
								Computed:    true,
								Description: `Size of FSx file system in GB`,
							},
							"gpu_enabled": schema.BoolAttribute{
								Computed: true,
								MarkdownDescription: `Enable GPU support for compute instances.` + "\n" +
									`When enabled, GPU-capable instance types will be selected.`,
							},
							"instance_types": schema.ListAttribute{
								Computed:    true,
								ElementType: types.StringType,
								MarkdownDescription: `List of EC2 instance types to use.` + "\n" +
									`Examples: ["m5.xlarge", "m5.2xlarge"], ["c5.2xlarge"], ["p3.2xlarge"]` + "\n" +
									`Default: ["optimal"] - AWS Batch selects appropriate instances`,
							},
							"max_cpus": schema.Int32Attribute{
								Computed: true,
								MarkdownDescription: `Maximum number of CPUs available in the compute environment.` + "\n" +
									`Subject to AWS service quotas.`,
							},
							"min_cpus": schema.Int32Attribute{
								Computed: true,
								MarkdownDescription: `Minimum number of CPUs to maintain in the compute environment.` + "\n" +
									`Setting to 0 allows environment to scale to zero when idle.`,
							},
							"security_groups": schema.ListAttribute{
								Computed:    true,
								ElementType: types.StringType,
								Description: `List of security group IDs to attach to compute instances`,
							},
							"subnets": schema.ListAttribute{
								Computed:    true,
								ElementType: types.StringType,
								MarkdownDescription: `List of subnet IDs for compute instances.` + "\n" +
									`Subnets must be in the specified VPC. Use multiple subnets for high availability.`,
							},
							"vpc_id": schema.StringAttribute{
								Computed: true,
								MarkdownDescription: `VPC ID where compute environment will be deployed.` + "\n" +
									`Format: vpc- followed by hexadecimal characters`,
							},
						},
						Description: `AWS Forge configuration for compute resources`,
					},
					"head_job_cpus": schema.Int32Attribute{
						Computed:    true,
						Description: `Number of CPUs allocated for the head job`,
					},
					"head_job_memory_mb": schema.Int32Attribute{
						Computed:    true,
						Description: `Memory allocation for the head job in MB`,
					},
					"head_job_role": schema.StringAttribute{
						Computed:    true,
						Description: `IAM role ARN for the head job`,
					},
					"head_queue": schema.StringAttribute{
						Computed:    true,
						Description: `Name of the head job queue`,
					},
					"post_run_script": schema.StringAttribute{
						Computed: true,
						MarkdownDescription: `Bash script to run after workflow execution completes.` + "\n" +
							`Use for cleanup, archiving results, etc.`,
					},
					"pre_run_script": schema.StringAttribute{
						Computed: true,
						MarkdownDescription: `Bash script to run before workflow execution begins.` + "\n" +
							`Use for environment setup, loading modules, etc.`,
					},
				},
			},
			"credentials_id": schema.StringAttribute{
				Computed:    true,
				Description: `AWS credentials ID to use for accessing AWS services`,
			},
			"description": schema.StringAttribute{
				Computed:    true,
				Description: `Optional description of the compute environment`,
			},
			"message": schema.StringAttribute{
				Computed:    true,
				Description: `Status message or error details`,
			},
			"name": schema.StringAttribute{
				Computed:    true,
				Description: `Display name for the compute environment (max 100 characters)`,
			},
			"region": schema.StringAttribute{
				Computed: true,
				MarkdownDescription: `AWS region where the Batch compute environment will be created.` + "\n" +
					`Examples: us-east-1, eu-west-1, ap-southeast-2`,
			},
			"status": schema.StringAttribute{
				Computed:    true,
				Description: `Current status of the compute environment`,
			},
			"work_directory": schema.StringAttribute{
				Computed: true,
				MarkdownDescription: `S3 bucket path for Nextflow work directory where intermediate files will be stored.` + "\n" +
					`Format: s3://bucket-name/path` + "\n" +
					`Example: s3://my-nextflow-bucket/work`,
			},
			"workspace_id": schema.Int64Attribute{
				Required:    true,
				Description: `Workspace numeric identifier`,
			},
		},
	}
}

func (r *AWSBatchComputeEnvDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.Seqera)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.Seqera, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *AWSBatchComputeEnvDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *AWSBatchComputeEnvDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsDescribeAWSBatchComputeEnvRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.ComputeEnvs.DescribeAWSBatchComputeEnv(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.DescribeAWSBatchComputeEnvResponse != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedDescribeAWSBatchComputeEnvResponse(ctx, res.DescribeAWSBatchComputeEnvResponse)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
